--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]

local ____modules = {}
local ____moduleCache = {}
local ____originalRequire = require
local function require(file, ...)
    if ____moduleCache[file] then
        return ____moduleCache[file].value
    end
    if ____modules[file] then
        local module = ____modules[file]
        ____moduleCache[file] = { value = (select("#", ...) > 0) and module(...) or module(file) }
        return ____moduleCache[file].value
    else
        if ____originalRequire then
            return ____originalRequire(file)
        else
            error("module '" .. file .. "' not found")
        end
    end
end
____modules = {
    ["lualib_bundle"] = function(...)
        local function __TS__ArrayIsArray(value)
            return type(value) == "table" and (value[1] ~= nil or next(value) == nil)
        end

        local function __TS__ArrayConcat(self, ...)
            local items = { ... }
            local result = {}
            local len = 0
            for i = 1, #self do
                len = len + 1
                result[len] = self[i]
            end
            for i = 1, #items do
                local item = items[i]
                if __TS__ArrayIsArray(item) then
                    for j = 1, #item do
                        len = len + 1
                        result[len] = item[j]
                    end
                else
                    len = len + 1
                    result[len] = item
                end
            end
            return result
        end

        local __TS__Symbol, Symbol
        do
            local symbolMetatable = {
                __tostring = function(self)
                    return ("Symbol(" .. (self.description or "")) .. ")"
                end
            }
            function __TS__Symbol(description)
                return setmetatable({ description = description }, symbolMetatable)
            end

            Symbol = {
                iterator = __TS__Symbol("Symbol.iterator"),
                hasInstance = __TS__Symbol("Symbol.hasInstance"),
                species = __TS__Symbol("Symbol.species"),
                toStringTag = __TS__Symbol("Symbol.toStringTag")
            }
        end

        local function __TS__ArrayEntries(array)
            local key = 0
            return {
                [Symbol.iterator] = function(self)
                    return self
                end,
                next = function(self)
                    local result = { done = array[key + 1] == nil, value = { key, array[key + 1] } }
                    key = key + 1
                    return result
                end
            }
        end

        local function __TS__ArrayEvery(self, callbackfn, thisArg)
            for i = 1, #self do
                if not callbackfn(thisArg, self[i], i - 1, self) then
                    return false
                end
            end
            return true
        end

        local function __TS__ArrayFilter(self, callbackfn, thisArg)
            local result = {}
            local len = 0
            for i = 1, #self do
                if callbackfn(thisArg, self[i], i - 1, self) then
                    len = len + 1
                    result[len] = self[i]
                end
            end
            return result
        end

        local function __TS__ArrayForEach(self, callbackFn, thisArg)
            for i = 1, #self do
                callbackFn(thisArg, self[i], i - 1, self)
            end
        end

        local function __TS__ArrayFind(self, predicate, thisArg)
            for i = 1, #self do
                local elem = self[i]
                if predicate(thisArg, elem, i - 1, self) then
                    return elem
                end
            end
            return nil
        end

        local function __TS__ArrayFindIndex(self, callbackFn, thisArg)
            for i = 1, #self do
                if callbackFn(thisArg, self[i], i - 1, self) then
                    return i - 1
                end
            end
            return -1
        end

        local __TS__Iterator
        do
            local function iteratorGeneratorStep(self)
                local co = self.____coroutine
                local status, value = coroutine.resume(co)
                if not status then
                    error(value, 0)
                end
                if coroutine.status(co) == "dead" then
                    return
                end
                return true, value
            end
            local function iteratorIteratorStep(self)
                local result = self:next()
                if result.done then
                    return
                end
                return true, result.value
            end
            local function iteratorStringStep(self, index)
                index = index + 1
                if index > #self then
                    return
                end
                return index, string.sub(self, index, index)
            end
            function __TS__Iterator(iterable)
                if type(iterable) == "string" then
                    return iteratorStringStep, iterable, 0
                elseif iterable.____coroutine ~= nil then
                    return iteratorGeneratorStep, iterable
                elseif iterable[Symbol.iterator] then
                    local iterator = iterable[Symbol.iterator](iterable)
                    return iteratorIteratorStep, iterator
                else
                    return ipairs(iterable)
                end
            end
        end

        local __TS__ArrayFrom
        do
            local function arrayLikeStep(self, index)
                index = index + 1
                if index > self.length then
                    return
                end
                return index, self[index]
            end
            local function arrayLikeIterator(arr)
                if type(arr.length) == "number" then
                    return arrayLikeStep, arr, 0
                end
                return __TS__Iterator(arr)
            end
            function __TS__ArrayFrom(arrayLike, mapFn, thisArg)
                local result = {}
                if mapFn == nil then
                    for ____, v in arrayLikeIterator(arrayLike) do
                        result[#result + 1] = v
                    end
                else
                    for i, v in arrayLikeIterator(arrayLike) do
                        result[#result + 1] = mapFn(thisArg, v, i - 1)
                    end
                end
                return result
            end
        end

        local function __TS__ArrayIncludes(self, searchElement, fromIndex)
            if fromIndex == nil then
                fromIndex = 0
            end
            local len = #self
            local k = fromIndex
            if fromIndex < 0 then
                k = len + fromIndex
            end
            if k < 0 then
                k = 0
            end
            for i = k + 1, len do
                if self[i] == searchElement then
                    return true
                end
            end
            return false
        end

        local function __TS__ArrayIndexOf(self, searchElement, fromIndex)
            if fromIndex == nil then
                fromIndex = 0
            end
            local len = #self
            if len == 0 then
                return -1
            end
            if fromIndex >= len then
                return -1
            end
            if fromIndex < 0 then
                fromIndex = len + fromIndex
                if fromIndex < 0 then
                    fromIndex = 0
                end
            end
            for i = fromIndex + 1, len do
                if self[i] == searchElement then
                    return i - 1
                end
            end
            return -1
        end

        local function __TS__ArrayJoin(self, separator)
            if separator == nil then
                separator = ","
            end
            local parts = {}
            for i = 1, #self do
                parts[i] = tostring(self[i])
            end
            return table.concat(parts, separator)
        end

        local function __TS__ArrayMap(self, callbackfn, thisArg)
            local result = {}
            for i = 1, #self do
                result[i] = callbackfn(thisArg, self[i], i - 1, self)
            end
            return result
        end

        local function __TS__ArrayPush(self, ...)
            local items = { ... }
            local len = #self
            for i = 1, #items do
                len = len + 1
                self[len] = items[i]
            end
            return len
        end

        local function __TS__ArrayPushArray(self, items)
            local len = #self
            for i = 1, #items do
                len = len + 1
                self[len] = items[i]
            end
            return len
        end

        local function __TS__CountVarargs(...)
            return select("#", ...)
        end

        local function __TS__ArrayReduce(self, callbackFn, ...)
            local len = #self
            local k = 0
            local accumulator = nil
            if __TS__CountVarargs(...) ~= 0 then
                accumulator = ...
            elseif len > 0 then
                accumulator = self[1]
                k = 1
            else
                error("Reduce of empty array with no initial value", 0)
            end
            for i = k + 1, len do
                accumulator = callbackFn(
                    nil,
                    accumulator,
                    self[i],
                    i - 1,
                    self
                )
            end
            return accumulator
        end

        local function __TS__ArrayReduceRight(self, callbackFn, ...)
            local len = #self
            local k = len - 1
            local accumulator = nil
            if __TS__CountVarargs(...) ~= 0 then
                accumulator = ...
            elseif len > 0 then
                accumulator = self[k + 1]
                k = k - 1
            else
                error("Reduce of empty array with no initial value", 0)
            end
            for i = k + 1, 1, -1 do
                accumulator = callbackFn(
                    nil,
                    accumulator,
                    self[i],
                    i - 1,
                    self
                )
            end
            return accumulator
        end

        local function __TS__ArrayReverse(self)
            local i = 1
            local j = #self
            while i < j do
                local temp = self[j]
                self[j] = self[i]
                self[i] = temp
                i = i + 1
                j = j - 1
            end
            return self
        end

        local function __TS__ArrayUnshift(self, ...)
            local items = { ... }
            local numItemsToInsert = #items
            if numItemsToInsert == 0 then
                return #self
            end
            for i = #self, 1, -1 do
                self[i + numItemsToInsert] = self[i]
            end
            for i = 1, numItemsToInsert do
                self[i] = items[i]
            end
            return #self
        end

        local function __TS__ArraySort(self, compareFn)
            if compareFn ~= nil then
                table.sort(
                    self,
                    function(a, b) return compareFn(nil, a, b) < 0 end
                )
            else
                table.sort(self)
            end
            return self
        end

        local function __TS__ArraySlice(self, first, last)
            local len = #self
            local ____first_0 = first
            if ____first_0 == nil then
                ____first_0 = 0
            end
            first = ____first_0
            if first < 0 then
                first = len + first
                if first < 0 then
                    first = 0
                end
            else
                if first > len then
                    first = len
                end
            end
            local ____last_1 = last
            if ____last_1 == nil then
                ____last_1 = len
            end
            last = ____last_1
            if last < 0 then
                last = len + last
                if last < 0 then
                    last = 0
                end
            else
                if last > len then
                    last = len
                end
            end
            local out = {}
            first = first + 1
            last = last + 1
            local n = 1
            while first < last do
                out[n] = self[first]
                first = first + 1
                n = n + 1
            end
            return out
        end

        local function __TS__ArraySome(self, callbackfn, thisArg)
            for i = 1, #self do
                if callbackfn(thisArg, self[i], i - 1, self) then
                    return true
                end
            end
            return false
        end

        local function __TS__ArraySplice(self, ...)
            local args = { ... }
            local len = #self
            local actualArgumentCount = __TS__CountVarargs(...)
            local start = args[1]
            local deleteCount = args[2]
            if start < 0 then
                start = len + start
                if start < 0 then
                    start = 0
                end
            elseif start > len then
                start = len
            end
            local itemCount = actualArgumentCount - 2
            if itemCount < 0 then
                itemCount = 0
            end
            local actualDeleteCount
            if actualArgumentCount == 0 then
                actualDeleteCount = 0
            elseif actualArgumentCount == 1 then
                actualDeleteCount = len - start
            else
                local ____deleteCount_0 = deleteCount
                if ____deleteCount_0 == nil then
                    ____deleteCount_0 = 0
                end
                actualDeleteCount = ____deleteCount_0
                if actualDeleteCount < 0 then
                    actualDeleteCount = 0
                end
                if actualDeleteCount > len - start then
                    actualDeleteCount = len - start
                end
            end
            local out = {}
            for k = 1, actualDeleteCount do
                local from = start + k
                if self[from] ~= nil then
                    out[k] = self[from]
                end
            end
            if itemCount < actualDeleteCount then
                for k = start + 1, len - actualDeleteCount do
                    local from = k + actualDeleteCount
                    local to = k + itemCount
                    if self[from] then
                        self[to] = self[from]
                    else
                        self[to] = nil
                    end
                end
                for k = len - actualDeleteCount + itemCount + 1, len do
                    self[k] = nil
                end
            elseif itemCount > actualDeleteCount then
                for k = len - actualDeleteCount, start + 1, -1 do
                    local from = k + actualDeleteCount
                    local to = k + itemCount
                    if self[from] then
                        self[to] = self[from]
                    else
                        self[to] = nil
                    end
                end
            end
            local j = start + 1
            for i = 3, actualArgumentCount do
                self[j] = args[i]
                j = j + 1
            end
            for k = #self, len - actualDeleteCount + itemCount + 1, -1 do
                self[k] = nil
            end
            return out
        end

        local function __TS__ArrayToObject(self)
            local object = {}
            for i = 1, #self do
                object[i - 1] = self[i]
            end
            return object
        end

        local function __TS__ArrayFlat(self, depth)
            if depth == nil then
                depth = 1
            end
            local result = {}
            local len = 0
            for i = 1, #self do
                local value = self[i]
                if depth > 0 and __TS__ArrayIsArray(value) then
                    local toAdd
                    if depth == 1 then
                        toAdd = value
                    else
                        toAdd = __TS__ArrayFlat(value, depth - 1)
                    end
                    for j = 1, #toAdd do
                        local val = toAdd[j]
                        len = len + 1
                        result[len] = val
                    end
                else
                    len = len + 1
                    result[len] = value
                end
            end
            return result
        end

        local function __TS__ArrayFlatMap(self, callback, thisArg)
            local result = {}
            local len = 0
            for i = 1, #self do
                local value = callback(thisArg, self[i], i - 1, self)
                if __TS__ArrayIsArray(value) then
                    for j = 1, #value do
                        len = len + 1
                        result[len] = value[j]
                    end
                else
                    len = len + 1
                    result[len] = value
                end
            end
            return result
        end

        local function __TS__ArraySetLength(self, length)
            if length < 0 or length ~= length or length == math.huge or math.floor(length) ~= length then
                error(
                    "invalid array length: " .. tostring(length),
                    0
                )
            end
            for i = length + 1, #self do
                self[i] = nil
            end
            return length
        end

        local function __TS__InstanceOf(obj, classTbl)
            if type(classTbl) ~= "table" then
                error("Right-hand side of 'instanceof' is not an object", 0)
            end
            if classTbl[Symbol.hasInstance] ~= nil then
                return not not classTbl[Symbol.hasInstance](classTbl, obj)
            end
            if type(obj) == "table" then
                local luaClass = obj.constructor
                while luaClass ~= nil do
                    if luaClass == classTbl then
                        return true
                    end
                    luaClass = luaClass.____super
                end
            end
            return false
        end

        local function __TS__New(target, ...)
            local instance = setmetatable({}, target.prototype)
            instance:____constructor(...)
            return instance
        end

        local function __TS__Class(self)
            local c = { prototype = {} }
            c.prototype.__index = c.prototype
            c.prototype.constructor = c
            return c
        end

        local __TS__Unpack = table.unpack or unpack

        local function __TS__FunctionBind(fn, ...)
            local boundArgs = { ... }
            return function(____, ...)
                local args = { ... }
                __TS__ArrayUnshift(
                    args,
                    __TS__Unpack(boundArgs)
                )
                return fn(__TS__Unpack(args))
            end
        end

        local __TS__Promise
        do
            local function promiseDeferred(self)
                local resolve
                local reject
                local promise = __TS__New(
                    __TS__Promise,
                    function(____, res, rej)
                        resolve = res
                        reject = rej
                    end
                )
                return { promise = promise, resolve = resolve, reject = reject }
            end
            local function isPromiseLike(self, thing)
                return __TS__InstanceOf(thing, __TS__Promise)
            end
            __TS__Promise = __TS__Class()
            __TS__Promise.name = "__TS__Promise"
            function __TS__Promise.prototype.____constructor(self, executor)
                self.state = 0
                self.fulfilledCallbacks = {}
                self.rejectedCallbacks = {}
                self.finallyCallbacks = {}
                do
                    local function ____catch(e)
                        self:reject(e)
                    end
                    local ____try, ____hasReturned = pcall(function()
                        executor(
                            nil,
                            __TS__FunctionBind(self.resolve, self),
                            __TS__FunctionBind(self.reject, self)
                        )
                    end)
                    if not ____try then
                        ____catch(____hasReturned)
                    end
                end
            end

            function __TS__Promise.resolve(data)
                local promise = __TS__New(
                    __TS__Promise,
                    function()
                    end
                )
                promise.state = 1
                promise.value = data
                return promise
            end

            function __TS__Promise.reject(reason)
                local promise = __TS__New(
                    __TS__Promise,
                    function()
                    end
                )
                promise.state = 2
                promise.rejectionReason = reason
                return promise
            end

            __TS__Promise.prototype["then"] = function(self, onFulfilled, onRejected)
                local ____promiseDeferred_result_0 = promiseDeferred(nil)
                local promise = ____promiseDeferred_result_0.promise
                local resolve = ____promiseDeferred_result_0.resolve
                local reject = ____promiseDeferred_result_0.reject
                local isFulfilled = self.state == 1
                local isRejected = self.state == 2
                if onFulfilled then
                    local internalCallback = self:createPromiseResolvingCallback(onFulfilled, resolve, reject)
                    local ____self_fulfilledCallbacks_1 = self.fulfilledCallbacks
                    ____self_fulfilledCallbacks_1[#____self_fulfilledCallbacks_1 + 1] = internalCallback
                    if isFulfilled then
                        internalCallback(nil, self.value)
                    end
                else
                    local ____self_fulfilledCallbacks_2 = self.fulfilledCallbacks
                    ____self_fulfilledCallbacks_2[#____self_fulfilledCallbacks_2 + 1] = function(____, v) return resolve(
                        nil, v) end
                end
                if onRejected then
                    local internalCallback = self:createPromiseResolvingCallback(onRejected, resolve, reject)
                    local ____self_rejectedCallbacks_3 = self.rejectedCallbacks
                    ____self_rejectedCallbacks_3[#____self_rejectedCallbacks_3 + 1] = internalCallback
                    if isRejected then
                        internalCallback(nil, self.rejectionReason)
                    end
                else
                    local ____self_rejectedCallbacks_4 = self.rejectedCallbacks
                    ____self_rejectedCallbacks_4[#____self_rejectedCallbacks_4 + 1] = function(____, err) return reject(
                        nil, err) end
                end
                if isFulfilled then
                    resolve(nil, self.value)
                end
                if isRejected then
                    reject(nil, self.rejectionReason)
                end
                return promise
            end
            function __TS__Promise.prototype.catch(self, onRejected)
                return self["then"](self, nil, onRejected)
            end

            function __TS__Promise.prototype.finally(self, onFinally)
                if onFinally then
                    local ____self_finallyCallbacks_5 = self.finallyCallbacks
                    ____self_finallyCallbacks_5[#____self_finallyCallbacks_5 + 1] = onFinally
                    if self.state ~= 0 then
                        onFinally(nil)
                    end
                end
                return self
            end

            function __TS__Promise.prototype.resolve(self, data)
                if __TS__InstanceOf(data, __TS__Promise) then
                    data["then"](
                        data,
                        function(____, v) return self:resolve(v) end,
                        function(____, err) return self:reject(err) end
                    )
                    return
                end
                if self.state == 0 then
                    self.state = 1
                    self.value = data
                    for ____, callback in ipairs(self.fulfilledCallbacks) do
                        callback(nil, data)
                    end
                    for ____, callback in ipairs(self.finallyCallbacks) do
                        callback(nil)
                    end
                end
            end

            function __TS__Promise.prototype.reject(self, reason)
                if self.state == 0 then
                    self.state = 2
                    self.rejectionReason = reason
                    for ____, callback in ipairs(self.rejectedCallbacks) do
                        callback(nil, reason)
                    end
                    for ____, callback in ipairs(self.finallyCallbacks) do
                        callback(nil)
                    end
                end
            end

            function __TS__Promise.prototype.createPromiseResolvingCallback(self, f, resolve, reject)
                return function(____, value)
                    do
                        local function ____catch(e)
                            reject(nil, e)
                        end
                        local ____try, ____hasReturned = pcall(function()
                            self:handleCallbackData(
                                f(nil, value),
                                resolve,
                                reject
                            )
                        end)
                        if not ____try then
                            ____catch(____hasReturned)
                        end
                    end
                end
            end

            function __TS__Promise.prototype.handleCallbackData(self, data, resolve, reject)
                if isPromiseLike(nil, data) then
                    local nextpromise = data
                    if nextpromise.state == 1 then
                        resolve(nil, nextpromise.value)
                    elseif nextpromise.state == 2 then
                        reject(nil, nextpromise.rejectionReason)
                    else
                        data["then"](data, resolve, reject)
                    end
                else
                    resolve(nil, data)
                end
            end
        end

        local function __TS__AsyncAwaiter(generator)
            return __TS__New(
                __TS__Promise,
                function(____, resolve, reject)
                    local adopt, fulfilled, step, resolved, asyncCoroutine
                    function adopt(self, value)
                        local ____temp_0
                        if __TS__InstanceOf(value, __TS__Promise) then
                            ____temp_0 = value
                        else
                            ____temp_0 = __TS__Promise.resolve(value)
                        end
                        return ____temp_0
                    end

                    function fulfilled(self, value)
                        local success, resultOrError = coroutine.resume(asyncCoroutine, value)
                        if success then
                            step(nil, resultOrError)
                        else
                            reject(nil, resultOrError)
                        end
                    end

                    function step(self, result)
                        if resolved then
                            return
                        end
                        if coroutine.status(asyncCoroutine) == "dead" then
                            resolve(nil, result)
                        else
                            local ____self_1 = adopt(nil, result)
                            ____self_1["then"](____self_1, fulfilled, reject)
                        end
                    end

                    resolved = false
                    asyncCoroutine = coroutine.create(generator)
                    local success, resultOrError = coroutine.resume(
                        asyncCoroutine,
                        function(____, v)
                            resolved = true
                            local ____self_2 = adopt(nil, v)
                            ____self_2["then"](____self_2, resolve, reject)
                        end
                    )
                    if success then
                        step(nil, resultOrError)
                    else
                        reject(nil, resultOrError)
                    end
                end
            )
        end
        local function __TS__Await(thing)
            return coroutine.yield(thing)
        end

        local function __TS__ClassExtends(target, base)
            target.____super = base
            local staticMetatable = setmetatable({ __index = base }, base)
            setmetatable(target, staticMetatable)
            local baseMetatable = getmetatable(base)
            if baseMetatable then
                if type(baseMetatable.__index) == "function" then
                    staticMetatable.__index = baseMetatable.__index
                end
                if type(baseMetatable.__newindex) == "function" then
                    staticMetatable.__newindex = baseMetatable.__newindex
                end
            end
            setmetatable(target.prototype, base.prototype)
            if type(base.prototype.__index) == "function" then
                target.prototype.__index = base.prototype.__index
            end
            if type(base.prototype.__newindex) == "function" then
                target.prototype.__newindex = base.prototype.__newindex
            end
            if type(base.prototype.__tostring) == "function" then
                target.prototype.__tostring = base.prototype.__tostring
            end
        end

        local function __TS__CloneDescriptor(____bindingPattern0)
            local value
            local writable
            local set
            local get
            local configurable
            local enumerable
            enumerable = ____bindingPattern0.enumerable
            configurable = ____bindingPattern0.configurable
            get = ____bindingPattern0.get
            set = ____bindingPattern0.set
            writable = ____bindingPattern0.writable
            value = ____bindingPattern0.value
            local descriptor = { enumerable = enumerable == true, configurable = configurable == true }
            local hasGetterOrSetter = get ~= nil or set ~= nil
            local hasValueOrWritableAttribute = writable ~= nil or value ~= nil
            if hasGetterOrSetter and hasValueOrWritableAttribute then
                error("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute.", 0)
            end
            if get or set then
                descriptor.get = get
                descriptor.set = set
            else
                descriptor.value = value
                descriptor.writable = writable == true
            end
            return descriptor
        end

        local function __TS__ObjectAssign(target, ...)
            local sources = { ... }
            for i = 1, #sources do
                local source = sources[i]
                for key in pairs(source) do
                    target[key] = source[key]
                end
            end
            return target
        end

        local function __TS__ObjectGetOwnPropertyDescriptor(object, key)
            local metatable = getmetatable(object)
            if not metatable then
                return
            end
            if not rawget(metatable, "_descriptors") then
                return
            end
            return rawget(metatable, "_descriptors")[key]
        end

        local __TS__SetDescriptor
        do
            local function descriptorIndex(self, key)
                local value = rawget(self, key)
                if value ~= nil then
                    return value
                end
                local metatable = getmetatable(self)
                while metatable do
                    local rawResult = rawget(metatable, key)
                    if rawResult ~= nil then
                        return rawResult
                    end
                    local descriptors = rawget(metatable, "_descriptors")
                    if descriptors then
                        local descriptor = descriptors[key]
                        if descriptor then
                            if descriptor.get then
                                return descriptor.get(self)
                            end
                            return descriptor.value
                        end
                    end
                    metatable = getmetatable(metatable)
                end
            end
            local function descriptorNewIndex(self, key, value)
                local metatable = getmetatable(self)
                while metatable do
                    local descriptors = rawget(metatable, "_descriptors")
                    if descriptors then
                        local descriptor = descriptors[key]
                        if descriptor then
                            if descriptor.set then
                                descriptor.set(self, value)
                            else
                                if descriptor.writable == false then
                                    error(
                                        ((("Cannot assign to read only property '" .. key) .. "' of object '") .. tostring(self)) ..
                                        "'",
                                        0
                                    )
                                end
                                descriptor.value = value
                            end
                            return
                        end
                    end
                    metatable = getmetatable(metatable)
                end
                rawset(self, key, value)
            end
            function __TS__SetDescriptor(target, key, desc, isPrototype)
                if isPrototype == nil then
                    isPrototype = false
                end
                local ____isPrototype_0
                if isPrototype then
                    ____isPrototype_0 = target
                else
                    ____isPrototype_0 = getmetatable(target)
                end
                local metatable = ____isPrototype_0
                if not metatable then
                    metatable = {}
                    setmetatable(target, metatable)
                end
                local value = rawget(target, key)
                if value ~= nil then
                    rawset(target, key, nil)
                end
                if not rawget(metatable, "_descriptors") then
                    metatable._descriptors = {}
                end
                local descriptor = __TS__CloneDescriptor(desc)
                metatable._descriptors[key] = descriptor
                metatable.__index = descriptorIndex
                metatable.__newindex = descriptorNewIndex
            end
        end

        local function __TS__Decorate(decorators, target, key, desc)
            local result = target
            do
                local i = #decorators
                while i >= 0 do
                    local decorator = decorators[i + 1]
                    if decorator then
                        local oldResult = result
                        if key == nil then
                            result = decorator(nil, result)
                        elseif desc == true then
                            local value = rawget(target, key)
                            local descriptor = __TS__ObjectGetOwnPropertyDescriptor(target, key) or
                            ({ configurable = true, writable = true, value = value })
                            local desc = decorator(nil, target, key, descriptor) or descriptor
                            local isSimpleValue = desc.configurable == true and desc.writable == true and not desc.get and
                            not desc.set
                            if isSimpleValue then
                                rawset(target, key, desc.value)
                            else
                                __TS__SetDescriptor(
                                    target,
                                    key,
                                    __TS__ObjectAssign({}, descriptor, desc)
                                )
                            end
                        elseif desc == false then
                            result = decorator(nil, target, key, desc)
                        else
                            result = decorator(nil, target, key)
                        end
                        result = result or oldResult
                    end
                    i = i - 1
                end
            end
            return result
        end

        local function __TS__DecorateParam(paramIndex, decorator)
            return function(____, target, key) return decorator(nil, target, key, paramIndex) end
        end

        local function __TS__StringIncludes(self, searchString, position)
            if not position then
                position = 1
            else
                position = position + 1
            end
            local index = string.find(self, searchString, position, true)
            return index ~= nil
        end

        local Error, RangeError, ReferenceError, SyntaxError, TypeError, URIError
        do
            local function getErrorStack(self, constructor)
                local level = 1
                while true do
                    local info = debug.getinfo(level, "f")
                    level = level + 1
                    if not info then
                        level = 1
                        break
                    elseif info.func == constructor then
                        break
                    end
                end
                if __TS__StringIncludes(_VERSION, "Lua 5.0") then
                    return debug.traceback(("[Level " .. tostring(level)) .. "]")
                else
                    return debug.traceback(nil, level)
                end
            end
            local function wrapErrorToString(self, getDescription)
                return function(self)
                    local description = getDescription(self)
                    local caller = debug.getinfo(3, "f")
                    local isClassicLua = __TS__StringIncludes(_VERSION, "Lua 5.0") or _VERSION == "Lua 5.1"
                    if isClassicLua or caller and caller.func ~= error then
                        return description
                    else
                        return (tostring(description) .. "\n") .. self.stack
                    end
                end
            end
            local function initErrorClass(self, Type, name)
                Type.name = name
                return setmetatable(
                    Type,
                    { __call = function(____, _self, message) return __TS__New(Type, message) end }
                )
            end
            local ____initErrorClass_2 = initErrorClass
            local ____class_0 = __TS__Class()
            ____class_0.name = ""
            function ____class_0.prototype.____constructor(self, message)
                if message == nil then
                    message = ""
                end
                self.message = message
                self.name = "Error"
                self.stack = getErrorStack(nil, self.constructor.new)
                local metatable = getmetatable(self)
                if not metatable.__errorToStringPatched then
                    metatable.__errorToStringPatched = true
                    metatable.__tostring = wrapErrorToString(nil, metatable.__tostring)
                end
            end

            function ____class_0.prototype.__tostring(self)
                local ____temp_1
                if self.message ~= "" then
                    ____temp_1 = (self.name .. ": ") .. self.message
                else
                    ____temp_1 = self.name
                end
                return ____temp_1
            end

            Error = ____initErrorClass_2(nil, ____class_0, "Error")
            local function createErrorClass(self, name)
                local ____initErrorClass_4 = initErrorClass
                local ____class_3 = __TS__Class()
                ____class_3.name = ____class_3.name
                __TS__ClassExtends(____class_3, Error)
                function ____class_3.prototype.____constructor(self, ...)
                    ____class_3.____super.prototype.____constructor(self, ...)
                    self.name = name
                end

                return ____initErrorClass_4(nil, ____class_3, name)
            end
            RangeError = createErrorClass(nil, "RangeError")
            ReferenceError = createErrorClass(nil, "ReferenceError")
            SyntaxError = createErrorClass(nil, "SyntaxError")
            TypeError = createErrorClass(nil, "TypeError")
            URIError = createErrorClass(nil, "URIError")
        end

        local function __TS__ObjectGetOwnPropertyDescriptors(object)
            local metatable = getmetatable(object)
            if not metatable then
                return {}
            end
            return rawget(metatable, "_descriptors") or ({})
        end

        local function __TS__Delete(target, key)
            local descriptors = __TS__ObjectGetOwnPropertyDescriptors(target)
            local descriptor = descriptors[key]
            if descriptor then
                if not descriptor.configurable then
                    error(
                        __TS__New(
                            TypeError,
                            ((("Cannot delete property " .. tostring(key)) .. " of ") .. tostring(target)) .. "."
                        ),
                        0
                    )
                end
                descriptors[key] = nil
                return true
            end
            target[key] = nil
            return true
        end

        local function __TS__StringAccess(self, index)
            if index >= 0 and index < #self then
                return string.sub(self, index + 1, index + 1)
            end
        end

        local function __TS__DelegatedYield(iterable)
            if type(iterable) == "string" then
                for index = 0, #iterable - 1 do
                    coroutine.yield(__TS__StringAccess(iterable, index))
                end
            elseif iterable.____coroutine ~= nil then
                local co = iterable.____coroutine
                while true do
                    local status, value = coroutine.resume(co)
                    if not status then
                        error(value, 0)
                    end
                    if coroutine.status(co) == "dead" then
                        return value
                    else
                        coroutine.yield(value)
                    end
                end
            elseif iterable[Symbol.iterator] then
                local iterator = iterable[Symbol.iterator](iterable)
                while true do
                    local result = iterator:next()
                    if result.done then
                        return result.value
                    else
                        coroutine.yield(result.value)
                    end
                end
            else
                for ____, value in ipairs(iterable) do
                    coroutine.yield(value)
                end
            end
        end

        local __TS__Generator
        do
            local function generatorIterator(self)
                return self
            end
            local function generatorNext(self, ...)
                local co = self.____coroutine
                if coroutine.status(co) == "dead" then
                    return { done = true }
                end
                local status, value = coroutine.resume(co, ...)
                if not status then
                    error(value, 0)
                end
                return {
                    value = value,
                    done = coroutine.status(co) == "dead"
                }
            end
            function __TS__Generator(fn)
                return function(...)
                    local args = { ... }
                    local argsLength = __TS__CountVarargs(...)
                    return {
                        ____coroutine = coroutine.create(function() return fn(__TS__Unpack(args, 1, argsLength)) end),
                        [Symbol.iterator] = generatorIterator,
                        next = generatorNext
                    }
                end
            end
        end

        local function __TS__InstanceOfObject(value)
            local valueType = type(value)
            return valueType == "table" or valueType == "function"
        end

        local function __TS__LuaIteratorSpread(self, state, firstKey)
            local results = {}
            local key, value = self(state, firstKey)
            while key do
                results[#results + 1] = { key, value }
                key, value = self(state, key)
            end
            return __TS__Unpack(results)
        end

        local Map
        do
            Map = __TS__Class()
            Map.name = "Map"
            function Map.prototype.____constructor(self, entries)
                self[Symbol.toStringTag] = "Map"
                self.items = {}
                self.size = 0
                self.nextKey = {}
                self.previousKey = {}
                if entries == nil then
                    return
                end
                local iterable = entries
                if iterable[Symbol.iterator] then
                    local iterator = iterable[Symbol.iterator](iterable)
                    while true do
                        local result = iterator:next()
                        if result.done then
                            break
                        end
                        local value = result.value
                        self:set(value[1], value[2])
                    end
                else
                    local array = entries
                    for ____, kvp in ipairs(array) do
                        self:set(kvp[1], kvp[2])
                    end
                end
            end

            function Map.prototype.clear(self)
                self.items = {}
                self.nextKey = {}
                self.previousKey = {}
                self.firstKey = nil
                self.lastKey = nil
                self.size = 0
            end

            function Map.prototype.delete(self, key)
                local contains = self:has(key)
                if contains then
                    self.size = self.size - 1
                    local next = self.nextKey[key]
                    local previous = self.previousKey[key]
                    if next and previous then
                        self.nextKey[previous] = next
                        self.previousKey[next] = previous
                    elseif next then
                        self.firstKey = next
                        self.previousKey[next] = nil
                    elseif previous then
                        self.lastKey = previous
                        self.nextKey[previous] = nil
                    else
                        self.firstKey = nil
                        self.lastKey = nil
                    end
                    self.nextKey[key] = nil
                    self.previousKey[key] = nil
                end
                self.items[key] = nil
                return contains
            end

            function Map.prototype.forEach(self, callback)
                for ____, key in __TS__Iterator(self:keys()) do
                    callback(nil, self.items[key], key, self)
                end
            end

            function Map.prototype.get(self, key)
                return self.items[key]
            end

            function Map.prototype.has(self, key)
                return self.nextKey[key] ~= nil or self.lastKey == key
            end

            function Map.prototype.set(self, key, value)
                local isNewValue = not self:has(key)
                if isNewValue then
                    self.size = self.size + 1
                end
                self.items[key] = value
                if self.firstKey == nil then
                    self.firstKey = key
                    self.lastKey = key
                elseif isNewValue then
                    self.nextKey[self.lastKey] = key
                    self.previousKey[key] = self.lastKey
                    self.lastKey = key
                end
                return self
            end

            Map.prototype[Symbol.iterator] = function(self)
                return self:entries()
            end
            function Map.prototype.entries(self)
                local items = self.items
                local nextKey = self.nextKey
                local key = self.firstKey
                return {
                    [Symbol.iterator] = function(self)
                        return self
                    end,
                    next = function(self)
                        local result = { done = not key, value = { key, items[key] } }
                        key = nextKey[key]
                        return result
                    end
                }
            end

            function Map.prototype.keys(self)
                local nextKey = self.nextKey
                local key = self.firstKey
                return {
                    [Symbol.iterator] = function(self)
                        return self
                    end,
                    next = function(self)
                        local result = { done = not key, value = key }
                        key = nextKey[key]
                        return result
                    end
                }
            end

            function Map.prototype.values(self)
                local items = self.items
                local nextKey = self.nextKey
                local key = self.firstKey
                return {
                    [Symbol.iterator] = function(self)
                        return self
                    end,
                    next = function(self)
                        local result = { done = not key, value = items[key] }
                        key = nextKey[key]
                        return result
                    end
                }
            end

            Map[Symbol.species] = Map
        end

        local __TS__Match = string.match

        local __TS__MathAtan2 = math.atan2 or math.atan

        local __TS__MathModf = math.modf

        local function __TS__MathSign(val)
            if val > 0 then
                return 1
            elseif val < 0 then
                return -1
            end
            return 0
        end

        local function __TS__Modulo50(a, b)
            return a - math.floor(a / b) * b
        end

        local function __TS__Number(value)
            local valueType = type(value)
            if valueType == "number" then
                return value
            elseif valueType == "string" then
                local numberValue = tonumber(value)
                if numberValue then
                    return numberValue
                end
                if value == "Infinity" then
                    return math.huge
                end
                if value == "-Infinity" then
                    return -math.huge
                end
                local stringWithoutSpaces = string.gsub(value, "%s", "")
                if stringWithoutSpaces == "" then
                    return 0
                end
                return 0 / 0
            elseif valueType == "boolean" then
                return value and 1 or 0
            else
                return 0 / 0
            end
        end

        local function __TS__NumberIsFinite(value)
            return type(value) == "number" and value == value and value ~= math.huge and value ~= -math.huge
        end

        local function __TS__NumberIsNaN(value)
            return value ~= value
        end

        local __TS__NumberToString
        do
            local radixChars = "0123456789abcdefghijklmnopqrstuvwxyz"
            function __TS__NumberToString(self, radix)
                if radix == nil or radix == 10 or self == math.huge or self == -math.huge or self ~= self then
                    return tostring(self)
                end
                radix = math.floor(radix)
                if radix < 2 or radix > 36 then
                    error("toString() radix argument must be between 2 and 36", 0)
                end
                local integer, fraction = __TS__MathModf(math.abs(self))
                local result = ""
                if radix == 8 then
                    result = string.format("%o", integer)
                elseif radix == 16 then
                    result = string.format("%x", integer)
                else
                    repeat
                        do
                            result = __TS__StringAccess(radixChars, integer % radix) .. result
                            integer = math.floor(integer / radix)
                        end
                    until not (integer ~= 0)
                end
                if fraction ~= 0 then
                    result = result .. "."
                    local delta = 1e-16
                    repeat
                        do
                            fraction = fraction * radix
                            delta = delta * radix
                            local digit = math.floor(fraction)
                            result = result .. __TS__StringAccess(radixChars, digit)
                            fraction = fraction - digit
                        end
                    until not (fraction >= delta)
                end
                if self < 0 then
                    result = "-" .. result
                end
                return result
            end
        end

        local function __TS__ObjectDefineProperty(target, key, desc)
            local ____temp_0
            if type(key) == "number" then
                ____temp_0 = key + 1
            else
                ____temp_0 = key
            end
            local luaKey = ____temp_0
            local value = rawget(target, luaKey)
            local hasGetterOrSetter = desc.get ~= nil or desc.set ~= nil
            local descriptor
            if hasGetterOrSetter then
                if value ~= nil then
                    error(
                        "Cannot redefine property: " .. tostring(key),
                        0
                    )
                end
                descriptor = desc
            else
                local valueExists = value ~= nil
                local ____desc_set_5 = desc.set
                local ____desc_get_6 = desc.get
                local ____temp_1
                if desc.configurable ~= nil then
                    ____temp_1 = desc.configurable
                else
                    ____temp_1 = valueExists
                end
                local ____temp_2
                if desc.enumerable ~= nil then
                    ____temp_2 = desc.enumerable
                else
                    ____temp_2 = valueExists
                end
                local ____temp_3
                if desc.writable ~= nil then
                    ____temp_3 = desc.writable
                else
                    ____temp_3 = valueExists
                end
                local ____temp_4
                if desc.value ~= nil then
                    ____temp_4 = desc.value
                else
                    ____temp_4 = value
                end
                descriptor = {
                    set = ____desc_set_5,
                    get = ____desc_get_6,
                    configurable = ____temp_1,
                    enumerable = ____temp_2,
                    writable = ____temp_3,
                    value = ____temp_4
                }
            end
            __TS__SetDescriptor(target, luaKey, descriptor)
            return target
        end

        local function __TS__ObjectEntries(obj)
            local result = {}
            local len = 0
            for key in pairs(obj) do
                len = len + 1
                result[len] = { key, obj[key] }
            end
            return result
        end

        local function __TS__ObjectFromEntries(entries)
            local obj = {}
            local iterable = entries
            if iterable[Symbol.iterator] then
                local iterator = iterable[Symbol.iterator](iterable)
                while true do
                    local result = iterator:next()
                    if result.done then
                        break
                    end
                    local value = result.value
                    obj[value[1]] = value[2]
                end
            else
                for ____, entry in ipairs(entries) do
                    obj[entry[1]] = entry[2]
                end
            end
            return obj
        end

        local function __TS__ObjectKeys(obj)
            local result = {}
            local len = 0
            for key in pairs(obj) do
                len = len + 1
                result[len] = key
            end
            return result
        end

        local function __TS__ObjectRest(target, usedProperties)
            local result = {}
            for property in pairs(target) do
                if not usedProperties[property] then
                    result[property] = target[property]
                end
            end
            return result
        end

        local function __TS__ObjectValues(obj)
            local result = {}
            local len = 0
            for key in pairs(obj) do
                len = len + 1
                result[len] = obj[key]
            end
            return result
        end

        local function __TS__ParseFloat(numberString)
            local infinityMatch = __TS__Match(numberString, "^%s*(-?Infinity)")
            if infinityMatch then
                local ____temp_0
                if __TS__StringAccess(infinityMatch, 0) == "-" then
                    ____temp_0 = -math.huge
                else
                    ____temp_0 = math.huge
                end
                return ____temp_0
            end
            local number = tonumber(__TS__Match(numberString, "^%s*(-?%d+%.?%d*)"))
            local ____number_1 = number
            if ____number_1 == nil then
                ____number_1 = 0 / 0
            end
            return ____number_1
        end

        local function __TS__StringSubstr(self, from, length)
            if from ~= from then
                from = 0
            end
            if length ~= nil then
                if length ~= length or length <= 0 then
                    return ""
                end
                length = length + from
            end
            if from >= 0 then
                from = from + 1
            end
            return string.sub(self, from, length)
        end

        local function __TS__StringSubstring(self, start, ____end)
            if ____end ~= ____end then
                ____end = 0
            end
            if ____end ~= nil and start > ____end then
                start, ____end = ____end, start
            end
            if start >= 0 then
                start = start + 1
            else
                start = 1
            end
            if ____end ~= nil and ____end < 0 then
                ____end = 0
            end
            return string.sub(self, start, ____end)
        end

        local __TS__ParseInt
        do
            local parseIntBasePattern = "0123456789aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTvVwWxXyYzZ"
            function __TS__ParseInt(numberString, base)
                if base == nil then
                    base = 10
                    local hexMatch = __TS__Match(numberString, "^%s*-?0[xX]")
                    if hexMatch then
                        base = 16
                        local ____TS__Match_result__0_0
                        if __TS__Match(hexMatch, "-") then
                            ____TS__Match_result__0_0 = "-" .. __TS__StringSubstr(numberString, #hexMatch)
                        else
                            ____TS__Match_result__0_0 = __TS__StringSubstr(numberString, #hexMatch)
                        end
                        numberString = ____TS__Match_result__0_0
                    end
                end
                if base < 2 or base > 36 then
                    return 0 / 0
                end
                local ____temp_1
                if base <= 10 then
                    ____temp_1 = __TS__StringSubstring(parseIntBasePattern, 0, base)
                else
                    ____temp_1 = __TS__StringSubstr(parseIntBasePattern, 0, 10 + 2 * (base - 10))
                end
                local allowedDigits = ____temp_1
                local pattern = ("^%s*(-?[" .. allowedDigits) .. "]*)"
                local number = tonumber(
                    __TS__Match(numberString, pattern),
                    base
                )
                if number == nil then
                    return 0 / 0
                end
                if number >= 0 then
                    return math.floor(number)
                else
                    return math.ceil(number)
                end
            end
        end

        local function __TS__PromiseAll(iterable)
            local results = {}
            local toResolve = {}
            local numToResolve = 0
            local i = 0
            for ____, item in __TS__Iterator(iterable) do
                if __TS__InstanceOf(item, __TS__Promise) then
                    if item.state == 1 then
                        results[i + 1] = item.value
                    elseif item.state == 2 then
                        return __TS__Promise.reject(item.rejectionReason)
                    else
                        numToResolve = numToResolve + 1
                        toResolve[i] = item
                    end
                else
                    results[i + 1] = item
                end
                i = i + 1
            end
            if numToResolve == 0 then
                return __TS__Promise.resolve(results)
            end
            return __TS__New(
                __TS__Promise,
                function(____, resolve, reject)
                    for index, promise in pairs(toResolve) do
                        promise["then"](
                            promise,
                            function(____, data)
                                results[index + 1] = data
                                numToResolve = numToResolve - 1
                                if numToResolve == 0 then
                                    resolve(nil, results)
                                end
                            end,
                            function(____, reason)
                                reject(nil, reason)
                            end
                        )
                    end
                end
            )
        end

        local function __TS__PromiseAllSettled(iterable)
            local results = {}
            local toResolve = {}
            local numToResolve = 0
            local i = 0
            for ____, item in __TS__Iterator(iterable) do
                if __TS__InstanceOf(item, __TS__Promise) then
                    if item.state == 1 then
                        results[i + 1] = { status = "fulfilled", value = item.value }
                    elseif item.state == 2 then
                        results[i + 1] = { status = "rejected", reason = item.rejectionReason }
                    else
                        numToResolve = numToResolve + 1
                        toResolve[i] = item
                    end
                else
                    results[i + 1] = { status = "fulfilled", value = item }
                end
                i = i + 1
            end
            if numToResolve == 0 then
                return __TS__Promise.resolve(results)
            end
            return __TS__New(
                __TS__Promise,
                function(____, resolve)
                    for index, promise in pairs(toResolve) do
                        promise["then"](
                            promise,
                            function(____, data)
                                results[index + 1] = { status = "fulfilled", value = data }
                                numToResolve = numToResolve - 1
                                if numToResolve == 0 then
                                    resolve(nil, results)
                                end
                            end,
                            function(____, reason)
                                results[index + 1] = { status = "rejected", reason = reason }
                                numToResolve = numToResolve - 1
                                if numToResolve == 0 then
                                    resolve(nil, results)
                                end
                            end
                        )
                    end
                end
            )
        end

        local function __TS__PromiseAny(iterable)
            local rejections = {}
            local pending = {}
            for ____, item in __TS__Iterator(iterable) do
                if __TS__InstanceOf(item, __TS__Promise) then
                    if item.state == 1 then
                        return __TS__Promise.resolve(item.value)
                    elseif item.state == 2 then
                        rejections[#rejections + 1] = item.rejectionReason
                    else
                        pending[#pending + 1] = item
                    end
                else
                    return __TS__Promise.resolve(item)
                end
            end
            if #pending == 0 then
                return __TS__Promise.reject("No promises to resolve with .any()")
            end
            local numResolved = 0
            return __TS__New(
                __TS__Promise,
                function(____, resolve, reject)
                    for ____, promise in ipairs(pending) do
                        promise["then"](
                            promise,
                            function(____, data)
                                resolve(nil, data)
                            end,
                            function(____, reason)
                                rejections[#rejections + 1] = reason
                                numResolved = numResolved + 1
                                if numResolved == #pending then
                                    reject(nil,
                                        { name = "AggregateError", message = "All Promises rejected", errors = rejections })
                                end
                            end
                        )
                    end
                end
            )
        end

        local function __TS__PromiseRace(iterable)
            local pending = {}
            for ____, item in __TS__Iterator(iterable) do
                if __TS__InstanceOf(item, __TS__Promise) then
                    if item.state == 1 then
                        return __TS__Promise.resolve(item.value)
                    elseif item.state == 2 then
                        return __TS__Promise.reject(item.rejectionReason)
                    else
                        pending[#pending + 1] = item
                    end
                else
                    return __TS__Promise.resolve(item)
                end
            end
            return __TS__New(
                __TS__Promise,
                function(____, resolve, reject)
                    for ____, promise in ipairs(pending) do
                        promise["then"](
                            promise,
                            function(____, value) return resolve(nil, value) end,
                            function(____, reason) return reject(nil, reason) end
                        )
                    end
                end
            )
        end

        local Set
        do
            Set = __TS__Class()
            Set.name = "Set"
            function Set.prototype.____constructor(self, values)
                self[Symbol.toStringTag] = "Set"
                self.size = 0
                self.nextKey = {}
                self.previousKey = {}
                if values == nil then
                    return
                end
                local iterable = values
                if iterable[Symbol.iterator] then
                    local iterator = iterable[Symbol.iterator](iterable)
                    while true do
                        local result = iterator:next()
                        if result.done then
                            break
                        end
                        self:add(result.value)
                    end
                else
                    local array = values
                    for ____, value in ipairs(array) do
                        self:add(value)
                    end
                end
            end

            function Set.prototype.add(self, value)
                local isNewValue = not self:has(value)
                if isNewValue then
                    self.size = self.size + 1
                end
                if self.firstKey == nil then
                    self.firstKey = value
                    self.lastKey = value
                elseif isNewValue then
                    self.nextKey[self.lastKey] = value
                    self.previousKey[value] = self.lastKey
                    self.lastKey = value
                end
                return self
            end

            function Set.prototype.clear(self)
                self.nextKey = {}
                self.previousKey = {}
                self.firstKey = nil
                self.lastKey = nil
                self.size = 0
            end

            function Set.prototype.delete(self, value)
                local contains = self:has(value)
                if contains then
                    self.size = self.size - 1
                    local next = self.nextKey[value]
                    local previous = self.previousKey[value]
                    if next and previous then
                        self.nextKey[previous] = next
                        self.previousKey[next] = previous
                    elseif next then
                        self.firstKey = next
                        self.previousKey[next] = nil
                    elseif previous then
                        self.lastKey = previous
                        self.nextKey[previous] = nil
                    else
                        self.firstKey = nil
                        self.lastKey = nil
                    end
                    self.nextKey[value] = nil
                    self.previousKey[value] = nil
                end
                return contains
            end

            function Set.prototype.forEach(self, callback)
                for ____, key in __TS__Iterator(self:keys()) do
                    callback(nil, key, key, self)
                end
            end

            function Set.prototype.has(self, value)
                return self.nextKey[value] ~= nil or self.lastKey == value
            end

            Set.prototype[Symbol.iterator] = function(self)
                return self:values()
            end
            function Set.prototype.entries(self)
                local nextKey = self.nextKey
                local key = self.firstKey
                return {
                    [Symbol.iterator] = function(self)
                        return self
                    end,
                    next = function(self)
                        local result = { done = not key, value = { key, key } }
                        key = nextKey[key]
                        return result
                    end
                }
            end

            function Set.prototype.keys(self)
                local nextKey = self.nextKey
                local key = self.firstKey
                return {
                    [Symbol.iterator] = function(self)
                        return self
                    end,
                    next = function(self)
                        local result = { done = not key, value = key }
                        key = nextKey[key]
                        return result
                    end
                }
            end

            function Set.prototype.values(self)
                local nextKey = self.nextKey
                local key = self.firstKey
                return {
                    [Symbol.iterator] = function(self)
                        return self
                    end,
                    next = function(self)
                        local result = { done = not key, value = key }
                        key = nextKey[key]
                        return result
                    end
                }
            end

            Set[Symbol.species] = Set
        end

        local function __TS__SparseArrayNew(...)
            local sparseArray = { ... }
            sparseArray.sparseLength = __TS__CountVarargs(...)
            return sparseArray
        end

        local function __TS__SparseArrayPush(sparseArray, ...)
            local args = { ... }
            local argsLen = __TS__CountVarargs(...)
            local listLen = sparseArray.sparseLength
            for i = 1, argsLen do
                sparseArray[listLen + i] = args[i]
            end
            sparseArray.sparseLength = listLen + argsLen
        end

        local function __TS__SparseArraySpread(sparseArray)
            local ____unpack_0 = unpack
            if ____unpack_0 == nil then
                ____unpack_0 = table.unpack
            end
            local _unpack = ____unpack_0
            return _unpack(sparseArray, 1, sparseArray.sparseLength)
        end

        local WeakMap
        do
            WeakMap = __TS__Class()
            WeakMap.name = "WeakMap"
            function WeakMap.prototype.____constructor(self, entries)
                self[Symbol.toStringTag] = "WeakMap"
                self.items = {}
                setmetatable(self.items, { __mode = "k" })
                if entries == nil then
                    return
                end
                local iterable = entries
                if iterable[Symbol.iterator] then
                    local iterator = iterable[Symbol.iterator](iterable)
                    while true do
                        local result = iterator:next()
                        if result.done then
                            break
                        end
                        local value = result.value
                        self.items[value[1]] = value[2]
                    end
                else
                    for ____, kvp in ipairs(entries) do
                        self.items[kvp[1]] = kvp[2]
                    end
                end
            end

            function WeakMap.prototype.delete(self, key)
                local contains = self:has(key)
                self.items[key] = nil
                return contains
            end

            function WeakMap.prototype.get(self, key)
                return self.items[key]
            end

            function WeakMap.prototype.has(self, key)
                return self.items[key] ~= nil
            end

            function WeakMap.prototype.set(self, key, value)
                self.items[key] = value
                return self
            end

            WeakMap[Symbol.species] = WeakMap
        end

        local WeakSet
        do
            WeakSet = __TS__Class()
            WeakSet.name = "WeakSet"
            function WeakSet.prototype.____constructor(self, values)
                self[Symbol.toStringTag] = "WeakSet"
                self.items = {}
                setmetatable(self.items, { __mode = "k" })
                if values == nil then
                    return
                end
                local iterable = values
                if iterable[Symbol.iterator] then
                    local iterator = iterable[Symbol.iterator](iterable)
                    while true do
                        local result = iterator:next()
                        if result.done then
                            break
                        end
                        self.items[result.value] = true
                    end
                else
                    for ____, value in ipairs(values) do
                        self.items[value] = true
                    end
                end
            end

            function WeakSet.prototype.add(self, value)
                self.items[value] = true
                return self
            end

            function WeakSet.prototype.delete(self, value)
                local contains = self:has(value)
                self.items[value] = nil
                return contains
            end

            function WeakSet.prototype.has(self, value)
                return self.items[value] == true
            end

            WeakSet[Symbol.species] = WeakSet
        end

        local function __TS__SourceMapTraceBack(fileName, sourceMap)
            _G.__TS__sourcemap = _G.__TS__sourcemap or ({})
            _G.__TS__sourcemap[fileName] = sourceMap
            if _G.__TS__originalTraceback == nil then
                local originalTraceback = debug.traceback
                _G.__TS__originalTraceback = originalTraceback
                debug.traceback = function(thread, message, level)
                    local trace
                    if thread == nil and message == nil and level == nil then
                        trace = originalTraceback()
                    elseif __TS__StringIncludes(_VERSION, "Lua 5.0") then
                        trace = originalTraceback((("[Level " .. tostring(level)) .. "] ") .. message)
                    else
                        trace = originalTraceback(thread, message, level)
                    end
                    if type(trace) ~= "string" then
                        return trace
                    end
                    local function replacer(____, file, srcFile, line)
                        local fileSourceMap = _G.__TS__sourcemap[file]
                        if fileSourceMap and fileSourceMap[line] then
                            local data = fileSourceMap[line]
                            if type(data) == "number" then
                                return (srcFile .. ":") .. tostring(data)
                            end
                            return (tostring(data.file) .. ":") .. tostring(data.line)
                        end
                        return (file .. ":") .. line
                    end
                    local result = string.gsub(
                        trace,
                        "(%S+)%.lua:(%d+)",
                        function(file, line) return replacer(nil, file .. ".lua", file .. ".ts", line) end
                    )
                    local function stringReplacer(____, file, line)
                        local fileSourceMap = _G.__TS__sourcemap[file]
                        if fileSourceMap and fileSourceMap[line] then
                            local chunkName = __TS__Match(file, "%[string \"([^\"]+)\"%]")
                            local sourceName = string.gsub(chunkName, ".lua$", ".ts")
                            local data = fileSourceMap[line]
                            if type(data) == "number" then
                                return (sourceName .. ":") .. tostring(data)
                            end
                            return (tostring(data.file) .. ":") .. tostring(data.line)
                        end
                        return (file .. ":") .. line
                    end
                    result = string.gsub(
                        result,
                        "(%[string \"[^\"]+\"%]):(%d+)",
                        function(file, line) return stringReplacer(nil, file, line) end
                    )
                    return result
                end
            end
        end

        local function __TS__Spread(iterable)
            local arr = {}
            if type(iterable) == "string" then
                for i = 0, #iterable - 1 do
                    arr[i + 1] = __TS__StringAccess(iterable, i)
                end
            else
                local len = 0
                for ____, item in __TS__Iterator(iterable) do
                    len = len + 1
                    arr[len] = item
                end
            end
            return __TS__Unpack(arr)
        end

        local function __TS__StringCharAt(self, pos)
            if pos ~= pos then
                pos = 0
            end
            if pos < 0 then
                return ""
            end
            return string.sub(self, pos + 1, pos + 1)
        end

        local function __TS__StringCharCodeAt(self, index)
            if index ~= index then
                index = 0
            end
            if index < 0 then
                return 0 / 0
            end
            local ____string_byte_result_0 = string.byte(self, index + 1)
            if ____string_byte_result_0 == nil then
                ____string_byte_result_0 = 0 / 0
            end
            return ____string_byte_result_0
        end

        local function __TS__StringEndsWith(self, searchString, endPosition)
            if endPosition == nil or endPosition > #self then
                endPosition = #self
            end
            return string.sub(self, endPosition - #searchString + 1, endPosition) == searchString
        end

        local function __TS__StringPadEnd(self, maxLength, fillString)
            if fillString == nil then
                fillString = " "
            end
            if maxLength ~= maxLength then
                maxLength = 0
            end
            if maxLength == -math.huge or maxLength == math.huge then
                error("Invalid string length", 0)
            end
            if #self >= maxLength or #fillString == 0 then
                return self
            end
            maxLength = maxLength - #self
            if maxLength > #fillString then
                fillString = fillString .. string.rep(
                    fillString,
                    math.floor(maxLength / #fillString)
                )
            end
            return self .. string.sub(
                fillString,
                1,
                math.floor(maxLength)
            )
        end

        local function __TS__StringPadStart(self, maxLength, fillString)
            if fillString == nil then
                fillString = " "
            end
            if maxLength ~= maxLength then
                maxLength = 0
            end
            if maxLength == -math.huge or maxLength == math.huge then
                error("Invalid string length", 0)
            end
            if #self >= maxLength or #fillString == 0 then
                return self
            end
            maxLength = maxLength - #self
            if maxLength > #fillString then
                fillString = fillString .. string.rep(
                    fillString,
                    math.floor(maxLength / #fillString)
                )
            end
            return string.sub(
                fillString,
                1,
                math.floor(maxLength)
            ) .. self
        end

        local __TS__StringReplace
        do
            local sub = string.sub
            function __TS__StringReplace(source, searchValue, replaceValue)
                local startPos, endPos = string.find(source, searchValue, nil, true)
                if not startPos then
                    return source
                end
                local before = sub(source, 1, startPos - 1)
                local ____temp_0
                if type(replaceValue) == "string" then
                    ____temp_0 = replaceValue
                else
                    ____temp_0 = replaceValue(nil, searchValue, startPos - 1, source)
                end
                local replacement = ____temp_0
                local after = sub(source, endPos + 1)
                return (before .. replacement) .. after
            end
        end

        local __TS__StringSplit
        do
            local sub = string.sub
            local find = string.find
            function __TS__StringSplit(source, separator, limit)
                if limit == nil then
                    limit = 4294967295
                end
                if limit == 0 then
                    return {}
                end
                local result = {}
                local resultIndex = 1
                if separator == nil or separator == "" then
                    for i = 1, #source do
                        result[resultIndex] = sub(source, i, i)
                        resultIndex = resultIndex + 1
                    end
                else
                    local currentPos = 1
                    while resultIndex <= limit do
                        local startPos, endPos = find(source, separator, currentPos, true)
                        if not startPos then
                            break
                        end
                        result[resultIndex] = sub(source, currentPos, startPos - 1)
                        resultIndex = resultIndex + 1
                        currentPos = endPos + 1
                    end
                    if resultIndex <= limit then
                        result[resultIndex] = sub(source, currentPos)
                    end
                end
                return result
            end
        end

        local __TS__StringReplaceAll
        do
            local sub = string.sub
            local find = string.find
            function __TS__StringReplaceAll(source, searchValue, replaceValue)
                if type(replaceValue) == "string" then
                    local concat = table.concat(
                        __TS__StringSplit(source, searchValue),
                        replaceValue
                    )
                    if #searchValue == 0 then
                        return (replaceValue .. concat) .. replaceValue
                    end
                    return concat
                end
                local parts = {}
                local partsIndex = 1
                if #searchValue == 0 then
                    parts[1] = replaceValue(nil, "", 0, source)
                    partsIndex = 2
                    for i = 1, #source do
                        parts[partsIndex] = sub(source, i, i)
                        parts[partsIndex + 1] = replaceValue(nil, "", i, source)
                        partsIndex = partsIndex + 2
                    end
                else
                    local currentPos = 1
                    while true do
                        local startPos, endPos = find(source, searchValue, currentPos, true)
                        if not startPos then
                            break
                        end
                        parts[partsIndex] = sub(source, currentPos, startPos - 1)
                        parts[partsIndex + 1] = replaceValue(nil, searchValue, startPos - 1, source)
                        partsIndex = partsIndex + 2
                        currentPos = endPos + 1
                    end
                    parts[partsIndex] = sub(source, currentPos)
                end
                return table.concat(parts)
            end
        end

        local function __TS__StringSlice(self, start, ____end)
            if start == nil or start ~= start then
                start = 0
            end
            if ____end ~= ____end then
                ____end = 0
            end
            if start >= 0 then
                start = start + 1
            end
            if ____end ~= nil and ____end < 0 then
                ____end = ____end - 1
            end
            return string.sub(self, start, ____end)
        end

        local function __TS__StringStartsWith(self, searchString, position)
            if position == nil or position < 0 then
                position = 0
            end
            return string.sub(self, position + 1, #searchString + position) == searchString
        end

        local function __TS__StringTrim(self)
            local result = string.gsub(self, "^[%s ﻿]*(.-)[%s ﻿]*$", "%1")
            return result
        end

        local function __TS__StringTrimEnd(self)
            local result = string.gsub(self, "[%s ﻿]*$", "")
            return result
        end

        local function __TS__StringTrimStart(self)
            local result = string.gsub(self, "^[%s ﻿]*", "")
            return result
        end

        local __TS__SymbolRegistryFor, __TS__SymbolRegistryKeyFor
        do
            local symbolRegistry = {}
            function __TS__SymbolRegistryFor(key)
                if not symbolRegistry[key] then
                    symbolRegistry[key] = __TS__Symbol(key)
                end
                return symbolRegistry[key]
            end

            function __TS__SymbolRegistryKeyFor(sym)
                for key in pairs(symbolRegistry) do
                    if symbolRegistry[key] == sym then
                        return key
                    end
                end
            end
        end

        local function __TS__TypeOf(value)
            local luaType = type(value)
            if luaType == "table" then
                return "object"
            elseif luaType == "nil" then
                return "undefined"
            else
                return luaType
            end
        end

        return {
            __TS__ArrayConcat = __TS__ArrayConcat,
            __TS__ArrayEntries = __TS__ArrayEntries,
            __TS__ArrayEvery = __TS__ArrayEvery,
            __TS__ArrayFilter = __TS__ArrayFilter,
            __TS__ArrayForEach = __TS__ArrayForEach,
            __TS__ArrayFind = __TS__ArrayFind,
            __TS__ArrayFindIndex = __TS__ArrayFindIndex,
            __TS__ArrayFrom = __TS__ArrayFrom,
            __TS__ArrayIncludes = __TS__ArrayIncludes,
            __TS__ArrayIndexOf = __TS__ArrayIndexOf,
            __TS__ArrayIsArray = __TS__ArrayIsArray,
            __TS__ArrayJoin = __TS__ArrayJoin,
            __TS__ArrayMap = __TS__ArrayMap,
            __TS__ArrayPush = __TS__ArrayPush,
            __TS__ArrayPushArray = __TS__ArrayPushArray,
            __TS__ArrayReduce = __TS__ArrayReduce,
            __TS__ArrayReduceRight = __TS__ArrayReduceRight,
            __TS__ArrayReverse = __TS__ArrayReverse,
            __TS__ArrayUnshift = __TS__ArrayUnshift,
            __TS__ArraySort = __TS__ArraySort,
            __TS__ArraySlice = __TS__ArraySlice,
            __TS__ArraySome = __TS__ArraySome,
            __TS__ArraySplice = __TS__ArraySplice,
            __TS__ArrayToObject = __TS__ArrayToObject,
            __TS__ArrayFlat = __TS__ArrayFlat,
            __TS__ArrayFlatMap = __TS__ArrayFlatMap,
            __TS__ArraySetLength = __TS__ArraySetLength,
            __TS__AsyncAwaiter = __TS__AsyncAwaiter,
            __TS__Await = __TS__Await,
            __TS__Class = __TS__Class,
            __TS__ClassExtends = __TS__ClassExtends,
            __TS__CloneDescriptor = __TS__CloneDescriptor,
            __TS__CountVarargs = __TS__CountVarargs,
            __TS__Decorate = __TS__Decorate,
            __TS__DecorateParam = __TS__DecorateParam,
            __TS__Delete = __TS__Delete,
            __TS__DelegatedYield = __TS__DelegatedYield,
            Error = Error,
            RangeError = RangeError,
            ReferenceError = ReferenceError,
            SyntaxError = SyntaxError,
            TypeError = TypeError,
            URIError = URIError,
            __TS__FunctionBind = __TS__FunctionBind,
            __TS__Generator = __TS__Generator,
            __TS__InstanceOf = __TS__InstanceOf,
            __TS__InstanceOfObject = __TS__InstanceOfObject,
            __TS__Iterator = __TS__Iterator,
            __TS__LuaIteratorSpread = __TS__LuaIteratorSpread,
            Map = Map,
            __TS__Match = __TS__Match,
            __TS__MathAtan2 = __TS__MathAtan2,
            __TS__MathModf = __TS__MathModf,
            __TS__MathSign = __TS__MathSign,
            __TS__Modulo50 = __TS__Modulo50,
            __TS__New = __TS__New,
            __TS__Number = __TS__Number,
            __TS__NumberIsFinite = __TS__NumberIsFinite,
            __TS__NumberIsNaN = __TS__NumberIsNaN,
            __TS__NumberToString = __TS__NumberToString,
            __TS__ObjectAssign = __TS__ObjectAssign,
            __TS__ObjectDefineProperty = __TS__ObjectDefineProperty,
            __TS__ObjectEntries = __TS__ObjectEntries,
            __TS__ObjectFromEntries = __TS__ObjectFromEntries,
            __TS__ObjectGetOwnPropertyDescriptor = __TS__ObjectGetOwnPropertyDescriptor,
            __TS__ObjectGetOwnPropertyDescriptors = __TS__ObjectGetOwnPropertyDescriptors,
            __TS__ObjectKeys = __TS__ObjectKeys,
            __TS__ObjectRest = __TS__ObjectRest,
            __TS__ObjectValues = __TS__ObjectValues,
            __TS__ParseFloat = __TS__ParseFloat,
            __TS__ParseInt = __TS__ParseInt,
            __TS__Promise = __TS__Promise,
            __TS__PromiseAll = __TS__PromiseAll,
            __TS__PromiseAllSettled = __TS__PromiseAllSettled,
            __TS__PromiseAny = __TS__PromiseAny,
            __TS__PromiseRace = __TS__PromiseRace,
            Set = Set,
            __TS__SetDescriptor = __TS__SetDescriptor,
            __TS__SparseArrayNew = __TS__SparseArrayNew,
            __TS__SparseArrayPush = __TS__SparseArrayPush,
            __TS__SparseArraySpread = __TS__SparseArraySpread,
            WeakMap = WeakMap,
            WeakSet = WeakSet,
            __TS__SourceMapTraceBack = __TS__SourceMapTraceBack,
            __TS__Spread = __TS__Spread,
            __TS__StringAccess = __TS__StringAccess,
            __TS__StringCharAt = __TS__StringCharAt,
            __TS__StringCharCodeAt = __TS__StringCharCodeAt,
            __TS__StringEndsWith = __TS__StringEndsWith,
            __TS__StringIncludes = __TS__StringIncludes,
            __TS__StringPadEnd = __TS__StringPadEnd,
            __TS__StringPadStart = __TS__StringPadStart,
            __TS__StringReplace = __TS__StringReplace,
            __TS__StringReplaceAll = __TS__StringReplaceAll,
            __TS__StringSlice = __TS__StringSlice,
            __TS__StringSplit = __TS__StringSplit,
            __TS__StringStartsWith = __TS__StringStartsWith,
            __TS__StringSubstr = __TS__StringSubstr,
            __TS__StringSubstring = __TS__StringSubstring,
            __TS__StringTrim = __TS__StringTrim,
            __TS__StringTrimEnd = __TS__StringTrimEnd,
            __TS__StringTrimStart = __TS__StringTrimStart,
            __TS__Symbol = __TS__Symbol,
            Symbol = Symbol,
            __TS__SymbolRegistryFor = __TS__SymbolRegistryFor,
            __TS__SymbolRegistryKeyFor = __TS__SymbolRegistryKeyFor,
            __TS__TypeOf = __TS__TypeOf,
            __TS__Unpack = __TS__Unpack
        }
    end,
    ["lib.CommandUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.cmdWithAssert(command, undo)
            assert(command, "command may not be empty")
            local result = Cmd(command, undo)
            assert(result == "OK", (("command faild: " .. command) .. ". error: ") .. result)
        end

        ---
        -- @return undefined if command succeeded. otherwise an error string.
        function ____exports.cmdFailable(command, undo)
            assert(command, "command may not be empty")
            local res = Cmd(command, undo)
            local ____temp_0
            if res == "OK" then
                ____temp_0 = nil
            else
                ____temp_0 = res
            end
            return ____temp_0
        end

        function ____exports.UndoBlock(self, name, enabled)
            if enabled == nil then
                enabled = true
            end
            local ____enabled_1
            if enabled then
                ____enabled_1 = CreateUndo(name)
            else
                ____enabled_1 = nil
            end
            local undo = ____enabled_1
            local function close(self)
                if enabled == true then
                    CloseUndo(undo)
                end
            end
            local function _cmd(command)
                if enabled == true then
                    ____exports.cmdWithAssert(command, undo)
                else
                    ____exports.cmdWithAssert(command)
                end
            end
            local function _cmdIndirect(command)
                assert(command, "command may not be empty")
                if enabled == true then
                    CmdIndirect(command, undo)
                else
                    CmdIndirect(command)
                end
            end
            local function _cmdFailable(command)
                if enabled == true then
                    return ____exports.cmdFailable(command, undo)
                else
                    return ____exports.cmdFailable(command)
                end
            end
            return { cmd = _cmd, cmdIndirect = _cmdIndirect, cmdFailable = _cmdFailable, close = close }
        end

        return ____exports
    end,
    ["lib.ExternalCommandCodecV2"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__TypeOf = ____lualib.__TS__TypeOf
        local __TS__ObjectEntries = ____lualib.__TS__ObjectEntries
        local __TS__ParseInt = ____lualib.__TS__ParseInt
        local __TS__StringSplit = ____lualib.__TS__StringSplit
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        --- Encoded a parmaters object, to a comma delimited string.
        -- This string can beis used in a Macro that calls a Plugin.
        --
        -- Each property of the object is encoded into 3 strings:
        -- [propName],[type],[value]
        --
        -- We use this simple codec and not JSON codec, since we are limited in what we can use in a Macro command.
        local SEPERATOR = ","
        local function encodeParamValue(self, value)
            if type(value) == "number" then
                return "number," .. tostring(value)
            elseif type(value) == "string" then
                return "string," .. value
            elseif type(value) == "boolean" then
                return "boolean," .. (value and "__true" or "__false")
            else
                error("PluginUtils:encodeParam() Unsupported type " .. __TS__TypeOf(value))
            end
        end
        local function encodeAction(self, action)
            local s = action.type
            if action.params ~= nil then
                for ____, ____value in ipairs(__TS__ObjectEntries(action.params)) do
                    local k = ____value[1]
                    local v = ____value[2]
                    s = s .. (("," .. k) .. ",") .. encodeParamValue(nil, v)
                end
            end
            return s
        end
        local function decodeParam(self, typeAndValue)
            local ____type, value = table.unpack(typeAndValue)
            repeat
                local ____switch12 = ____type
                local ____cond12 = ____switch12 == "number"
                if ____cond12 then
                    do
                        return __TS__ParseInt(value)
                    end
                end
                ____cond12 = ____cond12 or ____switch12 == "boolean"
                if ____cond12 then
                    do
                        if value == "__true" then
                            return true
                        elseif value == "__false" then
                            return false
                        end
                        break
                    end
                end
                ____cond12 = ____cond12 or ____switch12 == "string"
                if ____cond12 then
                    do
                        return value
                    end
                end
                do
                    do
                        error("ExternalCommandCodec: Unsupported type " .. ____type)
                    end
                end
            until true
        end
        --- Decode string params into an object
        --
        -- @param encodedParams string comma separated params
        -- @return table array of decoded params. decodes numbers.
        local function decodeAction(self, encodedParams)
            local parts = __TS__StringSplit(encodedParams, SEPERATOR)
            local params = {}
            local index = 1
            while index < #parts do
                local propName = parts[index + 1]
                params[propName] = decodeParam(nil, { parts[index + 1 + 1], parts[index + 2 + 1] })
                index = index + 3
            end
            return { type = parts[1], params = params }
        end
        ____exports.ActionCodec = { encodeAction = encodeAction, decodeAction = decodeAction }
        return ____exports
    end,
    ["lib.TimeUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____socket = require("socket")
        local gettime = ____socket.gettime
        function ____exports.getTimeMillis(self)
            return gettime() * 1000
        end

        return ____exports
    end,
    ["lib.Logger"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SparseArrayNew = ____lualib.__TS__SparseArrayNew
        local __TS__SparseArrayPush = ____lualib.__TS__SparseArrayPush
        local __TS__SparseArraySpread = ____lualib.__TS__SparseArraySpread
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____TimeUtils = require("lib.TimeUtils")
        local getTimeMillis = ____TimeUtils.getTimeMillis
        ____exports.LogLevel = LogLevel or ({})
        ____exports.LogLevel.TRACE = 1
        ____exports.LogLevel[____exports.LogLevel.TRACE] = "TRACE"
        ____exports.LogLevel.DEBUG = 2
        ____exports.LogLevel[____exports.LogLevel.DEBUG] = "DEBUG"
        ____exports.LogLevel.INFO = 3
        ____exports.LogLevel[____exports.LogLevel.INFO] = "INFO"
        ____exports.LogLevel.WARN = 4
        ____exports.LogLevel[____exports.LogLevel.WARN] = "WARN"
        ____exports.LogLevel.ERROR = 5
        ____exports.LogLevel[____exports.LogLevel.ERROR] = "ERROR"
        local logLevelString = {
            "TRACE",
            "DEBUG",
            "INFO",
            "WARN",
            "ERROR"
        }
        function ____exports.toLogLevelString(self, logLevel)
            return logLevelString[logLevel]
        end

        local DEFAULT_LOG_LEVEL = ____exports.LogLevel.ERROR
        ---
        -- @param configs a config heirarchy (anscestors) of this logger
        function ____exports.Logger(self, params)
            local ____temp_0 = params == nil and ({}) or params
            local prefix = ____temp_0.prefix
            local logLevel = ____temp_0.logLevel
            local withElappsedTimePrefixd = ____temp_0.withElappsedTimePrefixd
            local _prefix = table.concat(
                __TS__ArrayMap(
                    prefix or ({}),
                    function(____, p) return ("[" .. p) .. "]" end
                ),
                ""
            )
            local childLoggers = {}
            local _logLevel = logLevel or DEFAULT_LOG_LEVEL
            local lastTimestamp
            local function makeTimeStamp(self)
                local curTime = getTimeMillis(nil)
                local ____temp_1
                if lastTimestamp == nil then
                    ____temp_1 = nil
                else
                    ____temp_1 = math.floor(curTime - lastTimestamp + 0.5)
                end
                local elapsed = ____temp_1
                lastTimestamp = curTime
                return elapsed
            end
            local function _prefixMsg(self, msg)
                local elapsed
                if withElappsedTimePrefixd then
                    elapsed = makeTimeStamp(nil)
                end
                local elapsedPart = withElappsedTimePrefixd and
                ("[" .. tostring(elapsed == nil and "?" or elapsed)) .. "ms]" or ""
                return (((_prefix .. ":") .. elapsedPart) .. " ") .. msg
            end
            local function _prefixMsgWithLevel(self, msg, logLevel)
                local elapsed
                if withElappsedTimePrefixd then
                    elapsed = makeTimeStamp(nil)
                end
                local elapsedPart = withElappsedTimePrefixd and
                ("[" .. tostring(elapsed == nil and "?" or elapsed)) .. "ms]" or ""
                return (((((_prefix .. ":") .. elapsedPart) .. " ") .. logLevelString[logLevel]) .. " ") .. msg
            end
            local function _printf(self, msg)
                Printf(_prefixMsg(nil, msg))
            end
            local function _echo(self, msg)
                Echo(_prefixMsg(nil, msg))
            end
            local function _trace(self, msg)
                if _logLevel <= ____exports.LogLevel.TRACE then
                    Echo(_prefixMsgWithLevel(nil, msg, ____exports.LogLevel.TRACE))
                end
            end
            local function _debug(self, msg)
                if _logLevel <= ____exports.LogLevel.DEBUG then
                    Echo(_prefixMsgWithLevel(nil, msg, ____exports.LogLevel.DEBUG))
                end
            end
            local function _info(self, msg)
                if _logLevel <= ____exports.LogLevel.INFO then
                    Echo(_prefixMsgWithLevel(nil, msg, ____exports.LogLevel.INFO))
                end
            end
            local function _warn(self, msg)
                if _logLevel <= ____exports.LogLevel.WARN then
                    Echo(_prefixMsgWithLevel(nil, msg, ____exports.LogLevel.WARN))
                end
            end
            local function _error(self, msg)
                Echo(_prefixMsgWithLevel(nil, msg, ____exports.LogLevel.ERROR))
            end
            local function subLogger(self, subPrefix)
                local ____exports_Logger_3 = ____exports.Logger
                local ____array_2 = __TS__SparseArrayNew(table.unpack(prefix or ({})))
                __TS__SparseArrayPush(____array_2, subPrefix)
                local newLogger = ____exports_Logger_3(
                    nil,
                    {
                        prefix = { __TS__SparseArraySpread(____array_2) },
                        logLevel = _logLevel
                    }
                )
                childLoggers[#childLoggers + 1] = newLogger
                return newLogger
            end
            local function setLogLevel(self, logLevel)
                _logLevel = logLevel
                for ____, logger in ipairs(childLoggers) do
                    logger:setLogLevel(logLevel)
                end
            end
            return {
                msg = _prefixMsg,
                printf = _printf,
                echo = _echo,
                trace = _trace,
                debug = _debug,
                info = _info,
                warn = _warn,
                error = _error,
                subLogger = subLogger,
                getLogLevel = function() return _logLevel end,
                setLogLevel = setLogLevel
            }
        end

        return ____exports
    end,
    ["lib.StringUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__StringAccess = ____lualib.__TS__StringAccess
        local __TS__StringSubstring = ____lualib.__TS__StringSubstring
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local function nTimes(self, n, fn)
            assert(n >= 1)
            do
                local i = 1
                while i <= n do
                    fn(nil, i)
                    i = i + 1
                end
            end
        end
        ---
        -- @param str Removes spaces from beggining and end of string
        -- @returns
        function ____exports.trimSpaces(self, str)
            local start = 0
            local ____end = #str
            do
                local i = 0
                while i < #str do
                    if __TS__StringAccess(str, i) ~= " " then
                        start = i
                        break
                    end
                    i = i + 1
                end
            end
            do
                local i = #str - 1
                while i >= 0 do
                    if __TS__StringAccess(str, i) ~= " " then
                        ____end = i + 1
                        break
                    end
                    i = i - 1
                end
            end
            return __TS__StringSubstring(str, start, ____end)
        end

        --- Last index of
        --
        -- @param str a string to search in
        -- @param search a single character
        -- @returns 0-based index of the seach character
        function ____exports.lastIndexOf(self, str, search)
            assert(#search == 1, "lastIndexOf: search term must be a single character")
            do
                local i = #str - 1
                while i >= 0 do
                    if __TS__StringAccess(str, i) == search then
                        return i
                    end
                    i = i - 1
                end
            end
            return -1
        end

        local function ____repeat(self, str, times)
            local result = ""
            nTimes(
                nil,
                times,
                function()
                    result = result .. str
                end
            )
            return result
        end
        ____exports.StringUtils = { ["repeat"] = ____repeat }
        return ____exports
    end,
    ["lib.Utils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayJoin = ____lualib.__TS__ArrayJoin
        local __TS__ArrayFrom = ____lualib.__TS__ArrayFrom
        local __TS__ArraySplice = ____lualib.__TS__ArraySplice
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.objectKeys(self, t)
            local keys = {}
            for k, _v in pairs(t) do
                keys[#keys + 1] = k
            end
            return keys
        end

        --- And identity function to do type checking on object literals.
        function ____exports.typed(self, x)
            return x
        end

        function ____exports.isInteger(self, s)
            return tonumber(s) ~= nil
        end

        function ____exports.withDefault(self, value, defaultValue)
            local ____temp_0
            if value == nil then
                ____temp_0 = defaultValue
            else
                ____temp_0 = value
            end
            return ____temp_0
        end

        function ____exports.ifDef(self, x, fn)
            local ____temp_1
            if x == nil then
                ____temp_1 = nil
            else
                ____temp_1 = fn(nil, x)
            end
            return ____temp_1
        end

        function ____exports.applyObjProps(self, obj, props)
            for ____, key in ipairs(____exports.objectKeys(nil, props)) do
                obj[key] = props[key]
            end
            return obj
        end

        function ____exports.applyObjPropsWithDefaults(self, obj, defaults, props)
            ____exports.applyObjProps(nil, obj, defaults)
            ____exports.applyObjProps(nil, obj, props)
            return obj
        end

        function ____exports.objectValues(self, t)
            local values = {}
            for _k, v in pairs(t) do
                values[#values + 1] = v
            end
            return values
        end

        ____exports.objectEntries = pairs
        function ____exports.isEmptyObject(self, obj)
            return #____exports.objectKeys(nil, obj) == 0
        end

        function ____exports.objectNumOfItems(self, t)
            return #____exports.objectKeys(nil, t)
        end

        function ____exports.toString(self, arr)
            return ("[" .. __TS__ArrayJoin(arr, ",")) .. "]"
        end

        function ____exports.isUndefined(self, x)
            return x == nil
        end

        function ____exports.isDefined(self, x)
            return x ~= nil
        end

        --- Creates an array with ascending integer numbers (interval 1)
        --
        -- @param start start number (including)
        -- @param end end number (including)
        -- @returns
        function ____exports.series(self, start, ____end)
            return __TS__ArrayFrom(
                { length = ____end - start + 1 },
                function(____, _, i) return i + start end
            )
        end

        --- Run given function n times
        --
        -- @param fn function receives 1-based index
        function ____exports.nTimes(self, n, fn)
            assert(n >= 1)
            do
                local i = 1
                while i <= n do
                    fn(nil, i)
                    i = i + 1
                end
            end
        end

        --- Find the first (lowest) integer number,starting from 1, that is not in the given array.
        function ____exports.findFirstAvailableNumber(self, sortedNumbers)
            if #sortedNumbers == 0 then
                return 1
            end
            local lastNumber = sortedNumbers[1]
            for ____, n in ipairs(sortedNumbers) do
                if lastNumber ~= nil and n > lastNumber + 1 then
                    return lastNumber + 1
                end
                lastNumber = n
            end
            return lastNumber + 1
        end

        function ____exports.arrayMove(self, arr, oldIndex, newIndex, count)
            if count == nil then
                count = 1
            end
            if newIndex + count >= #arr then
                local k = newIndex + count - #arr + 1
                while true do
                    local ____k_2 = k
                    k = ____k_2 - 1
                    if not (____k_2 > 0) then
                        break
                    end
                    arr[#arr + 1] = nil
                end
            end
            __TS__ArraySplice(
                arr,
                newIndex,
                0,
                table.unpack(__TS__ArraySplice(arr, oldIndex, count))
            )
        end

        function ____exports.compareWithUndefined(self, a, b, getCondition)
            local aValue = getCondition(nil, a)
            local bValue = getCondition(nil, b)
            if aValue == nil and bValue == nil then
                return 0
            end
            if aValue == nil then
                return -1
            end
            if bValue == nil then
                return 1
            end
            return aValue - bValue
        end

        function ____exports.getErrorMessage(self, err)
            return type(err) == "string" and err or
            (type(err) == "table" and (err.message or "No Error Message") or "Unknown")
        end

        --- This replaces TSTL's try/catch (which uses pcall)
        -- since it uses xpcall, that captures the FULL traceback.
        function ____exports.protectedCall(self, params)
            local ____params_3 = params
            local fn = ____params_3.fn
            local onError = ____params_3.onError
            local errorPrefix = ____params_3.errorPrefix
            local proError = { type = "ProError", message = "", tracebackPrinted = false }
            local function errorMsgHandler(err)
                if type(err) == "table" and err.type == "ProError" and err.tracebackPrinted then
                    return
                end
                proError.message = ____exports.getErrorMessage(nil, err)
                Echo(((errorPrefix or "") .. " ERROR : ") .. proError.message)
                Echo(debug.traceback())
                proError.tracebackPrinted = true
            end
            local status, retVal = xpcall(
                function() return fn(nil) end,
                function(err) return errorMsgHandler(err) end
            )
            if not status then
                onError(nil, proError)
                return { success = false, returnValue = nil }
            else
                return { success = true, returnValue = retVal }
            end
        end

        return ____exports
    end,
    ["lib.MAUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__StringSplit = ____lualib.__TS__StringSplit
        local Error = ____lualib.Error
        local RangeError = ____lualib.RangeError
        local ReferenceError = ____lualib.ReferenceError
        local SyntaxError = ____lualib.SyntaxError
        local TypeError = ____lualib.TypeError
        local URIError = ____lualib.URIError
        local __TS__New = ____lualib.__TS__New
        local __TS__ParseInt = ____lualib.__TS__ParseInt
        local __TS__ArrayFind = ____lualib.__TS__ArrayFind
        local __TS__StringSlice = ____lualib.__TS__StringSlice
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAPoolsInfo = require("lib.MAPoolsInfo")
        local MAPoolsInfo = ____MAPoolsInfo.MAPoolsInfo
        local ____StringUtils = require("lib.StringUtils")
        local lastIndexOf = ____StringUtils.lastIndexOf
        local ____Utils = require("lib.Utils")
        local isInteger = ____Utils.isInteger
        function ____exports.getChildByIndex(self, parent, index)
            for ____, obj in ipairs(parent:Children()) do
                if obj.index == index then
                    return obj
                end
            end
        end

        function ____exports.buildAddress(self, keyword, idOrName, childIdOrName)
            local idPart = type(idOrName) == "string" and ("\"" .. idOrName) .. "\"" or idOrName
            local childIdPart = childIdOrName == nil and "" or
            "." .. tostring(type(childIdOrName) == "string" and ("\"" .. childIdOrName) .. "\"" or childIdOrName)
            return ((keyword .. " ") .. tostring(idPart)) .. childIdPart
        end

        function ____exports.buildMultiKeywordAddress(self, keyword1, idOrName1, keyword2, idOrName2)
            local idPart1 = type(idOrName1) == "string" and ("\"" .. idOrName1) .. "\"" or idOrName1
            local idPart2 = type(idOrName2) == "string" and ("\"" .. idOrName2) .. "\"" or idOrName2
            return (((((keyword1 .. " ") .. tostring(idPart1)) .. " ") .. keyword2) .. " ") .. tostring(idPart2)
        end

        function ____exports.childExists(self, parent, index)
            return ____exports.getChildByIndex(nil, parent, index) ~= nil
        end

        function ____exports.getChildByNameOrIndex(self, parent, nameOrIndex)
            if type(nameOrIndex) == "string" then
                return parent[nameOrIndex]
            end
            if type(nameOrIndex) == "number" then
                for ____, obj in ipairs(parent:Children()) do
                    if obj.index == nameOrIndex then
                        return obj
                    end
                end
            end
        end

        --- Get the child's index (in the parents children array) by the object id ("INDEX" property)
        --
        -- @returns an "absolute" index to be used in MA Object-API functions (not with TypeScript arrays)
        function ____exports.getChildIndexById(self, parent, indexOrName)
            local children = parent:Children()
            if type(indexOrName) == "string" then
                do
                    local i = -1
                    while i < #children do
                        local obj = children[i + 1]
                        if obj ~= nil and obj.name == indexOrName then
                            return i + 1
                        end
                        i = i + 1
                    end
                end
            else
                do
                    local i = -1
                    while i < #children do
                        local obj = children[i + 1]
                        if obj ~= nil and obj.index == indexOrName then
                            return i + 1
                        end
                        i = i + 1
                    end
                end
            end
            return nil
        end

        local log = Printf
        function ____exports.fromAddr(self, addr)
            local pc = MAPoolsInfo(nil)
            local parts = __TS__StringSplit(addr, " ")
            local partIndex = 0
            local curObj
            local curPoolConfig
            while partIndex < #parts do
                if partIndex > 0 and curObj == nil then
                    error(
                        __TS__New(Error, "Invalid address " .. addr),
                        0
                    )
                end
                local keyword = parts[partIndex + 1]
                if curPoolConfig == nil then
                    local pools = pc:byKeyword(keyword)
                    if #pools == 0 then
                        log(((("fromAddr(" .. addr) .. "): partIndex = ") .. tostring(partIndex)) .. " : UNDEF : ERROR")
                        error(
                            __TS__New(Error, (("Invalid address " .. addr) .. ". Unsupported keyword: ") .. keyword),
                            0
                        )
                    end
                    local hadSubPool = #pools > 1 or pools[1].subPoolIndex ~= nil
                    if hadSubPool then
                        local addrSuffixParts = __TS__StringSplit(parts[partIndex + 1 + 1], ".")
                        if #addrSuffixParts == 2 then
                            local subPoolIdString, objectIdString = table.unpack(addrSuffixParts)
                            if not isInteger(nil, subPoolIdString) then
                                error(
                                    __TS__New(Error,
                                        (("Invalid address " .. addr) .. ". subPoolId is not a number. subPoolId=") ..
                                        subPoolIdString),
                                    0
                                )
                            end
                            local subPoolIndexNumber = __TS__ParseInt(subPoolIdString)
                            curPoolConfig = __TS__ArrayFind(
                                pools,
                                function(____, p) return p.subPoolIndex == subPoolIndexNumber end
                            )
                            if curPoolConfig == nil then
                                error(
                                    __TS__New(Error,
                                        (("Invalid address " .. addr) .. ". Invalid subPoolindex ") .. subPoolIdString),
                                    0
                                )
                            end
                            if not isInteger(nil, objectIdString) then
                                error(
                                    __TS__New(Error,
                                        (("Invalid address " .. addr) .. ". objectId is not a number. objectId=") ..
                                        objectIdString),
                                    0
                                )
                            end
                            local parent = curPoolConfig:getPoolObject(curPoolConfig:getDefaultParent())
                            local id = __TS__ParseInt(objectIdString)
                            curObj = ____exports.getChildByIndex(
                                nil,
                                curPoolConfig:getPoolObject(curPoolConfig:getDefaultParent()),
                                __TS__ParseInt(objectIdString)
                            )
                        else
                            error(
                                __TS__New(Error, ("Invalid address " .. addr) .. ". must have a sub index"),
                                0
                            )
                        end
                    else
                        curPoolConfig = pools[1]
                        local objectIdString = parts[2]
                        if not isInteger(nil, objectIdString) then
                            error(
                                __TS__New(Error,
                                    (("Invalid address " .. addr) .. ". objectId is not a number. objectId=") ..
                                    objectIdString),
                                0
                            )
                        end
                        curObj = ____exports.getChildByIndex(
                            nil,
                            curPoolConfig:getPoolObject(curPoolConfig:getDefaultParent()),
                            __TS__ParseInt(objectIdString)
                        )
                    end
                else
                    if curPoolConfig.childKeyword ~= nil and curPoolConfig.childKeyword == keyword then
                        local objIdString = parts[partIndex + 1 + 1]
                        if not isInteger(nil, objIdString) then
                            error(
                                __TS__New(Error,
                                    (("Invalid address " .. addr) .. ". objectId is not a number. objectId=") ..
                                    objIdString),
                                0
                            )
                        end
                        curObj = ____exports.getChildByIndex(
                            nil,
                            curObj,
                            __TS__ParseInt(objIdString)
                        )
                    end
                end
                partIndex = partIndex + 2
            end
            return curObj
        end

        ---
        -- @param name Strip the auto-added suffix (#2, #3,...), which MA adds when multiple pool items have the same name
        -- @returns
        function ____exports.stripSuffix(self, name)
            local lastHashIndex = lastIndexOf(nil, name, "#")
            return lastHashIndex == -1 and name or __TS__StringSlice(
                name,
                0,
                lastIndexOf(nil, name, "#")
            )
        end

        return ____exports
    end,
    ["lib.MutexFactory.types"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.HookManager"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Delete = ____lualib.__TS__Delete
        local __TS__ObjectKeys = ____lualib.__TS__ObjectKeys
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        ____exports.HookChangeType = HookChangeType or ({})
        ____exports.HookChangeType.DELETE = 5
        ____exports.HookChangeType[____exports.HookChangeType.DELETE] = "DELETE"
        --- Minimum interval between 2 hook callback of the same hookId.
        -- This is a workaround for unexplained duplicate callback calls.
        -- Happends in MA3 version 1.8.1
        local MIN_INTERVAL_SEC = 0.1
        --- Hook manager allows registering hook callbacks by hookId.
        -- If a new callback is registered with the same hookId, it will replace the existing one.
        --
        -- It also take care of multi-thread issues, and assets that hook callbacks are no invoked in parallel.
        --
        -- @param id string - used to distinguish Hook Managers
        function ____exports.HookManager(self, params)
            local unHook, _unHook, log, directory
            function unHook(self, params)
                _unHook(
                    nil,
                    {
                        hookId = params.hookId,
                        objHandleInt = HandleToInt(params.obj)
                    }
                )
            end

            function _unHook(self, params)
                local ____params_2 = params
                local hookId = ____params_2.hookId
                local objHandleInt = ____params_2.objHandleInt
                if directory[objHandleInt] == nil then
                    log:trace(("Unhook: hookId=" .. hookId) .. ": object has no hooks at all")
                    return
                end
                if directory[objHandleInt][hookId] == nil then
                    log:trace(("Unhook: hookId=" .. hookId) .. ": no hookId found")
                    return
                end
                local ____directory_objHandleInt_hookId_3 = directory[objHandleInt][hookId]
                local hookIndex = ____directory_objHandleInt_hookId_3.hookIndex
                log:trace("Unhook: hookId=" .. hookId)
                Unhook(hookIndex)
                local objectHooks = directory[objHandleInt]
                __TS__Delete(objectHooks, hookId)
                if #__TS__ObjectKeys(objectHooks) == 0 then
                    __TS__Delete(directory, objHandleInt)
                end
            end

            local ____params_0 = params
            local id = ____params_0.id
            local pluginHandle = ____params_0.pluginHandle
            local parentLog = ____params_0.parentLog
            local mutexFactory = ____params_0.mutexFactory
            log = parentLog:subLogger("HookManager")
            directory = {}
            local mutex = mutexFactory:create(log)
            local function hook(self, params)
                local ____params_1 = params
                local hookId = ____params_1.hookId
                local obj = ____params_1.obj
                local onChange = ____params_1.onChange
                local objHandleInt = HandleToInt(obj)
                local isHooked = directory[objHandleInt] ~= nil and directory[objHandleInt][hookId] ~= nil
                if isHooked then
                    log:trace(("hook() hookId=" .. hookId) .. " is already hooked. Un-hooking")
                    unHook(nil, { hookId = hookId, obj = obj })
                end
                local objHooks = directory[objHandleInt]
                if objHooks == nil then
                    objHooks = {}
                    directory[objHandleInt] = objHooks
                end
                log:trace("hook() hooking hookId=" .. hookId)
                local function callbackWrapper(obj, changeType)
                    log:trace((((("callbackWrapper[hookId=" .. hookId) .. "]: START changeType=") .. tostring(changeType)) .. ", obj.name=") ..
                    (changeType == Enums.ChangeLevel.Delete and "" or obj.name))
                    local curTime = Time()
                    mutex:lock()
                    do
                        pcall(function()
                            log:trace(("callbackWrapper[hookId=" .. hookId) .. "]: GOT LOCK")
                            if directory[objHandleInt] ~= nil then
                                local hookEntry = directory[objHandleInt][hookId]
                                if hookEntry ~= nil then
                                    local function callHook(self)
                                        if changeType == Enums.ChangeLevel.Delete then
                                            unHook(nil, { hookId = hookId, obj = obj })
                                        else
                                            hookEntry.lastCallbackTimestamp = curTime
                                        end
                                        hookEntry.callback(obj, changeType)
                                    end
                                    local lastCallbackTimestamp = hookEntry.lastCallbackTimestamp
                                    if lastCallbackTimestamp == nil then
                                        log:trace(("callbackWrapper[hookId=" .. hookId) ..
                                        "]: Calling user listener - interval=[Un-initialized]")
                                        callHook(nil)
                                    else
                                        local interval = curTime -
                                        (lastCallbackTimestamp == nil and 0 or lastCallbackTimestamp)
                                        if interval > MIN_INTERVAL_SEC then
                                            log:trace((((("callbackWrapper[hookId=" .. hookId) .. "]: Calling user listener - interval=") .. tostring(interval)) .. " > ") ..
                                            tostring(MIN_INTERVAL_SEC))
                                            callHook(nil)
                                        else
                                            log:trace((((("callbackWrapper[hookId=" .. hookId) .. "]: Ignoring duplicate hook - interval=") .. tostring(interval)) .. " <= ") ..
                                            tostring(MIN_INTERVAL_SEC))
                                        end
                                    end
                                end
                            else
                            end
                        end)
                        do
                            log:trace(("callbackWrapper[hookId=" .. hookId) .. "]: RELEASING LOCK")
                            mutex:unlock()
                        end
                    end
                    log:trace(("callbackWrapper[hookId=" .. hookId) .. "]: END")
                end
                local hookIndex = HookObjectChange(callbackWrapper, obj, pluginHandle)
                directory[objHandleInt][hookId] = { hookIndex = hookIndex, callback = onChange, callbackWrapper =
                callbackWrapper }
            end
            local function cleanup(self)
                for ____, objHandleInt in ipairs(objectKeys(nil, directory)) do
                    local objectHooks = directory[objHandleInt]
                    for ____, hookId in ipairs(objectKeys(nil, objectHooks)) do
                        _unHook(nil, { hookId = hookId, objHandleInt = objHandleInt })
                    end
                end
                mutex:destroy()
            end
            return { hook = hook, unHook = unHook, cleanup = cleanup }
        end

        return ____exports
    end,
    ["lib.ma_obj.types"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.MediaPool = MediaPool or ({})
        ____exports.MediaPool.Gobos = 1
        ____exports.MediaPool[____exports.MediaPool.Gobos] = "Gobos"
        ____exports.MediaPool.Symbols = 2
        ____exports.MediaPool[____exports.MediaPool.Symbols] = "Symbols"
        ____exports.MediaPool.Images = 3
        ____exports.MediaPool[____exports.MediaPool.Images] = "Images"
        ____exports.MediaPool.MeshImagePool = 4
        ____exports.MediaPool[____exports.MediaPool.MeshImagePool] = "MeshImagePool"
        ____exports.MediaPool.Videos = 5
        ____exports.MediaPool[____exports.MediaPool.Videos] = "Videos"
        ____exports.MediaPool.Sounds = 6
        ____exports.MediaPool[____exports.MediaPool.Sounds] = "Sounds"
        ____exports.MediaPoolNames = {
            [____exports.MediaPool.Gobos] = "Gobos",
            [____exports.MediaPool.Symbols] = "Symbols",
            [____exports.MediaPool.Images] = "Images",
            [____exports.MediaPool.MeshImagePool] = "MeshImagePool",
            [____exports.MediaPool.Videos] = "Videos",
            [____exports.MediaPool.Sounds] = "Sounds"
        }
        ____exports.PresetPoolType = PresetPoolType or ({})
        ____exports.PresetPoolType.Dimmer = 1
        ____exports.PresetPoolType[____exports.PresetPoolType.Dimmer] = "Dimmer"
        ____exports.PresetPoolType.Position = 2
        ____exports.PresetPoolType[____exports.PresetPoolType.Position] = "Position"
        ____exports.PresetPoolType.Gobo = 3
        ____exports.PresetPoolType[____exports.PresetPoolType.Gobo] = "Gobo"
        ____exports.PresetPoolType.Color = 4
        ____exports.PresetPoolType[____exports.PresetPoolType.Color] = "Color"
        ____exports.PresetPoolType.Beam = 5
        ____exports.PresetPoolType[____exports.PresetPoolType.Beam] = "Beam"
        ____exports.PresetPoolType.Focus = 6
        ____exports.PresetPoolType[____exports.PresetPoolType.Focus] = "Focus"
        ____exports.PresetPoolType.Control = 7
        ____exports.PresetPoolType[____exports.PresetPoolType.Control] = "Control"
        ____exports.PresetPoolType.Chapers = 8
        ____exports.PresetPoolType[____exports.PresetPoolType.Chapers] = "Chapers"
        ____exports.PresetPoolType.Video = 9
        ____exports.PresetPoolType[____exports.PresetPoolType.Video] = "Video"
        ____exports.PresetPoolType.All_1 = 21
        ____exports.PresetPoolType[____exports.PresetPoolType.All_1] = "All_1"
        ____exports.PresetPoolType.All_2 = 22
        ____exports.PresetPoolType[____exports.PresetPoolType.All_2] = "All_2"
        ____exports.PresetPoolType.All_3 = 23
        ____exports.PresetPoolType[____exports.PresetPoolType.All_3] = "All_3"
        ____exports.PresetPoolType.All_4 = 24
        ____exports.PresetPoolType[____exports.PresetPoolType.All_4] = "All_4"
        ____exports.PresetPoolType.All_5 = 25
        ____exports.PresetPoolType[____exports.PresetPoolType.All_5] = "All_5"
        do
            local ____HookManager = require("lib.HookManager")
            local HookChangeType = ____HookManager.HookChangeType
            ____exports.HookChangeType = HookChangeType
        end
        ____exports.ExecMode = ExecMode or ({})
        ____exports.ExecMode.CmdLine = 0
        ____exports.ExecMode[____exports.ExecMode.CmdLine] = "CmdLine"
        ____exports.ExecMode.DirectLua = 1
        ____exports.ExecMode[____exports.ExecMode.DirectLua] = "DirectLua"
        ____exports.MAX_EXEC_NUMBER = 490
        function ____exports.isValidExecNumber(self, execNumber)
            local modValue = execNumber % 100
            if execNumber > 300 then
                return execNumber <= ____exports.MAX_EXEC_NUMBER and modValue <= 90
            else
                return modValue <= 98
            end
        end

        return ____exports
    end,
    ["lib.ma_obj.HMedia"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local getChildByNameOrIndex = ____MAUtils.getChildByNameOrIndex
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local HMedia = __TS__Class()
        HMedia.name = "HMedia"
        __TS__ClassExtends(HMedia, HObject)
        function HMedia.prototype.____constructor(self, mediaPool, id, context)
            HObject.prototype.____constructor(
                self,
                buildAddress(nil, "Image", mediaPool, id),
                id,
                {
                    context = context,
                    _getObj = function()
                        return getChildByNameOrIndex(
                            nil,
                            Root().ShowData.MediaPools.Images,
                            id
                        )
                    end
                }
            )
            self.mediaPool = mediaPool
        end

        ____exports.HMedia = HMedia
        return ____exports
    end,
    ["lib.ma_obj.HAppearance"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local RGBAToProps
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local ____common = require("lib.ma_obj.common")
        local ObjCache = ____common.ObjCache
        local ____types = require("lib.ma_obj.types")
        local MediaPool = ____types.MediaPool
        local MediaPoolNames = ____types.MediaPoolNames
        function RGBAToProps(self, color, p)
            local obj = {}
            obj[p .. "R"] = color.r
            obj[p .. "G"] = color.g
            obj[p .. "B"] = color.b
            obj[p .. "ALPHA"] = color.a
            return obj
        end

        ____exports.HAppearance = __TS__Class()
        local HAppearance = ____exports.HAppearance
        HAppearance.name = "HAppearance"
        __TS__ClassExtends(HAppearance, HObject)
        function HAppearance.prototype.____constructor(self, id, context)
            local addr = buildAddress(nil, "Appearance", id)
            HObject.prototype.____constructor(
                self,
                addr,
                id,
                {
                    context = context,
                    _objCache = ObjCache(
                        nil,
                        ShowData().Appearances,
                        id
                    )
                }
            )
        end

        function HAppearance.prototype.delete(self)
            return HObject.prototype.delete(self)
        end

        function HAppearance.prototype.setColorProps(self, props)
            if props.backColor ~= nil then
                self:setProps(__TS__ObjectAssign(
                    {},
                    RGBAToProps(nil, props.backColor, "BACK")
                ))
            end
            if props.imageColor ~= nil then
                self:setProps(RGBAToProps(nil, props.imageColor, "IMAGE"))
            end
            return self
        end

        function HAppearance.prototype.setImage(self, media)
            assert(media.mediaPool == MediaPool.Gobos or media.mediaPool == MediaPool.Symbols or
            media.mediaPool == MediaPool.Images)
            self._cmd(((((("Set " .. self.addr) .. " image=\"showData.MediaPools.") .. MediaPoolNames[media.mediaPool]) .. ".") .. tostring(media.indexOrName)) ..
            "\"")
            return self
        end

        return ____exports
    end,
    ["lib.ma_obj.common"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local getChildByIndex = ____MAUtils.getChildByIndex
        function ____exports.setAppearance(self, obj, appearance)
            if obj:getObj():Get("Appearance") ~= appearance:getObj() then
                if obj:isExecModeCmdLine() then
                    appearance:assignTo(obj)
                else
                    obj:setObjectProp("Appearance", appearance)
                end
            end
        end

        function ____exports.ObjCache(self, parent, id)
            local obj
            return {
                getObj = function(self)
                    if obj == nil then
                        if type(id) == "string" then
                            return parent[id]
                        else
                            obj = getChildByIndex(nil, parent, id)
                        end
                        return obj
                    else
                        return obj
                    end
                end,
                reset = function(self)
                    obj = nil
                end
            }
        end

        return ____exports
    end,
    ["lib.ma_obj.HBasicObject"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__SetDescriptor = ____lualib.__TS__SetDescriptor
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____CommandUtils = require("lib.CommandUtils")
        local cmdFailable = ____CommandUtils.cmdFailable
        local ____Logger = require("lib.Logger")
        local Logger = ____Logger.Logger
        --- Helper for MA basic (built-in) object.
        local HBasicObject = __TS__Class()
        HBasicObject.name = "HBasicObject"
        function HBasicObject.prototype.____constructor(self, options)
            local ____options_0 = options
            local context = ____options_0.context
            self.context = context
            self.log = context.log == nil and Logger(nil, { prefix = { "HBasicObject" } }) or context.log
            self.undoBlock = context.undoBlock
            self._getObj = options._getObj
            self._getParent = options._getParent
            self._cmd = self.undoBlock == nil and Cmd or self.undoBlock.cmd
            self._cmdIndirect = self.undoBlock == nil and CmdIndirect or self.undoBlock.cmdIndirect
            self._cmdFailable = self.undoBlock == nil and cmdFailable or self.undoBlock.cmdFailable
        end

        __TS__SetDescriptor(
            HBasicObject.prototype,
            "name",
            {
                get = function(self)
                    return self:getObj().name
                end
            },
            true
        )
        __TS__SetDescriptor(
            HBasicObject.prototype,
            "index",
            {
                get = function(self)
                    return self:getObj().index
                end
            },
            true
        )
        function HBasicObject.prototype.getParent(self)
            if self._getParent == nil then
                error("_this._getParent not defined")
            else
                return self:_getParent()
            end
        end

        function HBasicObject.prototype.getObj(self)
            local obj = self:_getObj()
            if obj == nil then
                error("HBasicObject.getObj(): Object not found")
            end
            return obj
        end

        function HBasicObject.prototype.exists(self)
            do
                local function ____catch()
                    return true, false
                end
                local ____try, ____hasReturned, ____returnValue = pcall(function()
                    self:getObj()
                    return true, true
                end)
                if not ____try then
                    ____hasReturned, ____returnValue = ____catch()
                end
                if ____hasReturned then
                    return ____returnValue
                end
            end
        end

        function HBasicObject.prototype.hook(self, hookId, onChange)
            local context = self.context
            if context == nil or context.hookManager == nil then
                error("HBasicObject initialized without context, Can not use hooks")
            end
            context.hookManager:hook({
                hookId = hookId,
                obj = self:getObj(),
                onChange = onChange
            })
        end

        function HBasicObject.prototype.unHook(self, hookId)
            local context = self.context
            if context == nil or context.hookManager == nil then
                error("HBasicObject initialized without context, Can not use hooks")
            end
            if self:exists() then
                context.hookManager:unHook({
                    hookId = hookId,
                    obj = self:getObj()
                })
            else
                self.log:debug("unHook: object does not exist")
            end
            return self
        end

        ____exports.HBasicObject = HBasicObject
        return ____exports
    end,
    ["lib.ma_obj.HObject"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local propsToString, toLuaPropValue, toCmdPropValue
        local ____MAUtils = require("lib.MAUtils")
        local getChildIndexById = ____MAUtils.getChildIndexById
        local ____Utils = require("lib.Utils")
        local isEmptyObject = ____Utils.isEmptyObject
        local objectEntries = ____Utils.objectEntries
        local objectKeys = ____Utils.objectKeys
        local ____HBasicObject = require("lib.ma_obj.HBasicObject")
        local HBasicObject = ____HBasicObject.HBasicObject
        local ____types = require("lib.ma_obj.types")
        local ExecMode = ____types.ExecMode
        function propsToString(self, props)
            local s = ""
            local index = 0
            for k, v in pairs(props) do
                assert(
                    (string.find(k, " ", nil, true) or 0) - 1 < 0,
                    "HObjectPool: setProp() propName may not have a space in it. propName: " ..
                    ("\"" .. tostring(k)) .. "\""
                )
                s = s .. (index > 0 and " " or "") .. ((("'" .. tostring(k)) .. "' '") .. tostring(v)) .. "'"
                index = index + 1
            end
            return s
        end

        function toLuaPropValue(self, propType, propValue)
            repeat
                local ____switch72 = propType
                local ____cond72 = ____switch72 == "number"
                if ____cond72 then
                    return propValue
                end
                ____cond72 = ____cond72 or ____switch72 == "string"
                if ____cond72 then
                    return tostring(propValue)
                end
                ____cond72 = ____cond72 or ____switch72 == "color"
                if ____cond72 then
                    return string.upper(propValue)
                end
                ____cond72 = ____cond72 or ____switch72 == "isVisible"
                if ____cond72 then
                    return propValue == "Visible"
                end
                ____cond72 = ____cond72 or ____switch72 == "boolean"
                if ____cond72 then
                    return propValue == "true"
                end
                do
                    do
                        error("HObject: toLuaPropValue() Unknown maPropType " .. tostring(propType))
                    end
                end
            until true
        end

        function toCmdPropValue(self, propType, propValue)
            repeat
                local ____switch75 = propType
                local ____cond75 = ____switch75 == "number"
                if ____cond75 then
                    return propValue
                end
                ____cond75 = ____cond75 or ____switch75 == "string"
                if ____cond75 then
                    return tostring(propValue)
                end
                ____cond75 = ____cond75 or ____switch75 == "color"
                if ____cond75 then
                    return string.upper(propValue)
                end
                ____cond75 = ____cond75 or ____switch75 == "isVisible"
                if ____cond75 then
                    return propValue == true and "Visible" or "Hidden"
                end
                ____cond75 = ____cond75 or ____switch75 == "boolean"
                if ____cond75 then
                    return propValue == true and "true" or "false"
                end
                do
                    do
                        error("HObject: toHPropValue() Unknown maPropType " .. tostring(propType))
                    end
                end
            until true
        end

        --- Helper Pool Object base class
        ____exports.HObject = __TS__Class()
        local HObject = ____exports.HObject
        HObject.name = "HObject"
        __TS__ClassExtends(HObject, HBasicObject)
        function HObject.prototype.____constructor(self, addr, indexOrName, options)
            self.addr = addr
            self.indexOrName = indexOrName
            if options._getObj == nil and options._objCache == nil then
                error("Both _getObj and _objCache are undefined")
            end
            HBasicObject.prototype.____constructor(
                self,
                __TS__ObjectAssign({}, options,
                    { _getObj = options._objCache ~= nil and options._objCache.getObj or options._getObj })
            )
            self.objCache = options._objCache
        end

        function HObject.prototype.getMAPropTypes(self)
            return {}
        end

        function HObject.prototype.getProps(self)
            local propTypes = self:getMAPropTypes()
            local props = {}
            for ____, propName in ipairs(objectKeys(nil, propTypes)) do
                props[propName] = toCmdPropValue(
                    nil,
                    propTypes[propName],
                    self:getObj():Get(propName)
                )
            end
            return props
        end

        function HObject.prototype._getExecMode(self)
            return self._execMode == nil and (self.context == nil and ExecMode.CmdLine or self.context.execMode) or
            self._execMode
        end

        function HObject.prototype.setExecModeCmdLine(self)
            self._execMode = ExecMode.CmdLine
            return self
        end

        function HObject.prototype.setExecModeDirectLua(self)
            self._execMode = ExecMode.DirectLua
            return self
        end

        function HObject.prototype.isExecModeCmdLine(self)
            return self:_getExecMode() == ExecMode.CmdLine
        end

        function HObject.prototype.isExecModeDirectLua(self)
            return self:_getExecMode() == ExecMode.DirectLua
        end

        function HObject.prototype.exists(self)
            do
                local function ____catch()
                    return true, false
                end
                local ____try, ____hasReturned, ____returnValue = pcall(function()
                    self:getObj()
                    return true, true
                end)
                if not ____try then
                    ____hasReturned, ____returnValue = ____catch()
                end
                if ____hasReturned then
                    return ____returnValue
                end
            end
        end

        function HObject.prototype.delete(self)
            if self:exists() then
                if self:isExecModeCmdLine() then
                    self._cmd(("Delete " .. self.addr) .. " /nc")
                else
                    local parent = self:getObj():Parent()
                    local childIndex = getChildIndexById(nil, parent, self.indexOrName)
                    if childIndex == nil then
                        error(self.log:msg("delete(): could not find child with indexOrName =  " ..
                        tostring(self.indexOrName)))
                    else
                        parent:Remove(childIndex)
                    end
                end
            end
            local ____table_objCache_reset_result_0 = self.objCache
            if ____table_objCache_reset_result_0 ~= nil then
                ____table_objCache_reset_result_0 = ____table_objCache_reset_result_0:reset()
            end
            return self
        end

        function HObject.prototype.deleteThru(self, thruObj)
            self._cmd(((("Delete " .. self.addr) .. " Thru ") .. tostring(thruObj.indexOrName)) .. " /nc")
        end

        function HObject.prototype.deleteAllChildren(self)
            if self:isExecModeCmdLine() then
                if self:getObj():Count() > 0 then
                    self._cmd(("Delete " .. self.addr) .. ".1 Thru /nc")
                end
            else
                local obj = self:getObj()
                while obj:Count() > 0 do
                    obj:Remove(1)
                end
            end
        end

        function HObject.prototype.lock(self)
            self._cmd("Lock " .. self.addr)
            return self
        end

        function HObject.prototype.unlock(self)
            self._cmd("Unlock " .. self.addr)
            return self
        end

        function HObject.prototype.modeDirect(self)
            local context = self.context
            if context ~= nil then
                self.context = {
                    undoBlock = context.undoBlock,
                    hookManager = context.hookManager,
                    execMode = ExecMode.DirectLua,
                    of = context.of:duplicateDirectMode(),
                    log = context.log
                }
            end
            return self
        end

        function HObject.prototype.move(self, destination)
            if self:isExecModeCmdLine() then
                self._cmd((("Move " .. self.addr) .. " At ") .. destination.addr)
            else
                self._cmd((("Move " .. self.addr) .. " At ") .. destination.addr)
                local ____table_context_log_4 = self.context
                if ____table_context_log_4 ~= nil then
                    ____table_context_log_4 = ____table_context_log_4.log
                end
                local ____table_context_log_warn_result_2 = ____table_context_log_4
                if ____table_context_log_warn_result_2 ~= nil then
                    ____table_context_log_warn_result_2 = ____table_context_log_warn_result_2:warn(
                    "HObject.move not supports DirectLua ExecMode. Using \"Cmd\"")
                end
            end
        end

        function HObject.prototype.store(self, options)
            local ____options_label_6 = options
            if ____options_label_6 ~= nil then
                ____options_label_6 = ____options_label_6.label
            end
            local label = ____options_label_6
            if self:isExecModeCmdLine() then
                local labelPart = label and ("\"" .. label) .. "\"" or ""
                self._cmd(((("Store " .. self.addr) .. " ") .. labelPart) .. " /nc")
            else
                if self:exists() then
                    local obj = self:getObj()
                    obj:CommandStore()
                    if label ~= nil then
                        obj.name = label
                    end
                else
                    local parent = self:getParent()
                    if parent == nil then
                        local msg = "store() directMode: can not find parent for address " .. self.addr
                        error(self.log:msg(msg))
                    else
                        if type(self.indexOrName) == "string" then
                            local child = parent:Append(parent:GetChildClass())
                            child.name = self.indexOrName
                        else
                            parent:Create(
                                self.indexOrName,
                                parent:GetChildClass()
                            )
                        end
                    end
                end
            end
            return self
        end

        function HObject.prototype.setLabel(self, label)
            assert(
                (string.find(label, "\"", nil, true) or 0) - 1 < 0,
                "setLabel(): label may not include a qoute character"
            )
            if self:isExecModeCmdLine() then
                self._cmd(((("Label " .. self.addr) .. " \"") .. label) .. "\" /nc")
            else
                self:getObj().name = label
            end
            return self
        end

        function HObject.prototype.setProp(self, propName, value)
            assert(
                (string.find(propName, " ", nil, true) or 0) - 1 < 0,
                "HObjectPool: setProp() propName may not have a space in it. propName: " .. ("\"" .. propName) .. "\""
            )
            self._cmd(((((("Set " .. self.addr) .. " ") .. String(nil, propName)) .. " '") .. tostring(value)) .. "'")
            return self
        end

        function HObject.prototype._getChangedProps(self, newProps, maPropTypes)
            local changedProps = {}
            local obj = self:getObj()
            for ____, propName in ipairs(objectKeys(nil, newProps)) do
                local objPropValue = obj:Get(propName)
                local maPropType = maPropTypes[propName]
                local newValue = toLuaPropValue(nil, maPropType, newProps[propName])
                if objPropValue ~= newValue then
                    changedProps[propName] = newProps[propName]
                else
                end
            end
            return changedProps
        end

        function HObject.prototype.setProps(self, props)
            local maPropTypes = self:getMAPropTypes()
            if not isEmptyObject(nil, maPropTypes) then
                props = self:_getChangedProps(props, maPropTypes)
            end
            if self:isExecModeCmdLine() then
                self:doSetProps(props)
            else
                self:doSetPropsDirect(props)
            end
            return self
        end

        function HObject.prototype.doSetProps(self, props)
            if not isEmptyObject(nil, props) then
                self._cmd((("Set " .. self.addr) .. " ") .. propsToString(nil, props))
            end
            return self
        end

        function HObject.prototype.doSetPropsDirect(self, props)
            if not isEmptyObject(nil, props) then
                local maPropTypes = self:getMAPropTypes()
                for propName, propValue in objectEntries(props) do
                    local maPropType = maPropTypes[propName]
                    if maPropType == nil then
                        error(((("HObject.doSetPropsDirect() " .. self.addr) .. ": propName \"") .. propName) ..
                        "\" is not defined in maPropTypes")
                    end
                    self:getObj():Set(
                        propName,
                        toLuaPropValue(nil, maPropType, propValue)
                    )
                end
            end
            return self
        end

        function HObject.prototype.assignTo(self, target)
            self._cmd((("Assign " .. self.addr) .. " At ") .. target.addr)
            return self
        end

        function HObject.prototype.setObjectProp(self, propName, hValue)
            local thisObj = self:getObj()
            local curValue = thisObj:Get(propName)
            local newValue = hValue:getObj()
            if newValue ~= curValue then
                thisObj:Set(propName, newValue)
            end
            return self
        end

        function HObject.prototype.isLocked(self)
            return self:getObj():Get("lock") == "Yes"
        end

        function HObject.prototype.setLocked(self, lock)
            self:getObj():Set("lock", lock and "Yes" or "No")
        end

        return ____exports
    end,
    ["lib.ma_obj.HPreset"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local fromAddr = ____MAUtils.fromAddr
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        ____exports.PresetFamily = PresetFamily or ({})
        ____exports.PresetFamily.Dimmer = 1
        ____exports.PresetFamily[____exports.PresetFamily.Dimmer] = "Dimmer"
        ____exports.PresetFamily.Position = 2
        ____exports.PresetFamily[____exports.PresetFamily.Position] = "Position"
        ____exports.PresetFamily.Gobo = 3
        ____exports.PresetFamily[____exports.PresetFamily.Gobo] = "Gobo"
        ____exports.PresetFamily.Color = 4
        ____exports.PresetFamily[____exports.PresetFamily.Color] = "Color"
        ____exports.PresetFamily.Beam = 5
        ____exports.PresetFamily[____exports.PresetFamily.Beam] = "Beam"
        ____exports.PresetFamily.Focus = 6
        ____exports.PresetFamily[____exports.PresetFamily.Focus] = "Focus"
        ____exports.PresetFamily.Control = 7
        ____exports.PresetFamily[____exports.PresetFamily.Control] = "Control"
        ____exports.PresetFamily.Shapers = 8
        ____exports.PresetFamily[____exports.PresetFamily.Shapers] = "Shapers"
        ____exports.PresetFamily.Video = 9
        ____exports.PresetFamily[____exports.PresetFamily.Video] = "Video"
        ____exports.PresetFamily.All1 = 21
        ____exports.PresetFamily[____exports.PresetFamily.All1] = "All1"
        ____exports.PresetFamily.All2 = 22
        ____exports.PresetFamily[____exports.PresetFamily.All2] = "All2"
        ____exports.PresetFamily.All3 = 23
        ____exports.PresetFamily[____exports.PresetFamily.All3] = "All3"
        ____exports.PresetFamily.All4 = 24
        ____exports.PresetFamily[____exports.PresetFamily.All4] = "All4"
        ____exports.PresetFamily.All5 = 25
        ____exports.PresetFamily[____exports.PresetFamily.All5] = "All5"
        local HPreset = __TS__Class()
        HPreset.name = "HPreset"
        __TS__ClassExtends(HPreset, HObject)
        function HPreset.prototype.____constructor(self, presetFamily, id, context)
            local addr = buildAddress(nil, "Preset", presetFamily, id)
            HObject.prototype.____constructor(
                self,
                addr,
                id,
                {
                    context = context,
                    _getObj = function() return fromAddr(nil, addr) end
                }
            )
        end

        ____exports.HPreset = HPreset
        return ____exports
    end,
    ["lib.MAPoolsInfo"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__SetDescriptor = ____lualib.__TS__SetDescriptor
        local __TS__New = ____lualib.__TS__New
        local __TS__ArrayReduce = ____lualib.__TS__ArrayReduce
        local __TS__ArrayFind = ____lualib.__TS__ArrayFind
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.MAX_OBJECTS_LARGE_POOL = 9999
        ____exports.MAX_OBJECTS_1024 = 1024
        ____exports.MAX_OBJECTS_160 = 160
        ____exports.MAX_OBJECTS_SMALL_POOL = 128
        local function getPoolById(self, poolId, poolInfos)
            for ____, pool in ipairs(poolInfos) do
                if pool.id == poolId then
                    return pool
                end
            end
            error("Could not get MAPoolInfo by poolId=" .. poolId)
        end
        local function getPoolConfigByKeyword(self, keyword, poolsConfig)
            local pc = {}
            for ____, pool in ipairs(poolsConfig) do
                if pool.keyword == keyword then
                    pc[#pc + 1] = pool
                end
            end
            return pc
        end
        ____exports.PoolInfo = __TS__Class()
        local PoolInfo = ____exports.PoolInfo
        PoolInfo.name = "PoolInfo"
        function PoolInfo.prototype.____constructor(self, params)
            self.params = params
        end

        __TS__SetDescriptor(
            PoolInfo.prototype,
            "id",
            {
                get = function(self)
                    return self.params.id
                end
            },
            true
        )
        __TS__SetDescriptor(
            PoolInfo.prototype,
            "poolDefaultObjName",
            {
                get = function(self)
                    return self.params.poolDefaultObjName
                end
            },
            true
        )
        __TS__SetDescriptor(
            PoolInfo.prototype,
            "label",
            {
                get = function(self)
                    return self.params.label
                end
            },
            true
        )
        __TS__SetDescriptor(
            PoolInfo.prototype,
            "shortLabel",
            {
                get = function(self)
                    return self.params.shortLabel
                end
            },
            true
        )
        __TS__SetDescriptor(
            PoolInfo.prototype,
            "keyword",
            {
                get = function(self)
                    return self.params.keyword
                end
            },
            true
        )
        __TS__SetDescriptor(
            PoolInfo.prototype,
            "windowType",
            {
                get = function(self)
                    return self.params.windowType
                end
            },
            true
        )
        __TS__SetDescriptor(
            PoolInfo.prototype,
            "windowPresetPoolType",
            {
                get = function(self)
                    local ____temp_0
                    if self.params.subPoolIndex == nil then
                        ____temp_0 = nil
                    else
                        ____temp_0 = self.params.subPoolIndex - 1
                    end
                    return ____temp_0
                end
            },
            true
        )
        __TS__SetDescriptor(
            PoolInfo.prototype,
            "maxObjects",
            {
                get = function(self)
                    return self.params.maxObjects
                end
            },
            true
        )
        __TS__SetDescriptor(
            PoolInfo.prototype,
            "childKeyword",
            {
                get = function(self)
                    return self.params.childKeyword
                end
            },
            true
        )
        __TS__SetDescriptor(
            PoolInfo.prototype,
            "subPoolLabel",
            {
                get = function(self)
                    return self.params.subPoolLabel
                end
            },
            true
        )
        __TS__SetDescriptor(
            PoolInfo.prototype,
            "subPoolIndex",
            {
                get = function(self)
                    return self.params.subPoolIndex
                end
            },
            true
        )
        function PoolInfo.prototype.exists(self, parent)
            return self:getPoolObject(parent) ~= nil
        end

        function PoolInfo.prototype.getPoolObject(self, parent)
            return self.params:getPoolObject(parent)
        end

        function PoolInfo.prototype.getDefaultParent(self)
            return self.params:getDefaultParent()
        end

        function PoolInfo.prototype.getAddress(self, index)
            local ____self_params_1 = self.params
            local keyword = ____self_params_1.keyword
            local subPoolIndex = ____self_params_1.subPoolIndex
            return ((keyword .. " ") .. (subPoolIndex == nil and "" or tostring(subPoolIndex) .. ".")) .. tostring(index)
        end

        local all = {
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Appearances",
                    poolDefaultObjName = "Appearance",
                    label = "Appearances",
                    shortLabel = "APP",
                    getPoolObject = function(____, parent)
                        return Root().ShowData.Appearances
                    end,
                    getDefaultParent = function() return Root().ShowData end,
                    keyword = "Appearance",
                    windowType = "WindowAppearancePool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Cameras",
                    poolDefaultObjName = "Camera",
                    label = "Cameras",
                    shortLabel = "Cam",
                    getPoolObject = function(____, parent)
                        local ____parent_2 = parent
                        if ____parent_2 == nil then
                            ____parent_2 = CurrentProfile()
                        end
                        return ____parent_2.Cameras
                    end,
                    getDefaultParent = function() return CurrentProfile() end,
                    keyword = "Camera",
                    windowType = "WindowCameraPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Configs",
                    poolDefaultObjName = "Configuration",
                    label = "Configs",
                    shortLabel = "Cnf",
                    getPoolObject = function(____, parent)
                        local ____parent_3 = parent
                        if ____parent_3 == nil then
                            ____parent_3 = DataPool()
                        end
                        return ____parent_3.Configurations
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Config",
                    windowType = "WindowConfigurationPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "DataPools",
                    poolDefaultObjName = "DataPool",
                    label = "Data Pools",
                    shortLabel = "DPL",
                    getPoolObject = function(____, parent)
                        return Root().ShowData.DataPools
                    end,
                    getDefaultParent = function() return Root().ShowData end,
                    keyword = "DataPool",
                    windowType = "WindowDataPool",
                    maxObjects = ____exports.MAX_OBJECTS_SMALL_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "DmxUniverses",
                    poolDefaultObjName = "Universes",
                    label = "Dmx Universes",
                    shortLabel = "Uni",
                    getPoolObject = function()
                        return Root().ShowData.LivePatch.DmxUniverses
                    end,
                    getDefaultParent = function() return Root().ShowData.LivePatch end,
                    keyword = "DMXUniverse",
                    windowType = "WindowUniversePool",
                    maxObjects = ____exports.MAX_OBJECTS_1024
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Filters",
                    poolDefaultObjName = "Filter",
                    label = "Filters",
                    shortLabel = "FLT",
                    getPoolObject = function(____, parent)
                        local ____parent_4 = parent
                        if ____parent_4 == nil then
                            ____parent_4 = DataPool()
                        end
                        return ____parent_4.Filters
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Filter",
                    windowType = "WindowFilterPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Gels.MA",
                    poolDefaultObjName = "Gels",
                    label = "Gels [MA]",
                    shortLabel = "GMA",
                    subPoolLabel = "MA",
                    getPoolObject = function()
                        return Root().ShowData.GelPools.MA
                    end,
                    getDefaultParent = function() return Root().ShowData.GelPools end,
                    keyword = "Gel",
                    subPoolIndex = 1,
                    windowType = "WindowGelPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Gobos",
                    poolDefaultObjName = "Gobo",
                    label = "Gobos",
                    shortLabel = "GOB",
                    getPoolObject = function(____, parent)
                        return Root().ShowData.MediaPools.Gobos
                    end,
                    getDefaultParent = function()
                        return Root().ShowData.MediaPools
                    end,
                    keyword = "Gobo",
                    subPoolIndex = 1,
                    windowType = "WindowGoboPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Groups",
                    poolDefaultObjName = "Group",
                    label = "Groups",
                    shortLabel = "GRP",
                    getPoolObject = function(____, parent)
                        local ____parent_5 = parent
                        if ____parent_5 == nil then
                            ____parent_5 = DataPool()
                        end
                        return ____parent_5.Groups
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Group",
                    windowType = "WindowGroupPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Images",
                    poolDefaultObjName = "Image",
                    label = "Images",
                    shortLabel = "IMG",
                    getPoolObject = function(____, parent)
                        return Root().ShowData.MediaPools.Images
                    end,
                    getDefaultParent = function()
                        return Root().ShowData.MediaPools
                    end,
                    keyword = "Image",
                    subPoolIndex = 3,
                    windowType = "WindowImagePool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Layouts",
                    poolDefaultObjName = "Layouts",
                    label = "Layouts",
                    shortLabel = "LAY",
                    getPoolObject = function(____, parent)
                        local ____parent_6 = parent
                        if ____parent_6 == nil then
                            ____parent_6 = DataPool()
                        end
                        return ____parent_6.Layouts
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Layout",
                    windowType = "WindowLayoutPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Macros",
                    poolDefaultObjName = "Macro",
                    label = "Macros",
                    shortLabel = "MAC",
                    getPoolObject = function(____, parent)
                        local ____parent_7 = parent
                        if ____parent_7 == nil then
                            ____parent_7 = DataPool()
                        end
                        return ____parent_7.Macros
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Macro",
                    windowType = "WindowMacroPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "MAtricks",
                    poolDefaultObjName = "Matricks",
                    label = "MAtricks",
                    shortLabel = "MAT",
                    getPoolObject = function(____, parent)
                        local ____parent_8 = parent
                        if ____parent_8 == nil then
                            ____parent_8 = DataPool()
                        end
                        return ____parent_8.MAtricks
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "MAtrick",
                    windowType = "WindowMatricksPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Meshes",
                    poolDefaultObjName = "Mesh",
                    label = "Meshes",
                    shortLabel = "Msh",
                    getPoolObject = function()
                        return Root().ShowData.Meshes
                    end,
                    getDefaultParent = function() return Root().ShowData end,
                    keyword = "Mesh",
                    windowType = "WindowMeshPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Pages",
                    poolDefaultObjName = "Page",
                    label = "Pages",
                    shortLabel = "PAG",
                    getPoolObject = function(____, parent)
                        local ____parent_9 = parent
                        if ____parent_9 == nil then
                            ____parent_9 = DataPool()
                        end
                        return ____parent_9.Pages
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Page",
                    windowType = "WindowPagePool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Plugins",
                    poolDefaultObjName = "Plugin",
                    label = "Plugins",
                    shortLabel = "PLG",
                    getPoolObject = function(____, parent)
                        local ____parent_10 = parent
                        if ____parent_10 == nil then
                            ____parent_10 = DataPool()
                        end
                        return ____parent_10.Plugins
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Plugin",
                    windowType = "WindowPluginPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.Dimmer",
                    poolDefaultObjName = "Preset",
                    label = "Presets [Dimmer]",
                    shortLabel = "DIM",
                    subPoolLabel = "Dimmer",
                    getPoolObject = function(____, parent)
                        local ____parent_11 = parent
                        if ____parent_11 == nil then
                            ____parent_11 = DataPool()
                        end
                        return ____parent_11.PresetPools.Dimmer
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 1,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.Position",
                    poolDefaultObjName = "Preset",
                    label = "Presets [Position]",
                    shortLabel = "POS",
                    subPoolLabel = "Position",
                    getPoolObject = function(____, parent)
                        local ____parent_12 = parent
                        if ____parent_12 == nil then
                            ____parent_12 = DataPool()
                        end
                        return ____parent_12.PresetPools.Position
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 2,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.Gobo",
                    poolDefaultObjName = "Preset",
                    label = "Presets [Gobo]",
                    shortLabel = "GOB",
                    subPoolLabel = "Gobo",
                    getPoolObject = function(____, parent)
                        local ____parent_13 = parent
                        if ____parent_13 == nil then
                            ____parent_13 = DataPool()
                        end
                        return ____parent_13.PresetPools.Gobo
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 3,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.Color",
                    poolDefaultObjName = "Preset",
                    label = "Presets [Color]",
                    shortLabel = "COL",
                    subPoolLabel = "Color",
                    getPoolObject = function(____, parent)
                        local ____parent_14 = parent
                        if ____parent_14 == nil then
                            ____parent_14 = DataPool()
                        end
                        return ____parent_14.PresetPools.Color
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 4,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.Beam",
                    poolDefaultObjName = "Preset",
                    label = "Presets [Beam]",
                    shortLabel = "BEM",
                    subPoolLabel = "Beam",
                    getPoolObject = function(____, parent)
                        local ____parent_15 = parent
                        if ____parent_15 == nil then
                            ____parent_15 = DataPool()
                        end
                        return ____parent_15.PresetPools.Beam
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 5,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.Focus",
                    poolDefaultObjName = "Preset",
                    label = "Presets [Focus]",
                    shortLabel = "FOC",
                    subPoolLabel = "Focus",
                    getPoolObject = function(____, parent)
                        local ____parent_16 = parent
                        if ____parent_16 == nil then
                            ____parent_16 = DataPool()
                        end
                        return ____parent_16.PresetPools.Focus
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 6,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.Control",
                    poolDefaultObjName = "Preset",
                    label = "Presets [Control]",
                    shortLabel = "CTL",
                    subPoolLabel = "Control",
                    getPoolObject = function(____, parent)
                        local ____parent_17 = parent
                        if ____parent_17 == nil then
                            ____parent_17 = DataPool()
                        end
                        return ____parent_17.PresetPools.Control
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 7,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.Shapers",
                    poolDefaultObjName = "Preset",
                    label = "Presets [Shapers]",
                    shortLabel = "SHP",
                    subPoolLabel = "Shapers",
                    getPoolObject = function(____, parent)
                        local ____parent_18 = parent
                        if ____parent_18 == nil then
                            ____parent_18 = DataPool()
                        end
                        return ____parent_18.PresetPools.Shapers
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 8,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.Video",
                    poolDefaultObjName = "Preset",
                    label = "Presets [Video]",
                    shortLabel = "VID",
                    subPoolLabel = "Video",
                    getPoolObject = function(____, parent)
                        local ____parent_19 = parent
                        if ____parent_19 == nil then
                            ____parent_19 = DataPool()
                        end
                        return ____parent_19.PresetPools.Video
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 9,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.All 1",
                    poolDefaultObjName = "Preset",
                    label = "Presets [All 1]",
                    shortLabel = "AL1",
                    subPoolLabel = "All 1",
                    getPoolObject = function(____, parent)
                        local ____parent_20 = parent
                        if ____parent_20 == nil then
                            ____parent_20 = DataPool()
                        end
                        return ____parent_20.PresetPools["All 1"]
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 21,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.All 2",
                    poolDefaultObjName = "Preset",
                    label = "Presets [All 2]",
                    shortLabel = "AL2",
                    subPoolLabel = "All 2",
                    getPoolObject = function(____, parent)
                        local ____parent_21 = parent
                        if ____parent_21 == nil then
                            ____parent_21 = DataPool()
                        end
                        return ____parent_21.PresetPools["All 2"]
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 22,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.All 3",
                    poolDefaultObjName = "Preset",
                    label = "Presets [All 3]",
                    shortLabel = "AL3",
                    subPoolLabel = "All 3",
                    getPoolObject = function(____, parent)
                        local ____parent_22 = parent
                        if ____parent_22 == nil then
                            ____parent_22 = DataPool()
                        end
                        return ____parent_22.PresetPools["All 3"]
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 23,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.All 4",
                    poolDefaultObjName = "Preset",
                    label = "Presets [All 4]",
                    shortLabel = "AL4",
                    subPoolLabel = "All 4",
                    getPoolObject = function(____, parent)
                        local ____parent_23 = parent
                        if ____parent_23 == nil then
                            ____parent_23 = DataPool()
                        end
                        return ____parent_23.PresetPools["All 4"]
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 24,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Presets.All 5",
                    poolDefaultObjName = "Preset",
                    label = "Presets [All 5]",
                    shortLabel = "AL5",
                    subPoolLabel = "All 5",
                    getPoolObject = function(____, parent)
                        local ____parent_24 = parent
                        if ____parent_24 == nil then
                            ____parent_24 = DataPool()
                        end
                        return ____parent_24.PresetPools["All 5"]
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Preset",
                    subPoolIndex = 25,
                    windowType = "WindowPresetPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "RenderQualities",
                    poolDefaultObjName = "RenderQuality",
                    label = "Render Qualities",
                    shortLabel = "RnQ",
                    getPoolObject = function(____, parent)
                        local ____parent_25 = parent
                        if ____parent_25 == nil then
                            ____parent_25 = CurrentProfile()
                        end
                        return ____parent_25.RenderQualities
                    end,
                    getDefaultParent = function() return CurrentProfile() end,
                    keyword = "RenderQuality",
                    windowType = "WindowRenderQualityPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Scribbles",
                    poolDefaultObjName = "Scribble",
                    label = "Scribbles",
                    shortLabel = "Scb",
                    getPoolObject = function()
                        return Root().ShowData.Scribbles
                    end,
                    getDefaultParent = function() return Root().ShowData end,
                    keyword = "Scribble",
                    windowType = "WindowScribblePool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Sequences",
                    poolDefaultObjName = "Sequence",
                    label = "Sequences",
                    shortLabel = "SEQ",
                    getPoolObject = function(____, parent)
                        local ____parent_26 = parent
                        if ____parent_26 == nil then
                            ____parent_26 = DataPool()
                        end
                        return ____parent_26.Sequences
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Sequence",
                    childKeyword = "Cue",
                    windowType = "WindowSequencePool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Sounds",
                    poolDefaultObjName = "Sounds",
                    label = "Sounds",
                    shortLabel = "Snd",
                    getPoolObject = function(____, parent)
                        return Root().ShowData.MediaPools.Sounds
                    end,
                    getDefaultParent = function()
                        return Root().ShowData.MediaPools
                    end,
                    keyword = "Sound",
                    windowType = "WindowSoundPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Symbols",
                    poolDefaultObjName = "Symbol",
                    label = "Symbols",
                    shortLabel = "GOB",
                    getPoolObject = function(____, parent)
                        return Root().ShowData.MediaPools.Symbols
                    end,
                    getDefaultParent = function()
                        return Root().ShowData.MediaPools
                    end,
                    keyword = "Symbol",
                    subPoolIndex = 2,
                    windowType = "WindowSymbolPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Timecodes",
                    poolDefaultObjName = "Timecodes",
                    label = "Timecodes",
                    shortLabel = "TCD",
                    getPoolObject = function(____, parent)
                        local ____parent_27 = parent
                        if ____parent_27 == nil then
                            ____parent_27 = DataPool()
                        end
                        return ____parent_27.Timecodes
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "Timecode",
                    windowType = "WindowTimecodePool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "TimecodeSlots",
                    poolDefaultObjName = "Timecodes",
                    label = "Timecode Slots",
                    shortLabel = "TCS",
                    getPoolObject = function()
                        return Root().TimecodeSlots
                    end,
                    getDefaultParent = function() return Root() end,
                    keyword = "TimecodeSlot",
                    windowType = "WindowTimecodeSlotPool",
                    maxObjects = ____exports.MAX_OBJECTS_160
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Users",
                    poolDefaultObjName = "Users",
                    label = "Users",
                    shortLabel = "Usr",
                    getPoolObject = function(____, parent)
                        return Root().ShowData.Users
                    end,
                    getDefaultParent = function() return Root().ShowData end,
                    keyword = "User",
                    windowType = "WindowUserPool",
                    maxObjects = ____exports.MAX_OBJECTS_SMALL_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Videos",
                    poolDefaultObjName = "Video",
                    label = "Videos",
                    shortLabel = "Vid",
                    getPoolObject = function(____, parent)
                        return Root().ShowData.MediaPools.Videos
                    end,
                    getDefaultParent = function()
                        return Root().ShowData.MediaPools
                    end,
                    keyword = "Video",
                    windowType = "WindowVideoPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Views",
                    poolDefaultObjName = "View",
                    label = "Views",
                    shortLabel = "VIW",
                    getPoolObject = function(____, parent)
                        local ____parent_28 = parent
                        if ____parent_28 == nil then
                            ____parent_28 = CurrentProfile()
                        end
                        return ____parent_28.Views
                    end,
                    getDefaultParent = function() return CurrentProfile() end,
                    keyword = "View",
                    windowType = "WindowViewPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            ),
            __TS__New(
                ____exports.PoolInfo,
                {
                    id = "Worlds",
                    poolDefaultObjName = "World",
                    label = "Worlds",
                    shortLabel = "WRD",
                    getPoolObject = function(____, parent)
                        local ____parent_29 = parent
                        if ____parent_29 == nil then
                            ____parent_29 = DataPool()
                        end
                        return ____parent_29.Worlds
                    end,
                    getDefaultParent = function() return DataPool() end,
                    keyword = "World",
                    windowType = "WindowWorldPool",
                    maxObjects = ____exports.MAX_OBJECTS_LARGE_POOL
                }
            )
        }
        local byId = __TS__ArrayReduce(
            all,
            function(____, poolsById, poolInfo)
                poolsById[poolInfo.id] = poolInfo
                return poolsById
            end,
            {}
        )
        function ____exports.MAPoolsInfo(self)
            local function byPresetFamily(self, presetFamily)
                return __TS__ArrayFind(
                    all,
                    function(____, p) return p.keyword == "Preset" and p.subPoolIndex == presetFamily end
                ).id
            end
            return {
                byId = function(____, poolId) return byId[poolId] end,
                byKeyword = function(____, keyword) return getPoolConfigByKeyword(nil, keyword, all) end,
                byPresetFamily = byPresetFamily,
                allPools = all
            }
        end

        return ____exports
    end,
    ["lib.ma_obj.HCue"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local getZeroBasedChildIndexByCueNumberOrName
        local ____MAUtils = require("lib.MAUtils")
        local buildMultiKeywordAddress = ____MAUtils.buildMultiKeywordAddress
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        function getZeroBasedChildIndexByCueNumberOrName(self, parent, cueNumberOrName)
            local children = parent:Children()
            if type(cueNumberOrName) == "string" then
                do
                    local i = -1
                    while i < #children do
                        local obj = children[i + 1]
                        if obj ~= nil and obj.name == cueNumberOrName then
                            return i
                        end
                        i = i + 1
                    end
                end
            else
                do
                    local i = -1
                    while i < #children do
                        local obj = children[i + 1]
                        if obj ~= nil and obj.no == cueNumberOrName * 1000 then
                            return i
                        end
                        i = i + 1
                    end
                end
            end
            return nil
        end

        ____exports.HCue = __TS__Class()
        local HCue = ____exports.HCue
        HCue.name = "HCue"
        __TS__ClassExtends(HCue, HObject)
        function HCue.prototype.____constructor(self, seqNumberOrName, cueNumberOrName, context)
            self.cueNumberOrName = cueNumberOrName
            local addr = buildMultiKeywordAddress(
                nil,
                "Sequence",
                seqNumberOrName,
                "Cue",
                cueNumberOrName
            )
            local function _getParent()
                return DataPool().Sequences[seqNumberOrName]
            end
            HObject.prototype.____constructor(
                self,
                addr,
                cueNumberOrName,
                {
                    context = context,
                    _getParent = _getParent,
                    _getObj = function()
                        local seq = _getParent(nil)
                        if seq ~= nil then
                            local childIndex = getZeroBasedChildIndexByCueNumberOrName(nil, seq, cueNumberOrName)
                            if childIndex ~= nil then
                                return seq:Children()[childIndex + 1]
                            end
                        end
                        return nil
                    end
                }
            )
        end

        function HCue.prototype.getCueNumber(self)
            return self:getObj().no / 1000
        end

        function HCue.prototype.getAppearance(self)
            local appearanceObj = self:getObj():Children()[1].appearance
            local ____temp_0
            if appearanceObj == nil then
                ____temp_0 = nil
            else
                ____temp_0 = self.context.of:HAppearance(appearanceObj.index)
            end
            return ____temp_0
        end

        function HCue.prototype.setAppearance(self, appearance)
            if appearance == nil then
                self._cmd(("Set  " .. self.addr) .. " Part 0 Property Appearance None")
            else
                appearance:assignTo(self)
            end
        end

        function HCue.prototype.setLabel(self, label)
            self._cmd(((("Label " .. self.addr) .. " \"") .. label) .. "\"")
            return self
        end

        function HCue.prototype.setCommand(self, command)
            self._cmd(((("Set " .. self.addr) .. " command='") .. command) .. "'")
            return self
        end

        function HCue.prototype.load(self)
            self._cmd("Load " .. self.addr)
        end

        function HCue.prototype.go(self)
            self._cmd("Go " .. self.addr)
        end

        function HCue.prototype.delete(self)
            if self:exists() then
                if self:isExecModeCmdLine() then
                    self._cmd(("Delete " .. self.addr) .. " /nc")
                else
                    local parent = self:getObj():Parent()
                    local childIndex = getZeroBasedChildIndexByCueNumberOrName(nil, parent, self.indexOrName)
                    if childIndex == nil then
                        error(self.log:msg("delete(): could not find cue with indexOrName =  " ..
                        tostring(self.indexOrName)))
                    else
                        parent:Remove(childIndex + 1)
                    end
                end
            end
            return self
        end

        function HCue.prototype.store(self, options)
            local ____options_label_1 = options
            if ____options_label_1 ~= nil then
                ____options_label_1 = ____options_label_1.label
            end
            local label = ____options_label_1
            if self:isExecModeCmdLine() then
                return HObject.prototype.store(self, options)
            else
                error("store(): Cue store not supported in direct LUA mode")
            end
        end

        return ____exports
    end,
    ["lib.DisplayUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        --- Get the window area size in cells.
        -- More percisly, it return the size in whole-cells that fit in the screen.
        -- (Meaning that there could be 0.5 a cell extra)
        --
        -- This takes into consideration wether the cmdBar, viewBar, encoderBVar or cmdLineBar are shown or not,
        -- and also works for different scaleRatios.
        local function getWindowAreaSize(self, displayHandle)
            local rows = displayHandle[1]:Children()
            local columns = displayHandle[2]:Children()
            local windowAreaSizePx = {
                w = columns[2]:Get("REALSIZE"),
                h = rows[1]:Get("REALSIZE") + rows[2]:Get("REALSIZE")
            }
            return {
                w = math.floor(windowAreaSizePx.w / 100),
                h = math.floor(windowAreaSizePx.h / 100)
            }
        end
        ____exports.DisplayUtils = { getWindowAreaSize = getWindowAreaSize }
        return ____exports
    end,
    ["lib.ma_obj.HDisplay"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____DisplayUtils = require("lib.DisplayUtils")
        local DisplayUtils = ____DisplayUtils.DisplayUtils
        local ____HBasicObject = require("lib.ma_obj.HBasicObject")
        local HBasicObject = ____HBasicObject.HBasicObject
        local HDisplay = __TS__Class()
        HDisplay.name = "HDisplay"
        __TS__ClassExtends(HDisplay, HBasicObject)
        function HDisplay.prototype.____constructor(self, screenNumber, context)
            HBasicObject.prototype.____constructor(
                self,
                {
                    context = context,
                    _getObj = function() return GetDisplayByIndex(screenNumber) end
                }
            )
            self.screenNumber = screenNumber
        end

        function HDisplay.prototype.getWindowAreaSize(self)
            return DisplayUtils:getWindowAreaSize(self:getObj())
        end

        function HDisplay.prototype.exists(self)
            return self:_getObj() ~= nil
        end

        ____exports.HDisplay = HDisplay
        return ____exports
    end,
    ["lib.ma_obj.HSequence"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__New = ____lualib.__TS__New
        local __TS__ArrayFindIndex = ____lualib.__TS__ArrayFindIndex
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local ____HCue = require("lib.ma_obj.HCue")
        local HCue = ____HCue.HCue
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local ____common = require("lib.ma_obj.common")
        local ObjCache = ____common.ObjCache
        local HSequenceMAPropTypes = { restartMode = "string" }
        --- The CueZero and OffCue
        local NUM_OF_INTERNAL_CUES = 2
        ____exports.HSequence = __TS__Class()
        local HSequence = ____exports.HSequence
        HSequence.name = "HSequence"
        __TS__ClassExtends(HSequence, HObject)
        function HSequence.prototype.____constructor(self, idOrName, context)
            local addr = buildAddress(nil, "Sequence", idOrName)
            HObject.prototype.____constructor(
                self,
                addr,
                idOrName,
                {
                    context = context,
                    _objCache = ObjCache(
                        nil,
                        DataPool().Sequences,
                        idOrName
                    )
                }
            )
        end

        function HSequence.prototype.getMAPropTypes(self)
            return HSequenceMAPropTypes
        end

        function HSequence.prototype.store(self, options)
            local ____options_0 = options
            local label = ____options_0.label
            local optionsMode = ____options_0.mode
            local labelPart = label == nil and "" or ("\"" .. label) .. "\""
            local mode = optionsMode == nil and "CreateSecondCue" or optionsMode
            self._cmd((((("Store " .. self.addr) .. " ") .. labelPart) .. " /") .. mode)
            return self
        end

        function HSequence.prototype.delete(self)
            return HObject.prototype.delete(self)
        end

        function HSequence.prototype.storeEmpty(self)
            if self:exists() then
                error(("storeEmpty(): sequence " .. tostring(self.indexOrName)) .. " already exists")
            end
            self._cmd(("Store " .. self.addr) .. " Cue \"\" /nc")
            return self
        end

        function HSequence.prototype.setLocked(self, locked)
            self._cmd((("Set " .. self.addr) .. " \"lock\" ") .. (locked and "true" or "false"))
        end

        function HSequence.prototype.getCue(self, cueNumberOrName)
            return __TS__New(HCue, self.indexOrName, cueNumberOrName, self.context)
        end

        function HSequence.prototype.getOffCue(self)
            return __TS__New(HCue, self.indexOrName, "OffCue", self.context)
        end

        function HSequence.prototype.storeCue(self, cueNumber, options)
            local ____temp_5
            local ____options_label_1 = options
            if ____options_label_1 ~= nil then
                ____options_label_1 = ____options_label_1.label
            end
            if ____options_label_1 == nil then
                ____temp_5 = ""
            else
                local ____options_label_3 = options
                if ____options_label_3 ~= nil then
                    ____options_label_3 = ____options_label_3.label
                end
                ____temp_5 = ("\"" .. ____options_label_3) .. "\""
            end
            local labelPart = ____temp_5
            local ____options_mode_6 = options
            if ____options_mode_6 ~= nil then
                ____options_mode_6 = ____options_mode_6.mode
            end
            local mode = ____options_mode_6 == nil and "Merge" or options.mode
            local cueAddr = (self.addr .. " Cue ") .. tostring(cueNumber)
            self._cmd((((("Store " .. cueAddr) .. " ") .. labelPart) .. " /") .. mode)
            return __TS__New(HCue, self.indexOrName, cueNumber, self.context)
        end

        function HSequence.prototype.setOffWhenOverride(self, value)
            self._cmd((("Set " .. self.addr) .. " \"offwhenoverridden\" ") .. (value and "true" or "false"))
            return self
        end

        function HSequence.prototype.getNumOfCues(self)
            return self:getObj():Count() - 2
        end

        function HSequence.prototype.getCues(self)
            local children = self:getObj():Children()
            local cues = {}
            do
                local childIndex = 2
                while childIndex < #children do
                    local cue = children[childIndex + 1]
                    cues[#cues + 1] = __TS__New(HCue, self.indexOrName, cue.no / 1000, self.context)
                    childIndex = childIndex + 1
                end
            end
            return cues
        end

        function HSequence.prototype.getActiveCue(self)
            local curChild = self:getObj():CurrentChild()
            local ____temp_8
            if curChild == nil then
                ____temp_8 = nil
            else
                ____temp_8 = __TS__New(HCue, self.indexOrName, curChild.index, self.context)
            end
            return ____temp_8
        end

        function HSequence.prototype.getActiveCueChildIndex(self)
            local seqObj = self:getObj()
            local activeChild = seqObj:CurrentChild()
            if activeChild == nil then
                return nil
            end
            return __TS__ArrayFindIndex(
                seqObj:Children(),
                function(____, c) return c == activeChild end
            )
        end

        function HSequence.prototype.getActiveCueOrdinal(self)
            local seqObj = self:getObj()
            local activeChild = seqObj:CurrentChild()
            if activeChild == nil then
                return nil
            end
            return __TS__ArrayFindIndex(
                seqObj:Children(),
                function(____, c) return c == activeChild end
            ) - NUM_OF_INTERNAL_CUES + 1
        end

        function HSequence.prototype.getFaderValue(self, token, index)
            return self:getObj():GetFader({ token = token, index = index })
        end

        function HSequence.prototype.isActive(self)
            return self:exists() and self:getActiveCue() ~= nil
        end

        function HSequence.prototype.off(self, options)
            local ____options_fadeSec_9 = options
            if ____options_fadeSec_9 ~= nil then
                ____options_fadeSec_9 = ____options_fadeSec_9.fadeSec
            end
            local fadePart = ____options_fadeSec_9 == nil and "" or "fade " .. tostring(options.fadeSec)
            self._cmd((("Off " .. self.addr) .. " ") .. fadePart)
            return self
        end

        function HSequence.prototype.deleteAllCues(self)
            self._cmd(("Delete " .. self.addr) .. " Cue 1 Thru /nc")
        end

        function HSequence.prototype.clone(self, targetId)
            self._cmd(((("Copy " .. self.addr) .. " At Seq ") .. tostring(targetId)) .. " /o")
            return __TS__New(____exports.HSequence, targetId, self.context)
        end

        return ____exports
    end,
    ["lib.ma_obj.HExecutor"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local Error = ____lualib.Error
        local RangeError = ____lualib.RangeError
        local ReferenceError = ____lualib.ReferenceError
        local SyntaxError = ____lualib.SyntaxError
        local TypeError = ____lualib.TypeError
        local URIError = ____lualib.URIError
        local __TS__New = ____lualib.__TS__New
        local __TS__ParseInt = ____lualib.__TS__ParseInt
        local __TS__StringSplit = ____lualib.__TS__StringSplit
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local faderModeToKeyword
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local getChildByIndex = ____MAUtils.getChildByIndex
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local ____HSequence = require("lib.ma_obj.HSequence")
        local HSequence = ____HSequence.HSequence
        function ____exports.describeExecId(self, execId)
            return ((("[" .. tostring(execId.page)) .. ".") .. tostring(execId.index)) .. "]"
        end

        function ____exports.parseExecId(self, id)
            local numberParts = __TS__ArrayMap(
                __TS__StringSplit(id, "."),
                function(____, s) return __TS__ParseInt(s) end
            )
            return { page = numberParts[1], index = numberParts[2] }
        end

        local HExecutor = __TS__Class()
        HExecutor.name = "HExecutor"
        __TS__ClassExtends(HExecutor, HObject)
        function HExecutor.prototype.____constructor(self, execId, context)
            local _id = type(execId) == "string" and ____exports.parseExecId(nil, execId) or execId
            local addr = _id.page == nil and buildAddress(nil, "Exec", _id.index) or
            buildAddress(nil, "Page", _id.page, _id.index)
            local function _getObj()
                if _id.page == nil then
                    local currentPageIndex = 1
                    local pageObj = getChildByIndex(
                        nil,
                        DataPool().Pages,
                        currentPageIndex
                    )
                    return getChildByIndex(nil, pageObj, _id.index)
                else
                    local pageObj = getChildByIndex(
                        nil,
                        DataPool().Pages,
                        _id.page
                    )
                    if pageObj == nil then
                        error(
                            __TS__New(Error, "Object not found"),
                            0
                        )
                    end
                    return getChildByIndex(nil, pageObj, _id.index)
                end
            end
            HObject.prototype.____constructor(self, addr, _id.index, { context = context, _getObj = _getObj })
            self.execId = _id
        end

        function HExecutor.prototype.isAssigned(self)
            local obj = self:getObj()
            return self:getObj():Get("OBJECT") ~= nil
        end

        function HExecutor.prototype.isTargetSequence(self)
            return self:getObj():Get("OBJECT"):GetClass() == "Sequence"
        end

        function HExecutor.prototype.getTargetSequence(self)
            return __TS__New(
                HSequence,
                self:getObj():Get("OBJECT").index,
                self.context
            )
        end

        function HExecutor.prototype.setFaderMode(self, mode)
            self._cmd((("Assign " .. faderModeToKeyword[mode]) .. " At ") .. self.addr)
            return self
        end

        function HExecutor.prototype.setKey(self, key)
            self._cmd((("Assign " .. key) .. " At ") .. self.addr)
            return self
        end

        function HExecutor.prototype.getFaderValue(self)
            return self:getObj():GetFader({})
        end

        function HExecutor.prototype.setFaderValue(self, value)
            return self:getObj():SetFader({ value = value })
        end

        function HExecutor.prototype.describe(self)
            return ____exports.describeExecId(nil, self.execId)
        end

        ____exports.HExecutor = HExecutor
        faderModeToKeyword = { Master = "FaderMaster", Temp = "FaderTemp" }
        local MAX_EXEC_COLUMN_INDEX = 85
        function ____exports.nextEmptyExec(self, startExecId, options)
            local index = startExecId.index
            local colmnIndex = index % 100
            repeat
                do
                    local execId = { page = startExecId.page, index = index }
                    if not __TS__New(HExecutor, execId, options):exists() then
                        return execId
                    end
                    index = index + 1
                end
            until not (index % 100 < MAX_EXEC_COLUMN_INDEX)
            return -1
        end

        return ____exports
    end,
    ["lib.ma_obj.HGroup"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local fromAddr = ____MAUtils.fromAddr
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local HGroup = __TS__Class()
        HGroup.name = "HGroup"
        __TS__ClassExtends(HGroup, HObject)
        function HGroup.prototype.____constructor(self, id, context)
            local addr = buildAddress(nil, "Group", id)
            HObject.prototype.____constructor(
                self,
                addr,
                id,
                {
                    context = context,
                    _getObj = function() return fromAddr(nil, addr) end
                }
            )
        end

        function HGroup.prototype.at(self, preset)
            self._cmd((self.addr .. " At ") .. preset.addr)
        end

        ____exports.HGroup = HGroup
        return ____exports
    end,
    ["lib.ma_obj.HMacroLine"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local getChildByIndex = ____MAUtils.getChildByIndex
        local getChildByNameOrIndex = ____MAUtils.getChildByNameOrIndex
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local HMacroLineMAPropTypes = { command = "string", name = "string", enabled = "boolean" }
        ____exports.HMacroLine = __TS__Class()
        local HMacroLine = ____exports.HMacroLine
        HMacroLine.name = "HMacroLine"
        __TS__ClassExtends(HMacroLine, HObject)
        function HMacroLine.prototype.____constructor(self, macroId, lineNumber, context)
            HObject.prototype.____constructor(
                self,
                buildAddress(nil, "Macro", macroId, lineNumber),
                lineNumber,
                {
                    context = context,
                    _getObj = function()
                        local macroObj = getChildByNameOrIndex(
                            nil,
                            DataPool().Macros,
                            macroId
                        )
                        if macroObj == nil then
                            return nil
                        end
                        return getChildByIndex(nil, macroObj, lineNumber)
                    end,
                    _getParent = function()
                        return getChildByNameOrIndex(
                            nil,
                            DataPool().Macros,
                            macroId
                        )
                    end
                }
            )
            self.macroId = macroId
            self.lineNumber = lineNumber
        end

        function HMacroLine.prototype.getMAPropTypes(self)
            return HMacroLineMAPropTypes
        end

        return ____exports
    end,
    ["lib.ma_obj.HMacro"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local fromAddr = ____MAUtils.fromAddr
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local ____common = require("lib.ma_obj.common")
        local setAppearance = ____common.setAppearance
        local ____HMacroLine = require("lib.ma_obj.HMacroLine")
        local HMacroLine = ____HMacroLine.HMacroLine
        local HMacro = __TS__Class()
        HMacro.name = "HMacro"
        __TS__ClassExtends(HMacro, HObject)
        function HMacro.prototype.____constructor(self, id, context)
            local addr = buildAddress(nil, "Macro", id)
            HObject.prototype.____constructor(
                self,
                addr,
                id,
                {
                    context = context,
                    _getObj = function() return fromAddr(nil, addr) end,
                    _getParent = function() return DataPool().Macros end
                }
            )
        end

        function HMacro.prototype.setLines(self, macroLines)
            self:deleteAllChildren()
            for ____, line in ipairs(macroLines) do
                local macroLine = self:addLine()
                macroLine:setProps(line)
            end
            return self
        end

        function HMacro.prototype.addLine(self)
            local thisObj = self:getObj()
            if self:isExecModeCmdLine() then
                local lineCount = thisObj:Count()
                if self.context == nil then
                    return __TS__New(HMacroLine, self.indexOrName, lineCount + 1, self.context):store()
                else
                    return self.context.of:HMacroLine(self.indexOrName, lineCount + 1):store()
                end
            else
                local child = thisObj:Append("MacroLine")
                return __TS__New(HMacroLine, self.indexOrName, child.index, self.context)
            end
        end

        function HMacro.prototype.deleteAllLines(self)
            if self:exists() then
                self._cmd(("Delete " .. self.addr) .. ".1 Thru /nc")
            end
            return self
        end

        function HMacro.prototype.appearance(self, appearance)
            setAppearance(nil, self, appearance)
            return self
        end

        ____exports.HMacro = HMacro
        return ____exports
    end,
    ["lib.ma_obj.HLayoutElement"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local ____common = require("lib.ma_obj.common")
        local ObjCache = ____common.ObjCache
        local setAppearance = ____common.setAppearance
        local HLayoutElementMAPropTypes = {
            borderSize = "number",
            borderColor = "color",
            customtext = "string",
            fontsize = "string",
            name = "string",
            paddingTop = "number",
            paddingBottom = "number",
            paddingRight = "number",
            paddingLeft = "number",
            posx = "number",
            posy = "number",
            positionW = "number",
            positionH = "number",
            textColor = "color",
            textAlignmentH = "string",
            textAlignmentV = "string",
            visibilityBorder = "isVisible",
            visibilityObjectName = "isVisible",
            visibilityIndicatorBar = "isVisible",
            visibilityElement = "isVisible"
        }
        ____exports.HLayoutElement = __TS__Class()
        local HLayoutElement = ____exports.HLayoutElement
        HLayoutElement.name = "HLayoutElement"
        __TS__ClassExtends(HLayoutElement, HObject)
        function HLayoutElement.prototype.____constructor(self, parent, elementNumberOrName, context)
            HObject.prototype.____constructor(
                self,
                buildAddress(nil, "Layout", parent.indexOrName, elementNumberOrName),
                elementNumberOrName,
                {
                    context = context,
                    _objCache = ObjCache(
                        nil,
                        parent:getObj(),
                        elementNumberOrName
                    )
                }
            )
            self.parent = parent
            self.elementNumberOrName = elementNumberOrName
            self.elementNumberOrName = elementNumberOrName
        end

        function HLayoutElement.prototype._setProp(self, propName, value)
            self._cmd(((((("Set " .. self.addr) .. " ") .. propName) .. " '") .. tostring(value)) .. "'")
            return self
        end

        function HLayoutElement.prototype.getMAPropTypes(self)
            return HLayoutElementMAPropTypes
        end

        function HLayoutElement.prototype.getId(self)
            return self:getObj():Get("ID")
        end

        function HLayoutElement.prototype.getAsssignType(self)
            return self:getObj():Get("AssignType")
        end

        function HLayoutElement.prototype.setAssignedMacro(self, macro)
            macro:assignTo(self)
            return self
        end

        function HLayoutElement.prototype.posX(self, value)
            return self:_setProp("posx", value)
        end

        function HLayoutElement.prototype.posY(self, value)
            return self:_setProp("posy", value)
        end

        function HLayoutElement.prototype.width(self, value)
            return self:_setProp("positionW", value)
        end

        function HLayoutElement.prototype.height(self, value)
            return self:_setProp("positionH", value)
        end

        function HLayoutElement.prototype.customLabel(self, label)
            return self:_setProp("customtext", label)
        end

        function HLayoutElement.prototype.fontSize(self, size)
            return self:_setProp("fontsize", size)
        end

        function HLayoutElement.prototype.setName(self, name)
            return self:_setProp("name", name)
        end

        function HLayoutElement.prototype.visibilityObjectName(self, enabled)
            return self:_setProp("visibilityobjectname", enabled and "Visible" or "Hidden")
        end

        function HLayoutElement.prototype.visibilityIndicatorBar(self, enabled)
            return self:_setProp("visibilityIndicatorBar", enabled and "Visible" or "Hidden")
        end

        function HLayoutElement.prototype.visibilityBorder(self, enabled)
            return self:_setProp("visibilityBorder", enabled and "Visible" or "Hidden")
        end

        function HLayoutElement.prototype.appearance(self, appearance)
            if appearance == nil then
                return self
            else
                setAppearance(nil, self, appearance)
            end
            return self
        end

        function HLayoutElement.prototype.toLuaPropValue(self, propName, propValue)
            repeat
                local ____switch22 = propName
                local ____cond22 = ____switch22 == "visibilityBorder" or ____switch22 == "visibilityObjectName" or
                ____switch22 == "visibilityIndicatorBar" or ____switch22 == "visibilityElement"
                if ____cond22 then
                    do
                        return propValue == "Visible"
                    end
                end
                ____cond22 = ____cond22 or ____switch22 == "fontSize"
                if ____cond22 then
                    do
                        return tostring(propValue)
                    end
                end
                do
                    do
                        return propValue
                    end
                end
            until true
        end

        return ____exports
    end,
    ["lib.ma_obj.HLayout"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__New = ____lualib.__TS__New
        local __TS__ArraySort = ____lualib.__TS__ArraySort
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local ____HLayoutElement = require("lib.ma_obj.HLayoutElement")
        local HLayoutElement = ____HLayoutElement.HLayoutElement
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local ____common = require("lib.ma_obj.common")
        local ObjCache = ____common.ObjCache
        local HLayout = __TS__Class()
        HLayout.name = "HLayout"
        __TS__ClassExtends(HLayout, HObject)
        function HLayout.prototype.____constructor(self, id, context)
            local addr = buildAddress(nil, "Layout", id)
            HObject.prototype.____constructor(
                self,
                addr,
                id,
                {
                    context = context,
                    _objCache = ObjCache(
                        nil,
                        DataPool().Layouts,
                        id
                    )
                }
            )
        end

        function HLayout.prototype.delete(self)
            return HObject.prototype.delete(self)
        end

        function HLayout.prototype.getNumOfElements(self)
            return self:getObj():Count()
        end

        function HLayout.prototype.getAllElements(self)
            return __TS__ArrayMap(
                __TS__ArraySort(
                    self:getObj():Children(),
                    function(____, a, b)
                        return a.index - b.index
                    end
                ),
                function(____, c) return __TS__New(HLayoutElement, self, c.index, self.context) end
            )
        end

        function HLayout.prototype.getElementByName(self, name)
            local elm = self:getObj()[name]
            local ____temp_0
            if elm == nil then
                ____temp_0 = nil
            else
                ____temp_0 = __TS__New(HLayoutElement, self, elm.index, self.context)
            end
            return ____temp_0
        end

        function HLayout.prototype.getElementByNumber(self, elementNumber)
            return __TS__New(HLayoutElement, self, elementNumber, self.context)
        end

        function HLayout.prototype.addElement(self, hObj)
            local srcAddr = hObj.addr
            local thisObj = self:getObj()
            if self:isExecModeCmdLine() then
                self._cmd((("Assign " .. srcAddr) .. " At ") .. self.addr)
            else
                local elm = thisObj:Append(thisObj:GetChildClass())
                elm.object = hObj:getObj()
            end
            local elementNumber = thisObj:Count()
            return __TS__New(HLayoutElement, self, elementNumber, self.context)
        end

        function HLayout.prototype.addLabelElement(self)
            local nextElementNumber = self:getObj():Count() + 1
            if self:isExecModeCmdLine() then
                self._cmd((("Store " .. self.addr) .. ".") .. tostring(nextElementNumber))
            else
                local thisObj = self:getObj()
                thisObj:Append(thisObj:GetChildClass())
            end
            return __TS__New(HLayoutElement, self, nextElementNumber, self.context)
        end

        function HLayout.prototype.deleteAllElements(self)
            if self:getNumOfElements() > 0 then
                if self:isExecModeCmdLine() then
                    self._cmd(("Delete " .. self.addr) .. ".1 Thru")
                else
                    self:deleteAllChildren()
                end
            end
        end

        ____exports.HLayout = HLayout
        return ____exports
    end,
    ["lib.ma_obj.HMasterGrand"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        ____exports.HMasterGrand = __TS__Class()
        local HMasterGrand = ____exports.HMasterGrand
        HMasterGrand.name = "HMasterGrand"
        __TS__ClassExtends(HMasterGrand, HObject)
        function HMasterGrand.prototype.____constructor(self, ____type, context)
            HObject.prototype.____constructor(
                self,
                "Master 2." .. ____type,
                ____type,
                {
                    context = context,
                    _getObj = function()
                        return Root().ShowData.Masters.Grand[____type]
                    end
                }
            )
        end

        return ____exports
    end,
    ["lib.ma_obj.HMidiRemote"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local getChildByNameOrIndex = ____MAUtils.getChildByNameOrIndex
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local HMidiRemote = __TS__Class()
        HMidiRemote.name = "HMidiRemote"
        __TS__ClassExtends(HMidiRemote, HObject)
        function HMidiRemote.prototype.____constructor(self, id, context)
            HObject.prototype.____constructor(
                self,
                buildAddress(nil, "Remote", 2, id),
                id,
                {
                    context = context,
                    _getObj = function()
                        return getChildByNameOrIndex(
                            nil,
                            Root().ShowData.Remotes.MIDIRemotes,
                            id
                        )
                    end
                }
            )
            self.id = id
        end

        function HMidiRemote.prototype.setTarget(self, target)
            target:assignTo(self)
            return self
        end

        ____exports.HMidiRemote = HMidiRemote
        return ____exports
    end,
    ["lib.ma_obj.HMidiRemotes"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____HBasicObject = require("lib.ma_obj.HBasicObject")
        local HBasicObject = ____HBasicObject.HBasicObject
        local HMidiRemotes = __TS__Class()
        HMidiRemotes.name = "HMidiRemotes"
        __TS__ClassExtends(HMidiRemotes, HBasicObject)
        function HMidiRemotes.prototype.____constructor(self, context)
            HBasicObject.prototype.____constructor(
                self,
                {
                    context = context,
                    _getObj = function() return Root().ShowData.Remotes.MIDIRemotes end
                }
            )
        end

        function HMidiRemotes.prototype.addRemote(self)
            local nextRemoteId = self:getObj():Count() + 1
            return self.context.of:HMidiRemote(nextRemoteId):store()
        end

        function HMidiRemotes.prototype.getRemotes(self)
            return __TS__ArrayMap(
                self:getObj():Children(),
                function(____, child) return self.context.of:HMidiRemote(child.index) end
            )
        end

        ____exports.HMidiRemotes = HMidiRemotes
        return ____exports
    end,
    ["lib.ma_obj.HPage"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local fromAddr = ____MAUtils.fromAddr
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local HPage = __TS__Class()
        HPage.name = "HPage"
        __TS__ClassExtends(HPage, HObject)
        function HPage.prototype.____constructor(self, pageNumber, context)
            local addr = buildAddress(nil, "Page", pageNumber)
            HObject.prototype.____constructor(
                self,
                addr,
                pageNumber,
                {
                    context = context,
                    _getObj = function() return fromAddr(nil, addr) end
                }
            )
        end

        function HPage.prototype.getExecutor(self, index)
            return self.context.of:HExecutor({ page = self.index, index = index })
        end

        ____exports.HPage = HPage
        return ____exports
    end,
    ["lib.ma_obj.HPlugin"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local getChildByNameOrIndex = ____MAUtils.getChildByNameOrIndex
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local HPluginMAPropTypes = { version = "string" }
        ____exports.HPlugin = __TS__Class()
        local HPlugin = ____exports.HPlugin
        HPlugin.name = "HPlugin"
        __TS__ClassExtends(HPlugin, HObject)
        function HPlugin.prototype.____constructor(self, idOrName, context)
            HObject.prototype.____constructor(
                self,
                buildAddress(nil, "Plugin", idOrName),
                idOrName,
                {
                    context = context,
                    _getObj = function()
                        return getChildByNameOrIndex(
                            nil,
                            DataPool().Plugins,
                            idOrName
                        )
                    end
                }
            )
        end

        function HPlugin.prototype.getMAPropTypes(self)
            return HPluginMAPropTypes
        end

        return ____exports
    end,
    ["lib.RangeUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local function lastIndex(self, r)
            return r.start + r.size - 1
        end
        local function intersects(self, a, b)
            if a.start == b.start then
                return true
            elseif a.start < b.start then
                return lastIndex(nil, a) >= b.start
            else
                return lastIndex(nil, b) >= a.start
            end
        end
        --- Split range.
        --
        -- @param index a 1-based absolut index that will start the second range
        -- @return array of 2 ranges
        local function split(self, range, index)
            if index > range.size then
                error(((("RangeUtils.split():split index (" .. tostring(index)) .. ") exceeds range size (") .. tostring(range.size)) ..
                ")")
            end
            local firstPartSize = index - range.start
            return { { start = range.start, size = firstPartSize }, { start = index, size = range.size - firstPartSize } }
        end
        --- Get the leftover range if you trimmed the given range to be of the given trim-size.
        local function getLeftover(self, range, keepSize)
            if keepSize > range.size then
                error(((("RangeUtils.getLeftover(): trimSize (" .. tostring(keepSize)) .. ") exceeds range size (") .. tostring(range.size)) ..
                ")")
            end
            return { start = range.start + keepSize, size = range.size - keepSize }
        end
        local function describe(self, r)
            return (tostring(r.start) .. "-") .. tostring(r.start + r.size - 1)
        end
        local function isInRange(self, index, range)
            return index >= range.start and index < range.start + range.size
        end
        ____exports.RangeUtils = {
            intersects = intersects,
            isInRange = isInRange,
            describe = describe,
            lastIndex = lastIndex,
            split = split,
            getLeftover = getLeftover
        }
        return ____exports
    end,
    ["lib.PoolUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArraySort = ____lualib.__TS__ArraySort
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__ArrayReduce = ____lualib.__TS__ArrayReduce
        local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local doAreAllPoolsAvailable, isPoolRangeAvailable
        local ____MAPoolsInfo = require("lib.MAPoolsInfo")
        local MAPoolsInfo = ____MAPoolsInfo.MAPoolsInfo
        local ____MAUtils = require("lib.MAUtils")
        local getChildByIndex = ____MAUtils.getChildByIndex
        local ____Utils = require("lib.Utils")
        local objectValues = ____Utils.objectValues
        local ____RangeUtils = require("lib.RangeUtils")
        local RangeUtils = ____RangeUtils.RangeUtils
        function doAreAllPoolsAvailable(self, pools, range)
            for ____, pool in ipairs(objectValues(nil, pools)) do
                if not isPoolRangeAvailable(nil, pool, range) then
                    return false
                end
            end
            return true
        end

        function isPoolRangeAvailable(self, pool, range)
            local result = true
            local i
            do
                i = pool.curChildIndex
                while i < #pool.sortedUsedIndice do
                    local curObjId = pool.sortedUsedIndice[i + 1]
                    if curObjId >= range.start then
                        if curObjId < range.start + range.size then
                            result = false
                            pool.curChildIndex = i
                            return false
                        else
                            pool.curChildIndex = i
                            return true
                        end
                    end
                    i = i + 1
                end
            end
            pool.curChildIndex = i
            return true
        end

        ____exports.MAX_POOL_INDEX = 9999
        local DEFAULT_SECTOR_SIZE = 100
        local function findNextEmptyPoolIndex(self, pool, startIndex)
            local poolEntry = __TS__ArraySort(
                pool:Children(),
                function(____, a, b) return a.index - b.index end
            )
            local curIndex = startIndex
            for ____, entry in ipairs(poolEntry) do
                if entry.index > curIndex then
                    return curIndex
                elseif entry.index == curIndex then
                    curIndex = curIndex + 1
                end
            end
            return curIndex
        end
        local function isRangeEmpty(self, pool, range)
            local usedIndice = __TS__ArraySort(__TS__ArrayMap(
                pool:Children(),
                function(____, o) return o.index end
            ))
            for ____, usedIndex in ipairs(usedIndice) do
                if usedIndex >= range.start then
                    return usedIndex > RangeUtils:lastIndex(range)
                end
            end
            return true
        end
        local function getSortedUsedIndice(self, poolId)
            local poolInfo = MAPoolsInfo(nil):byId(poolId)
            return __TS__ArraySort(__TS__ArrayMap(
                poolInfo:getPoolObject():Children(),
                function(____, o) return o.index end
            ))
        end
        local function findEmptyRange(self, poolId, startingFrom, size)
            local poolInfo = MAPoolsInfo(nil):byId(poolId)
            local usedIndice = getSortedUsedIndice(nil, poolId)
            local start = startingFrom
            for ____, usedIndex in ipairs(usedIndice) do
                if usedIndex >= startingFrom then
                    local lastIndex = start + size - 1
                    if lastIndex > poolInfo.maxObjects then
                        return nil
                    else
                        if usedIndex > lastIndex then
                            return { start = start, size = size }
                        else
                            start = usedIndex + 1
                        end
                    end
                end
            end
            return { start = start, size = size }
        end
        local function createPoolUsages(self, poolIds)
            local poolsInfo = MAPoolsInfo(nil)
            local pools = __TS__ArrayReduce(
                poolIds,
                function(____, prev, poolId)
                    local poolInfo = poolsInfo:byId(poolId)
                    local poolObj = poolInfo:getPoolObject(poolInfo:getDefaultParent())
                    prev[poolId] = {
                        poolId = poolId,
                        curChildIndex = 1,
                        sortedUsedIndice = __TS__ArrayMap(
                            __TS__ArraySort(
                                poolObj:Children(),
                                function(____, a, b) return a.index - b.index end
                            ),
                            function(____, o) return o.index end
                        )
                    }
                    return prev
                end,
                {}
            )
            return pools
        end
        local function getSortedChildrenIndice(self, poolId)
            local poolInfo = MAPoolsInfo(nil):byId(poolId)
            local poolObj = poolInfo:getPoolObject(poolInfo:getDefaultParent())
            return __TS__ArrayMap(
                __TS__ArraySort(
                    poolObj:Children(),
                    function(____, a, b) return a.index - b.index end
                ),
                function(____, o) return o.index end
            )
        end
        local function findAvailableMultiPoolRange(self, poolIds, rangeSize, fromIndex)
            local pools = createPoolUsages(nil, poolIds)
            local step = 100
            local curRangeStart = fromIndex
            while curRangeStart < 10000 - step do
                local curRange = { start = curRangeStart, size = rangeSize }
                if doAreAllPoolsAvailable(nil, pools, curRange) then
                    return curRange
                end
                curRangeStart = curRangeStart + step
            end
            return nil
        end
        local function areAllPoolsAvailable(self, poolIds, range)
            local pools = createPoolUsages(nil, poolIds)
            return doAreAllPoolsAvailable(nil, pools, range)
        end
        --- Get the index of the last object in the given range
        --
        -- @returns undefined if the range doesn't include any objects
        local function getLastObjectInRange(self, poolId, range)
            local usedIndiceInRange = __TS__ArrayFilter(
                getSortedUsedIndice(nil, poolId),
                function(____, o) return RangeUtils:isInRange(o, range) end
            )
            return usedIndiceInRange[#usedIndiceInRange]
        end
        local function childExists(self, poolObj, index)
            return getChildByIndex(nil, poolObj, index) ~= nil
        end
        ____exports.PoolUtils = {
            getSortedChildrenIndice = getSortedChildrenIndice,
            areAllPoolsAvailable = areAllPoolsAvailable,
            childExists = childExists,
            findAvailableMultiPoolRange = findAvailableMultiPoolRange,
            findNextEmptyPoolIndex = findNextEmptyPoolIndex,
            findEmptyRange = findEmptyRange,
            getSortedUsedIndice = getSortedUsedIndice,
            getLastObjectInRange = getLastObjectInRange,
            isRangeEmpty = isRangeEmpty
        }
        return ____exports
    end,
    ["lib.ma_obj.HPool"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__ArraySort = ____lualib.__TS__ArraySort
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAPoolsInfo = require("lib.MAPoolsInfo")
        local MAPoolsInfo = ____MAPoolsInfo.MAPoolsInfo
        local ____PoolUtils = require("lib.PoolUtils")
        local PoolUtils = ____PoolUtils.PoolUtils
        local ____RangeUtils = require("lib.RangeUtils")
        local RangeUtils = ____RangeUtils.RangeUtils
        local ____HBasicObject = require("lib.ma_obj.HBasicObject")
        local HBasicObject = ____HBasicObject.HBasicObject
        ____exports.HPool = __TS__Class()
        local HPool = ____exports.HPool
        HPool.name = "HPool"
        __TS__ClassExtends(HPool, HBasicObject)
        function HPool.prototype.____constructor(self, poolId, context)
            self.poolId = poolId
            self.context = context
            local poolInfo = MAPoolsInfo(nil):byId(poolId)
            HBasicObject.prototype.____constructor(
                self,
                {
                    context = context,
                    _getObj = function() return poolInfo:getPoolObject() end
                }
            )
        end

        function HPool.prototype.deleteRange(self, range, options)
            local poolInfo = MAPoolsInfo(nil):byId(self.poolId)
            local ____self__cmdIndirect_4 = self._cmdIndirect
            local ____temp_2 = poolInfo:getAddress(range.start)
            local ____temp_3 = RangeUtils:lastIndex(range)
            local ____options_noConfirm_0 = options
            if ____options_noConfirm_0 ~= nil then
                ____options_noConfirm_0 = ____options_noConfirm_0.noConfirm
            end
            ____self__cmdIndirect_4((((("Delete " .. ____temp_2) .. " Thru ") .. tostring(____temp_3)) .. " ") ..
            (____options_noConfirm_0 == true and "/nc" or ""))
        end

        function HPool.prototype.moveObject(self, source, destination)
            local poolInfo = MAPoolsInfo(nil):byId(self.poolId)
            self._cmd((("Move " .. poolInfo:getAddress(source)) .. " At ") .. poolInfo:getAddress(destination))
        end

        function HPool.prototype.moveRange(self, sourceStart, sourceEnd, destination)
            local poolInfo = MAPoolsInfo(nil):byId(self.poolId)
            self._cmd((((("Move " .. poolInfo:getAddress(sourceStart)) .. " Thru ") .. tostring(sourceEnd)) .. " At ") ..
            poolInfo:getAddress(destination))
        end

        function HPool.prototype.isRangeEmpty(self, range)
            return PoolUtils:isRangeEmpty(
                self:getObj(),
                range
            )
        end

        function HPool.prototype.isRangeContainsLockedObjects(self, range)
            local sortedObjects = __TS__ArraySort(
                self:getObj():Children(),
                function(____, a, b) return a.index - b.index end
            )
            for ____, obj in ipairs(sortedObjects) do
                if obj.index >= range.start then
                    if obj.index > RangeUtils:lastIndex(range) then
                        return false
                    elseif obj:Get("lock") == "Yes" then
                        return true
                    end
                end
            end
            return false
        end

        return ____exports
    end,
    ["lib.ma_obj.Utils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.RGBAToHex(self, color)
            return ((string.format(
                "%x",
                math.floor(color.r * 2.55)
            ) .. string.format(
                "%x",
                math.floor(color.g * 2.55)
            )) .. string.format(
                "%x",
                math.floor(color.b * 2.55)
            )) .. string.format(
                "%x",
                math.floor(color.a * 2.55)
            )
        end

        function ____exports.getCurrentScreenConfiguration(self)
            return CurrentUser().SCREENCONFIG
        end

        return ____exports
    end,
    ["lib.ma_obj.HWindow"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SetDescriptor = ____lualib.__TS__SetDescriptor
        local __TS__StringEndsWith = ____lualib.__TS__StringEndsWith
        local __TS__ParseInt = ____lualib.__TS__ParseInt
        local __TS__StringSplit = ____lualib.__TS__StringSplit
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local intersects
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local ____common = require("lib.ma_obj.common")
        local setAppearance = ____common.setAppearance
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local ____Utils = require("lib.ma_obj.Utils")
        local getCurrentScreenConfiguration = ____Utils.getCurrentScreenConfiguration
        function ____exports.toHalfCellUnits(self, layout)
            return {
                unit = "half-cell",
                x = math.floor(layout.x * 2),
                y = math.floor(layout.y * 2),
                w = math.floor(layout.w * 2),
                h = math.floor(layout.h * 2)
            }
        end

        function ____exports.doLayoutsIntersect(self, a, b)
            local xIntersects = intersects(nil, { start = a.x, ["end"] = a.x + a.w - 1 },
                { start = b.x, ["end"] = b.x + b.w - 1 })
            local yIntersects = intersects(nil, { start = a.y, ["end"] = a.y + a.h - 1 },
                { start = b.y, ["end"] = b.y + b.h - 1 })
            return xIntersects and yIntersects
        end

        function intersects(self, a, b)
            if a.start == b.start then
                return true
            elseif a.start < b.start then
                return b.start <= a["end"]
            else
                return a.start <= b["end"]
            end
        end

        local HWindowMAPropTypes = {
            poolColor = "string",
            X = "number",
            Y = "number",
            W = "number",
            H = "number",
            minH = "number",
            minW = "number"
        }
        local HWindow = __TS__Class()
        HWindow.name = "HWindow"
        __TS__ClassExtends(HWindow, HObject)
        function HWindow.prototype.____constructor(self, screenNumber, windowNumber, context)
            self.screenNumber = screenNumber
            self.windowNumber = windowNumber
            assert(screenNumber > 0, "Invalid screenNumber")
            HObject.prototype.____constructor(
                self,
                buildAddress(nil, "ScreenContent", screenNumber, windowNumber),
                windowNumber,
                {
                    context = context,
                    _getObj = function()
                        local sc = getCurrentScreenConfiguration(nil).ScreenContents
                        ["ScreenContent " .. tostring(screenNumber)]
                        return sc:Children()[windowNumber]
                    end
                }
            )
        end

        __TS__SetDescriptor(
            HWindow.prototype,
            "windowScrollPositions",
            {
                get = function(self)
                    return self:getObj().WindowScrollPositions
                end
            },
            true
        )
        function HWindow.prototype.getMAPropTypes(self)
            return HWindowMAPropTypes
        end

        function HWindow.prototype.getType(self)
            return self.name
        end

        function HWindow.prototype.setWindowScrollV(self, scrollIndex)
            if self:isExecModeCmdLine() then
                local command = ((((("Set " .. self.addr) .. " \"ScrollV\" \"") .. tostring(scrollIndex)) .. ",") .. tostring(scrollIndex)) ..
                "\""
                self._cmd(command)
            else
                self.windowScrollPositions.scrollV = (tostring(scrollIndex) .. ",") .. tostring(scrollIndex)
            end
            return self
        end

        function HWindow.prototype.setWindowLayoutCellUnits(self, layout)
            self:setWindowLayout(____exports.toHalfCellUnits(nil, layout))
        end

        function HWindow.prototype.isNewLayoutValid(self, layout)
            for ____, window in ipairs(self.context.of:HScreenContent(self.screenNumber):getAllWindows()) do
                if window:getObj() ~= self:getObj() then
                    if ____exports.doLayoutsIntersect(
                            nil,
                            window:getWindowLayout(),
                            layout
                        ) then
                        return false
                    end
                end
            end
            return true
        end

        function HWindow.prototype.setWindowLayout(self, layout)
            if not self:isNewLayoutValid(layout) then
                error(self.log:msg("setWindowLayout(): invalid layout collids with other windows"))
            end
            self:setProps({
                X = math.floor(layout.x + 0.5),
                Y = math.floor(layout.y + 0.5),
                W = math.floor(layout.w + 0.5),
                H = math.floor(layout.h + 0.5)
            })
            if self:getWindowLayout().w ~= math.floor(layout.w + 0.5) then
                error("Could not set window width")
            end
            return self
        end

        function HWindow.prototype.getWindowLayout(self)
            local obj = self:getObj()
            return {
                unit = "half-cell",
                x = obj.x,
                y = obj.y,
                w = obj.w,
                h = obj.h
            }
        end

        function HWindow.prototype.getWindowLayoutCellUnits(self)
            local obj = self:getObj()
            return {
                unit = "cell",
                x = obj.x / 2,
                y = obj.y / 2,
                w = obj.w / 2,
                h = obj.h / 2
            }
        end

        function HWindow.prototype.isPoolWindow(self)
            return __TS__StringEndsWith(
                self:getType(),
                "Pool"
            )
        end

        function HWindow.prototype.appearance(self, appearance)
            setAppearance(nil, self, appearance)
            return self
        end

        ____exports.HWindow = HWindow
        function ____exports.windowLayoutsEqual(self, a, b)
            return a.x == b.x or a.y == b.y or a.w == b.w or a.h == b.h
        end

        function ____exports.parseWindowId(self, id)
            local numberParts = __TS__ArrayMap(
                __TS__StringSplit(id, "."),
                function(____, s) return __TS__ParseInt(s) end
            )
            return { screenNumber = numberParts[1], index = numberParts[2] }
        end

        return ____exports
    end,
    ["lib.ma_obj.Window.HWindowLayoutView"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SetDescriptor = ____lualib.__TS__SetDescriptor
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____HWindow = require("lib.ma_obj.HWindow")
        local HWindow = ____HWindow.HWindow
        local HWindowLayoutView = __TS__Class()
        HWindowLayoutView.name = "HWindowLayoutView"
        __TS__ClassExtends(HWindowLayoutView, HWindow)
        function HWindowLayoutView.prototype.____constructor(self, screenNumber, windowNumber, context)
            HWindow.prototype.____constructor(self, screenNumber, windowNumber, context)
            self.screenNumber = screenNumber
            self.windowNumber = windowNumber
            assert(self.name == "WindowLayoutView", "Window is not a WindowLayoutView. " .. self.addr)
        end

        __TS__SetDescriptor(
            HWindowLayoutView.prototype,
            "settings",
            {
                get = function(self)
                    return self:getObj().LayoutViewSettings
                end
            },
            true
        )
        function HWindowLayoutView.prototype.getLayoutIndex(self)
            return self:getObj().LayoutViewSettings:Get("Layout").index
        end

        function HWindowLayoutView.prototype.updateSettings(self, _settings)
            local ____settings_0 = _settings
            local layout = ____settings_0.layout
            local autoFit = ____settings_0.autoFit
            local canvasFitMode = ____settings_0.canvasFitMode
            local fitType = ____settings_0.fitType
            local showTitleBar = ____settings_0.showTitleBar
            local lockPosition = ____settings_0.lockPosition
            local paddingLeft = ____settings_0.paddingLeft
            local paddingRight = ____settings_0.paddingRight
            local paddingTop = ____settings_0.paddingTop
            local paddingBottom = ____settings_0.paddingBottom
            local layoutViewSettings = self.settings
            if layout ~= nil then
                layoutViewSettings:Set(
                    "Layout",
                    layout:getObj()
                )
            end
            if autoFit ~= nil then
                layoutViewSettings:Set("AutoFit", autoFit)
            end
            if canvasFitMode ~= nil then
                layoutViewSettings:Set("CanvasFitMode", canvasFitMode)
            end
            if fitType ~= nil then
                layoutViewSettings:Set("FitType", fitType)
            end
            if showTitleBar ~= nil and self:isSupported("ShowTitleBar") then
                layoutViewSettings:Set("ShowTitleBar", showTitleBar)
            end
            if lockPosition ~= nil then
                layoutViewSettings:Set("Lock", lockPosition)
            end
            if paddingLeft ~= nil then
                self.settings:Set("PaddingLeft", paddingBottom)
            end
            if paddingRight ~= nil then
                self.settings:Set("PaddingRight", paddingBottom)
            end
            if paddingTop ~= nil then
                self.settings:Set("PaddingTop", paddingBottom)
            end
            if paddingBottom ~= nil then
                self.settings:Set("PaddingBottom", paddingBottom)
            end
            return self
        end

        function HWindowLayoutView.prototype.isSupported(self, propName)
            return self.settings:Get("ShowTitleBar") ~= nil
        end

        ____exports.HWindowLayoutView = HWindowLayoutView
        return ____exports
    end,
    ["lib.ma_obj.HScreenContent"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local ____HWindow = require("lib.ma_obj.HWindow")
        local HWindow = ____HWindow.HWindow
        local toHalfCellUnits = ____HWindow.toHalfCellUnits
        local ____Utils = require("lib.ma_obj.Utils")
        local getCurrentScreenConfiguration = ____Utils.getCurrentScreenConfiguration
        local ____HWindowLayoutView = require("lib.ma_obj.Window.HWindowLayoutView")
        local HWindowLayoutView = ____HWindowLayoutView.HWindowLayoutView
        local DIRECT_MODE_ADD_WINDOW_ENABLED = false
        local HScreenContent = __TS__Class()
        HScreenContent.name = "HScreenContent"
        __TS__ClassExtends(HScreenContent, HObject)
        function HScreenContent.prototype.____constructor(self, screenNumber, context)
            HObject.prototype.____constructor(
                self,
                buildAddress(nil, "ScreenContent", screenNumber),
                screenNumber,
                {
                    context = context,
                    _getObj = function()
                        return getCurrentScreenConfiguration(nil).ScreenContents
                        ["ScreenContent " .. tostring(screenNumber)]
                    end
                }
            )
            self.screenNumber = screenNumber
        end

        function HScreenContent.getAllScreenContents(self, of)
            local screenContents = getCurrentScreenConfiguration(nil).ScreenContents
            return __TS__ArrayMap(
                screenContents:Children(),
                function(____, sc) return of:HScreenContent(sc.index) end
            )
        end

        function HScreenContent.prototype.addWindowLayoutViewIfPossible(self, options)
            local newWindow = self:addWindowIfPossible(__TS__ObjectAssign({ windowType = "WindowLayoutView" }, options))
            local ____temp_0
            if newWindow == nil then
                ____temp_0 = nil
            else
                ____temp_0 = __TS__New(HWindowLayoutView, self.screenNumber, newWindow.windowNumber, self.context)
            end
            return ____temp_0
        end

        function HScreenContent.prototype.addWindowLayoutView(self, options)
            local newWindow = self:addWindow(__TS__ObjectAssign({ windowType = "WindowLayoutView" }, options))
            return __TS__New(HWindowLayoutView, self.screenNumber, newWindow.windowNumber, self.context)
        end

        function HScreenContent.prototype.addWindowIfPossible(self, options)
            return self:doAddWindow(options, true)
        end

        function HScreenContent.prototype.addWindow(self, options)
            return self:doAddWindow(options, false)
        end

        function HScreenContent.prototype.doAddWindow(self, options, isFailable)
            local l = toHalfCellUnits(nil, options.layout)
            local numOfWindows = self:getObj():Count()
            local nextWindowNumber = numOfWindows + 1
            local presetPoolTypeProp = options.presetPoolType == nil and "" or
            "presetpooltype=" .. tostring(options.presetPoolType - 1)
            if self:isExecModeCmdLine() or not DIRECT_MODE_ADD_WINDOW_ENABLED then
                local err = self._cmdFailable((((((((((((((((("Store " .. self.addr) .. " \"") .. options.windowType) .. "\" minW=") .. 2) .. " minH=") .. 2) .. " x=") .. tostring(l.x)) .. " y=") .. tostring(l.y)) .. " w=") .. tostring(l.w)) .. " h=") .. tostring(l.h)) .. " ") ..
                presetPoolTypeProp)
                if err ~= nil then
                    if isFailable then
                        return nil
                    else
                        error("Error storing window: " .. err)
                    end
                end
            else
                local w = self:getObj():Append("ViewWidget")
                w.name = options.windowType
                w.nameAndApp = options.windowType
                w.display = self.screenNumber
                w.minW = 2
                w.minH = 2
                w.x = l.x
                w.y = l.y
                w.w = l.w
                w.h = l.h
                if options.presetPoolType ~= nil then
                    w.presetPoolType = options.presetPoolType - 1
                end
                if options.windowType == "WindowLayoutView" then
                    w:Create(1, "LayoutViewSettings")
                    w:Create(2, "WindowAppearance")
                    w:Create(3, "WindowScrollPositions")
                end
            end
            return __TS__New(HWindow, self.screenNumber, nextWindowNumber, self.context)
        end

        function HScreenContent.prototype.getWindow(self, windowNumber)
            return __TS__New(HWindow, self.screenNumber, windowNumber, self.context)
        end

        function HScreenContent.prototype.getLayoutViewWindow(self, windowNumber)
            return __TS__New(HWindowLayoutView, self.screenNumber, windowNumber, self.context)
        end

        function HScreenContent.prototype.isEmpty(self)
            return self:getObj():Count() == 0
        end

        function HScreenContent.prototype.getAllWindows(self)
            return __TS__ArrayMap(
                self:getObj():Children(),
                function(____, window) return __TS__New(HWindow, self.screenNumber, window.index, self.context) end
            )
        end

        function HScreenContent.prototype.deleteWindowsFrom(self, fromWindowNumber)
            if __TS__New(HWindow, self.screenNumber, fromWindowNumber, self.context):exists() then
                self._cmd(((("Delete " .. self.addr) .. ".") .. tostring(fromWindowNumber)) .. " thru")
            end
        end

        function HScreenContent.prototype.deleteAllWindows(self)
            if self:exists() then
                self._cmd(("Delete " .. self.addr) .. ".* /nc")
            else
                error(("deleteContent(): " .. self.addr) .. " doesn not exist")
            end
            return self
        end

        ____exports.HScreenContent = HScreenContent
        return ____exports
    end,
    ["lib.ma_obj.HView"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local fromAddr = ____MAUtils.fromAddr
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local HView = __TS__Class()
        HView.name = "HView"
        __TS__ClassExtends(HView, HObject)
        function HView.prototype.____constructor(self, id, context)
            local addr = buildAddress(nil, "View", id)
            HObject.prototype.____constructor(
                self,
                addr,
                id,
                {
                    context = context,
                    _getObj = function() return fromAddr(nil, addr) end
                }
            )
        end

        function HView.prototype.recall(self)
            self._cmd(self.addr)
            return self
        end

        function HView.prototype.store(self, options)
            local ____options_0 = options
            local label = ____options_0.label
            local screenNumbers = ____options_0.screenNumbers
            local labelPart = label and ("\"" .. label) .. "\"" or ""
            local screens = screenNumbers == nil and "" or ("/Screen \"" .. table.concat(screenNumbers, ",")) .. "\""
            self._cmd(((((("Store " .. self.addr) .. " ") .. labelPart) .. " ") .. screens) .. " /nc")
            if self:isExecModeDirectLua() then
                self.log:debug("HView.store() : DirectLua not implemented. Using CommandLine")
            end
            return self
        end

        function HView.prototype.getAppearance(self)
            local appearance = self:getObj():Get("Appearance")
            if appearance ~= nil then
                return self.context.of:HAppearance(appearance.index)
            end
            return nil
        end

        ____exports.HView = HView
        return ____exports
    end,
    ["lib.ma_obj.HViewButton"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAUtils = require("lib.MAUtils")
        local buildAddress = ____MAUtils.buildAddress
        local getChildByIndex = ____MAUtils.getChildByIndex
        local ____HObject = require("lib.ma_obj.HObject")
        local HObject = ____HObject.HObject
        local ____Utils = require("lib.ma_obj.Utils")
        local getCurrentScreenConfiguration = ____Utils.getCurrentScreenConfiguration
        local HViewButton = __TS__Class()
        HViewButton.name = "HViewButton"
        __TS__ClassExtends(HViewButton, HObject)
        function HViewButton.prototype.____constructor(self, screenNumber, id, context)
            HObject.prototype.____constructor(
                self,
                buildAddress(nil, "ViewButton", screenNumber, id),
                id,
                {
                    context = context,
                    _getObj = function()
                        local parent = getCurrentScreenConfiguration(nil)["ViewButtonScreens 2"]
                        ["ViewButtonScreen " .. tostring(screenNumber)]
                        return getChildByIndex(nil, parent, id)
                    end
                }
            )
            self.screenNumber = screenNumber
        end

        function HViewButton.prototype.getAssignedView(self)
            return self.context.of:HView(self:getObj():Get("Object").index)
        end

        ____exports.HViewButton = HViewButton
        return ____exports
    end,
    ["lib.ma_obj.HViewButtonScreen"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__New = ____lualib.__TS__New
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____HBasicObject = require("lib.ma_obj.HBasicObject")
        local HBasicObject = ____HBasicObject.HBasicObject
        local ____HViewButton = require("lib.ma_obj.HViewButton")
        local HViewButton = ____HViewButton.HViewButton
        local ____Utils = require("lib.ma_obj.Utils")
        local getCurrentScreenConfiguration = ____Utils.getCurrentScreenConfiguration
        local HViewButtonScreen = __TS__Class()
        HViewButtonScreen.name = "HViewButtonScreen"
        __TS__ClassExtends(HViewButtonScreen, HBasicObject)
        function HViewButtonScreen.prototype.____constructor(self, screenNumber, context)
            HBasicObject.prototype.____constructor(
                self,
                {
                    context = context,
                    _getObj = function()
                        return getCurrentScreenConfiguration(nil)["ViewButtonScreens 2"]
                        ["ViewButtonScreen " .. tostring(screenNumber)]
                    end
                }
            )
            self.screenNumber = screenNumber
        end

        function HViewButtonScreen.prototype.getViewButtons(self)
            return __TS__ArrayMap(
                self:getObj():Children(),
                function(____, child)
                    return __TS__New(HViewButton, self.screenNumber, child.index, self.context)
                end
            )
        end

        function HViewButtonScreen.getViewButtonScreens(self, objectFactory)
            return __TS__ArrayMap(
                getCurrentScreenConfiguration(nil)["ViewButtonScreens 2"]:Children(),
                function(____, child)
                    return objectFactory:HViewButtonScreen(child.index)
                end
            )
        end

        ____exports.HViewButtonScreen = HViewButtonScreen
        return ____exports
    end,
    ["lib.ma_obj.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        do
            local ____HAppearance = require("lib.ma_obj.HAppearance")
            local HAppearance = ____HAppearance.HAppearance
            ____exports.HAppearance = HAppearance
        end
        do
            local ____HCue = require("lib.ma_obj.HCue")
            local HCue = ____HCue.HCue
            ____exports.HCue = HCue
        end
        do
            local ____HDisplay = require("lib.ma_obj.HDisplay")
            local HDisplay = ____HDisplay.HDisplay
            ____exports.HDisplay = HDisplay
        end
        do
            local ____HExecutor = require("lib.ma_obj.HExecutor")
            local describeExecId = ____HExecutor.describeExecId
            local HExecutor = ____HExecutor.HExecutor
            local parseExecId = ____HExecutor.parseExecId
            ____exports.describeExecId = describeExecId
            ____exports.HExecutor = HExecutor
            ____exports.parseExecId = parseExecId
        end
        do
            local ____HGroup = require("lib.ma_obj.HGroup")
            local HGroup = ____HGroup.HGroup
            ____exports.HGroup = HGroup
        end
        do
            local ____HLayout = require("lib.ma_obj.HLayout")
            local HLayout = ____HLayout.HLayout
            ____exports.HLayout = HLayout
        end
        do
            local ____HLayoutElement = require("lib.ma_obj.HLayoutElement")
            local HLayoutElement = ____HLayoutElement.HLayoutElement
            ____exports.HLayoutElement = HLayoutElement
        end
        do
            local ____HMacro = require("lib.ma_obj.HMacro")
            local HMacro = ____HMacro.HMacro
            ____exports.HMacro = HMacro
        end
        do
            local ____HMacroLine = require("lib.ma_obj.HMacroLine")
            local HMacroLine = ____HMacroLine.HMacroLine
            ____exports.HMacroLine = HMacroLine
        end
        do
            local ____HMasterGrand = require("lib.ma_obj.HMasterGrand")
            local HMasterGrand = ____HMasterGrand.HMasterGrand
            ____exports.HMasterGrand = HMasterGrand
        end
        do
            local ____HMedia = require("lib.ma_obj.HMedia")
            local HMedia = ____HMedia.HMedia
            ____exports.HMedia = HMedia
        end
        do
            local ____HMidiRemote = require("lib.ma_obj.HMidiRemote")
            local HMidiRemote = ____HMidiRemote.HMidiRemote
            ____exports.HMidiRemote = HMidiRemote
        end
        do
            local ____HMidiRemotes = require("lib.ma_obj.HMidiRemotes")
            local HMidiRemotes = ____HMidiRemotes.HMidiRemotes
            ____exports.HMidiRemotes = HMidiRemotes
        end
        do
            local ____HPage = require("lib.ma_obj.HPage")
            local HPage = ____HPage.HPage
            ____exports.HPage = HPage
        end
        do
            local ____HPlugin = require("lib.ma_obj.HPlugin")
            local HPlugin = ____HPlugin.HPlugin
            ____exports.HPlugin = HPlugin
        end
        do
            local ____HPool = require("lib.ma_obj.HPool")
            local HPool = ____HPool.HPool
            ____exports.HPool = HPool
        end
        do
            local ____HPreset = require("lib.ma_obj.HPreset")
            local HPreset = ____HPreset.HPreset
            local PresetFamily = ____HPreset.PresetFamily
            ____exports.HPreset = HPreset
            ____exports.PresetFamily = PresetFamily
        end
        do
            local ____HScreenContent = require("lib.ma_obj.HScreenContent")
            local HScreenContent = ____HScreenContent.HScreenContent
            ____exports.HScreenContent = HScreenContent
        end
        do
            local ____HSequence = require("lib.ma_obj.HSequence")
            local HSequence = ____HSequence.HSequence
            ____exports.HSequence = HSequence
        end
        do
            local ____HView = require("lib.ma_obj.HView")
            local HView = ____HView.HView
            ____exports.HView = HView
        end
        do
            local ____HViewButton = require("lib.ma_obj.HViewButton")
            local HViewButton = ____HViewButton.HViewButton
            ____exports.HViewButton = HViewButton
        end
        do
            local ____HViewButtonScreen = require("lib.ma_obj.HViewButtonScreen")
            local HViewButtonScreen = ____HViewButtonScreen.HViewButtonScreen
            ____exports.HViewButtonScreen = HViewButtonScreen
        end
        do
            local ____HWindow = require("lib.ma_obj.HWindow")
            local HWindow = ____HWindow.HWindow
            ____exports.HWindow = HWindow
        end
        do
            local ____export = require("lib.ma_obj.types")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        return ____exports
    end,
    ["lib.ObjectFactory"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ma_obj = require("lib.ma_obj.index")
        local HAppearance = ____ma_obj.HAppearance
        local HDisplay = ____ma_obj.HDisplay
        local HExecutor = ____ma_obj.HExecutor
        local HGroup = ____ma_obj.HGroup
        local HLayout = ____ma_obj.HLayout
        local HMacro = ____ma_obj.HMacro
        local HMacroLine = ____ma_obj.HMacroLine
        local HMasterGrand = ____ma_obj.HMasterGrand
        local HMedia = ____ma_obj.HMedia
        local HMidiRemote = ____ma_obj.HMidiRemote
        local HMidiRemotes = ____ma_obj.HMidiRemotes
        local HPage = ____ma_obj.HPage
        local HPlugin = ____ma_obj.HPlugin
        local HPool = ____ma_obj.HPool
        local HPreset = ____ma_obj.HPreset
        local HScreenContent = ____ma_obj.HScreenContent
        local HSequence = ____ma_obj.HSequence
        local HView = ____ma_obj.HView
        local HViewButton = ____ma_obj.HViewButton
        local HViewButtonScreen = ____ma_obj.HViewButtonScreen
        local HWindow = ____ma_obj.HWindow
        local ____types = require("lib.ma_obj.types")
        local ExecMode = ____types.ExecMode
        local ____HWindowLayoutView = require("lib.ma_obj.Window.HWindowLayoutView")
        local HWindowLayoutView = ____HWindowLayoutView.HWindowLayoutView
        ____exports.ObjectFactory = __TS__Class()
        local ObjectFactory = ____exports.ObjectFactory
        ObjectFactory.name = "ObjectFactory"
        function ObjectFactory.prototype.____constructor(self, context)
            local ____context_undoBlock_0 = context
            if ____context_undoBlock_0 ~= nil then
                ____context_undoBlock_0 = ____context_undoBlock_0.undoBlock
            end
            local ____context_hookManager_2 = context
            if ____context_hookManager_2 ~= nil then
                ____context_hookManager_2 = ____context_hookManager_2.hookManager
            end
            local ____context_execMode_4 = context
            if ____context_execMode_4 ~= nil then
                ____context_execMode_4 = ____context_execMode_4.execMode
            end
            local ____temp_8 = ____context_execMode_4 or ExecMode.CmdLine
            local ____context_log_6 = context
            if ____context_log_6 ~= nil then
                ____context_log_6 = ____context_log_6.log
            end
            self.context = {
                undoBlock = ____context_undoBlock_0,
                hookManager = ____context_hookManager_2,
                of = self,
                execMode = ____temp_8,
                log = ____context_log_6
            }
        end

        function ObjectFactory.prototype.modeDirect(self)
            self.context.execMode = ExecMode.DirectLua
        end

        function ObjectFactory.prototype.duplicateDirectMode(self)
            local ____self_context_9 = self.context
            local undoBlock = ____self_context_9.undoBlock
            local hookManager = ____self_context_9.hookManager
            local execMode = ____self_context_9.execMode
            local log = ____self_context_9.log
            return __TS__New(____exports.ObjectFactory,
                { undoBlock = undoBlock, hookManager = hookManager, execMode = ExecMode.DirectLua, log = log })
        end

        function ObjectFactory.prototype.HAppearance(self, id)
            return __TS__New(HAppearance, id, self.context)
        end

        function ObjectFactory.prototype.HDisplay(self, screenNumber)
            return __TS__New(HDisplay, screenNumber, self.context)
        end

        function ObjectFactory.prototype.HExecutor(self, id)
            return __TS__New(HExecutor, id, self.context)
        end

        function ObjectFactory.prototype.HGroup(self, id)
            return __TS__New(HGroup, id, self.context)
        end

        function ObjectFactory.prototype.HLayout(self, id)
            return __TS__New(HLayout, id, self.context)
        end

        function ObjectFactory.prototype.HMacro(self, id)
            return __TS__New(HMacro, id, self.context)
        end

        function ObjectFactory.prototype.HMacroLine(self, macroId, lineNumber)
            return __TS__New(HMacroLine, macroId, lineNumber, self.context)
        end

        function ObjectFactory.prototype.HMasterGrand(self, ____type)
            return __TS__New(HMasterGrand, ____type, self.context)
        end

        function ObjectFactory.prototype.HMedia(self, mediaPool, id)
            return __TS__New(HMedia, mediaPool, id, self.context)
        end

        function ObjectFactory.prototype.HMidiRemotes(self)
            return __TS__New(HMidiRemotes, self.context)
        end

        function ObjectFactory.prototype.HMidiRemote(self, id)
            return __TS__New(HMidiRemote, id, self.context)
        end

        function ObjectFactory.prototype.HPage(self, id)
            return __TS__New(HPage, id, self.context)
        end

        function ObjectFactory.prototype.HPlugin(self, id)
            return __TS__New(HPlugin, id, self.context)
        end

        function ObjectFactory.prototype.HPool(self, poolId)
            return __TS__New(HPool, poolId, self.context)
        end

        function ObjectFactory.prototype.HPreset(self, presetFamily, id)
            return __TS__New(HPreset, presetFamily, id, self.context)
        end

        function ObjectFactory.prototype.HScreenContent(self, screenNumber)
            return __TS__New(HScreenContent, screenNumber, self.context)
        end

        function ObjectFactory.prototype.HSequence(self, id)
            return __TS__New(HSequence, id, self.context)
        end

        function ObjectFactory.prototype.HView(self, id)
            return __TS__New(HView, id, self.context)
        end

        function ObjectFactory.prototype.HViewButton(self, screenNumber, index)
            return __TS__New(HViewButton, screenNumber, index, self.context)
        end

        function ObjectFactory.prototype.HViewButtonScreen(self, screenNumber)
            return __TS__New(HViewButtonScreen, screenNumber, self.context)
        end

        function ObjectFactory.prototype.HWindow(self, screenNumber, windowNumber)
            return __TS__New(HWindow, screenNumber, windowNumber, self.context)
        end

        function ObjectFactory.prototype.HWindowLayoutView(self, screenNumber, windowNumber)
            return __TS__New(HWindowLayoutView, screenNumber, windowNumber, self.context)
        end

        ObjectFactory.noContext = __TS__New(____exports.ObjectFactory)
        return ____exports
    end,
    ["lib.DebugUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayIsArray = ____lualib.__TS__ArrayIsArray
        local __TS__ArrayJoin = ____lualib.__TS__ArrayJoin
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Logger = require("lib.Logger")
        local Logger = ____Logger.Logger
        local LogLevel = ____Logger.LogLevel
        local ____StringUtils = require("lib.StringUtils")
        local StringUtils = ____StringUtils.StringUtils
        local function objectKeys(self, t)
            local keys = {}
            for k, _v in pairs(t) do
                keys[#keys + 1] = k
            end
            return keys
        end
        local INDENT = "  "
        function ____exports.objToString(self, obj, indent, multiline)
            if indent == nil then
                indent = 0
            end
            if multiline == nil then
                multiline = true
            end
            if type(obj) == "table" then
                if __TS__ArrayIsArray(obj) then
                    return ("[" .. __TS__ArrayJoin(obj, ",")) .. "]"
                else
                    local s = ""
                    if #objectKeys(nil, obj) == 0 then
                        s = "{}"
                    else
                        local keyPrefix1 = StringUtils["repeat"](StringUtils, INDENT, indent + 1)
                        local keyPrefix2 = StringUtils["repeat"](StringUtils, INDENT, indent + 2)
                        s = s .. "\n"
                        for k, v in pairs(obj) do
                            local keyStr
                            if type(k) ~= "number" then
                                keyStr = ("\"" .. tostring(k)) .. "\""
                            end
                            s = s ..
                            (((keyPrefix2 .. tostring(keyStr)) .. " = ") .. ____exports.objToString(nil, v, indent + 2)) ..
                            "\n"
                        end
                    end
                    return s
                end
            else
                return type(obj) == "string" and ("\"" .. tostring(obj)) .. "\"" or tostring(obj)
            end
        end

        ____exports.DebugUtils = { objToString = ____exports.objToString }
        --- Temporary logger with performance measurement enabled
        ____exports.tlog = Logger(nil, { prefix = { "TempLog" }, withElappsedTimePrefixd = true, logLevel = LogLevel
        .INFO })
        ____exports.TempLogger = function(____, params) return Logger(nil,
                { prefix = { params.name or "TempLogger" }, withElappsedTimePrefixd = true, logLevel = params.enabled ==
                false and LogLevel.ERROR or LogLevel.TRACE }) end
        return ____exports
    end,
    ["lib.MAVariables"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____json = require("json")
        local decode = ____json.decode
        local encode = ____json.encode
        local ____DebugUtils = require("lib.DebugUtils")
        local objToString = ____DebugUtils.objToString
        local MAX_USER_VAR_LENGTH = 65535
        function ____exports.MAVariables(self, params)
            local ____params_0 = params
            local storageType = ____params_0.storageType
            local variablesId = ____params_0.variablesId
            local function _getVars(self)
                if storageType == "UserProfile-PluginPreferences" then
                    local pluginPreferences = PluginVars(variablesId)
                    if pluginPreferences == nil then
                        error("Could not find PluginVars with id=" .. variablesId)
                    else
                        return pluginPreferences(nil, variablesId)[1]
                    end
                elseif storageType == "ShowFile" then
                    return AddonVars(variablesId)
                else
                    return UserVars()
                end
            end
            local function getVar(self, varName)
                local vars = _getVars(nil)
                return GetVar(vars, varName)
            end
            local function deleteVar(self, varName)
                local vars = _getVars(nil)
                return DelVar(vars, varName)
            end
            local function getJsonVar(self, varName)
                local value = getVar(nil, varName)
                if value == nil then
                    return nil
                end
                return decode(value)
            end
            local function setVar(self, varName, value)
                assert(
                    #value <= MAX_USER_VAR_LENGTH,
                    string.format("setVar(): pluginId=%s, varName=%s, value exceeds length limit of ", variablesId,
                        varName, MAX_USER_VAR_LENGTH)
                )
                local vars = _getVars(nil)
                return SetVar(vars, varName, value)
            end
            local function setJsonVar(self, varName, value)
                do
                    local function ____catch(err)
                        error((((("ERROR: setJsonVar(), " .. variablesId) .. ", ") .. varName) .. ". value: ") ..
                        objToString(nil, value))
                    end
                    local ____try, ____hasReturned = pcall(function()
                        setVar(
                            nil,
                            varName,
                            encode(value)
                        )
                    end)
                    if not ____try then
                        ____catch(____hasReturned)
                    end
                end
            end
            return {
                variablesId = variablesId,
                getVar = getVar,
                getJsonVar = getJsonVar,
                setVar = setVar,
                setJsonVar = setJsonVar,
                deleteVar = deleteVar
            }
        end

        return ____exports
    end,
    ["lib.PersistentDataAccess"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____json = require("json")
        local decode = ____json.decode
        local encode = ____json.encode
        local DEFAULT_IS_DIRTY_ENABLED = true
        function ____exports.PersistentDataAccess(self, vars, varName, _log, options)
            local log = _log:subLogger(("PersistentDataAccess(" .. vars.variablesId) .. ")")
            local _data
            local isDirty = false
            return {
                variablesId = vars.variablesId,
                varName = varName,
                isDirty = function(self)
                    local ____temp_4
                    local ____options_isDirtyEnabled_0 = options
                    if ____options_isDirtyEnabled_0 ~= nil then
                        ____options_isDirtyEnabled_0 = ____options_isDirtyEnabled_0.isDirtyEnabled
                    end
                    if ____options_isDirtyEnabled_0 == nil then
                        ____temp_4 = DEFAULT_IS_DIRTY_ENABLED
                    else
                        local ____options_isDirtyEnabled_2 = options
                        if ____options_isDirtyEnabled_2 ~= nil then
                            ____options_isDirtyEnabled_2 = ____options_isDirtyEnabled_2.isDirtyEnabled
                        end
                        ____temp_4 = ____options_isDirtyEnabled_2
                    end
                    local enabled = ____temp_4
                    local ____enabled_5
                    if enabled then
                        ____enabled_5 = isDirty
                    else
                        ____enabled_5 = true
                    end
                    return ____enabled_5
                end,
                isCachedDataExists = function(self)
                    return _data ~= nil
                end,
                isDataExists = function(self)
                    local dataString = vars:getVar(varName)
                    local exists = dataString ~= nil
                    return exists
                end,
                read = function(self)
                    log:trace("read()")
                    local dataString = vars:getVar(varName)
                    if dataString == nil or dataString == nil then
                        return false
                    else
                        _data = decode(dataString)
                        isDirty = false
                        return true
                    end
                end,
                setDirty = function(self)
                    if not isDirty then
                        log:trace("setDirty(): was false now true")
                        isDirty = true
                    end
                end,
                write = function(self)
                    log:trace("write() BEFORE")
                    if _data == nil then
                        error("PesistentDataAccess.write(): data is undefined")
                    end
                    vars:setVar(
                        varName,
                        encode(_data)
                    )
                    log:trace("write() AFTER")
                    isDirty = false
                    return self
                end,
                cleanUp = function(self)
                    log:trace("delete sub-pool registry data()")
                    vars:deleteVar(varName)
                end,
                getData = function(self)
                    log:trace("getData()")
                    if _data == nil then
                        error(("PesistentDataAccess(" .. vars.variablesId) ..
                        ").getData(): data is undefined. Probably 'read()' was not called")
                    end
                    return _data
                end,
                setData = function(self, data)
                    log:trace("setData()")
                    _data = data
                    isDirty = true
                    return self
                end
            }
        end

        return ____exports
    end,
    ["lib.CoroutineMutex"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.CoroutineMutex(self, log, onDestroy)
            local destroy, unlock, tryLock, lock, createCoroutine, co, selfLog, tid
            function destroy(self)
                if co ~= nil then
                    local ____log_trace_result_0 = log
                    if ____log_trace_result_0 ~= nil then
                        ____log_trace_result_0 = ____log_trace_result_0:trace("destroy co=" .. tostring(co))
                    end
                    coroutine.resume(co, nil, "kill")
                    co = nil
                    local ____ = onDestroy and onDestroy(nil, tid)
                end
            end

            function unlock(self)
                if co ~= nil then
                    local tid = tostring(coroutine.running())
                    return { coroutine.resume(co, tid, "unlock") }
                end
            end

            function tryLock(self)
                if co ~= nil then
                    local tid = tostring(coroutine.running())
                    local res, success = coroutine.resume(co, tid, "lock")
                    local ____log_trace_result_2 = log
                    if ____log_trace_result_2 ~= nil then
                        ____log_trace_result_2 = ____log_trace_result_2:trace((("tryLock(): res=" .. tostring(res)) .. ",success=") ..
                        tostring(success))
                    end
                    return success
                end
                error("tryLock: Mutex destroyed already")
            end

            function lock(self)
                if co ~= nil then
                    local ts = os.time()
                    local tid = tostring(coroutine.running())
                    local success = false
                    repeat
                        do
                            local res, success = coroutine.resume(co, tid, "lock")
                            local ____log_trace_result_4 = log
                            if ____log_trace_result_4 ~= nil then
                                ____log_trace_result_4 = ____log_trace_result_4:trace((("res=" .. tostring(res)) .. ",success=") ..
                                tostring(success))
                            end
                            if success == true then
                                return "ok"
                            else
                                coroutine.yield()
                            end
                            if os.time() - ts > 2 then
                                return "timeout"
                            end
                        end
                    until success
                end
                error("not initiualized or destroyed")
            end

            function createCoroutine(self)
                return coroutine.create(function()
                    local curTid
                    local keepGoing = true
                    local curAction = "initial"
                    local requestTid
                    local function isLocked()
                        return curTid ~= nil
                    end
                    while keepGoing do
                        repeat
                            local ____switch19 = curAction
                            local ____cond19 = ____switch19 == "initial"
                            if ____cond19 then
                                do
                                    local _requestTid, _action = coroutine.yield()
                                    requestTid = _requestTid
                                    curAction = _action
                                    break
                                end
                            end
                            ____cond19 = ____cond19 or ____switch19 == "kill"
                            if ____cond19 then
                                do
                                    keepGoing = false
                                    break
                                end
                            end
                            ____cond19 = ____cond19 or ____switch19 == "lock"
                            if ____cond19 then
                                do
                                    if isLocked(nil) then
                                        local _requestTid, _action = coroutine.yield(false)
                                        requestTid = _requestTid
                                        curAction = _action
                                    else
                                        curTid = requestTid
                                        local _requestTid, _action = coroutine.yield(true)
                                        requestTid = _requestTid
                                        curAction = _action
                                    end
                                    break
                                end
                            end
                            ____cond19 = ____cond19 or ____switch19 == "unlock"
                            if ____cond19 then
                                do
                                    curTid = nil
                                    local _requestTid, _action = coroutine.yield(true)
                                    requestTid = _requestTid
                                    curAction = _action
                                    break
                                end
                            end
                        until true
                    end
                    local ____selfLog_trace_result_6 = selfLog
                    if ____selfLog_trace_result_6 ~= nil then
                        ____selfLog_trace_result_6 = ____selfLog_trace_result_6:trace("coroutine ended co=" ..
                        tostring(co))
                    end
                end)
            end

            co = createCoroutine(nil)
            selfLog = log
            coroutine.resume(co)
            tid = tostring(co)
            return {
                tid = tid,
                lock = lock,
                tryLock = tryLock,
                unlock = unlock,
                destroy = destroy
            }
        end

        return ____exports
    end,
    ["lib.MutexFactory.MutexFactory"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Delete = ____lualib.__TS__Delete
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____CoroutineMutex = require("lib.CoroutineMutex")
        local CoroutineMutex = ____CoroutineMutex.CoroutineMutex
        local ____Utils = require("lib.Utils")
        local objectValues = ____Utils.objectValues
        function ____exports.MutexFactory(self, factoryLog)
            local create, cleanup, mutexInstances
            function create(self, log)
                local cm = CoroutineMutex(
                    nil,
                    log,
                    function(____, tid)
                        factoryLog:trace("Deleting " .. tid)
                        __TS__Delete(mutexInstances, tid)
                    end
                )
                factoryLog:trace("Created " .. cm.tid)
                mutexInstances[cm.tid] = cm
                return cm
            end

            function cleanup(self)
                for ____, cm in ipairs(objectValues(nil, mutexInstances)) do
                    cm:destroy()
                end
            end

            mutexInstances = {}
            return { create = create, cleanup = cleanup }
        end

        return ____exports
    end,
    ["lib.MutexFactory.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        do
            local ____MutexFactory = require("lib.MutexFactory.MutexFactory")
            local MutexFactory = ____MutexFactory.MutexFactory
            ____exports.MutexFactory = MutexFactory
        end
        return ____exports
    end,
    ["lib.plugin.PluginEnv"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__StringReplaceAll = ____lualib.__TS__StringReplaceAll
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.PluginEnv = __TS__Class()
        local PluginEnv = ____exports.PluginEnv
        PluginEnv.name = "PluginEnv"
        function PluginEnv.prototype.____constructor(self, params)
            self.author = params.author
            self.env = params.env
            self.pluginName = params.pluginName
            self.pluginId = params.pluginId
            self.pluginVersion = params.pluginVersion
        end

        function PluginEnv.prototype.getNameAndVersionAsLabel(self)
            return (((self.pluginName .. " v") .. __TS__StringReplaceAll(self.pluginVersion, ".", "_")) .. " ") ..
            (self.env == "dev" and "DEV" or "")
        end

        return ____exports
    end,
    ["lib.EventEmitter"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
        local __TS__ArrayIndexOf = ____lualib.__TS__ArrayIndexOf
        local __TS__ArraySplice = ____lualib.__TS__ArraySplice
        local __TS__ObjectKeys = ____lualib.__TS__ObjectKeys
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.EventEmitter = __TS__Class()
        local EventEmitter = ____exports.EventEmitter
        EventEmitter.name = "EventEmitter"
        function EventEmitter.prototype.____constructor(self)
            self.eventsListeners = {}
        end

        function EventEmitter.prototype.on(self, eventName, listener)
            if type(self.eventsListeners[eventName]) ~= "table" then
                self.eventsListeners[eventName] = {}
            end
            local listeners = self.eventsListeners[eventName]
            if not __TS__ArrayIncludes(listeners, listener) then
                listeners[#listeners + 1] = listener
            end
            return function() return self:removeListener(eventName, listener) end
        end

        function EventEmitter.prototype.removeListener(self, eventName, listener)
            if type(self.eventsListeners[eventName]) ~= "table" then
                return
            end
            local idx = __TS__ArrayIndexOf(self.eventsListeners[eventName], listener)
            if idx > -1 then
                __TS__ArraySplice(self.eventsListeners[eventName], idx, 1)
            end
        end

        function EventEmitter.prototype.removeAllListeners(self)
            __TS__ArrayForEach(
                __TS__ObjectKeys(self.eventsListeners),
                function(____, event) return __TS__ArraySplice(self.eventsListeners[event], 0,
                        #self.eventsListeners[event]) end
            )
        end

        function EventEmitter.prototype.emit(self, event)
            if type(self.eventsListeners[event.eventName]) ~= "table" then
                return
            end
            local lastErr
            __TS__ArrayForEach(
                { table.unpack(self.eventsListeners[event.eventName]) },
                function(____, listener, index)
                    do
                        local function ____catch(err)
                            lastErr = err
                        end
                        local ____try, ____hasReturned = pcall(function()
                            listener(
                                self,
                                table.unpack({ event })
                            )
                        end)
                        if not ____try then
                            ____catch(____hasReturned)
                        end
                    end
                end
            )
            if lastErr ~= nil then
                error(lastErr, 0)
            end
        end

        function EventEmitter.prototype.once(self, event, listener)
            local remove
            remove = self:on(
                event.eventName,
                function(____, ...)
                    remove(nil)
                    listener(
                        self,
                        table.unpack({ event })
                    )
                end
            )
            return remove
        end

        return ____exports
    end,
    ["lib.PluginInfo"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.PluginInfo(self, ...)
            local args = { ... }
            return { pluginObjectName = args[1], componentName = args[2], signalTable = args[3], componentHandle = args
            [4] }
        end

        return ____exports
    end,
    ["lib.SingletonFactory"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAVariables = require("lib.MAVariables")
        local MAVariables = ____MAVariables.MAVariables
        local INSTANCE_ID_VAR_NAME = "SINGLETON_FACTORY_INSTANCE_ID"
        local GlobalVariable = _G
        local function getId(self, instance)
            return tostring(instance)
        end
        function ____exports.isShowSingletonExists(self, globalId)
            return GlobalVariable[globalId] ~= nil
        end

        function ____exports.getShowSingleton(self, globalId)
            local instance = GlobalVariable[globalId]
            assert(instance ~= nil, "Could not find Show Singleton globalId = " .. globalId)
            return instance
        end

        function ____exports.getOrCreateShowSingleton(self, globalId, create)
            local pluginAddonVars = MAVariables(nil, { storageType = "ShowFile", variablesId = globalId })
            local function createInstance(self)
                local instance = create(nil)
                local objId = getId(nil, instance)
                pluginAddonVars:setVar(INSTANCE_ID_VAR_NAME, objId)
                return instance
            end
            if GlobalVariable[globalId] == nil then
                GlobalVariable[globalId] = createInstance(nil)
            else
                local instance = GlobalVariable[globalId]
                if pluginAddonVars:getVar(INSTANCE_ID_VAR_NAME) ~= getId(nil, instance) then
                    instance:destroy()
                    GlobalVariable[globalId] = createInstance(nil)
                end
            end
            return GlobalVariable[globalId]
        end

        return ____exports
    end,
    ["lib.plugin.AssetManager"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
        local __TS__Delete = ____lualib.__TS__Delete
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ma_obj = require("lib.ma_obj.index")
        local MediaPool = ____ma_obj.MediaPool
        local ____MAPoolsInfo = require("lib.MAPoolsInfo")
        local MAPoolsInfo = ____MAPoolsInfo.MAPoolsInfo
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        local objectValues = ____Utils.objectValues
        function ____exports.AssetManager(self, params)
            local ____params_0 = params
            local assets = ____params_0.assets
            local findAvailableRange = ____params_0.findAvailableRange
            local of = ____params_0.of
            local log = ____params_0.log
            --- Get an asset index
            --
            -- @param type
            -- @param index 0-based
            local function getAssetId(self, ____type, poolId, index)
                local poolAssets = assets[poolId]
                if poolAssets == nil then
                    error(log:msg(((("getAssetId(poolId: " .. poolId) .. ", type: ") .. ____type) ..
                    "): poolId not provisioned at all"))
                end
                local assetBatch = poolAssets[____type]
                if assetBatch == nil then
                    error(log:msg(((("getAssetId(poolId: " .. poolId) .. ", type: ") .. ____type) .. "): type not found"))
                else
                    if index < assetBatch.size then
                        return assetBatch.start + index
                    else
                        error(log:msg((((((("getAssetId(poolId: " .. poolId) .. ", type: ") .. ____type) .. ", index: ") .. tostring(index)) .. "): index exceeds provisioned batch size of ") ..
                        tostring(assetBatch.size)))
                    end
                end
            end
            local function provisionOrGetAssetIds(self, ____type, poolId, size)
                local poolAssets = assets[poolId]
                if poolAssets == nil then
                    poolAssets = {}
                    assets[poolId] = poolAssets
                end
                if __TS__ArrayIncludes(
                        objectKeys(nil, poolAssets),
                        ____type
                    ) then
                    return poolAssets[____type]
                else
                    local range = findAvailableRange(nil, poolId, size)
                    if range == nil then
                        error(log:msg((((("Could not find available asset range (size=" .. tostring(size)) .. ") in pool ") .. poolId) .. ", for asset ") ..
                        ____type))
                    end
                    poolAssets[____type] = range
                    return range
                end
            end
            local function provisionSingleAssetId(self, ____type, poolId)
                local poolAssets = assets[poolId]
                if poolAssets == nil then
                    poolAssets = {}
                    assets[poolId] = poolAssets
                end
                if __TS__ArrayIncludes(
                        objectKeys(nil, poolAssets),
                        ____type
                    ) then
                    error(log:msg((("AssetsManager: asset id " .. ____type) .. " already exists for poolId: ") .. poolId))
                else
                    local range = findAvailableRange(nil, poolId, 1)
                    if range == nil then
                        error(log:msg((((("Plugin " .. poolId) .. " allowance exceeded. Please increase generated Macro allowance in the plugin configuraiton. Could not find available asset range in pool ") .. poolId) .. ", for asset ") ..
                        ____type))
                    end
                    poolAssets[____type] = range
                    return range.start
                end
            end
            local function isProvisioned(self, ____type, poolId, size)
                local poolAssets = assets[poolId]
                if poolAssets == nil then
                    return false
                end
                local assetBatch = poolAssets[____type]
                if assetBatch == nil then
                    return false
                else
                    if size <= assetBatch.size then
                        return true
                    else
                        return false
                    end
                end
            end
            local function provisionOrGet(self, ____type, poolId)
                if isProvisioned(nil, ____type, poolId, 1) then
                    return getAssetId(nil, ____type, poolId, 0)
                else
                    return provisionSingleAssetId(nil, ____type, poolId)
                end
            end
            return {
                execModeDirectLua = function(self)
                    params.of:modeDirect()
                end,
                reportProvisionedAsset = function(____, poolId, index)
                    local poolAssets = assets[poolId]
                    if poolAssets == nil then
                        poolAssets = {}
                        assets[poolId] = poolAssets
                    end
                    local ____type = "__INTERNAL_" .. tostring(index)
                    if __TS__ArrayIncludes(
                            objectKeys(nil, poolAssets),
                            ____type
                        ) then
                    else
                        poolAssets[____type] = { start = index, size = 1 }
                    end
                end,
                provisionSingleAssetId = provisionSingleAssetId,
                provisionOrGetAssetIds = provisionOrGetAssetIds,
                getAssetId = getAssetId,
                getSingleAssetId = function(____, ____type, poolId) return getAssetId(nil, ____type, poolId, 0) end,
                isProvisioned = isProvisioned,
                deleteAll = function(____, undo)
                    local poolsInfo = MAPoolsInfo(nil)
                    local ____error = nil
                    for ____, poolId in ipairs(objectKeys(nil, assets)) do
                        local poolBatchs = assets[poolId]
                        local poolInfo = poolsInfo:byId(poolId)
                        if poolBatchs ~= nil then
                            for ____, assetBatchRange in ipairs(objectValues(nil, poolBatchs)) do
                                local startAddr = ((poolInfo.keyword .. " ") .. (poolInfo.subPoolIndex == nil and "" or tostring(poolInfo.subPoolIndex) .. ".")) ..
                                tostring(assetBatchRange.start)
                                local ____temp_1
                                if assetBatchRange.size == 1 then
                                    ____temp_1 = undo.cmdFailable(("Delete " .. startAddr) .. " /nc")
                                else
                                    ____temp_1 = undo.cmdFailable(((("Delete " .. startAddr) .. " Thru ") .. tostring(assetBatchRange.start + assetBatchRange.size - 1)) ..
                                    " /nc")
                                end
                                local commandResult = ____temp_1
                                if commandResult ~= nil and ____error == nil then
                                    ____error = commandResult
                                end
                            end
                        end
                        __TS__Delete(assets, poolId)
                    end
                    return ____error
                end,
                delete = function(____, undo, poolId, assetType)
                    local poolsInfo = MAPoolsInfo(nil)
                    local poolBatchs = assets[poolId]
                    local poolInfo = poolsInfo:byId(poolId)
                    if poolBatchs ~= nil then
                        local batch = poolBatchs[assetType]
                        if batch ~= nil then
                            local startAddr = ((poolInfo.keyword .. " ") .. (poolInfo.subPoolIndex == nil and "" or tostring(poolInfo.subPoolIndex) .. ".")) ..
                            tostring(batch.start)
                            local ____temp_2
                            if batch.size == 1 then
                                ____temp_2 = undo.cmdFailable(("Delete " .. startAddr) .. " /nc")
                            else
                                ____temp_2 = undo.cmdFailable(((("Delete " .. startAddr) .. " Thru ") .. tostring(batch.start + batch.size - 1)) ..
                                " /nc")
                            end
                            local commandResult = ____temp_2
                            if commandResult ~= nil then
                                error(log:msg((("Error deleteing " .. poolId) .. ", assetType=") .. assetType))
                            else
                                __TS__Delete(poolBatchs, assetType)
                            end
                        end
                    end
                end,
                get = {
                    appearance = function(____, ____type, index) return of:HAppearance(getAssetId(nil, ____type,
                            "Appearances", index or 0)) end,
                    image = function(____, ____type, index)
                        return of:HMedia(
                            MediaPool.Images,
                            getAssetId(nil, ____type, "Images", index or 0)
                        )
                    end,
                    layout = function(____, ____type, index) return of:HLayout(getAssetId(nil, ____type, "Layouts",
                            index or 0)) end,
                    macro = function(____, ____type, index) return of:HMacro(getAssetId(nil, ____type, "Macros",
                            index or 0)) end,
                    page = function(____, ____type, index) return of:HPage(getAssetId(nil, ____type, "Pages", index or 0)) end,
                    preset = function(____, ____type, presetFamily, index)
                        return of:HPreset(
                            presetFamily,
                            getAssetId(
                                nil,
                                ____type,
                                MAPoolsInfo(nil):byPresetFamily(presetFamily),
                                index or 0
                            )
                        )
                    end,
                    sequence = function(____, ____type, index) return of:HSequence(getAssetId(nil, ____type, "Sequences",
                            index or 0)) end,
                    view = function(____, ____type, index) return of:HView(getAssetId(nil, ____type, "Views", index or 0)) end
                },
                provisionOrGet = {
                    appearance = function(____, ____type) return of:HAppearance(provisionOrGet(nil, ____type,
                            "Appearances")) end,
                    image = function(____, ____type)
                        return of:HMedia(
                            MediaPool.Images,
                            provisionOrGet(nil, ____type, "Images")
                        )
                    end,
                    layout = function(____, ____type) return of:HLayout(provisionOrGet(nil, ____type, "Layouts")) end,
                    macro = function(____, ____type) return of:HMacro(provisionOrGet(nil, ____type, "Macros")) end,
                    page = function(____, ____type) return of:HPage(provisionOrGet(nil, ____type, "Pages")) end,
                    preset = function(____, ____type, presetFamily)
                        return of:HPreset(
                            presetFamily,
                            provisionOrGet(
                                nil,
                                ____type,
                                MAPoolsInfo(nil):byPresetFamily(presetFamily)
                            )
                        )
                    end,
                    sequence = function(____, ____type) return of:HSequence(provisionOrGet(nil, ____type, "Sequences")) end,
                    view = function(____, ____type) return of:HView(provisionOrGet(nil, ____type, "Views")) end
                }
            }
        end

        return ____exports
    end,
    ["lib.XmlUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____parseXml = require("lib.parseXml")
        local collect = ____parseXml.collect
        local function dumpXmlNode(self, node)
            Printf("label:" .. tostring(node.label))
            if node.xarg ~= nil then
                Printf("xarg: ")
                for k, v in pairs(node.xarg) do
                    Printf(((("  [" .. tostring(k)) .. ": ") .. tostring(v)) .. "]")
                end
            end
            for ____, child in ipairs(node) do
                dumpXmlNode(nil, child)
            end
        end
        ____exports.XmlUtils = { parseXml = collect, dumpXmlNode = dumpXmlNode }
        return ____exports
    end,
    ["lib.parseXml"] = function(...)
        -- Taken from here: http://lua-users.org/wiki/LuaXml
        local Parser = {}

        function parseargs(s)
            local arg = {}
            string.gsub(s, "([%-%w]+)=([\"'])(.-)%2", function(w, _, a)
                arg[w] = a
            end)
            return arg
        end

        function Parser:collect(s)
            local stack = {}
            local top = {}
            table.insert(stack, top)
            local ni, c, label, xarg, empty
            local i, j = 1, 1
            while true do
                ni, j, c, label, xarg, empty = string.find(s,
                    "<(%/?)([%w:]+)(.-)(%/?)>", i)
                if not ni then
                    break
                end
                local text = string.sub(s, i, ni - 1)
                if not string.find(text, "^%s*$") then
                    table.insert(top, text)
                end
                if empty == "/" then            -- empty element tag
                    table.insert(top, { label = label, xarg = parseargs(xarg), empty = 1 })
                elseif c == "" then             -- start tag
                    top = { label = label, xarg = parseargs(xarg) }
                    table.insert(stack, top)    -- new level
                else                            -- end tag
                    local toclose = table.remove(stack) -- remove top
                    top = stack[#stack]
                    if #stack < 1 then
                        error("nothing to close with " .. label)
                    end
                    if toclose.label ~= label then
                        error("trying to close " .. toclose.label .. " with " .. label)
                    end
                    table.insert(top, toclose)
                end
                i = j + 1
            end
            local text = string.sub(s, i)
            if not string.find(text, "^%s*$") then
                table.insert(stack[#stack], text)
            end
            if #stack > 1 then
                error("unclosed " .. stack[#stack].label)
            end
            return stack[1]
        end

        return Parser
    end,
    ["lib.FileUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__StringReplace = ____lualib.__TS__StringReplace
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____lfs = require("lfs")
        local attributes = ____lfs.attributes
        local dir = ____lfs.dir
        local mkdir = ____lfs.mkdir
        local rmdir = ____lfs.rmdir
        local PATH_SEPERATOR = "/"
        local function makeDir(self, path)
            return mkdir(path)
        end
        local function path(self, ...)
            local pathParts = { ... }
            return table.concat(pathParts, PATH_SEPERATOR or ",")
        end
        local function readFile(self, filePath)
            local temp = io.input()
            io.input(filePath)
            local fileContent = io.read("a")
            io.input():close()
            io.input(temp)
            return fileContent
        end
        local function openFileForWriting(self, fileName)
            local fileWrapper = assert({ io.open(fileName, "w") })
            local file = table.unpack(fileWrapper)
            return file
        end
        local function writeBinaryFile(self, fileName, data)
            local out = io.open(fileName, "wb")
            if out == nil then
                error("Could not open file for binary writing: " .. fileName)
            else
                local _, err = out:write(data)
                assert(
                    err == nil,
                    "Could not write to file: " .. tostring(err)
                )
                assert(out:close())
            end
        end
        local function writeLine(self, fp, line)
            fp:write(line)
            fp:write("\n")
        end
        local function closeFile(self, fp)
            fp:flush()
            fp:close()
        end
        local function escapeObjNameForPath(self, name)
            return __TS__StringReplace(name, "/", "_")
        end
        function ____exports.escapeFileName(self, name)
            return name:gsub("[,'`]", "_")
        end

        local function exists(self, path)
            return attributes(path) ~= nil
        end
        local function isDir(self, path)
            return attributes(path).mode == "directory"
        end
        --- Get directory content
        -- Taken from gma3_helpers.lua
        local function getDirectoryContent(self, path)
            local resTable = {}
            for file in dir(path) do
                if file ~= "." and file ~= ".." then
                    local currentPath = (path .. GetPathSeparator()) .. file
                    local attr = attributes(currentPath)
                    assert(type(attr) == "table")
                    if attr.mode == "directory" then
                        resTable[#resTable + 1] = { type = "directory", fullPath = currentPath, name = file }
                    else
                        resTable[#resTable + 1] = { type = "file", fullPath = currentPath, name = file }
                    end
                end
            end
            return resTable
        end
        function ____exports.removeDirectory(self, folder)
            for file in dir(folder) do
                local file_path = path(nil, folder, file)
                if file ~= "." and file ~= ".." then
                    if attributes(file_path).mode == "file" then
                        os.remove(file_path)
                    elseif attributes(file_path).mode == "directory" then
                        ____exports.removeDirectory(nil, file_path)
                    end
                end
            end
            rmdir(folder)
        end

        ____exports.FileUtils = {
            closeFile = closeFile,
            escapeObjNameForPath = escapeObjNameForPath,
            exists = exists,
            isDir = isDir,
            getDirectoryContent = getDirectoryContent,
            makeDir = makeDir,
            openFileForWriting = openFileForWriting,
            path = path,
            readFile = readFile,
            writeLine = writeLine,
            writeBinaryFile = writeBinaryFile
        }
        return ____exports
    end,
    ["lib.image.ImageLibraryAccess"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__StringEndsWith = ____lualib.__TS__StringEndsWith
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____XmlUtils = require("lib.XmlUtils")
        local XmlUtils = ____XmlUtils.XmlUtils
        local ____FileUtils = require("lib.FileUtils")
        local FileUtils = ____FileUtils.FileUtils
        local removeDirectory = ____FileUtils.removeDirectory
        local ____base64Codec = require("lib.image.base64Codec")
        local decode = ____base64Codec.decode
        --- Craete Image Importer
        -- Runs the "UpdateContent" command which makes MA3 generate XML file for each image in the image library.
        -- Then resolves which XML belongs to which image file.
        --
        -- @returns An Importer that can be used to import images by their original file name.
        function ____exports.ImageLibraryAccess(self, pluginId, log)
            local imageLibraryPath = FileUtils:path(
                GetPath(Enums.PathType.ImageLibrary),
                pluginId
            )
            local function getImageFileName(self, originalFileName)
                return (pluginId .. "_") .. originalFileName
            end
            local function writeToImageLibrary(self, images)
                __TS__ArrayForEach(
                    images,
                    function(____, image)
                        local path = FileUtils:path(
                            imageLibraryPath,
                            getImageFileName(nil, image.fileName)
                        )
                        FileUtils:writeBinaryFile(
                            path,
                            decode(image.sourceBase64)
                        )
                    end
                )
                Cmd("UpdateContent image \"Images\"")
            end
            local function indexLibraryFile(self)
                local files = FileUtils:getDirectoryContent(imageLibraryPath)
                local xmlFileNameByImageFileName = {}
                __TS__ArrayForEach(
                    files,
                    function(____, file)
                        if __TS__StringEndsWith(file.name, ".png.xml") then
                            local content = FileUtils:readFile(file.fullPath)
                            local presetsXmlNode = XmlUtils:parseXml(content)
                            local root = presetsXmlNode[2]
                            local userImageNode = root[1]
                            local imageFileName = userImageNode.xarg.FileName
                            xmlFileNameByImageFileName[imageFileName] = file.name
                        end
                    end
                )
                return xmlFileNameByImageFileName
            end
            local function deleteAllImages(self)
                if FileUtils:exists(imageLibraryPath) and FileUtils:isDir(imageLibraryPath) then
                    removeDirectory(nil, imageLibraryPath)
                else
                    log:warn(
                    "deleteAllImages: The plugin's Image library folder was aobut to be deleted, but it didn't exist. Folder path = " ..
                    imageLibraryPath)
                end
            end
            return {
                deleteAllImages = deleteAllImages,
                imageLibraryPath = imageLibraryPath,
                writeToImageLibrary = writeToImageLibrary,
                importImages = function(____, images)
                    local xmlFileNameByImageFileName = indexLibraryFile(nil)
                    for ____, image in ipairs(images) do
                        local xmlFileName = xmlFileNameByImageFileName[getImageFileName(nil, image.imageFileName)]
                        if xmlFileName == nil then
                            error((("Import " .. image.imageFileName) .. " failed. a corresponding XML file was not found under ") ..
                            imageLibraryPath)
                        end
                        Cmd(((((("Import Image \"Images\"." .. tostring(image.targetIndex)) .. " /File \"") .. xmlFileName) .. "\" /Path \"") .. imageLibraryPath) ..
                        "\" /nc")
                    end
                end
            }
        end

        return ____exports
    end,
    ["lib.image.base64Codec"] = function(...)
        --[[

    base64 -- v1.5.3 public domain Lua base64 encoder/decoder
    no warranty implied; use at your own risk

    Needs bit32.extract function. If not present it's implemented using BitOp
    or Lua 5.3 native bit operators. For Lua 5.1 fallbacks to pure Lua
    implementation inspired by Rici Lake's post:
      http://ricilake.blogspot.co.uk/2007/10/iterating-bits-in-lua.html

    author: Ilya Kolbin (iskolbin@gmail.com)
    url: github.com/iskolbin/lbase64

    COMPATIBILITY

    Lua 5.1+, LuaJIT

    LICENSE

    See end of file for license information.

   --]]
        local base64 = {}

        local extract = _G.bit32 and _G.bit32.extract -- Lua 5.2/Lua 5.3 in compatibility mode
        if not extract then
            if _G.bit then                    -- LuaJIT
                local shl, shr, band = _G.bit.lshift, _G.bit.rshift, _G.bit.band
                extract = function(v, from, width)
                    return band(shr(v, from), shl(1, width) - 1)
                end
            elseif _G._VERSION == "Lua 5.1" then
                extract = function(v, from, width)
                    local w = 0
                    local flag = 2 ^ from
                    for i = 0, width - 1 do
                        local flag2 = flag + flag
                        if v % flag2 >= flag then
                            w = w + 2 ^ i
                        end
                        flag = flag2
                    end
                    return w
                end
            else -- Lua 5.3+
                extract = load [[return function( v, from, width )
               return ( v >> from ) & ((1 << width) - 1)
           end]]()
            end
        end

        function base64.makeencoder(s62, s63, spad)
            local encoder = {}
            for b64code, char in pairs {
                [0] = 'A',
                'B',
                'C',
                'D',
                'E',
                'F',
                'G',
                'H',
                'I',
                'J',
                'K',
                'L',
                'M',
                'N',
                'O',
                'P',
                'Q',
                'R',
                'S',
                'T',
                'U',
                'V',
                'W',
                'X',
                'Y',
                'Z',
                'a',
                'b',
                'c',
                'd',
                'e',
                'f',
                'g',
                'h',
                'i',
                'j',
                'k',
                'l',
                'm',
                'n',
                'o',
                'p',
                'q',
                'r',
                's',
                't',
                'u',
                'v',
                'w',
                'x',
                'y',
                'z',
                '0',
                '1',
                '2',
                '3',
                '4',
                '5',
                '6',
                '7',
                '8',
                '9',
                s62 or '+',
                s63 or '/',
                spad or '='
            } do
                encoder[b64code] = char:byte()
            end
            return encoder
        end

        function base64.makedecoder(s62, s63, spad)
            local decoder = {}
            for b64code, charcode in pairs(base64.makeencoder(s62, s63, spad)) do
                decoder[charcode] = b64code
            end
            return decoder
        end

        local DEFAULT_ENCODER = base64.makeencoder()
        local DEFAULT_DECODER = base64.makedecoder()

        local char, concat = string.char, table.concat

        function base64.encode(str, encoder, usecaching)
            encoder = encoder or DEFAULT_ENCODER
            local t, k, n = {}, 1, #str
            local lastn = n % 3
            local cache = {}
            for i = 1, n - lastn, 3 do
                local a, b, c = str:byte(i, i + 2)
                local v = a * 0x10000 + b * 0x100 + c
                local s
                if usecaching then
                    s = cache[v]
                    if not s then
                        s = char(encoder[extract(v, 18, 6)], encoder[extract(v, 12, 6)],
                            encoder[extract(v, 6, 6)], encoder[extract(v, 0, 6)])
                        cache[v] = s
                    end
                else
                    s = char(encoder[extract(v, 18, 6)], encoder[extract(v, 12, 6)],
                        encoder[extract(v, 6, 6)], encoder[extract(v, 0, 6)])
                end
                t[k] = s
                k = k + 1
            end
            if lastn == 2 then
                local a, b = str:byte(n - 1, n)
                local v = a * 0x10000 + b * 0x100
                t[k] = char(encoder[extract(v, 18, 6)], encoder[extract(v, 12, 6)],
                    encoder[extract(v, 6, 6)], encoder[64])
            elseif lastn == 1 then
                local v = str:byte(n) * 0x10000
                t[k] = char(encoder[extract(v, 18, 6)], encoder[extract(v, 12, 6)],
                    encoder[64], encoder[64])
            end
            return concat(t)
        end

        function base64.decode(b64, decoder, usecaching)
            decoder = decoder or DEFAULT_DECODER
            local pattern = '[^%w%+%/%=]'
            if decoder then
                local s62, s63
                for charcode, b64code in pairs(decoder) do
                    if b64code == 62 then
                        s62 = charcode
                    elseif b64code == 63 then
                        s63 = charcode
                    end
                end
                pattern = ('[^%%w%%%s%%%s%%=]'):format(char(s62), char(s63))
            end
            b64 = b64:gsub(pattern, '')
            local cache = usecaching and {}
            local t, k = {}, 1
            local n = #b64
            local padding = b64:sub(-2) == '==' and 2 or b64:sub(-1) == '=' and 1 or 0
            for i = 1, padding > 0 and n - 4 or n, 4 do
                local a, b, c, d = b64:byte(i, i + 3)
                local s
                if usecaching then
                    local v0 = a * 0x1000000 + b * 0x10000 + c * 0x100 + d
                    s = cache[v0]
                    if not s then
                        local v = decoder[a] * 0x40000 + decoder[b] * 0x1000 +
                            decoder[c] * 0x40 + decoder[d]
                        s = char(extract(v, 16, 8), extract(v, 8, 8), extract(v, 0, 8))
                        cache[v0] = s
                    end
                else
                    local v = decoder[a] * 0x40000 + decoder[b] * 0x1000 + decoder[c] *
                        0x40 + decoder[d]
                    s = char(extract(v, 16, 8), extract(v, 8, 8), extract(v, 0, 8))
                end
                t[k] = s
                k = k + 1
            end
            if padding == 1 then
                local a, b, c = b64:byte(n - 3, n - 1)
                local v = decoder[a] * 0x40000 + decoder[b] * 0x1000 + decoder[c] * 0x40
                t[k] = char(extract(v, 16, 8), extract(v, 8, 8))
            elseif padding == 2 then
                local a, b = b64:byte(n - 3, n - 2)
                local v = decoder[a] * 0x40000 + decoder[b] * 0x1000
                t[k] = char(extract(v, 16, 8))
            end
            return concat(t)
        end

        return base64

        --[[
   ------------------------------------------------------------------------------
   This software is available under 2 licenses -- choose whichever you prefer.
   ------------------------------------------------------------------------------
   ALTERNATIVE A - MIT License
   Copyright (c) 2018 Ilya Kolbin
   Permission is hereby granted, free of charge, to any person obtaining a copy of
   this software and associated documentation files (the "Software"), to deal in
   the Software without restriction, including without limitation the rights to
   use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
   of the Software, and to permit persons to whom the Software is furnished to do
   so, subject to the following conditions:
   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
   ------------------------------------------------------------------------------
   ALTERNATIVE B - Public Domain (www.unlicense.org)
   This is free and unencumbered software released into the public domain.
   Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
   software, either in source code form or as a compiled binary, for any purpose,
   commercial or non-commercial, and by any means.
   In jurisdictions that recognize copyright laws, the author or authors of this
   software dedicate any and all copyright interest in the software to the public
   domain. We make this dedication for the benefit of the public at large and to
   the detriment of our heirs and successors. We intend this dedication to be an
   overt act of relinquishment in perpetuity of all present and future rights to
   this software under copyright law.
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   ------------------------------------------------------------------------------
   --]]
    end,
    ["lib.plugin.ExternalActionCommandFactory"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ExternalCommandCodecV2 = require("lib.ExternalCommandCodecV2")
        local ActionCodec = ____ExternalCommandCodecV2.ActionCodec
        function ____exports.ExternalActionCommandFactory(self, pluginInfo, componentNumber)
            local function create(self, action)
                local encodedAction = ActionCodec:encodeAction(action)
                return ((((("Plugin \"" .. pluginInfo.pluginObjectName) .. "\".") .. tostring(componentNumber)) .. " \"") .. encodedAction) ..
                "\""
            end
            return { create = create }
        end

        return ____exports
    end,
    ["lib.ExternalCommandCodec"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__TypeOf = ____lualib.__TS__TypeOf
        local __TS__StringSplit = ____lualib.__TS__StringSplit
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local SEPERATOR = ","
        local function encodeParam(self, param)
            if type(param) == "number" then
                return tostring(param)
            elseif type(param) == "string" then
                return param
            elseif type(param) == "boolean" then
                return param and "__true" or "__false"
            else
                error("PluginUtils:encodeParam() Unsupported type " .. __TS__TypeOf(param))
            end
        end
        function ____exports.encodeParams(self, params)
            local s = ""
            for k, v in ipairs(params) do
                local seperator = k == 1 and "" or SEPERATOR
                s = (s .. seperator) .. encodeParam(nil, v)
            end
            return s
        end

        local function decodeParam(self, param)
            local numParam = tonumber(param)
            if numParam ~= nil then
                return numParam
            else
                if param == "__true" then
                    return true
                elseif param == "__false" then
                    return false
                else
                    return param
                end
            end
        end
        --- decodeParams
        --
        -- @param encodedParams string comma separated params
        -- @return table array of decoded params. decodes numbers.
        function ____exports.decodeParams(self, encodedParams)
            local parts = __TS__StringSplit(encodedParams, SEPERATOR)
            return __TS__ArrayMap(
                parts,
                function(____, s) return decodeParam(nil, s) end
            )
        end

        ---
        -- @param encodedParams string comma separated params
        -- @return table array of decoded params. does not decode numbers.
        function ____exports.decodeParamsAsStrings(self, encodedParams)
            return __TS__StringSplit(encodedParams, SEPERATOR)
        end

        return ____exports
    end,
    ["lib.plugin.PluginUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAVariables = require("lib.MAVariables")
        local MAVariables = ____MAVariables.MAVariables
        local ____ExternalCommandCodec = require("lib.ExternalCommandCodec")
        local decodeParams = ____ExternalCommandCodec.decodeParams
        local decodeParamsAsStrings = ____ExternalCommandCodec.decodeParamsAsStrings
        local encodeParams = ____ExternalCommandCodec.encodeParams
        --- Plugin Utils : Log, Assert, Persist
        --
        -- @param pluginName A display name for the plugin
        -- @param pluginId a unique plugin ID (same id will be used also if plugin is copied)
        -- @returns
        function ____exports.PluginUtils(self, pluginEnv, pluginInfo)
            local ____pluginInfo_0 = pluginInfo
            local pluginName = ____pluginInfo_0.pluginObjectName
            local ____pluginEnv_1 = pluginEnv
            local pluginId = ____pluginEnv_1.pluginId
            local pluginVars = MAVariables(nil, { storageType = "ShowFile", variablesId = pluginId })
            local pluginHandle = pluginInfo.componentHandle:Parent()
            local function _assert(self, condition, msg)
                local prefixedMsg = (pluginName .. " [ERROR]: ") .. msg
                local _condition, _ = assert(condition, prefixedMsg)
                return _condition
            end
            local function _assertDefined(self, value, msg)
                local prefixedMsg = (pluginName .. " [ERROR]: ") .. msg
                assert(value ~= nil, prefixedMsg)
            end
            local function _printf(self, msg)
                Printf((pluginName .. ": ") .. msg)
            end
            local function _echo(self, msg)
                Echo((pluginName .. ": ") .. msg)
            end
            local function _error(self, msg)
                error((pluginName .. ": ") .. msg)
            end
            local function createCmdRunPluginCompononentWithParams(self, args)
                local encodedParams = encodeParams(nil, args.params)
                return ((((("Plugin \"" .. args.pluginName) .. "\".") .. tostring(args.compNumber)) .. " \"") .. encodedParams) ..
                "\""
            end
            local function createCmdRunOwnPluginCompononentWithParams(self, args)
                return createCmdRunPluginCompononentWithParams(
                    nil,
                    __TS__ObjectAssign({}, args, { pluginName = pluginName })
                )
            end
            return {
                assert = _assert,
                assertDefined = _assertDefined,
                printf = _printf,
                echo = _echo,
                error = _error,
                getVar = pluginVars.getVar,
                setVar = pluginVars.setVar,
                deleteVar = pluginVars.deleteVar,
                setJsonVar = pluginVars.setJsonVar,
                getJsonVar = pluginVars.getJsonVar,
                createCmdRunPluginCompononentWithParams = createCmdRunPluginCompononentWithParams,
                createCmdRunOwnPluginCompononentWithParams = createCmdRunOwnPluginCompononentWithParams,
                decodePluginArgument = decodeParams,
                decodePluginArgumentAsStrings = decodeParamsAsStrings,
                pluginVars = pluginVars,
                pluginId = pluginId,
                pluginEnv = pluginEnv,
                pluginInfo = pluginInfo,
                pluginHandle = pluginHandle
            }
        end

        return ____exports
    end,
    ["lib.plugin.PluginAssetManager"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        local objectValues = ____Utils.objectValues
        local ____AssetManager = require("lib.plugin.AssetManager")
        local AssetManager = ____AssetManager.AssetManager
        function ____exports.PluginAssetManager(self, params)
            local ____params_0 = params
            local of = ____params_0.of
            local _log = ____params_0.log
            local pluginData = ____params_0.pluginData
            local subPoolRegistry = ____params_0.subPoolRegistry
            local pu = ____params_0.pu
            local log = _log:subLogger("PluginAssetManager")
            local function getProvisionedPoolIds(self)
                local poolIds = objectKeys(nil, pluginData.pluginAssets)
                for ____, instance in ipairs(objectValues(nil, pluginData.instances)) do
                    __TS__ArrayForEach(
                        objectKeys(nil, instance.assets),
                        function(____, poolId)
                            if not __TS__ArrayIncludes(poolIds, poolId) then
                                poolIds[#poolIds + 1] = poolId
                            end
                        end
                    )
                end
                return poolIds
            end
            local function getAllProvisionIds(self, poolId)
                local provisionedIndice = {}
                local pluginAssets = pluginData.pluginAssets[poolId]
                if pluginAssets ~= nil then
                    __TS__ArrayForEach(
                        objectValues(nil, pluginAssets),
                        function(____, range)
                            if range ~= nil then
                                do
                                    local i = 0
                                    while i < range.size do
                                        provisionedIndice[#provisionedIndice + 1] = range.start + i
                                        i = i + 1
                                    end
                                end
                            end
                        end
                    )
                end
                for ____, instance in ipairs(objectValues(nil, pluginData.instances)) do
                    local instanceAssets = instance.assets[poolId]
                    if instanceAssets ~= nil then
                        __TS__ArrayForEach(
                            objectValues(nil, instanceAssets),
                            function(____, range)
                                if range ~= nil then
                                    do
                                        local i = 0
                                        while i < range.size do
                                            provisionedIndice[#provisionedIndice + 1] = range.start + i
                                            i = i + 1
                                        end
                                    end
                                end
                            end
                        )
                    end
                end
                return provisionedIndice
            end
            local function findAvailableRange(self, poolId, size)
                local provisionedIndice = getAllProvisionIds(nil, poolId)
                local found = false
                local subPool = subPoolRegistry:getPluginInternalSubPool(pu.pluginId, poolId)
                if subPool == nil then
                    error(log:msg(("Could not find the internal sub-pool for " .. poolId) .. " pool in SubPoolRegistry "))
                end
                local poolRange = subPool.range
                local curStartIndex = subPool.range.start
                local curIndex = curStartIndex
                while not found and curIndex < poolRange.start + poolRange.size do
                    if __TS__ArrayIncludes(provisionedIndice, curIndex) then
                        curStartIndex = curIndex + 1
                    else
                        if curIndex - curStartIndex + 1 == size then
                            found = true
                        end
                    end
                    curIndex = curIndex + 1
                end
                if found then
                    return { start = curStartIndex, size = size }
                end
                return nil
            end
            local function getInstanceAssetManager(self, instanceId)
                local instanceData = pluginData.instances[instanceId]
                if instanceData == nil then
                    error(("PluginAssetsManager : Instance " .. instanceId) .. " does not exist")
                end
                return AssetManager(
                    nil,
                    {
                        assets = instanceData.assets,
                        findAvailableRange = findAvailableRange,
                        log = log:subLogger(("AssetManager(instance: " .. instanceId) .. ")"),
                        of = of
                    }
                )
            end
            local function getCommonAssetManager(self)
                local commonAssetsData = pluginData.pluginAssets
                return AssetManager(
                    nil,
                    {
                        assets = commonAssetsData,
                        findAvailableRange = findAvailableRange,
                        log = log:subLogger("AssetManager(Common)"),
                        of = of
                    }
                )
            end
            local function deleteAll(self, undo)
                getCommonAssetManager(nil):deleteAll(undo)
                for ____, instanceId in ipairs(objectKeys(nil, pluginData.instances)) do
                    getInstanceAssetManager(nil, instanceId):deleteAll(undo)
                end
            end
            return { getProvisionedPoolIds = getProvisionedPoolIds, getInstanceAssetManager = getInstanceAssetManager, getCommonAssetManager =
            getCommonAssetManager, deleteAll = deleteAll }
        end

        return ____exports
    end,
    ["lib.plugin.PluginEventHooks"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.PluginEventHooks(self, params)
            local ____params_0 = params
            local eventHandler = ____params_0.eventHandler
            local hookManager = ____params_0.hookManager
            return {
                hookPluginEvent = function(self, hookId, obj, callback, changeLevelFilter)
                    hookManager:hook({
                        hookId = hookId,
                        obj = obj,
                        onChange = function(obj, changeLevel)
                            if changeLevelFilter == nil or changeLevel == changeLevelFilter then
                                eventHandler:handlePluginEvent(
                                    "PluginEventHook: " .. hookId,
                                    function(____, context)
                                        callback(nil, obj, context, changeLevel)
                                    end
                                )
                            end
                        end
                    })
                end,
                hookInstanceEvent = function(self, hookId, instanceId, obj, callback, changeLevelFilter)
                    hookManager:hook({
                        hookId = hookId,
                        obj = obj,
                        onChange = function(obj, changeLevel)
                            if changeLevelFilter == nil or changeLevel == changeLevelFilter then
                                eventHandler:handleInstanceEvent(
                                    (("InstanceEventHook: " .. instanceId) .. ":") .. hookId,
                                    instanceId,
                                    function(____, context)
                                        callback(nil, obj, context, changeLevel)
                                    end
                                )
                            end
                        end
                    })
                end
            }
        end

        return ____exports
    end,
    ["lib.plugin.PluginImageManager"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____FileUtils = require("lib.FileUtils")
        local FileUtils = ____FileUtils.FileUtils
        local ____ImageLibraryAccess = require("lib.image.ImageLibraryAccess")
        local ImageLibraryAccess = ____ImageLibraryAccess.ImageLibraryAccess
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        local ASSET_TYPE_PREFIX = "__IMAGE_"
        function ____exports.PluginImageManager(self, params)
            local log = params.log:subLogger("ImageManager")
            local imageAccess = ImageLibraryAccess(nil, params.pu.pluginId, log)
            local function getImageAssetType(self, imageKey)
                return ASSET_TYPE_PREFIX .. imageKey
            end
            local function installBuiltInImages(self)
                local ____params_0 = params
                local pluginData = ____params_0.pluginData
                local builtInImages = ____params_0.builtInImages
                local pu = ____params_0.pu
                if pluginData.builtInImagesInstalled == false then
                    FileUtils:makeDir(imageAccess.imageLibraryPath)
                    imageAccess:writeToImageLibrary(__TS__ArrayMap(
                        objectKeys(nil, builtInImages),
                        function(____, imageKey)
                            local imageData = builtInImages[imageKey]
                            return { sourceBase64 = imageData.imageBase64, fileName = imageData.fileName }
                        end
                    ))
                    pluginData.builtInImagesInstalled = true
                end
            end
            local function isInternalImageSubPoolExists(self)
                local ____params_1 = params
                local pu = ____params_1.pu
                local subPoolRegistry = ____params_1.subPoolRegistry
                local imagesRange = subPoolRegistry:getPluginInternalSubPool(pu.pluginId, "Images")
                if imagesRange == nil then
                    log:error("SubPoolRegistry has no images sub-pool associated with this plugin")
                    return
                end
            end
            local function importAllImages(self)
                local ____params_2 = params
                local pluginAssetManager = ____params_2.pluginAssetManager
                local builtInImages = ____params_2.builtInImages
                isInternalImageSubPoolExists(nil)
                imageAccess:importImages(__TS__ArrayMap(
                    objectKeys(nil, builtInImages),
                    function(____, imagekey)
                        local imageId = pluginAssetManager:provisionSingleAssetId(
                            getImageAssetType(nil, imagekey),
                            "Images"
                        )
                        local imageData = builtInImages[imagekey]
                        return { imageFileName = imageData.fileName, targetIndex = imageId }
                    end
                ))
            end
            local function importImage(self, imageKey, targetId)
                local ____params_3 = params
                local builtInImages = ____params_3.builtInImages
                isInternalImageSubPoolExists(nil)
                local imageData = builtInImages[imageKey]
                imageAccess:importImages({ { imageFileName = imageData.fileName, targetIndex = targetId } })
            end
            local function getImageId(self, imageKey)
                local ____params_4 = params
                local pluginAssetManager = ____params_4.pluginAssetManager
                return pluginAssetManager:getSingleAssetId(
                    getImageAssetType(nil, imageKey),
                    "Images"
                )
            end
            local function uninstallImages(self)
                imageAccess:deleteAllImages()
            end
            return {
                imageLibraryPath = imageAccess.imageLibraryPath,
                uninstallImages = uninstallImages,
                installBuiltInImages = installBuiltInImages,
                importAllImages = importAllImages,
                importImage = importImage,
                getImageId = getImageId
            }
        end

        return ____exports
    end,
    ["lib.plugin.PluginInstanceManager"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ParseInt = ____lualib.__TS__ParseInt
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__ArraySort = ____lualib.__TS__ArraySort
        local __TS__Delete = ____lualib.__TS__Delete
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local findFirstAvailableNumber = ____Utils.findFirstAvailableNumber
        local objectKeys = ____Utils.objectKeys
        local objectNumOfItems = ____Utils.objectNumOfItems
        function ____exports.PluginInstanceManager(self, pluginInstances, userInstances)
            local function setInstanceData(self, instanceId, data)
                userInstances[instanceId] = data
            end
            ---
            -- @returns a provisioned instance string id
            local function provisionNewInstance(self, data)
                local instanceIdNumber = findFirstAvailableNumber(
                    nil,
                    __TS__ArraySort(__TS__ArrayMap(
                        objectKeys(nil, pluginInstances),
                        function(____, key) return __TS__ParseInt(key) end
                    ))
                )
                local instanceId = tostring(instanceIdNumber)
                pluginInstances[instanceId] = { assets = {} }
                userInstances[instanceId] = data
                return instanceId
            end
            ---
            -- @returns a provisioned instance string id
            local function loadUserInstance(self, instanceId, data)
                pluginInstances[instanceId] = { assets = {} }
                userInstances[instanceId] = data
                return instanceId
            end
            return {
                loadUserInstance = loadUserInstance,
                provisionNewInstance = provisionNewInstance,
                getNumOfInstances = function()
                    return objectNumOfItems(nil, pluginInstances)
                end,
                getInstanceIds = function()
                    return __TS__ArraySort(
                        objectKeys(nil, pluginInstances),
                        function(____, a, b) return __TS__ParseInt(a) - __TS__ParseInt(b) end
                    )
                end,
                getInstanceData = function(____, instanceId)
                    return userInstances[instanceId]
                end,
                setInstanceData = setInstanceData,
                deleteInstance = function(____, instanceId)
                    if rawget(pluginInstances, instanceId) ~= nil then
                        __TS__Delete(pluginInstances, instanceId)
                    end
                    if rawget(userInstances, instanceId) ~= nil then
                        __TS__Delete(userInstances, instanceId)
                    end
                end,
                deleteAll = function()
                    for ____, instanceId in ipairs(objectKeys(nil, pluginInstances)) do
                        if rawget(pluginInstances, instanceId) ~= nil then
                            __TS__Delete(pluginInstances, instanceId)
                        end
                    end
                    for ____, instanceId in ipairs(objectKeys(nil, userInstances)) do
                        if rawget(userInstances, instanceId) ~= nil then
                            __TS__Delete(userInstances, instanceId)
                        end
                    end
                end
            }
        end

        return ____exports
    end,
    ["lib.plugin.PluginMidiRemotes"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__StringStartsWith = ____lualib.__TS__StringStartsWith
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ObjectFactory = require("lib.ObjectFactory")
        local ObjectFactory = ____ObjectFactory.ObjectFactory
        ____exports.PluginMidiRemotesReadOnly = __TS__Class()
        local PluginMidiRemotesReadOnly = ____exports.PluginMidiRemotesReadOnly
        PluginMidiRemotesReadOnly.name = "PluginMidiRemotesReadOnly"
        function PluginMidiRemotesReadOnly.prototype.____constructor(self, pluginId, parentLog)
            self.pluginId = pluginId
            self.parentLog = parentLog
            self.log = parentLog:subLogger("PluginMidiRemotes")
        end

        function PluginMidiRemotesReadOnly.prototype.isMidiRemoteProvisioned(self)
            for ____, remote in ipairs(ObjectFactory.noContext:HMidiRemotes():getRemotes()) do
                if __TS__StringStartsWith(remote.name, self.pluginId) then
                    return true
                end
            end
            return false
        end

        ____exports.PluginMidiRemotes = __TS__Class()
        local PluginMidiRemotes = ____exports.PluginMidiRemotes
        PluginMidiRemotes.name = "PluginMidiRemotes"
        __TS__ClassExtends(PluginMidiRemotes, ____exports.PluginMidiRemotesReadOnly)
        function PluginMidiRemotes.prototype.____constructor(self, pluginId, parentLog)
            PluginMidiRemotes.____super.prototype.____constructor(self, pluginId, parentLog)
            self.pluginId = pluginId
            self.parentLog = parentLog
        end

        function PluginMidiRemotes.prototype.createRemoteName(self, instanceId, tag)
            return (((self.pluginId .. " I") .. instanceId) .. " ") .. tag
        end

        return ____exports
    end,
    ["lib.plugin.ContextBuilderBase"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____SubPoolRegistry = require("lib.plugins.SubPoolRegistry.index")
        local SubPoolRegistry = ____SubPoolRegistry.SubPoolRegistry
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        local typed = ____Utils.typed
        local ____ObjectFactory = require("lib.ObjectFactory")
        local ObjectFactory = ____ObjectFactory.ObjectFactory
        local ____ExternalActionCommandFactory = require("lib.plugin.ExternalActionCommandFactory")
        local ExternalActionCommandFactory = ____ExternalActionCommandFactory.ExternalActionCommandFactory
        local ____PluginAssetManager = require("lib.plugin.PluginAssetManager")
        local PluginAssetManager = ____PluginAssetManager.PluginAssetManager
        local ____PluginEventHooks = require("lib.plugin.PluginEventHooks")
        local PluginEventHooks = ____PluginEventHooks.PluginEventHooks
        local ____PluginImageManager = require("lib.plugin.PluginImageManager")
        local PluginImageManager = ____PluginImageManager.PluginImageManager
        local ____PluginInstanceManager = require("lib.plugin.PluginInstanceManager")
        local PluginInstanceManager = ____PluginInstanceManager.PluginInstanceManager
        local ____PluginMidiRemotes = require("lib.plugin.PluginMidiRemotes")
        local PluginMidiRemotes = ____PluginMidiRemotes.PluginMidiRemotes
        local PluginMidiRemotesReadOnly = ____PluginMidiRemotes.PluginMidiRemotesReadOnly
        ____exports.ContextBuilderBase = __TS__Class()
        local ContextBuilderBase = ____exports.ContextBuilderBase
        ContextBuilderBase.name = "ContextBuilderBase"
        function ContextBuilderBase.prototype.____constructor(self, params)
            self.params = params
        end

        function ContextBuilderBase.prototype.setEventHandler(self, eventHandler)
            self.eventHandler = eventHandler
        end

        function ContextBuilderBase.prototype.buildPluginContextReadOnly(self, pluginData, undo, subPoolRegistryData, log)
            local ____self_params_0 = self.params
            local pu = ____self_params_0.pu
            local builtInImages = ____self_params_0.builtInImages
            local runtime = ____self_params_0.runtime
            local ____pu_1 = pu
            local pluginId = ____pu_1.pluginId
            local pluginHandle = ____pu_1.pluginHandle
            local ____self_params_2 = self.params
            local enrichPluginContextReadOnly = ____self_params_2.enrichPluginContextReadOnly
            local displayHandle = ____self_params_2.displayHandle
            local of = __TS__New(
                ObjectFactory,
                {
                    undoBlock = undo,
                    hookManager = runtime:getHookManager(),
                    log = log
                }
            )
            local subPoolRegistry = __TS__New(SubPoolRegistry, {
                eventEmitter = runtime.pluginRegistry.eventDispatcher,
                pluginId = pluginId,
                data = subPoolRegistryData,
                log = log,
                readOnly = true
            })
            local pam = PluginAssetManager(nil, {
                pluginData = pluginData,
                log = log,
                of = of,
                subPoolRegistry = subPoolRegistry,
                pu = pu
            })
            local imageManager = PluginImageManager(
                nil,
                {
                    pluginData = pluginData,
                    pluginAssetManager = pam:getCommonAssetManager(),
                    builtInImages = builtInImages or ({}),
                    pu = pu,
                    subPoolRegistry = subPoolRegistry,
                    log = log
                }
            )
            local instanceManager = PluginInstanceManager(nil, pluginData.instances, pluginData.userData.instances)
            local partialContext = self:doBuildPluginEventContextBaseReadOnly(typed(
                nil,
                {
                    pluginData = pluginData,
                    displayHandle = displayHandle,
                    of = of,
                    imageManager = imageManager,
                    getInstanceIds = function() return instanceManager:getInstanceIds() end,
                    log = log,
                    mainAssetManager = pam,
                    subPoolRegistry = subPoolRegistry,
                    pu = pu,
                    undo = undo,
                    midiRemotes = __TS__New(PluginMidiRemotesReadOnly, pluginId, log)
                }
            ))
            return __TS__ObjectAssign(
                {},
                partialContext,
                {
                    buildInstanceEventContextReadOnly = function(____, instanceId)
                        return self:doBuildInstanceEventContextReadOnly(__TS__ObjectAssign(
                            {},
                            partialContext,
                            {
                                instanceId = instanceId,
                                instanceAssetManager = partialContext.mainAssetManager:getInstanceAssetManager(
                                instanceId)
                            }
                        ))
                    end
                }
            )
        end

        function ContextBuilderBase.prototype.doBuildPluginEventContextBaseReadOnly(self, baseContext)
            local ____self_params_3 = self.params
            local enrichPluginContextReadOnly = ____self_params_3.enrichPluginContextReadOnly
            local ____temp_4
            if enrichPluginContextReadOnly == nil then
                ____temp_4 = baseContext
            else
                ____temp_4 = enrichPluginContextReadOnly(nil, baseContext)
            end
            return ____temp_4
        end

        function ContextBuilderBase.prototype.buildInstanceContextReadOnly(self, pluginData, instanceId, undo,
                                                                           subPoolRegistryData, log)
            local pluginContext = self:buildPluginContextReadOnly(pluginData, undo, subPoolRegistryData, log)
            local ____self_params_5 = self.params
            local enrichInstanceContextReadOnly = ____self_params_5.enrichInstanceContextReadOnly
            local displayHandle = ____self_params_5.displayHandle
            return self:doBuildInstanceEventContextReadOnly(__TS__ObjectAssign(
                {},
                pluginContext,
                {
                    instanceId = instanceId,
                    instanceAssetManager = pluginContext.mainAssetManager:getInstanceAssetManager(instanceId)
                }
            ))
        end

        function ContextBuilderBase.prototype.doBuildInstanceEventContextReadOnly(self, baseContext)
            local ____self_params_6 = self.params
            local enrichInstanceContextReadOnly = ____self_params_6.enrichInstanceContextReadOnly
            local ____temp_7
            if enrichInstanceContextReadOnly == nil then
                ____temp_7 = baseContext
            else
                ____temp_7 = enrichInstanceContextReadOnly(nil, baseContext)
            end
            return ____temp_7
        end

        function ContextBuilderBase.prototype.buildPluginContext(self, pluginData, undo, subPoolRegistryData, log)
            local ____self_params_8 = self.params
            local pu = ____self_params_8.pu
            local builtInImages = ____self_params_8.builtInImages
            local enrichPluginContext = ____self_params_8.enrichPluginContext
            local displayHandle = ____self_params_8.displayHandle
            local runtime = ____self_params_8.runtime
            local ____pu_9 = pu
            local pluginId = ____pu_9.pluginId
            local pluginInfo = ____pu_9.pluginInfo
            local eventHandler = self.eventHandler
            if eventHandler == nil then
                error(log:msg("eventHandler not initialized"))
            end
            local of = __TS__New(
                ObjectFactory,
                {
                    undoBlock = undo,
                    hookManager = runtime:getHookManager(),
                    log = log
                }
            )
            local subPoolRegistry = __TS__New(SubPoolRegistry, {
                eventEmitter = runtime.pluginRegistry.eventDispatcher,
                pluginId = pluginId,
                data = subPoolRegistryData,
                log = log,
                readOnly = true
            })
            local pam = PluginAssetManager(nil, {
                pluginData = pluginData,
                log = log,
                of = of,
                subPoolRegistry = subPoolRegistry,
                pu = pu
            })
            local imageManager = PluginImageManager(
                nil,
                {
                    pluginData = pluginData,
                    pluginAssetManager = pam:getCommonAssetManager(),
                    builtInImages = builtInImages or ({}),
                    pu = pu,
                    subPoolRegistry = subPoolRegistry,
                    log = log
                }
            )
            local hooksManager = PluginEventHooks(
                nil,
                {
                    eventHandler = eventHandler,
                    hookManager = runtime:getHookManager()
                }
            )
            local instanceManager = PluginInstanceManager(nil, pluginData.instances, pluginData.userData.instances)
            local function buildInstanceContext(____, instanceId)
                return self:buildInstanceContext(
                    pluginData,
                    instanceId,
                    undo,
                    subPoolRegistryData,
                    log
                )
            end
            local baseContext = {
                forEachInstance = function(self, fn)
                    __TS__ArrayForEach(
                        instanceManager:getInstanceIds(),
                        function(____, instanceId)
                            return fn(
                                nil,
                                buildInstanceContext(nil, instanceId)
                            )
                        end
                    )
                end,
                buildInstanceContext = buildInstanceContext,
                buildPluginContextReadOnly = function()
                    local partialContext = self:doBuildPluginEventContextBaseReadOnly({
                        pluginData = pluginData,
                        displayHandle = displayHandle,
                        of = of,
                        imageManager = imageManager,
                        getInstanceIds = function() return instanceManager:getInstanceIds() end,
                        log = log,
                        mainAssetManager = pam,
                        subPoolRegistry = subPoolRegistry,
                        pu = pu,
                        undo = undo
                    })
                    return __TS__ObjectAssign(
                        {},
                        partialContext,
                        {
                            buildInstanceContextReadOnly = function(____, instanceId)
                                return self:doBuildInstanceEventContextReadOnly(__TS__ObjectAssign(
                                    {},
                                    partialContext,
                                    {
                                        instanceId = instanceId,
                                        instanceAssetManager = partialContext.mainAssetManager:getInstanceAssetManager(
                                        instanceId)
                                    }
                                ))
                            end
                        }
                    )
                end,
                externalActionCommandFactory = ExternalActionCommandFactory(nil, pluginInfo, self.params.componentNumber),
                instanceManager = instanceManager,
                imageManager = imageManager,
                hooks = hooksManager,
                of = of,
                pluginData = pluginData,
                subPoolRegistry = __TS__New(SubPoolRegistry, {
                    eventEmitter = runtime.pluginRegistry.eventDispatcher,
                    pluginId = pluginId,
                    data = subPoolRegistryData,
                    log = log,
                    readOnly = false
                }),
                mainAssetManager = pam,
                pluginRuntime = runtime,
                pu = pu,
                log = log,
                undo = undo,
                displayHandle = displayHandle
            }
            local ____temp_10
            if enrichPluginContext == nil then
                ____temp_10 = baseContext
            else
                ____temp_10 = enrichPluginContext(nil, baseContext)
            end
            return ____temp_10
        end

        function ContextBuilderBase.prototype.buildInstanceContext(self, pluginData, instanceId, undo,
                                                                   subPoolRegistryData, log)
            local ____self_params_11 = self.params
            local enrichInstanceContext = ____self_params_11.enrichInstanceContext
            local pluginContext = self:buildPluginContext(pluginData, undo, subPoolRegistryData, log)
            local baseContext = __TS__ObjectAssign(
                {},
                pluginContext,
                {
                    buildInstanceEventContextReadOnly = function()
                        return self:doBuildInstanceEventContextReadOnly(__TS__ObjectAssign(
                            {},
                            pluginContext:buildPluginContextReadOnly(),
                            {
                                instanceId = instanceId,
                                instanceAssetManager = pluginContext.mainAssetManager:getInstanceAssetManager(instanceId)
                            }
                        ))
                    end,
                    commonAssetManager = pluginContext.mainAssetManager:getCommonAssetManager(),
                    instanceAssetManager = pluginContext.mainAssetManager:getInstanceAssetManager(instanceId),
                    instanceId = instanceId,
                    numOfInstances = #objectKeys(nil, pluginData.userData.instances),
                    midiRemotes = __TS__New(PluginMidiRemotes, pluginContext.pu.pluginId, log)
                }
            )
            return enrichInstanceContext(nil, baseContext)
        end

        return ____exports
    end,
    ["lib.plugin.EventProviders"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__ArrayReduce = ____lualib.__TS__ArrayReduce
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____CommandUtils = require("lib.CommandUtils")
        local UndoBlock = ____CommandUtils.UndoBlock
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        local objectValues = ____Utils.objectValues
        --- REPORT BUG: When Undo is enabled, and I select 2 pools then do 2 undos, then MA crashes!
        local UNDO_BLOCK_ENABLED = false
        ____exports.DataProvider = __TS__Class()
        local DataProvider = ____exports.DataProvider
        DataProvider.name = "DataProvider"
        function DataProvider.prototype.____constructor(self, createDataAccess, log, options, postFinalize)
            self.createDataAccess = createDataAccess
            self.log = log
            self.options = options
            self.postFinalize = postFinalize
        end

        function DataProvider.prototype.prepare(self)
            self.dataAccess = self:createDataAccess()
            if not self.dataAccess:isCachedDataExists() and not self.dataAccess:read() then
                error((("Could not find MA variables data: variablesId=" .. self.dataAccess.variablesId) .. ", varName=") ..
                self.dataAccess.varName)
            end
        end

        function DataProvider.prototype.getValue(self)
            return self.dataAccess
        end

        function DataProvider.prototype.finalize(self)
            local dataAccess = self.dataAccess
            if dataAccess == nil then
                error(self.log:msg("finalize called without prepare"))
            end
            local wasWritten = false
            local ____table_options_readOnly_0 = self.options
            if ____table_options_readOnly_0 ~= nil then
                ____table_options_readOnly_0 = ____table_options_readOnly_0.readOnly
            end
            if ____table_options_readOnly_0 ~= true and dataAccess:isDirty() then
                dataAccess:write()
                wasWritten = true
            end
            if self.postFinalize ~= nil then
                self:postFinalize(wasWritten)
            end
        end

        ____exports.UndoProvider = __TS__Class()
        local UndoProvider = ____exports.UndoProvider
        UndoProvider.name = "UndoProvider"
        function UndoProvider.prototype.____constructor(self, undoName, options)
            self.undoName = undoName
            self.options = options
        end

        function UndoProvider.prototype.prepare(self)
            local ____UndoBlock_6 = UndoBlock
            local ____self_undoName_5 = self.undoName
            local ____table_options_undoBlockEnabled_2 = self.options
            if ____table_options_undoBlockEnabled_2 ~= nil then
                ____table_options_undoBlockEnabled_2 = ____table_options_undoBlockEnabled_2.undoBlockEnabled
            end
            local ____table_options_undoBlockEnabled_2_4 = ____table_options_undoBlockEnabled_2
            if ____table_options_undoBlockEnabled_2_4 == nil then
                ____table_options_undoBlockEnabled_2_4 = UNDO_BLOCK_ENABLED
            end
            self.undo = ____UndoBlock_6(nil, ____self_undoName_5, ____table_options_undoBlockEnabled_2_4)
        end

        function UndoProvider.prototype.getValue(self)
            return self.undo
        end

        function UndoProvider.prototype.finalize(self)
            local ____table_undo_close_result_7 = self.undo
            if ____table_undo_close_result_7 ~= nil then
                ____table_undo_close_result_7 = ____table_undo_close_result_7:close()
            end
        end

        function ____exports.MultiProvider(self, log, providers, common)
            return {
                prepare = function(self)
                    __TS__ArrayForEach(
                        objectKeys(nil, providers),
                        function(____, pKey)
                            local provider = providers[pKey]
                            log:trace("prepare " .. pKey)
                            provider:prepare()
                        end
                    )
                end,
                getValue = function(self)
                    return __TS__ArrayReduce(
                        objectKeys(nil, providers),
                        function(____, result, key)
                            result[key] = __TS__ObjectAssign(
                                {},
                                providers[key]:getValue(),
                                common
                            )
                            return result
                        end,
                        {}
                    )
                end,
                finalize = function(self)
                    __TS__ArrayForEach(
                        objectValues(nil, providers),
                        function(____, p) return p:finalize() end
                    )
                end
            }
        end

        ____exports.eventBuilder = function(____, eventName, pu, runtime, displayHandle, parentLog)
            local providers = {}
            local eventLog = parentLog:subLogger("E:" .. eventName)
            local b = {
                withData = function(self, options)
                    local log = eventLog:subLogger("PluginData")
                    providers.data = __TS__New(
                        ____exports.DataProvider,
                        function() return runtime.dataAccess end,
                        log,
                        options
                    )
                    return self
                end,
                withUndo = function(self, options)
                    providers.undo = __TS__New(____exports.UndoProvider, eventName, options)
                    return self
                end,
                withSubPoolRegistryData = function(self, options)
                    local log = eventLog:subLogger("SubPoolRegistryData")
                    providers.subPoolRegistryData = __TS__New(
                        ____exports.DataProvider,
                        function() return runtime.pluginRegistry:getOrInitSubPoolRegistryDataAccess() end,
                        log,
                        options,
                        function(____, wasWritten)
                            if wasWritten then
                                log:trace("data CHANGED, dispatching event [subPoolsChange]")
                                runtime.pluginRegistry.eventDispatcher:emit({ eventName = "subPoolsChange", displayHandle =
                                displayHandle, pluginId = pu.pluginId })
                            end
                        end
                    )
                    return self
                end,
                build = function(self)
                    return { eventName = eventName, providers = providers, valuesStub = {}, log = eventLog }
                end
            }
            return b
        end
        return ____exports
    end,
    ["lib.plugin.InstanceRuntimeBase"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____HookManager = require("lib.HookManager")
        local HookManager = ____HookManager.HookManager
        ____exports.InstanceRuntimeBase = __TS__Class()
        local InstanceRuntimeBase = ____exports.InstanceRuntimeBase
        InstanceRuntimeBase.name = "InstanceRuntimeBase"
        function InstanceRuntimeBase.prototype.____constructor(self, instanceId, pluginInfo, log, pluginRuntime)
            self.log = log:subLogger(("Instance(" .. instanceId) .. ")")
            self.__instanceHooksManager = HookManager(
                nil,
                {
                    id = "instance_" .. instanceId,
                    pluginHandle = pluginInfo.componentHandle:Parent(),
                    parentLog = self.log,
                    mutexFactory = pluginRuntime.mutexFactory
                }
            )
        end

        function InstanceRuntimeBase.prototype.getHookManager(self)
            return self.__instanceHooksManager
        end

        function InstanceRuntimeBase.prototype.cleanUp(self)
            self.__instanceHooksManager:cleanup()
        end

        return ____exports
    end,
    ["lib.AssertUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.AssertUtils = {
            assertNonEmpty = function(self, s, msgPrefix)
                assert(s ~= nil and #s > 0, msgPrefix .. ": Assert Non Empty String")
            end
        }
        return ____exports
    end,
    ["lib.ui.types"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.ui.InputFieldValidators"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__StringSplit = ____lualib.__TS__StringSplit
        local __TS__ParseInt = ____lualib.__TS__ParseInt
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local isInteger = ____Utils.isInteger
        local function EXEC_ID(____, v)
            local parts = __TS__StringSplit(v, ".")
            if #parts ~= 2 then
                return { isValid = false, errorMsg = ("Invalid execId (" .. v) ..
                "). must have 2 parts separated by a dot.\n e.g 1.201" }
            end
            if not isInteger(nil, parts[1]) or not isInteger(nil, parts[2]) then
                return { isValid = false, errorMsg = ("Invalid execId (" .. v) .. "). parts must be numbers" }
            end
            return { isValid = true, errorMsg = "" }
        end
        local function POSITIVE_NUMBER(____, v)
            if not isInteger(nil, v) or __TS__ParseInt(v) < 1 then
                return { isValid = false, errorMsg = ("Invalid pool index (" .. v) ..
                "). index must be a positive integer number" }
            end
            return { isValid = true, errorMsg = "" }
        end
        local function POSITIVE_NUMBER_V2(____, v)
            if v < 1 then
                return {
                    isValid = false,
                    errorMsg = ("Invalid pool index (" .. tostring(v)) .. "). index must be a positive integer number"
                }
            end
            return { isValid = true, errorMsg = "" }
        end
        local function MIDI_INDEX_OR_VALUE(____, v)
            if not isInteger(nil, v) or __TS__ParseInt(v) < 0 or __TS__ParseInt(v) > 127 then
                return { isValid = false, errorMsg = ("Invalid pool index (" .. v) ..
                "). index must be a positive integer number" }
            end
            return { isValid = true, errorMsg = "" }
        end
        ____exports.Validators = { EXEC_ID = EXEC_ID, POSITIVE_NUMBER = POSITIVE_NUMBER }
        return ____exports
    end,
    ["lib.ui.MessageBoxHelperV2"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__ParseInt = ____lualib.__TS__ParseInt
        local __TS__ObjectRest = ____lualib.__TS__ObjectRest
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__ArrayReduce = ____lualib.__TS__ArrayReduce
        local __TS__ArrayFindIndex = ____lualib.__TS__ArrayFindIndex
        local __TS__Number = ____lualib.__TS__Number
        local __TS__NumberIsNaN = ____lualib.__TS__NumberIsNaN
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____InputFieldValidators = require("lib.ui.InputFieldValidators")
        local Validators = ____InputFieldValidators.Validators
        do
            local ____InputFieldValidators = require("lib.ui.InputFieldValidators")
            local Validators = ____InputFieldValidators.Validators
            ____exports.Validators = Validators
        end
        local function validateOptions(self, options)
            local inputLabels = {}
            if options.inputs ~= nil then
                __TS__ArrayForEach(
                    options.inputs,
                    function(____, inputOptions)
                        if __TS__ArrayIncludes(inputLabels, inputOptions.label) then
                            return { isValidOptions = false, errorMsg =
                            "duplicate labels are not allowed in inputs field" }
                        end
                        inputLabels[#inputLabels + 1] = inputOptions.label
                    end
                )
            end
            return { isValidOptions = true, errorMsg = "" }
        end
        local function validateInputFields(self, mbInputs, resultInputs)
            for ____, inputOptions in ipairs(mbInputs) do
                local builtInValidateFn = nil
                repeat
                    local ____switch9 = inputOptions.type
                    local ____cond9 = ____switch9 == "POSITIVE_NUMBER"
                    if ____cond9 then
                        do
                            builtInValidateFn = Validators.POSITIVE_NUMBER
                            break
                        end
                    end
                until true
                local value = resultInputs[inputOptions.label]
                local function createMsg(____, msg)
                    return (("Input Field [" .. inputOptions.label) .. "] is invalid:\n\n") .. msg
                end
                if builtInValidateFn ~= nil then
                    local result = builtInValidateFn(nil, value)
                    if not result.isValid then
                        return {
                            isValid = false,
                            errorMsg = createMsg(nil, result.errorMsg)
                        }
                    end
                end
                if inputOptions.isValid ~= nil then
                    local result = inputOptions:isValid(value)
                    if not result.isValid then
                        return {
                            isValid = false,
                            errorMsg = createMsg(nil, result.errorMsg)
                        }
                    end
                end
            end
            return { isValid = true, errorMsg = "" }
        end
        local function parseInputs(self, resultInputs, mbInputs)
            local inputs = {}
            for ____, inputOptions in ipairs(mbInputs) do
                local value = resultInputs[inputOptions.label]
                repeat
                    local ____switch19 = inputOptions.type
                    local ____cond19 = ____switch19 == "POSITIVE_NUMBER"
                    if ____cond19 then
                        do
                            inputs[inputOptions.id] = __TS__ParseInt(value)
                            break
                        end
                    end
                    do
                        do
                            inputs[inputOptions.id] = value
                        end
                    end
                until true
            end
            return inputs
        end
        local function convertStates(self, resultStates, mbStates)
            local states = {}
            for ____, stateOptions in ipairs(mbStates) do
                local stateValue = resultStates[stateOptions.label]
                states[stateOptions.id] = stateValue
            end
            return states
        end
        local function convertSelectors(self, resultSelectors, mbSelectors)
            local selectors = {}
            for ____, selectorOptions in ipairs(mbSelectors) do
                local selectedOptionIndex = resultSelectors[selectorOptions.label]
                local selectorOptionId = selectorOptions.options[selectedOptionIndex + 1].id
                selectors[selectorOptions.id] = selectorOptionId
            end
            return selectors
        end
        local function toMessageBoxInputOptions(self, mbInputs)
            return __TS__ArrayMap(
                mbInputs,
                function(____, inputOptions)
                    local ____inputOptions_0 = inputOptions
                    local id = ____inputOptions_0.id
                    local label = ____inputOptions_0.label
                    local isValid = ____inputOptions_0.isValid
                    local ____type = ____inputOptions_0.type
                    local originalInputProps = __TS__ObjectRest(____inputOptions_0,
                        { id = true, label = true, isValid = true, type = true })
                    local options = __TS__ObjectAssign({}, originalInputProps,
                        ____type == "POSITIVE_NUMBER" and ({ vkPlugin = "NumericInput" }) or ({}), { name = label })
                    return options
                end
            )
        end
        local function toMessageBoxStatesOptions(self, mbStates)
            return __TS__ArrayMap(
                mbStates,
                function(____, state)
                    local ____state_1 = state
                    local id = ____state_1.id
                    local label = ____state_1.label
                    local originalStateProps = __TS__ObjectRest(____state_1, { id = true, label = true })
                    local options = __TS__ObjectAssign({}, originalStateProps, { name = label })
                    return options
                end
            )
        end
        local function toMessageBoxSelectorsOptions(self, mbSelectors)
            return __TS__ArrayMap(
                mbSelectors,
                function(____, selector)
                    local ____selector_2 = selector
                    local id = ____selector_2.id
                    local label = ____selector_2.label
                    local selectedOptionId = ____selector_2.selectedOptionId
                    local options = ____selector_2.options
                    local originalStateProps = __TS__ObjectRest(____selector_2,
                        { id = true, label = true, selectedOptionId = true, options = true })
                    local values = __TS__ArrayReduce(
                        options,
                        function(____, res, option, index)
                            res[option.label] = index
                            return res
                        end,
                        {}
                    )
                    local selectedValue = __TS__ArrayFindIndex(
                        options,
                        function(____, o) return o.id == selectedOptionId end
                    )
                    local mbSelectorOptions = __TS__ObjectAssign({}, originalStateProps,
                        { name = label, values = values, selectedValue = selectedValue })
                    return mbSelectorOptions
                end
            )
        end
        local function mergeOptionsFromResult(self, srcOptions, mbOptions, mbData, errorMsg)
            local mbInputs = mbOptions.inputs
            local ____temp_4
            if mbInputs == nil then
                ____temp_4 = nil
            else
                ____temp_4 = __TS__ArrayMap(
                    mbInputs,
                    function(____, inputOptions)
                        local ____inputOptions_3 = inputOptions
                        local value = ____inputOptions_3.value
                        local label = ____inputOptions_3.label
                        local isValid = ____inputOptions_3.isValid
                        local ____type = ____inputOptions_3.type
                        local originalInputProps = __TS__ObjectRest(____inputOptions_3,
                            { value = true, label = true, isValid = true, type = true })
                        local newValue = mbData.inputs[inputOptions.id]
                        local options = __TS__ObjectAssign(
                            {},
                            originalInputProps,
                            ____type == "POSITIVE_NUMBER" and ({ vkPlugin = "NumericInput" }) or ({}),
                            {
                                name = label,
                                value = type(newValue) == "number" and
                                (__TS__NumberIsNaN(__TS__Number(newValue)) and "" or tostring(newValue)) or newValue
                            }
                        )
                        return options
                    end
                )
            end
            local newInputs = ____temp_4
            local mbStates = mbOptions.states
            local ____temp_6
            if mbStates == nil then
                ____temp_6 = nil
            else
                ____temp_6 = __TS__ArrayMap(
                    mbStates,
                    function(____, stateOptions)
                        local ____stateOptions_5 = stateOptions
                        local state = ____stateOptions_5.state
                        local label = ____stateOptions_5.label
                        local originalInputProps = __TS__ObjectRest(____stateOptions_5, { state = true, label = true })
                        local newValue = mbData.states[stateOptions.id]
                        local options = __TS__ObjectAssign({}, originalInputProps, { name = label, state = newValue })
                        return options
                    end
                )
            end
            local newStates = ____temp_6
            local mbSelectors = mbOptions.selectors
            local newSelectors = nil
            if mbSelectors ~= nil then
                newSelectors = toMessageBoxSelectorsOptions(nil, mbSelectors)
                __TS__ArrayForEach(
                    newSelectors,
                    function(____, selector, index)
                        local selectedOptionId = mbData.selectors[mbSelectors[index + 1].id]
                        selector.selectedValue = __TS__ArrayFindIndex(
                            mbSelectors[index + 1].options,
                            function(____, o) return o.id == selectedOptionId end
                        )
                    end
                )
            end
            return __TS__ObjectAssign({}, srcOptions, {
                inputs = newInputs,
                states = newStates,
                selectors = newSelectors,
                message = errorMsg,
                backColor = "Global.AlertText"
            })
        end
        function ____exports.showMessageBox(self, options)
            local ____options_7 = options
            local mbCommands = ____options_7.commands
            local mbInputs = ____options_7.inputs
            local mbStates = ____options_7.states
            local mbSelectors = ____options_7.selectors
            local onUserAbort = ____options_7.onUserAbort
            local validateData = ____options_7.validateData
            local partialOriginalOptions = __TS__ObjectRest(____options_7, {
                commands = true,
                inputs = true,
                states = true,
                selectors = true,
                onUserAbort = true,
                validateData = true
            })
            local ____validateOptions_result_8 = validateOptions(nil, options)
            local isValidOptions = ____validateOptions_result_8.isValidOptions
            local errorMsg = ____validateOptions_result_8.errorMsg
            if not isValidOptions then
                error("MessageBoxHelper: invalid options: " .. errorMsg)
            end
            local commands = __TS__ArrayMap(
                mbCommands,
                function(____, cmd, index)
                    return { name = cmd.label, value = index }
                end
            )
            local ____temp_9
            if mbInputs == nil then
                ____temp_9 = nil
            else
                ____temp_9 = toMessageBoxInputOptions(nil, mbInputs)
            end
            local initialInputs = ____temp_9
            local ____temp_10
            if mbStates == nil then
                ____temp_10 = nil
            else
                ____temp_10 = toMessageBoxStatesOptions(nil, mbStates)
            end
            local initialStates = ____temp_10
            local ____temp_11
            if mbSelectors == nil then
                ____temp_11 = nil
            else
                ____temp_11 = toMessageBoxSelectorsOptions(nil, mbSelectors)
            end
            local initialSelectors = ____temp_11
            local messageBoxOptions = __TS__ObjectAssign(
                {},
                partialOriginalOptions,
                { commands = commands },
                initialInputs == nil and ({}) or ({ inputs = initialInputs }),
                initialStates == nil and ({}) or ({ states = initialStates }),
                initialSelectors == nil and ({}) or ({ selectors = initialSelectors })
            )
            local isValid = true
            repeat
                do
                    local mbResult = MessageBox(__TS__ObjectAssign({}, messageBoxOptions))
                    local success = mbResult.success
                    local commandIndex = mbResult.result
                    local resultInputs = mbResult.inputs
                    local resultSelectors = mbResult.selectors
                    local resultStates = mbResult.states
                    if not success then
                        local ____temp_12
                        if onUserAbort == nil then
                            ____temp_12 = nil
                        else
                            ____temp_12 = onUserAbort(nil)
                        end
                        return ____temp_12
                    else
                        local command = mbCommands[(commandIndex == -1 and 0 or commandIndex) + 1]
                        if command.type ~= nil and command.type == "abort" then
                            return command:action()
                        else
                            local messageBoxData = {
                                inputs = mbInputs == nil and ({}) or parseInputs(nil, resultInputs, mbInputs),
                                states = mbStates == nil and ({}) or convertStates(nil, resultStates, mbStates),
                                selectors = mbSelectors == nil and ({}) or
                                convertSelectors(nil, resultSelectors, mbSelectors)
                            }
                            local errorMsg = ""
                            if mbInputs ~= nil then
                                local ____validateInputFields_result_13 = validateInputFields(nil, mbInputs, resultInputs)
                                local _isValid = ____validateInputFields_result_13.isValid
                                local _errorMsg = ____validateInputFields_result_13.errorMsg
                                isValid = _isValid
                                errorMsg = _errorMsg
                            end
                            if isValid and validateData ~= nil then
                                local result = validateData(nil, messageBoxData)
                                isValid = result.isValid
                                errorMsg = result.isValid and errorMsg or result.errorMsg
                            end
                            if isValid then
                                return command:action(messageBoxData)
                            else
                                messageBoxOptions = mergeOptionsFromResult(
                                    nil,
                                    messageBoxOptions,
                                    options,
                                    messageBoxData,
                                    errorMsg
                                )
                            end
                        end
                    end
                end
            until isValid
        end

        return ____exports
    end,
    ["lib.ui.Alert"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MessageBoxHelperV2 = require("lib.ui.MessageBoxHelperV2")
        local showMessageBox = ____MessageBoxHelperV2.showMessageBox
        function ____exports.showAlert(self, screenNumber, title, message)
            local mbOptions = {
                title = title,
                message = message,
                display = screenNumber,
                commands = { {
                    label = "Ok",
                    action = function(____, data)
                    end
                } }
            }
            return showMessageBox(nil, mbOptions)
        end

        return ____exports
    end,
    ["lib.ui.OldStartUI"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local nTimes = ____Utils.nTimes
        function ____exports.startUI(self, displayHandle, initialDialog)
            local dialogStack = { initialDialog }
            while #dialogStack > 0 do
                local uiAction = dialogStack[#dialogStack]:show(displayHandle)
                repeat
                    local ____switch4 = uiAction.type
                    local ____cond4 = ____switch4 == "Quit"
                    if ____cond4 then
                        do
                            dialogStack = {}
                            return uiAction.returnValue
                        end
                    end
                    ____cond4 = ____cond4 or ____switch4 == "PushDialog"
                    if ____cond4 then
                        do
                            dialogStack[#dialogStack + 1] = uiAction.dialog
                            break
                        end
                    end
                    ____cond4 = ____cond4 or ____switch4 == "PopDialog"
                    if ____cond4 then
                        do
                            nTimes(
                                nil,
                                uiAction.numOfDialogsToPop or 1,
                                function()
                                    table.remove(dialogStack)
                                end
                            )
                            if #dialogStack == 0 then
                                return uiAction.returnValue
                            end
                            break
                        end
                    end
                    ____cond4 = ____cond4 or ____switch4 == "ReplaceDialog"
                    if ____cond4 then
                        do
                            table.remove(dialogStack)
                            dialogStack[#dialogStack + 1] = uiAction.dialog
                            break
                        end
                    end
                    ____cond4 = ____cond4 or ____switch4 == "RefreshDialog"
                    if ____cond4 then
                        do
                            break
                        end
                    end
                until true
            end
            error("startUI: dialogStack empty")
        end

        return ____exports
    end,
    ["lib.ui.PopupInputHelper"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ObjectRest = ____lualib.__TS__ObjectRest
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.showPopupInput(self, options)
            local ____options_0 = options
            local actions = ____options_0.actions
            local selectedIndex = ____options_0.selectedIndex
            local popupInputOptions = __TS__ObjectRest(____options_0, { actions = true, selectedIndex = true })
            local items = __TS__ArrayMap(
                actions,
                function(____, a) return a.label end
            )
            assert(#items > 0, "showPopupInput(): items array must not be empty")
            local index, _label = PopupInput(__TS__ObjectAssign({}, popupInputOptions,
                { items = items, selectedValue = items[selectedIndex + 1] }))
            if index ~= nil then
                return options.actions[index + 1]:action()
            end
        end

        return ____exports
    end,
    ["lib.ui.UIColors"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ColorGroups = Root().ColorTheme.ColorGroups
        ____exports.CGGlobal = ColorGroups.Global
        ____exports.CGDisplay = ColorGroups.Display
        ____exports.UIColors = {
            Global = Root().ColorTheme.ColorDefCollect.Global,
            Text = ____exports.CGGlobal.Text,
            DisabledText = ____exports.CGGlobal.LabelText,
            AlertText = ____exports.CGGlobal.AlertText,
            LabelBG = ____exports.CGGlobal.BackgroundSelectedInverted,
            ColorGroupsGlobal = ____exports.CGGlobal,
            FrameColor = ____exports.CGDisplay.FrameColor,
            Background = ____exports.CGGlobal.Background,
            BackgroundSelected = ____exports.CGGlobal.BackgroundSelected,
            BackgroundSelectedInverted = ____exports.CGGlobal.BackgroundSelectedInverted,
            Default = ____exports.CGGlobal.Default,
            Darkened = ____exports.CGGlobal.Darkened,
            Transparent = ____exports.CGGlobal.Transparent,
            Transparent25 = ____exports.CGGlobal.Transparent25,
            Transparent50 = ____exports.CGGlobal.Transparent50,
            Transparent75 = ____exports.CGGlobal.Transparent75,
            Disabled = ____exports.CGGlobal.Disabled,
            LabelText = ____exports.CGGlobal.LabelText,
            Lightened = ____exports.CGGlobal.Lightened,
            Selected = ____exports.CGGlobal.Selected,
            PartlySelected = ____exports.CGGlobal.PartlySelected
        }
        return ____exports
    end,
    ["lib.ui.UIDebugUtils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local printAnchors, ____print
        local ____StringUtils = require("lib.StringUtils")
        local StringUtils = ____StringUtils.StringUtils
        function printAnchors(self, a)
            return type(a) == "string" and a or
            ((((((("tb[" .. tostring(a.top)) .. ",") .. tostring(a.bottom)) .. "]lr[") .. tostring(a.left)) .. ",") .. tostring(a.right)) ..
            "]"
        end

        function ____print(self, obj, prefix)
            local s = ""
            local function printCommon(self)
                local o = obj
                return ((((o.w == nil and "" or (prefix .. "w: ") .. tostring(o.w)) .. "\n") .. (o.h == nil and "" or (prefix .. "h: ") .. tostring(o.h))) .. "\n") ..
                (o.anchors == nil and "" or (prefix .. "anchors: ") .. printAnchors(nil, o.anchors))
            end
            repeat
                local ____switch12 = obj:GetClass()
                local ____cond12 = ____switch12 == "Popup"
                if ____cond12 then
                    do
                        s = s .. printCommon(nil)
                        break
                    end
                end
                ____cond12 = ____cond12 or ____switch12 == "UIObject"
                if ____cond12 then
                    do
                        s = s .. printCommon(nil)
                        s = s .. (prefix .. "alignmentH: ") .. tostring(obj.alignmentH)
                        break
                    end
                end
                ____cond12 = ____cond12 or ____switch12 == "Item"
                if ____cond12 then
                    do
                        local item = obj
                        s = s .. ((("[" .. item.sizePolicy) .. ",") .. tostring(item.size)) .. "]"
                        break
                    end
                end
                ____cond12 = ____cond12 or ____switch12 == "LineEdit"
                if ____cond12 then
                    do
                        local item = obj
                        s = s .. "\n" .. printCommon(nil)
                        s = s .. (prefix .. "text: ") .. tostring(obj.text)
                        break
                    end
                end
                ____cond12 = ____cond12 or ____switch12 == "Button"
                if ____cond12 then
                    do
                        local button = obj
                        s = s .. "\n" .. printCommon(nil)
                        s = s .. ((("\n" .. prefix) .. "text: ") .. button.text) .. "\n"
                        break
                    end
                end
                ____cond12 = ____cond12 or ____switch12 == "UILayoutGrid"
                if ____cond12 then
                    do
                        local grid = obj
                        s = s .. printCommon(nil)
                        break
                    end
                end
                do
                    do
                        s = s .. ""
                    end
                end
            until true
            return s
        end

        local INDENT = "  "
        function ____exports.dump(self, obj, indent, multiline)
            if indent == nil then
                indent = 0
            end
            if multiline == nil then
                multiline = true
            end
            local s = ""
            s = s .. obj.name .. " - "
            local keyPrefix2 = StringUtils["repeat"](StringUtils, INDENT, indent + 2)
            local function printProps(self, obj)
                s = s .. ____print(nil, obj, keyPrefix2) .. "\n"
            end
            local function printIf(self, propName)
                if obj[propName] ~= nil then
                    s = s .. (((keyPrefix2 .. propName) .. ": ") .. tostring(obj[propName])) .. "\n"
                end
            end
            local count = obj:Count()
            if count == 0 then
                printProps(nil, obj)
            else
                s = s .. "\n"
                printProps(nil, obj)
                local children = obj:Children()
                do
                    local i = 0
                    while i < #children do
                        local child = children[i + 1]
                        s = s .. ((keyPrefix2 .. tostring(i + 1)) .. ":") .. ____exports.dump(nil, child, indent + 1)
                        i = i + 1
                    end
                end
            end
            return s
        end

        ____exports.UIDebugUtils = { dump = ____exports.dump }
        return ____exports
    end,
    ["lib.ui.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        do
            local ____Alert = require("lib.ui.Alert")
            local showAlert = ____Alert.showAlert
            ____exports.showAlert = showAlert
        end
        do
            local ____MessageBoxHelperV2 = require("lib.ui.MessageBoxHelperV2")
            local showMessageBox = ____MessageBoxHelperV2.showMessageBox
            ____exports.showMessageBox = showMessageBox
        end
        do
            local ____OldStartUI = require("lib.ui.OldStartUI")
            local startUI = ____OldStartUI.startUI
            ____exports.startUI = startUI
        end
        do
            local ____PopupInputHelper = require("lib.ui.PopupInputHelper")
            local showPopupInput = ____PopupInputHelper.showPopupInput
            ____exports.showPopupInput = showPopupInput
        end
        do
            local ____UIColors = require("lib.ui.UIColors")
            local ColorGroupsGlobal = ____UIColors.CGGlobal
            local UIColors = ____UIColors.UIColors
            ____exports.ColorGroupsGlobal = ColorGroupsGlobal
            ____exports.UIColors = UIColors
        end
        do
            local ____UIDebugUtils = require("lib.ui.UIDebugUtils")
            local UIDebugUtils = ____UIDebugUtils.UIDebugUtils
            ____exports.UIDebugUtils = UIDebugUtils
        end
        return ____exports
    end,
    ["lib.plugin.PluginSignals"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__Delete = ____lualib.__TS__Delete
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.PluginSignals = __TS__Class()
        local PluginSignals = ____exports.PluginSignals
        PluginSignals.name = "PluginSignals"
        function PluginSignals.prototype.____constructor(self, pluginInfo, parentLog)
            self.pluginInfo = pluginInfo
            self.parentLog = parentLog
            self.log = parentLog:subLogger("PluginSignals")
        end

        function PluginSignals.prototype.registerHandler(self, signalId, callback)
            local signalTable = self.pluginInfo.signalTable
            signalTable[signalId] = callback
        end

        function PluginSignals.prototype.unregisterHandler(self, signalId)
            local signalTable = self.pluginInfo.signalTable
            __TS__Delete(signalTable, signalId)
        end

        return ____exports
    end,
    ["lib.ui.components.UIBaseComponent"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.ui.components.HActionList"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local applyObjPropsWithDefaults = ____Utils.applyObjPropsWithDefaults
        local DEFAULT_OPTIONS = {}
        ____exports.DEFAULT_ACTION_HEIGHT = 100
        ____exports.HActionList = __TS__Class()
        local HActionList = ____exports.HActionList
        HActionList.name = "HActionList"
        function HActionList.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
        end

        function HActionList.prototype.render(self, renderContext)
            local ____self_options_0 = self.options
            local _actionHeight = ____self_options_0.actionHeight
            local items = ____self_options_0.actions
            local id = ____self_options_0.id
            local textAlignmentH = ____self_options_0.textAlignmentH
            local direction = ____self_options_0.direction
            local actionHeight = _actionHeight == nil and ____exports.DEFAULT_ACTION_HEIGHT or _actionHeight
            local optionsWithDefaults = __TS__ObjectAssign(self.options, DEFAULT_OPTIONS)
            local grid = self.context.f:HUnidirectionalGrid(__TS__ObjectAssign(
                {},
                optionsWithDefaults,
                {
                    direction = direction,
                    children = __TS__ArrayMap(
                        items,
                        function(____, item, index)
                            return {
                                comp = self.context.f:UIButton({
                                    id = (id .. "__option_") .. tostring(index),
                                    label = item.label,
                                    signals = {
                                        clicked = function(____, caller)
                                            item:action()
                                        end
                                    }
                                }),
                                item = direction == "Vertical" and ({ sizePolicy = "Fixed", size = actionHeight }) or
                                ({ sizePolicy = "Stretch", size = 1 })
                            }
                        end
                    ),
                    visitChild = function(____, child, index)
                        local button = child
                        applyObjPropsWithDefaults(nil, button, {}, { textAlignmentH = textAlignmentH })
                    end
                }
            )):render(renderContext)
            return grid
        end

        return ____exports
    end,
    ["lib.ui.components.HHorizontalGrid"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____HUnidirectionalGrid = require("lib.ui.components.HUnidirectionalGrid")
        local HUnidirectionalGrid = ____HUnidirectionalGrid.HUnidirectionalGrid
        ____exports.HHorizontalGrid = __TS__Class()
        local HHorizontalGrid = ____exports.HHorizontalGrid
        HHorizontalGrid.name = "HHorizontalGrid"
        function HHorizontalGrid.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
        end

        function HHorizontalGrid.prototype.render(self, renderContext)
            return __TS__New(
                HUnidirectionalGrid,
                __TS__ObjectAssign({}, self.options, { direction = "Horizontal" }),
                self.context
            ):render(renderContext)
        end

        return ____exports
    end,
    ["lib.ui.components.ma.common"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        function ____exports.applyUIObjectProps(self, obj, props)
            if props.anchors ~= nil then
                obj.anchors = props.anchors
            end
            if props.w ~= nil then
                obj.w = props.w
            end
            if props.h ~= nil then
                obj.h = props.h
            end
        end

        function ____exports.renderObjectSignals(self, id, obj, signals, context)
            for ____, key in ipairs(objectKeys(nil, signals)) do
                local callbackFn = signals[key]
                local signalId = (id .. "_") .. key
                context.pluginSignals:registerHandler(
                    signalId,
                    function(____, caller)
                        callbackFn(nil, caller)
                    end
                )
                obj[key] = ":" .. signalId
            end
        end

        return ____exports
    end,
    ["lib.ui.components.ma.MAButton"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local applyObjProps = ____Utils.applyObjProps
        local applyObjPropsWithDefaults = ____Utils.applyObjPropsWithDefaults
        local ____common = require("lib.ui.components.ma.common")
        local renderObjectSignals = ____common.renderObjectSignals
        local DEFAULT_PROPS = {
            textShadow = 0,
            padding = { left = 10, right = 10, top = 10, bottom = 10 },
            focus = "CanHaveFocus",
            hasHover = "Yes",
            font = "Regular24",
            textAlignmentH = "Center"
        }
        ____exports.MAButton = __TS__Class()
        local MAButton = ____exports.MAButton
        MAButton.name = "MAButton"
        function MAButton.prototype.____constructor(self, options, context)
            self.context = context
            self.options = options
        end

        function MAButton.prototype.updateProps(self, props)
            applyObjProps(nil, self.button, props)
        end

        function MAButton.prototype.render(self, params)
            local ____params_0 = params
            local parent = ____params_0.parent
            local button = parent:Append("Button")
            self.button = button
            self:doUpdate(button, self.options)
            return button
        end

        function MAButton.prototype.update(self, options)
            if self.button == nil then
                error("update called befire render")
            end
            applyObjProps(nil, self.options, options)
            self:doUpdate(self.button, self.options)
        end

        function MAButton.prototype.doUpdate(self, button, options)
            local ____options_1 = options
            local signals = ____options_1.signals
            local id = ____options_1.id
            local label = ____options_1.label
            local icon = ____options_1.icon
            local props = ____options_1.props
            renderObjectSignals(
                nil,
                id,
                button,
                signals,
                self.context
            )
            applyObjPropsWithDefaults(
                nil,
                button,
                DEFAULT_PROPS,
                __TS__ObjectAssign(
                    {},
                    props == nil and ({}) or props,
                    { pluginComponent = self.context.pluginInfo.componentHandle },
                    label == nil and ({ text = "" }) or ({ text = label }),
                    icon == nil and ({ icon = "" }) or ({ icon = icon })
                )
            )
        end

        function MAButton.prototype.cleanup(self)
        end

        return ____exports
    end,
    ["lib.ui.components.HSelectionGridTypes"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.ui.components.HInputFieldGridTypes"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.HELP_ICON_WIDTH = 50
        return ____exports
    end,
    ["lib.ui.components.HInputFieldGrid"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectRest = ____lualib.__TS__ObjectRest
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__SparseArrayNew = ____lualib.__TS__SparseArrayNew
        local __TS__SparseArrayPush = ____lualib.__TS__SparseArrayPush
        local __TS__SparseArraySpread = ____lualib.__TS__SparseArraySpread
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ui = require("lib.ui.index")
        local ColorGroupsGlobal = ____ui.ColorGroupsGlobal
        local UIColors = ____ui.UIColors
        local ____HInputFieldGridTypes = require("lib.ui.components.HInputFieldGridTypes")
        local HELP_ICON_WIDTH = ____HInputFieldGridTypes.HELP_ICON_WIDTH
        local DEFAULT_OPTIONS = { w = "100%", h = "100%" }
        ____exports.HInputFieldGrid = __TS__Class()
        local HInputFieldGrid = ____exports.HInputFieldGrid
        HInputFieldGrid.name = "HInputFieldGrid"
        function HInputFieldGrid.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
            self.log = self.context.log
        end

        function HInputFieldGrid.prototype.render(self, renderContext)
            self.log:trace("HInputFieldGrid.render()")
            local ____self_options_0 = self.options
            local labelColumnSize = ____self_options_0.labelColumnSize
            local valueColumnSize = ____self_options_0.valueColumnSize
            local rowSize = ____self_options_0.rowSize
            local inputFields = ____self_options_0.inputFields
            local data = ____self_options_0.data
            local textAlignmentH = ____self_options_0.textAlignmentH
            local optionsRest = __TS__ObjectRest(____self_options_0, {
                labelColumnSize = true,
                valueColumnSize = true,
                rowSize = true,
                inputFields = true,
                data = true,
                textAlignmentH = true
            })
            local optionsWithDefaults = __TS__ObjectAssign(optionsRest, DEFAULT_OPTIONS)
            local children = __TS__ArrayMap(
                inputFields,
                function(____, field)
                    local ____field_1 = field
                    local helpAction = ____field_1.helpAction
                    local id = ____field_1.id
                    local labelComp = self.context.f:UIText({ text = field.label, backColor = ColorGroupsGlobal
                    .BackgroundSelectedInverted, textAlignmentH = textAlignmentH })
                    local ____self_3 = self.context.f
                    local ____self_3_HHorizontalGrid_4 = ____self_3.HHorizontalGrid
                    local ____array_2 = __TS__SparseArrayNew(table.unpack(helpAction == nil and
                    ({ { comp = labelComp, item = labelColumnSize } }) or ({ {
                        comp = self.context.f:HHorizontalGrid({ children = {
                            { comp = labelComp, item = { sizePolicy = "Stretch", size = 1 } },
                            {
                                comp = self.context.f:UIButton({
                                    id = id,
                                    label = "",
                                    icon = "QuestionMarkIcon",
                                    props = { backColor = UIColors.BackgroundSelectedInverted, w = 50, h = 50 },
                                    signals = { clicked = function()
                                        helpAction(nil)
                                    end }
                                }),
                                item = { sizePolicy = "Fixed", size = HELP_ICON_WIDTH }
                            }
                        } }),
                        item = labelColumnSize
                    } })))
                    __TS__SparseArrayPush(
                        ____array_2,
                        {
                            comp = field.fieldType == "input" and self:createInput(field, data) or
                            (field.fieldType == "selection" and self:createSelection(field, data) or self:createBoolean(field, data)),
                            item = { sizePolicy = "Stretch", size = 1 }
                        }
                    )
                    local row = ____self_3_HHorizontalGrid_4(
                        ____self_3,
                        { children = { __TS__SparseArraySpread(____array_2) } }
                    )
                    return { comp = row, item = rowSize }
                end
            )
            local grid = self.context.f:HVerticalGrid(__TS__ObjectAssign({}, optionsWithDefaults, { children = children }))
            return grid:render(renderContext)
        end

        function HInputFieldGrid.prototype.createInput(self, field, data)
            local inputFieldId = field.id
            return self.context.f:UIInputBox(__TS__ObjectAssign(
                { id = inputFieldId, type = field.type },
                field.type == "POSITIVE_NUMBER" and field.range ~= nil and ({ range = field.range }) or ({}),
                {
                    label = field.label,
                    value = data[inputFieldId],
                    props = {},
                    onChange = function(____, value)
                        if field.onChange ~= nil then
                            field:onChange(value)
                        end
                    end
                }
            ))
        end

        function HInputFieldGrid.prototype.createSelection(self, field, data)
            local ____field_5 = field
            local items = ____field_5.items
            return self.context.f:HSelectionGrid({
                id = field.id,
                direction = "Horizontal",
                items = items,
                selectedItemId = data[field.id],
                onSelectionChange = function(____, itemId)
                    data[field.id] = itemId
                    if field.onChange ~= nil then
                        field:onChange(data[field.id])
                    end
                end
            })
        end

        function HInputFieldGrid.prototype.createBoolean(self, field, data)
            local ____field_6 = field
            local stateLabels = ____field_6.stateLabels
            return self.context.f:HSelectionGrid({
                id = field.id,
                direction = "Horizontal",
                items = stateLabels == nil and ({ { id = "false", label = "No" }, { id = "true", label = "Yes" } }) or
                ({ { id = "false", label = stateLabels.falseState }, { id = "true", label = stateLabels.trueState } }),
                selectedItemId = data[field.id] == true and "true" or "false",
                onSelectionChange = function(____, selectedId)
                    local value = selectedId == "true"
                    data[field.id] = value
                    if field.onChange ~= nil then
                        field:onChange(value)
                    end
                end
            })
        end

        return ____exports
    end,
    ["lib.ui.components.ma.MAUILayoutGrid"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____common = require("lib.ui.components.ma.common")
        local applyUIObjectProps = ____common.applyUIObjectProps
        ____exports.MAUILayoutGrid = __TS__Class()
        local MAUILayoutGrid = ____exports.MAUILayoutGrid
        MAUILayoutGrid.name = "MAUILayoutGrid"
        function MAUILayoutGrid.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
            self.children = {}
        end

        function MAUILayoutGrid.prototype.setChildren(self, children)
            self.children = children
            return self
        end

        function MAUILayoutGrid.prototype.render(self, renderContext)
            local ____renderContext_0 = renderContext
            local parent = ____renderContext_0.parent
            local clazz = self.options.clazz == nil and "UILayoutGrid" or self.options.clazz
            local uiLayoutGrid = parent:Append(clazz)
            self:applyProps(uiLayoutGrid)
            do
                local i = 0
                while i < #self.children do
                    local child = self.children[i + 1]
                    local obj = child:render({ parent = uiLayoutGrid })
                    if self.options.visitChild ~= nil then
                        self.options:visitChild(obj, i)
                    end
                    i = i + 1
                end
            end
            return uiLayoutGrid
        end

        function MAUILayoutGrid.prototype.applyProps(self, obj)
            local ____self_options_1 = self.options
            local rows = ____self_options_1.rows
            local columns = ____self_options_1.columns
            obj.columns = #columns
            obj.rows = #rows
            local rowsCollect = obj[1]
            local colsCollect = obj[2]
            do
                local i = 0
                while i < #rows do
                    local item = rowsCollect:Children()[i + 1]
                    item.sizePolicy = rows[i + 1].sizePolicy
                    local size = rows[i + 1].size
                    if size ~= nil then
                        item.size = size
                    end
                    i = i + 1
                end
            end
            do
                local j = 0
                while j < #columns do
                    local item = colsCollect:Children()[j + 1]
                    item.sizePolicy = columns[j + 1].sizePolicy
                    local size = columns[j + 1].size
                    if size ~= nil then
                        item.size = size
                    end
                    j = j + 1
                end
            end
            applyUIObjectProps(nil, obj, self.options)
        end

        return ____exports
    end,
    ["lib.ui.components.ma.MADialogFrame"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local applyObjProps = ____Utils.applyObjProps
        local ____MAUILayoutGrid = require("lib.ui.components.ma.MAUILayoutGrid")
        local MAUILayoutGrid = ____MAUILayoutGrid.MAUILayoutGrid
        ____exports.MADialogFrame = __TS__Class()
        local MADialogFrame = ____exports.MADialogFrame
        MADialogFrame.name = "MADialogFrame"
        function MADialogFrame.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
        end

        function MADialogFrame.prototype.setContent(self, component)
            self.content = component
        end

        function MADialogFrame.prototype.render(self, params)
            self.context.log:trace("UIDialogFrame.render()")
            local uiLayoutGrid = __TS__New(
                MAUILayoutGrid,
                {
                    clazz = "DialogFrame",
                    rows = { { sizePolicy = "Content" } },
                    columns = { { sizePolicy = "Stretch", size = 1 } },
                    anchors = { top = 0, bottom = 0, left = 0, right = 0 },
                    visitChild = function(____, child, index)
                        child.anchors = { top = 0, bottom = 0, right = 0, left = 0 }
                    end
                },
                self.context
            )
            if self.content ~= nil then
                uiLayoutGrid:setChildren({ self.content })
            end
            local obj = uiLayoutGrid:render(params)
            self:applyProps(obj)
            return obj
        end

        function MADialogFrame.prototype.applyProps(self, obj)
            applyObjProps(nil, obj, { h = "100%", w = "100%", anchors = { left = 0, right = 0, top = 1, bottom = 1 } })
        end

        return ____exports
    end,
    ["lib.ui.components.ma.MALineEdit"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local applyObjPropsWithDefaults = ____Utils.applyObjPropsWithDefaults
        local ____common = require("lib.ui.components.ma.common")
        local renderObjectSignals = ____common.renderObjectSignals
        local DEFALUT_PROPS = {
            textShadow = 1,
            padding = { left = 10, right = 10, top = 10, bottom = 10 },
            hasHover = "Yes",
            font = "Regular24",
            textAlignmentH = "Center"
        }
        ____exports.MALineEdit = __TS__Class()
        local MALineEdit = ____exports.MALineEdit
        MALineEdit.name = "MALineEdit"
        function MALineEdit.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
        end

        function MALineEdit.prototype.render(self, params)
            local ____params_0 = params
            local parent = ____params_0.parent
            local ____self_options_1 = self.options
            local id = ____self_options_1.id
            local signals = ____self_options_1.signals
            local uiObject = parent:Append("LineEdit")
            self:applyProps(uiObject)
            renderObjectSignals(
                nil,
                id,
                uiObject,
                signals,
                self.context
            )
            return uiObject
        end

        function MALineEdit.prototype.cleanup(self)
        end

        function MALineEdit.prototype.applyProps(self, obj)
            applyObjPropsWithDefaults(
                nil,
                obj,
                DEFALUT_PROPS,
                __TS__ObjectAssign({}, self.options.props, self.options.signals,
                    { pluginComponent = self.context.pluginInfo.componentHandle })
            )
        end

        return ____exports
    end,
    ["lib.ui.components.ma.MAText"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local applyObjPropsWithDefaults = ____Utils.applyObjPropsWithDefaults
        local DEFAULT_PROPS = {
            contentDriven = "Yes",
            contentWidth = "No",
            textAutoAdjust = "No",
            anchors = { left = 0, right = 0, top = 0, bottom = 0 },
            padding = { left = 10, right = 10, top = 5, bottom = 5 },
            font = "Regular20",
            hasHover = "No"
        }
        ____exports.MAText = __TS__Class()
        local MAText = ____exports.MAText
        MAText.name = "MAText"
        function MAText.prototype.____constructor(self, options, context)
            self.options = options
        end

        function MAText.prototype.render(self, renderContext)
            local ____renderContext_0 = renderContext
            local parent = ____renderContext_0.parent
            local uiObject = parent:Append("UIObject")
            self:applyProps(uiObject)
            return uiObject
        end

        function MAText.prototype.cleanup(self)
        end

        function MAText.prototype.applyProps(self, obj)
            applyObjPropsWithDefaults(nil, obj, DEFAULT_PROPS, self.options)
        end

        return ____exports
    end,
    ["lib.ui.components.ma.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        do
            local ____MAButton = require("lib.ui.components.ma.MAButton")
            local UIButton = ____MAButton.MAButton
            ____exports.UIButton = UIButton
        end
        do
            local ____MADialogFrame = require("lib.ui.components.ma.MADialogFrame")
            local UIDialogFrame = ____MADialogFrame.MADialogFrame
            ____exports.UIDialogFrame = UIDialogFrame
        end
        do
            local ____MALineEdit = require("lib.ui.components.ma.MALineEdit")
            local UILineEdit = ____MALineEdit.MALineEdit
            ____exports.UILineEdit = UILineEdit
        end
        do
            local ____MAText = require("lib.ui.components.ma.MAText")
            local UIText = ____MAText.MAText
            ____exports.UIText = UIText
        end
        do
            local ____MAUILayoutGrid = require("lib.ui.components.ma.MAUILayoutGrid")
            local HUILayoutGrid = ____MAUILayoutGrid.MAUILayoutGrid
            ____exports.HUILayoutGrid = HUILayoutGrid
        end
        return ____exports
    end,
    ["lib.ui.components.HSelectionGrid"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectRest = ____lualib.__TS__ObjectRest
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ui = require("lib.ui.index")
        local UIColors = ____ui.UIColors
        local ____HUnidirectionalGrid = require("lib.ui.components.HUnidirectionalGrid")
        local HUnidirectionalGrid = ____HUnidirectionalGrid.HUnidirectionalGrid
        ____exports.HSelectionGrid = __TS__Class()
        local HSelectionGrid = ____exports.HSelectionGrid
        HSelectionGrid.name = "HSelectionGrid"
        function HSelectionGrid.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
            self.buttons = {}
            self.selectedItemId = options.selectedItemId
        end

        function HSelectionGrid.prototype.render(self, renderContext)
            local ____self_options_0 = self.options
            local id = ____self_options_0.id
            local items = ____self_options_0.items
            local selectedItemId = ____self_options_0.selectedItemId
            local onSelectionChange = ____self_options_0.onSelectionChange
            local optionsRest = __TS__ObjectRest(____self_options_0,
                { id = true, items = true, selectedItemId = true, onSelectionChange = true })
            return __TS__New(
                HUnidirectionalGrid,
                __TS__ObjectAssign(
                    {},
                    optionsRest,
                    {
                        children = __TS__ArrayMap(
                            items,
                            function(____, item)
                                local buttonId = (id .. "_") .. item.id
                                local child = {
                                    comp = self.context.f:UIButton({
                                        id = buttonId,
                                        label = item.label,
                                        props = { backColor = item.id == self.selectedItemId and UIColors.Selected or UIColors.Default, textColor = item.id == self.selectedItemId and UIColors.Background or UIColors.Lightened },
                                        signals = {
                                            clicked = function()
                                                onSelectionChange(nil, item.id)
                                                self.selectedItemId = item.id
                                                do
                                                    local i = 0
                                                    while i < #items do
                                                        local curItem = items[i + 1]
                                                        local curButton = self.buttons[i + 1]
                                                        curButton:updateProps({ backColor = curItem.id ==
                                                        self.selectedItemId and UIColors.Selected or UIColors.Default, textColor =
                                                        curItem.id == self.selectedItemId and UIColors.Background or
                                                        UIColors.Lightened })
                                                        i = i + 1
                                                    end
                                                end
                                            end
                                        }
                                    }),
                                    item = { sizePolicy = "Stretch", size = 1 }
                                }
                                local ____self_buttons_1 = self.buttons
                                ____self_buttons_1[#____self_buttons_1 + 1] = child.comp
                                return child
                            end
                        )
                    }
                ),
                self.context
            ):render(renderContext)
        end

        return ____exports
    end,
    ["lib.ui.components.HTableGrid"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectRest = ____lualib.__TS__ObjectRest
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ui = require("lib.ui.index")
        local UIColors = ____ui.UIColors
        function ____exports.TableDivider(self)
            return { type = "divider" }
        end

        ____exports.DEFAULT_DIVIDER_WIDTH = 5
        local DEFAULT_OPTIONS = { w = "100%", h = "100%" }
        local DEFAULT_DIVIDER_COLOR = UIColors.FrameColor
        ____exports.HTableGrid = __TS__Class()
        local HTableGrid = ____exports.HTableGrid
        HTableGrid.name = "HTableGrid"
        function HTableGrid.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
            self.log = self.context.log
        end

        function HTableGrid.prototype.render(self, renderContext)
            self.log:trace("HTableGrid.render()")
            local ____self_options_0 = self.options
            local columns = ____self_options_0.columns
            local rowSize = ____self_options_0.rowSize
            local rows = ____self_options_0.rows
            local optionsRest = __TS__ObjectRest(____self_options_0, { columns = true, rowSize = true, rows = true })
            local optionsWithDefaults = __TS__ObjectAssign(optionsRest, DEFAULT_OPTIONS)
            local titleBar = {
                comp = self.context.f:HHorizontalGrid({
                    children = __TS__ArrayMap(
                        columns,
                        function(____, column)
                            return {
                                comp = self.context.f:UIText({ text = column.label, backColor = UIColors
                                .BackgroundSelectedInverted }),
                                item = column.item
                            }
                        end
                    )
                }),
                item = rowSize
            }
            local dataRows = __TS__ArrayMap(
                rows,
                function(____, row)
                    if row.type == "divider" then
                        return {
                            comp = self.context.f:UIText({ backColor = DEFAULT_DIVIDER_COLOR }),
                            item = { sizePolicy = "Fixed", size = ____exports.DEFAULT_DIVIDER_WIDTH }
                        }
                    else
                        local rowComponents = row
                        local rowGrid = self.context.f:HHorizontalGrid({
                            children = __TS__ArrayMap(
                                rowComponents,
                                function(____, cellComponent, index)
                                    return { comp = cellComponent, item = columns[index + 1].item }
                                end
                            )
                        })
                        return { comp = rowGrid, item = rowSize }
                    end
                end
            )
            local grid = self.context.f:HVerticalGrid(__TS__ObjectAssign(
                {},
                optionsWithDefaults,
                {
                    children = {
                        titleBar,
                        table.unpack(dataRows)
                    }
                }
            )):render(renderContext)
            return grid
        end

        return ____exports
    end,
    ["lib.ui.components.HToggle"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectRest = ____lualib.__TS__ObjectRest
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.HToggle = __TS__Class()
        local HToggle = ____exports.HToggle
        HToggle.name = "HToggle"
        function HToggle.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
            self.state = options.initialState
        end

        function HToggle.prototype.render(self, renderContext)
            local thread = coroutine.running()
            self.context.log:trace("HToggle.render(), co=" .. tostring(thread))
            local ____self_options_0 = self.options
            local id = ____self_options_0.id
            local label = ____self_options_0.label
            local initialState = ____self_options_0.initialState
            local onChange = ____self_options_0.onChange
            local restOptions = __TS__ObjectRest(____self_options_0,
                { id = true, label = true, initialState = true, onChange = true })
            local function labelAndIconOptions()
                return __TS__ObjectAssign({},
                    label.type == "text" and ({ label = self.state and label.onText or label.offText }) or ({ label = "" }),
                    label.type == "icon" and ({ icon = self.state and label.onIcon or label.offIcon }) or ({ icon = "" }))
            end
            local button = self.context.f:UIButton(__TS__ObjectAssign(
                { id = id },
                labelAndIconOptions(nil),
                {
                    signals = __TS__ObjectAssign(
                        {},
                        restOptions.signals == nil and ({}) or restOptions.signals,
                        {
                            clicked = function(____, caller)
                                self.state = not self.state
                                local newOptions = labelAndIconOptions(nil)
                                self.button:update(labelAndIconOptions(nil))
                                onChange(nil, self.state)
                            end
                        }
                    ),
                    props = restOptions.props
                }
            ))
            self.button = button
            return button:render(renderContext)
        end

        return ____exports
    end,
    ["lib.ui.components.UIInputBox"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectRest = ____lualib.__TS__ObjectRest
        local __TS__ParseInt = ____lualib.__TS__ParseInt
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ui = require("lib.ui.index")
        local UIColors = ____ui.UIColors
        local ____Utils = require("lib.Utils")
        local applyObjProps = ____Utils.applyObjProps
        local applyObjPropsWithDefaults = ____Utils.applyObjPropsWithDefaults
        local ____MALineEdit = require("lib.ui.components.ma.MALineEdit")
        local MALineEdit = ____MALineEdit.MALineEdit
        ____exports.UIInputBox = __TS__Class()
        local UIInputBox = ____exports.UIInputBox
        UIInputBox.name = "UIInputBox"
        function UIInputBox.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
            self.lastValidValue = options.value
        end

        function UIInputBox.prototype.setText(self, text)
            local lineEdit = self.lineEdit
            if lineEdit ~= nil then
                lineEdit.content = text
            end
        end

        function UIInputBox.prototype.render(self, renderContext)
            local ____self_options_0 = self.options
            local ____type = ____self_options_0.type
            local isValid = ____self_options_0.isValid
            local label = ____self_options_0.label
            local value = ____self_options_0.value
            local props = ____self_options_0.props
            local signals = ____self_options_0.signals
            local onChange = ____self_options_0.onChange
            local optionsRest = __TS__ObjectRest(____self_options_0, {
                type = true,
                isValid = true,
                label = true,
                value = true,
                props = true,
                signals = true,
                onChange = true
            })
            local function onTextChange(____, lineEdit)
                local function isValidFn(____, value)
                    if ____type == "POSITIVE_NUMBER" and type(value) == "number" then
                        local ____self_options_1 = self.options
                        local range = ____self_options_1.range
                        if value < 1 then
                            return false
                        elseif range ~= nil then
                            if range.min ~= nil and value < range.min then
                                return false
                            end
                            if range.max ~= nil and value > range.max then
                                return false
                            end
                        elseif isValid ~= nil then
                            return isValid(nil, value)
                        end
                    elseif isValid ~= nil then
                        return isValid(nil, value)
                    end
                    return true
                end
                local value = ____type == "POSITIVE_NUMBER" and __TS__ParseInt(lineEdit.content) or lineEdit.content
                local valid = isValidFn(nil, value)
                if valid then
                    self.lastValidValue = value
                    if onChange ~= nil then
                        onChange(nil, value)
                    end
                else
                    self.lineEdit.content = tostring(self.lastValidValue)
                end
            end
            local _signals = applyObjProps(
                nil,
                {
                    focusGet = function()
                        local lineEdit = self.lineEdit
                        lineEdit:SelectAll()
                    end,
                    focusLost = function()
                        local lineEdit = self.lineEdit
                        lineEdit:DeSelect()
                        onTextChange(nil, self.lineEdit)
                    end,
                    textChanged = function(____, caller)
                        onTextChange(nil, caller)
                    end
                },
                signals == nil and ({}) or signals
            )
            local _props = applyObjPropsWithDefaults(
                nil,
                { backColor = UIColors.Transparent, textChangeOnEnter = 1 },
                props,
                __TS__ObjectAssign(
                    {},
                    ____type == "POSITIVE_NUMBER" and
                    ({ vkPluginName = "NumericInput", filter = "1234567890", vkTitleHint = label }) or ({}),
                    { content = tostring(value) }
                )
            )
            self.lineEdit = __TS__New(
                MALineEdit,
                __TS__ObjectAssign({}, optionsRest, { label = label, props = _props, signals = _signals }),
                self.context
            ):render(renderContext)
            return self.lineEdit
        end

        function UIInputBox.prototype.cleanup(self)
        end

        return ____exports
    end,
    ["lib.ui.components.UIFactory"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____HActionList = require("lib.ui.components.HActionList")
        local HActionList = ____HActionList.HActionList
        local ____HHorizontalGrid = require("lib.ui.components.HHorizontalGrid")
        local HHorizontalGrid = ____HHorizontalGrid.HHorizontalGrid
        local ____HInputFieldGrid = require("lib.ui.components.HInputFieldGrid")
        local HInputFieldGrid = ____HInputFieldGrid.HInputFieldGrid
        local ____HSelectionGrid = require("lib.ui.components.HSelectionGrid")
        local HSelectionGrid = ____HSelectionGrid.HSelectionGrid
        local ____HTableGrid = require("lib.ui.components.HTableGrid")
        local HTableGrid = ____HTableGrid.HTableGrid
        local ____HToggle = require("lib.ui.components.HToggle")
        local HToggle = ____HToggle.HToggle
        local ____HUnidirectionalGrid = require("lib.ui.components.HUnidirectionalGrid")
        local HUnidirectionalGrid = ____HUnidirectionalGrid.HUnidirectionalGrid
        local ____HVerticalGrid = require("lib.ui.components.HVerticalGrid")
        local HVerticalGrid = ____HVerticalGrid.HVerticalGrid
        local ____ma = require("lib.ui.components.ma.index")
        local HUILayoutGrid = ____ma.HUILayoutGrid
        local UIButton = ____ma.UIButton
        local UIDialogFrame = ____ma.UIDialogFrame
        local UILineEdit = ____ma.UILineEdit
        local UIText = ____ma.UIText
        local ____UIInputBox = require("lib.ui.components.UIInputBox")
        local UIInputBox = ____UIInputBox.UIInputBox
        ____exports.UIFactory = __TS__Class()
        local UIFactory = ____exports.UIFactory
        UIFactory.name = "UIFactory"
        function UIFactory.prototype.____constructor(self, options)
            self.context = __TS__ObjectAssign({}, options, { f = self })
        end

        function UIFactory.prototype.UIText(self, options)
            return __TS__New(UIText, options, self.context)
        end

        function UIFactory.prototype.UIButton(self, options)
            return __TS__New(UIButton, options, self.context)
        end

        function UIFactory.prototype.UILineEdit(self, options)
            return __TS__New(UILineEdit, options, self.context)
        end

        function UIFactory.prototype.UIInputBox(self, options)
            return __TS__New(UIInputBox, options, self.context)
        end

        function UIFactory.prototype.UIDialogFrame(self, options)
            return __TS__New(UIDialogFrame, options, self.context)
        end

        function UIFactory.prototype.HUILayoutGrid(self, options)
            return __TS__New(HUILayoutGrid, options, self.context)
        end

        function UIFactory.prototype.HActionList(self, options)
            return __TS__New(HActionList, options, self.context)
        end

        function UIFactory.prototype.HHorizontalGrid(self, options)
            return __TS__New(HHorizontalGrid, options, self.context)
        end

        function UIFactory.prototype.HInputFieldGrid(self, options)
            return __TS__New(HInputFieldGrid, options, self.context)
        end

        function UIFactory.prototype.HSelectionGrid(self, options)
            return __TS__New(HSelectionGrid, options, self.context)
        end

        function UIFactory.prototype.HTableGrid(self, options)
            return __TS__New(HTableGrid, options, self.context)
        end

        function UIFactory.prototype.HToggle(self, options)
            return __TS__New(HToggle, options, self.context)
        end

        function UIFactory.prototype.HUnidirectionalGrid(self, options)
            return __TS__New(HUnidirectionalGrid, options, self.context)
        end

        function UIFactory.prototype.HVerticalGrid(self, options)
            return __TS__New(HVerticalGrid, options, self.context)
        end

        return ____exports
    end,
    ["lib.ui.components.types"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.ui.components.HUnidirectionalGrid"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectRest = ____lualib.__TS__ObjectRest
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local DEFAULT_OPTIONS = { w = "100%", h = "100%" }
        ____exports.HUnidirectionalGrid = __TS__Class()
        local HUnidirectionalGrid = ____exports.HUnidirectionalGrid
        HUnidirectionalGrid.name = "HUnidirectionalGrid"
        function HUnidirectionalGrid.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
            self.log = self.context.log
        end

        function HUnidirectionalGrid.prototype.render(self, renderContext)
            local ____self_options_0 = self.options
            local children = ____self_options_0.children
            local visitChild = ____self_options_0.visitChild
            local direction = ____self_options_0.direction
            local optionsRest = __TS__ObjectRest(____self_options_0,
                { children = true, visitChild = true, direction = true })
            local optionsWithDefaults = __TS__ObjectAssign(optionsRest, DEFAULT_OPTIONS)
            local grid = self.context.f:HUILayoutGrid(__TS__ObjectAssign(
                {},
                optionsWithDefaults,
                {
                    columns = direction == "Vertical" and ({ { sizePolicy = "Stretch", size = 1 } }) or __TS__ArrayMap(
                        children,
                        function(____, r) return r.item end
                    ),
                    rows = direction == "Vertical" and __TS__ArrayMap(
                        children,
                        function(____, r) return r.item end
                    ) or ({ { sizePolicy = "Stretch", size = 1 } }),
                    anchors = self.options.anchors == nil and ({ top = 0, bottom = 0, right = 0, left = 0 }) or
                    self.options.anchors,
                    visitChild = function(____, child, index)
                        child.anchors = direction == "Vertical" and ({ left = 0, right = 0, top = index, bottom = index }) or
                        ({ left = index, right = index, top = 0, bottom = 0 })
                        if visitChild ~= nil then
                            visitChild(nil, child, index)
                        end
                    end
                }
            )):setChildren(__TS__ArrayMap(
                children,
                function(____, r) return r.comp end
            )):render(renderContext)
            return grid
        end

        function ____exports.ifDefinedChild(self, child, itemProps)
            return child == nil and ({}) or ({ { comp = child, item = itemProps } })
        end

        return ____exports
    end,
    ["lib.ui.components.HVerticalGrid"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____HUnidirectionalGrid = require("lib.ui.components.HUnidirectionalGrid")
        local HUnidirectionalGrid = ____HUnidirectionalGrid.HUnidirectionalGrid
        ____exports.HVerticalGrid = __TS__Class()
        local HVerticalGrid = ____exports.HVerticalGrid
        HVerticalGrid.name = "HVerticalGrid"
        function HVerticalGrid.prototype.____constructor(self, options, context)
            self.options = options
            self.context = context
        end

        function HVerticalGrid.prototype.render(self, renderContext)
            self.context.log:trace("HVerticalGrid.render() children.length=" .. tostring(#self.options.children))
            return __TS__New(
                HUnidirectionalGrid,
                __TS__ObjectAssign({}, self.options, { direction = "Vertical" }),
                self.context
            ):render(renderContext)
        end

        return ____exports
    end,
    ["lib.ui.components.CustomDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local applyObjProps = ____Utils.applyObjProps
        local applyObjPropsWithDefaults = ____Utils.applyObjPropsWithDefaults
        local ____ui = require("lib.ui.index")
        local UIColors = ____ui.UIColors
        local ____UIFactory = require("lib.ui.components.UIFactory")
        local UIFactory = ____UIFactory.UIFactory
        ____exports.CustomDialog = __TS__Class()
        local CustomDialog = ____exports.CustomDialog
        CustomDialog.name = "CustomDialog"
        function CustomDialog.prototype.____constructor(self, params)
            self.params = params
            local ____params_0 = params
            local log = ____params_0.log
            local pluginInfo = ____params_0.pluginInfo
            local pluginSignals = ____params_0.pluginSignals
            self.log = log
            self.ui = __TS__New(UIFactory, { pluginInfo = pluginInfo, pluginSignals = pluginSignals, log = self.log })
        end

        function CustomDialog.prototype.setContent(self, obj)
            self.content = obj
        end

        function CustomDialog.prototype.show(self, display)
            local ____self_params_1 = self.params
            local options = ____self_params_1.options
            local colorTransparent = UIColors.Transparent
            local baseInput = self:createBaseInput(display)
            local dialogFrame = self.ui:UIDialogFrame({})
            if options.subTitle ~= nil then
                local subTitle = self.ui:UIText({ text = options.subTitle, backColor = colorTransparent })
                local contentItem = self.content ~= nil and ({ comp = self.content, item = { sizePolicy = "Content" } }) or
                nil
                local content = self.ui:HVerticalGrid({
                    children = {
                        { comp = subTitle, item = { sizePolicy = "Content" } },
                        table.unpack(contentItem ~= nil and ({ contentItem }) or ({}))
                    }
                })
                dialogFrame:setContent(content)
            else
                if self.content ~= nil then
                    dialogFrame:setContent(self.content)
                end
            end
            local uiLayoutGrid = dialogFrame:render({ parent = baseInput })
        end

        function CustomDialog.prototype.createBaseInput(self, display)
            local screenOverlay = display.ScreenOverlay
            screenOverlay:ClearUIChildren()
            local dialogWidth = 650
            local baseInput = screenOverlay:Append("BaseInput")
            applyObjProps(
                nil,
                baseInput,
                {
                    name = self.params.options.id,
                    h = 0,
                    w = dialogWidth,
                    maxSize = (tostring(display.w * 0.8) .. ",") .. tostring(display.h),
                    minSize = (tostring(dialogWidth - 100) .. ",") .. 0,
                    columns = 1,
                    rows = 2,
                    autoClose = "No",
                    closeOnEscape = "Yes"
                }
            )
            local titleBar = baseInput:Append("TitleBar")
            applyObjProps(nil, titleBar, { columns = 2, rows = 1, anchors = "0,0", texture = "corner2" })
            titleBar[2][2].sizePolicy = "Fixed"
            titleBar[2][2].size = 50
            local titleBarIcon = titleBar:Append("TitleButton")
            applyObjPropsWithDefaults(nil, titleBarIcon, { textAlignmentH = "Center" },
                { text = self.params.options.title, textAlignmentH = self.params.options.titleAlign, texture = "corner1", anchors =
                "0,0" })
            local titleBarCloseButton = titleBar:Append("CloseButton")
            titleBarCloseButton.anchors = "1,0"
            titleBarCloseButton.texture = "corner2"
            return baseInput
        end

        return ____exports
    end,
    ["lib.ui.components.ModalDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local applyObjProps = ____Utils.applyObjProps
        local applyObjPropsWithDefaults = ____Utils.applyObjPropsWithDefaults
        local ____UIFactory = require("lib.ui.components.UIFactory")
        local UIFactory = ____UIFactory.UIFactory
        ____exports.ModalDialog = __TS__Class()
        local ModalDialog = ____exports.ModalDialog
        ModalDialog.name = "ModalDialog"
        function ModalDialog.prototype.____constructor(self, params)
            self.params = params
            local ____params_0 = params
            local log = ____params_0.log
            local pluginInfo = ____params_0.pluginInfo
            local pluginSignals = ____params_0.pluginSignals
            self.log = log
            self.ui = __TS__New(UIFactory, { pluginInfo = pluginInfo, pluginSignals = pluginSignals, log = self.log })
        end

        function ModalDialog.prototype.setContent(self, obj)
            self.content = obj
        end

        function ModalDialog.prototype.closeDialog(self)
            if self.popup ~= nil and self.modalOverlay ~= nil then
                self.popup:Close()
                WaitObjectDelete(self.popup, 1)
            end
        end

        function ModalDialog.prototype.show(self, display)
            local ____self_params_1 = self.params
            local options = ____self_params_1.options
            local ____options_2 = options
            local width = ____options_2.width
            local popup = self:createPopupInAPlaceHolder(display)
            popup[1][2].sizePolicy = "Content"
            if width ~= nil then
                popup[2][1].sizePolicy = "Fixed"
                popup[2][1].size = width
            end
            local dialogFrame = self.ui:UIDialogFrame({ h = "100%", w = "100%", anchors = { left = 0, right = 0, top = 1, bottom = 1 } })
            if self.content ~= nil then
                dialogFrame:setContent(self.content)
            end
            local uiLayoutGrid = dialogFrame:render({ parent = popup })
            self.log:trace("ModalDialog.show() END")
        end

        function ModalDialog.prototype.createPopupInAPlaceHolder(self, display)
            local ____self_params_options_3 = self.params.options
            local id = ____self_params_options_3.id
            local title = ____self_params_options_3.title
            local titleAlign = ____self_params_options_3.titleAlign
            local titleFont = ____self_params_options_3.titleFont
            local modalOverlay = display.ModalOverlay
            self.modalOverlay = modalOverlay
            local popup = modalOverlay:Append("Popup")
            self.popup = popup
            local closeCallbackSignalId = id .. "_handleOverlayClose"
            popup:OverlaySetCloseCallback(closeCallbackSignalId, popup)
            local function onCloseFn(caller, modalResult, modalValue, ctx)
                popup:OverlaySetCloseCallback("")
                popup:Close()
            end
            self.params.pluginSignals:registerHandler(closeCallbackSignalId, onCloseFn)
            popup[1][1].sizePolicy = "Fixed"
            popup[1][1].size = 75
            applyObjProps(nil, popup, { ALIGNMENTH = "Center", ALIGNMENTV = "Center" })
            local titleBar = popup:Append("TitleBar")
            applyObjProps(nil, titleBar, { columns = 2, rows = 1, anchors = "0,0", texture = "corner2" })
            titleBar[2][2].sizePolicy = "Fixed"
            titleBar[2][2].size = 50
            local titleBarIcon = titleBar:Append("TitleButton")
            applyObjPropsWithDefaults(nil, titleBarIcon, { textAlignmentH = "Center" }, {
                text = title,
                textAlignmentH = titleAlign,
                font = titleFont or "Regular28",
                texture = "corner1",
                anchors = "0,0",
                textShadow = 0
            })
            local titleBarCloseButton = titleBar:Append("CloseButton")
            titleBarCloseButton.anchors = "1,0"
            titleBarCloseButton.texture = "corner2"
            return popup
        end

        return ____exports
    end,
    ["lib.ui.components.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        do
            local ____export = require("lib.ui.components.CustomDialog")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.HActionList")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.HHorizontalGrid")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.HInputFieldGrid")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.HInputFieldGridTypes")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.HSelectionGrid")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.HTableGrid")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.HUnidirectionalGrid")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.HVerticalGrid")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.ma.index")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.ModalDialog")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.UIFactory")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.ui.components.UIInputBox")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        return ____exports
    end,
    ["lib.ui.dialogs.UserDialogBase"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.UserDialogBase = __TS__Class()
        local UserDialogBase = ____exports.UserDialogBase
        UserDialogBase.name = "UserDialogBase"
        function UserDialogBase.prototype.____constructor(self, plugin, modalOptions)
            self.plugin = plugin
            self.modalOptions = modalOptions
            self.dialog = self.plugin.dialogFactory:ModalDialog(self.modalOptions)
            self.ui = self.dialog.ui
            self.log = self.plugin.log
        end

        function UserDialogBase.prototype.show(self, displayHandle)
            self.dialog:setContent(self:getContent())
            self.dialog:show(displayHandle)
        end

        function UserDialogBase.prototype.close(self)
            if self.dialog ~= nil then
                self.dialog:closeDialog()
            end
        end

        return ____exports
    end,
    ["lib.ui.dialogs.ActionDialogV2"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__ObjectRest = ____lualib.__TS__ObjectRest
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__SparseArrayNew = ____lualib.__TS__SparseArrayNew
        local __TS__SparseArrayPush = ____lualib.__TS__SparseArrayPush
        local __TS__SparseArraySpread = ____lualib.__TS__SparseArraySpread
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ui = require("lib.ui.index")
        local UIColors = ____ui.UIColors
        local ____components = require("lib.ui.components.index")
        local ifDefinedChild = ____components.ifDefinedChild
        local ____HActionList = require("lib.ui.components.HActionList")
        local DEFAULT_ACTION_HEIGHT = ____HActionList.DEFAULT_ACTION_HEIGHT
        local ____UserDialogBase = require("lib.ui.dialogs.UserDialogBase")
        local UserDialogBase = ____UserDialogBase.UserDialogBase
        ____exports.ActionDialogV2 = __TS__Class()
        local ActionDialogV2 = ____exports.ActionDialogV2
        ActionDialogV2.name = "ActionDialogV2"
        __TS__ClassExtends(ActionDialogV2, UserDialogBase)
        function ActionDialogV2.prototype.____constructor(self, plugin, options)
            self.options = options
            local ____options_0 = options
            local id = ____options_0.id
            local title = ____options_0.title
            local width = ____options_0.width
            local actions = ____options_0.actions
            UserDialogBase.prototype.____constructor(self, plugin, { id = id, title = title, width = width })
        end

        function ActionDialogV2.prototype.getContent(self)
            local ____self_options_1 = self.options
            local id = ____self_options_1.id
            local message = ____self_options_1.message
            local messageWidth = ____self_options_1.messageWidth
            local body = ____self_options_1.body
            local actionListOptions = ____self_options_1.actions
            local ____actionListOptions_2 = actionListOptions
            local _actionHeight = ____actionListOptions_2.actionHeight
            local direction = ____actionListOptions_2.direction
            local restActionListOptions = __TS__ObjectRest(____actionListOptions_2,
                { actionHeight = true, direction = true })
            local actionHeight = _actionHeight == nil and DEFAULT_ACTION_HEIGHT or _actionHeight
            local ui = self.ui
            local actionsRow = {
                comp = ui:HActionList(__TS__ObjectAssign({}, restActionListOptions,
                    { direction = direction, actionHeight = actionHeight, id = id .. "_actionList" })),
                item = direction == "Vertical" and ({ sizePolicy = "Content" }) or
                ({ sizePolicy = "Fixed", size = actionHeight })
            }
            local messageRow = {
                comp = ui:UIText({
                    backColor = UIColors.Background,
                    text = tostring(message) .. "\n\n",
                    w = messageWidth,
                    alignmentH = "Center"
                }),
                item = { sizePolicy = "Content" }
            }
            local ____array_5 = __TS__SparseArrayNew(table.unpack(message == nil and ({}) or ({ messageRow })))
            local ____ifDefinedChild_4 = ifDefinedChild
            local ____temp_3
            if body == nil then
                ____temp_3 = nil
            else
                ____temp_3 = body(nil, self.ui)
            end
            __TS__SparseArrayPush(
                ____array_5,
                table.unpack(____ifDefinedChild_4(nil, ____temp_3, { sizePolicy = "Content" }))
            )
            __TS__SparseArrayPush(____array_5, actionsRow)
            local children = { __TS__SparseArraySpread(____array_5) }
            return ui:HVerticalGrid({ children = children })
        end

        return ____exports
    end,
    ["lib.ui.dialogs.AlertDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MessageBoxHelperV2 = require("lib.ui.MessageBoxHelperV2")
        local showMessageBox = ____MessageBoxHelperV2.showMessageBox
        function ____exports.AlertDialog(self, options)
            local ____options_0 = options
            local title = ____options_0.title
            local message = ____options_0.message
            local function show(self, displayHandle)
                local result = showMessageBox(
                    nil,
                    {
                        title = title,
                        message = message,
                        display = displayHandle.index,
                        commands = { {
                            label = "Ok",
                            action = function(self)
                                return { type = "PopDialog" }
                            end
                        } }
                    }
                )
                return result or ({ type = "PopDialog" })
            end
            return { show = show }
        end

        return ____exports
    end,
    ["lib.ui.dialogs.AlertDialogV2"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ui = require("lib.ui.index")
        local UIColors = ____ui.UIColors
        local ____UserDialogBase = require("lib.ui.dialogs.UserDialogBase")
        local UserDialogBase = ____UserDialogBase.UserDialogBase
        ____exports.AlertDialogV2 = __TS__Class()
        local AlertDialogV2 = ____exports.AlertDialogV2
        AlertDialogV2.name = "AlertDialogV2"
        __TS__ClassExtends(AlertDialogV2, UserDialogBase)
        function AlertDialogV2.prototype.____constructor(self, plugin, options)
            self.options = options
            local ____options_0 = options
            local id = ____options_0.id
            local title = ____options_0.title
            local message = ____options_0.message
            local width = ____options_0.width
            local actionLabel = ____options_0.actionLabel
            local onAction = ____options_0.onAction
            local font = ____options_0.font
            local align = ____options_0.align
            UserDialogBase.prototype.____constructor(self, plugin, { id = id, title = title, width = width })
        end

        function AlertDialogV2.prototype.getContent(self)
            local ____self_options_1 = self.options
            local id = ____self_options_1.id
            local title = ____self_options_1.title
            local message = ____self_options_1.message
            local textHeight = ____self_options_1.textHeight
            local actionLabel = ____self_options_1.actionLabel
            local onAction = ____self_options_1.onAction
            local font = ____self_options_1.font
            local align = ____self_options_1.align
            return self.ui:HVerticalGrid({
                children = {
                    {
                        comp = self.ui:UIText({ text = message, font = font, backColor = UIColors.Background, textAlignmentH =
                        align }),
                        item = textHeight == nil and ({ sizePolicy = "Content" }) or
                        ({ sizePolicy = "Fixed", size = textHeight })
                    },
                    {
                        comp = self.ui:UIButton({
                            id = "ok",
                            label = actionLabel == nil and "OK" or actionLabel,
                            signals = {
                                clicked = function(____, caller)
                                    self.plugin:dialogAction({ type = "PopDialog" })
                                end
                            }
                        }),
                        item = { sizePolicy = "Fixed", size = 50 }
                    }
                }
            })
        end

        return ____exports
    end,
    ["lib.ui.dialogs.ConfirmDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MessageBoxHelperV2 = require("lib.ui.MessageBoxHelperV2")
        local showMessageBox = ____MessageBoxHelperV2.showMessageBox
        function ____exports.ConfirmDialog(self, options)
            local ____options_0 = options
            local title = ____options_0.title
            local message = ____options_0.message
            local confirmLabel = ____options_0.confirmLabel
            local onConfirmAction = ____options_0.onConfirmAction
            local function show(self, displayHandle)
                local result = showMessageBox(
                    nil,
                    {
                        title = title,
                        message = message,
                        display = displayHandle.index,
                        commands = {
                            {
                                label = confirmLabel or "Confirm",
                                action = function(self)
                                    return onConfirmAction(nil) or ({ type = "PopDialog" })
                                end
                            },
                            {
                                type = "abort",
                                label = "Cancel",
                                action = function(self)
                                    return { type = "PopDialog" }
                                end
                            }
                        }
                    }
                )
                return result or ({ type = "PopDialog" })
            end
            return { show = show }
        end

        return ____exports
    end,
    ["lib.ui.dialogs.FormDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__New = ____lualib.__TS__New
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SparseArrayNew = ____lualib.__TS__SparseArrayNew
        local __TS__SparseArrayPush = ____lualib.__TS__SparseArrayPush
        local __TS__SparseArraySpread = ____lualib.__TS__SparseArraySpread
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ui = require("lib.ui.index")
        local UIColors = ____ui.UIColors
        local ____components = require("lib.ui.components.index")
        local DEFAULT_ACTION_HEIGHT = ____components.DEFAULT_ACTION_HEIGHT
        local ifDefinedChild = ____components.ifDefinedChild
        local ____UserDialogBase = require("lib.ui.dialogs.UserDialogBase")
        local UserDialogBase = ____UserDialogBase.UserDialogBase
        ____exports.FormDialog = __TS__Class()
        local FormDialog = ____exports.FormDialog
        FormDialog.name = "FormDialog"
        __TS__ClassExtends(FormDialog, UserDialogBase)
        function FormDialog.prototype.____constructor(self, plugin, options)
            self.options = options
            local ____options_0 = options
            local title = ____options_0.title
            local id = ____options_0.id
            local width = ____options_0.width
            UserDialogBase.prototype.____constructor(self, plugin, { id = id, title = title, width = width })
        end

        function FormDialog.prototype.getContent(self)
            local ____self_options_1 = self.options
            local id = ____self_options_1.id
            local message = ____self_options_1.message
            local messageWidth = ____self_options_1.messageWidth
            local errorMessage = ____self_options_1.errorMessage
            local width = ____self_options_1.width
            local submitLabel = ____self_options_1.submitLabel
            local isValid = ____self_options_1.isValid
            local onSubmit = ____self_options_1.onSubmit
            local inputFields = ____self_options_1.inputFields
            local data = ____self_options_1.data
            local ui = self.ui
            local ____temp_2
            if errorMessage == nil then
                ____temp_2 = message
            else
                ____temp_2 = errorMessage
            end
            local _message = ____temp_2
            local ____temp_7
            if _message == nil then
                ____temp_7 = nil
            else
                local ____ui_UIText_6 = ui.UIText
                local ____UIColors_Background_4 = UIColors.Background
                local ____temp_5 = _message .. "\n\n"
                local ____temp_3
                if errorMessage == nil then
                    ____temp_3 = nil
                else
                    ____temp_3 = UIColors.AlertText
                end
                ____temp_7 = ____ui_UIText_6(ui, {
                    backColor = ____UIColors_Background_4,
                    text = ____temp_5,
                    textColor = ____temp_3,
                    w = messageWidth,
                    alignmentH = "Center"
                })
            end
            local messageComp = ____temp_7
            local actionHeight = DEFAULT_ACTION_HEIGHT
            local actionsRow = {
                comp = ui:HActionList({
                    id = id .. "_actionList",
                    direction = "Horizontal",
                    actionHeight = actionHeight,
                    actions = {
                        {
                            label = submitLabel,
                            action = function()
                                local dataIsValid = true
                                local errorMessage = ""
                                if isValid ~= nil then
                                    local validaitonResult = isValid(nil, data)
                                    if not validaitonResult.isValid then
                                        dataIsValid = false
                                        errorMessage = validaitonResult.errorMsg
                                    end
                                end
                                if dataIsValid then
                                    onSubmit(nil, data)
                                else
                                    self.plugin:dialogAction({
                                        type = "ReplaceDialog",
                                        dialog = __TS__New(
                                            ____exports.FormDialog,
                                            self.plugin,
                                            __TS__ObjectAssign({}, self.options, { errorMessage = errorMessage })
                                        )
                                    })
                                end
                            end
                        },
                        {
                            label = "Cancel",
                            action = function()
                                self.plugin:dialogAction({ type = "PopDialog" })
                            end
                        }
                    }
                }),
                item = { sizePolicy = "Fixed", size = actionHeight }
            }
            local ____ui_HVerticalGrid_9 = ui.HVerticalGrid
            local ____array_8 = __TS__SparseArrayNew(table.unpack(ifDefinedChild(nil, messageComp,
                { sizePolicy = "Content" })))
            __TS__SparseArrayPush(
                ____array_8,
                {
                    comp = ui:HInputFieldGrid({
                        data = data,
                        labelColumnSize = { sizePolicy = "Fixed", size = 200 },
                        valueColumnSize = { sizePolicy = "Stretch", size = 1 },
                        rowSize = { sizePolicy = "Fixed", size = 50 },
                        inputFields = __TS__ArrayMap(
                            inputFields,
                            function(____, field)
                                if field.onChange == nil then
                                    field.onChange = function(____, value)
                                        data[field.id] = value
                                    end
                                end
                                return field
                            end
                        )
                    }),
                    item = { sizePolicy = "Content" }
                },
                actionsRow
            )
            return ____ui_HVerticalGrid_9(
                ui,
                { children = { __TS__SparseArraySpread(____array_8) } }
            )
        end

        return ____exports
    end,
    ["lib.ui.dialogs.InputFieldDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ui = require("lib.ui.index")
        local showMessageBox = ____ui.showMessageBox
        function ____exports.InputFieldDialog(self, options)
            local ____options_0 = options
            local fieldType = ____options_0.type
            local fieldLabel = ____options_0.label
            local isValid = ____options_0.isValid
            local title = ____options_0.title
            local initialValue = ____options_0.initialValue
            local onCompleted = ____options_0.onCompleted
            local function show(self, displayHandle)
                local result = showMessageBox(
                    nil,
                    {
                        title = title,
                        display = displayHandle.index,
                        commands = {
                            {
                                label = "Update",
                                action = function(self, data)
                                    onCompleted(nil, data.inputs.value)
                                    return { type = "Quit" }
                                end
                            },
                            {
                                type = "abort",
                                label = "Cancel",
                                action = function(self)
                                    return { type = "Quit" }
                                end
                            }
                        },
                        inputs = { {
                            id = "value",
                            label = fieldLabel,
                            type = fieldType == "string" and "STRING" or "POSITIVE_NUMBER",
                            value = tostring(initialValue),
                            isValid = isValid
                        } }
                    }
                )
                return result or ({ type = "Quit" })
            end
            return { show = show }
        end

        return ____exports
    end,
    ["lib.ui.dialogs.MultiActionDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MessageBoxHelperV2 = require("lib.ui.MessageBoxHelperV2")
        local showMessageBox = ____MessageBoxHelperV2.showMessageBox
        function ____exports.MultiActionDialog(self, options)
            local ____options_0 = options
            local title = ____options_0.title
            local message = ____options_0.message
            local actions = ____options_0.actions
            local function show(self, displayHandle)
                local result = showMessageBox(
                    nil,
                    {
                        title = title,
                        message = message,
                        display = displayHandle.index,
                        commands = __TS__ArrayMap(
                            actions,
                            function(____, action)
                                return {
                                    label = action.label,
                                    action = function() return action:action() end
                                }
                            end
                        )
                    }
                )
                return result or ({ type = "PopDialog" })
            end
            return { show = show }
        end

        return ____exports
    end,
    ["lib.ui.dialogs.SimpleInstanceDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SparseArrayNew = ____lualib.__TS__SparseArrayNew
        local __TS__SparseArrayPush = ____lualib.__TS__SparseArrayPush
        local __TS__SparseArraySpread = ____lualib.__TS__SparseArraySpread
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ActionDialogV2 = require("lib.ui.dialogs.ActionDialogV2")
        local ActionDialogV2 = ____ActionDialogV2.ActionDialogV2
        function ____exports.SimpleInstanceDialog(self, plugin, instanceId, configureDialog)
            local ____ActionDialogV2_5 = ActionDialogV2
            local ____plugin_4 = plugin
            local ____temp_2 = "simple_instance_" .. instanceId
            local ____temp_3 = "Instance " .. instanceId
            local ____temp_1 = ("simple_instance_" .. instanceId) .. "_actions"
            local ____array_0 = __TS__SparseArrayNew(table.unpack(configureDialog == nil and ({}) or ({ {
                label = "Configure",
                action = function()
                    plugin:dialogAction({
                        type = "PushDialog",
                        dialog = configureDialog(nil, instanceId)
                    })
                end
            } })))
            __TS__SparseArrayPush(
                ____array_0,
                {
                    label = "Delete",
                    action = function()
                        plugin:handlePluginEvent(
                            "Delete Instance",
                            function(____, context)
                                plugin:deleteInstance(context, instanceId)
                            end
                        )
                        plugin:dialogAction({ type = "PopDialog" })
                    end
                }
            )
            return __TS__New(
                ____ActionDialogV2_5,
                ____plugin_4,
                {
                    id = ____temp_2,
                    width = 300,
                    title = ____temp_3,
                    actions = {
                        id = ____temp_1,
                        direction = "Vertical",
                        actions = { __TS__SparseArraySpread(____array_0) }
                    }
                }
            )
        end

        return ____exports
    end,
    ["lib.ui.dialogs.UninstallDialogV2"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__New = ____lualib.__TS__New
        local __TS__ArrayReduce = ____lualib.__TS__ArrayReduce
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____RangeUtils = require("lib.RangeUtils")
        local RangeUtils = ____RangeUtils.RangeUtils
        local ____ActionDialogV2 = require("lib.ui.dialogs.ActionDialogV2")
        local ActionDialogV2 = ____ActionDialogV2.ActionDialogV2
        local ____AlertDialogV2 = require("lib.ui.dialogs.AlertDialogV2")
        local AlertDialogV2 = ____AlertDialogV2.AlertDialogV2
        function ____exports.UninstallDialogV2(self, plugin)
            local getUninstallMessage
            function getUninstallMessage(self)
                local ____plugin_pu_pluginEnv_1 = plugin.pu.pluginEnv
                local pluginId = ____plugin_pu_pluginEnv_1.pluginId
                local pluginName = ____plugin_pu_pluginEnv_1.pluginName
                return plugin.eventHandler:handlePluginEventReadOnly(
                    "Uninstall Prompt",
                    function(____, context)
                        local provisionedPoolIds = context.mainAssetManager:getProvisionedPoolIds()
                        return ((((((((("\n    This will delete everything related to the " .. pluginName) .. " plugin.\n\n    Including:\n    - All Addon Variables named:\n \"") .. pluginId) .. "\"\n\n    - Generated DataPool objects:\n\n    ") .. __TS__ArrayReduce(
                            provisionedPoolIds,
                            function(____, result, poolId)
                                return result ..
                                ((poolId .. ": ") .. RangeUtils:describe(context.subPoolRegistry:getPluginInternalSubPool(pluginId, poolId).range)) ..
                                "\n"
                            end,
                            ""
                        )) .. "\n    ") .. (context.pluginData.builtInImagesInstalled and "- Image library images under: " .. context.imageManager.imageLibraryPath or "")) .. "\n    \n\n    ") .. (context.midiRemotes:isMidiRemoteProvisioned() and "- MidiRemotes named with the pluginId prefix\n" or "")) ..
                        "\n    After it's done , you can simply delete the plugin object from the plugins pool."
                    end
                )
            end

            local ____plugin_pu_pluginEnv_0 = plugin.pu.pluginEnv
            local pluginId = ____plugin_pu_pluginEnv_0.pluginId
            local pluginName = ____plugin_pu_pluginEnv_0.pluginName
            return __TS__New(
                ActionDialogV2,
                plugin,
                {
                    id = pluginId .. "_uninstall",
                    title = pluginName .. ": Uninstall",
                    width = 1000,
                    message = getUninstallMessage(nil),
                    actions = {
                        id = pluginId .. "_uninstall_actions",
                        direction = "Horizontal",
                        actions = {
                            {
                                label = "Uninstall",
                                action = function()
                                    plugin:uninstall(plugin.displayHandle)
                                    plugin:dialogAction({
                                        type = "ReplaceDialog",
                                        dialog = __TS__New(
                                            AlertDialogV2,
                                            plugin,
                                            {
                                                id = pluginId .. "_uninstall",
                                                width = 600,
                                                textHeight = 200,
                                                title = pluginName .. ": Uninstall",
                                                message = "Uninstall completed",
                                                onAction = function()
                                                    plugin:dialogAction({ type = "PopDialog" })
                                                end
                                            }
                                        )
                                    })
                                end
                            },
                            {
                                label = "Cancel",
                                action = function()
                                    plugin:dialogAction({ type = "PopDialog" })
                                end
                            }
                        }
                    }
                }
            )
        end

        return ____exports
    end,
    ["lib.ui.dialogs.ViewButtonInputDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ObjectFactory = require("lib.ObjectFactory")
        local ObjectFactory = ____ObjectFactory.ObjectFactory
        local ____PoolUtils = require("lib.PoolUtils")
        local PoolUtils = ____PoolUtils.PoolUtils
        local ____ui = require("lib.ui.index")
        local showMessageBox = ____ui.showMessageBox
        local ____ConfirmDialog = require("lib.ui.dialogs.ConfirmDialog")
        local ConfirmDialog = ____ConfirmDialog.ConfirmDialog
        function ____exports.ViewButtonInputDialog(self, options)
            local function show(self, displayHandle)
                local ____options_0 = options
                local title = ____options_0.title
                local message = ____options_0.message
                local onSelected = ____options_0.onSelected
                local selectLabel = ____options_0.selectLabel
                local of = __TS__New(ObjectFactory)
                local screenNumber = displayHandle.index
                local vbs = of:HViewButtonScreen(screenNumber)
                local nextAvailableViewButtonIndex = PoolUtils:findNextEmptyPoolIndex(
                    vbs:getObj(),
                    1
                )
                local mbOptions = {
                    title = title,
                    message = message,
                    display = displayHandle.index,
                    commands = {
                        {
                            label = selectLabel,
                            action = function(____, data)
                                local selectedViewButton = { screenNumber = data.inputs.screenNumber, id = data.inputs
                                .viewButtonId }
                                if of:HViewButton(selectedViewButton.screenNumber, selectedViewButton.id):exists() then
                                    return {
                                        type = "PushDialog",
                                        dialog = ConfirmDialog(
                                            nil,
                                            {
                                                title = "Are You sure ?",
                                                message = ((("The view button [" .. tostring(selectedViewButton.screenNumber)) .. ".") .. tostring(selectedViewButton.id)) ..
                                                "] is in use.\n\n Shell we overwrite it?",
                                                onConfirmAction = function()
                                                    local uiAction = onSelected(nil, selectedViewButton)
                                                    local ____uiAction_1 = uiAction
                                                    if ____uiAction_1 == nil then
                                                        ____uiAction_1 = { type = "PopDialog", numOfDialogsToPop = 2 }
                                                    end
                                                    return ____uiAction_1
                                                end
                                            }
                                        )
                                    }
                                else
                                    local uiAction = onSelected(nil, selectedViewButton)
                                    local ____uiAction_2 = uiAction
                                    if ____uiAction_2 == nil then
                                        ____uiAction_2 = { type = "PopDialog" }
                                    end
                                    return ____uiAction_2
                                end
                            end
                        },
                        {
                            type = "abort",
                            label = "Cancel",
                            action = function() return { type = "PopDialog" } end
                        }
                    },
                    inputs = {
                        {
                            id = "screenNumber",
                            label = "Screen Number",
                            value = tostring(displayHandle.index),
                            type = "POSITIVE_NUMBER"
                        },
                        {
                            id = "viewButtonId",
                            label = "View Button Id",
                            value = tostring(nextAvailableViewButtonIndex),
                            type = "POSITIVE_NUMBER"
                        }
                    }
                }
                return showMessageBox(nil, mbOptions) or ({ type = "Quit" })
            end
            return { show = show }
        end

        return ____exports
    end,
    ["lib.ui.dialogs.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        do
            local ____ActionDialogV2 = require("lib.ui.dialogs.ActionDialogV2")
            local ActionDialogV2 = ____ActionDialogV2.ActionDialogV2
            ____exports.ActionDialogV2 = ActionDialogV2
        end
        do
            local ____AlertDialog = require("lib.ui.dialogs.AlertDialog")
            local AlertDialog = ____AlertDialog.AlertDialog
            ____exports.AlertDialog = AlertDialog
        end
        do
            local ____AlertDialogV2 = require("lib.ui.dialogs.AlertDialogV2")
            local AlertDialogV2 = ____AlertDialogV2.AlertDialogV2
            ____exports.AlertDialogV2 = AlertDialogV2
        end
        do
            local ____ConfirmDialog = require("lib.ui.dialogs.ConfirmDialog")
            local ConfirmDialog = ____ConfirmDialog.ConfirmDialog
            ____exports.ConfirmDialog = ConfirmDialog
        end
        do
            local ____FormDialog = require("lib.ui.dialogs.FormDialog")
            local FormDialog = ____FormDialog.FormDialog
            ____exports.FormDialog = FormDialog
        end
        do
            local ____InputFieldDialog = require("lib.ui.dialogs.InputFieldDialog")
            local InputFieldDialog = ____InputFieldDialog.InputFieldDialog
            ____exports.InputFieldDialog = InputFieldDialog
        end
        do
            local ____MultiActionDialog = require("lib.ui.dialogs.MultiActionDialog")
            local MultiActionDialog = ____MultiActionDialog.MultiActionDialog
            ____exports.MultiActionDialog = MultiActionDialog
        end
        do
            local ____SimpleInstanceDialog = require("lib.ui.dialogs.SimpleInstanceDialog")
            local SimpleInstanceDialog = ____SimpleInstanceDialog.SimpleInstanceDialog
            ____exports.SimpleInstanceDialog = SimpleInstanceDialog
        end
        do
            local ____UninstallDialogV2 = require("lib.ui.dialogs.UninstallDialogV2")
            local UninstallDialogV2 = ____UninstallDialogV2.UninstallDialogV2
            ____exports.UninstallDialogV2 = UninstallDialogV2
        end
        do
            local ____UserDialogBase = require("lib.ui.dialogs.UserDialogBase")
            local UserDialogBase = ____UserDialogBase.UserDialogBase
            ____exports.UserDialogBase = UserDialogBase
        end
        do
            local ____ViewButtonInputDialog = require("lib.ui.dialogs.ViewButtonInputDialog")
            local ViewButtonInputDialog = ____ViewButtonInputDialog.ViewButtonInputDialog
            ____exports.ViewButtonInputDialog = ViewButtonInputDialog
        end
        return ____exports
    end,
    ["lib.plugin.PluginInstaller"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__StringStartsWith = ____lualib.__TS__StringStartsWith
        local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____AssertUtils = require("lib.AssertUtils")
        local AssertUtils = ____AssertUtils.AssertUtils
        local ____ObjectFactory = require("lib.ObjectFactory")
        local ObjectFactory = ____ObjectFactory.ObjectFactory
        local ____Utils = require("lib.Utils")
        local getErrorMessage = ____Utils.getErrorMessage
        local objectNumOfItems = ____Utils.objectNumOfItems
        local ____ImageLibraryAccess = require("lib.image.ImageLibraryAccess")
        local ImageLibraryAccess = ____ImageLibraryAccess.ImageLibraryAccess
        local ____PluginImageManager = require("lib.plugin.PluginImageManager")
        local PluginImageManager = ____PluginImageManager.PluginImageManager
        local ____PluginsRegistry = require("lib.plugins.PluginsRegistry.PluginsRegistry")
        local PluginsRegistry = ____PluginsRegistry.PluginsRegistry
        local ____SubPoolRegistry = require("lib.plugins.SubPoolRegistry.index")
        local SubPoolRegistry = ____SubPoolRegistry.SubPoolRegistry
        local ____ui = require("lib.ui.index")
        local showAlert = ____ui.showAlert
        local startUI = ____ui.startUI
        local ____dialogs = require("lib.ui.dialogs.index")
        local MultiActionDialog = ____dialogs.MultiActionDialog
        local ____PluginAssetManager = require("lib.plugin.PluginAssetManager")
        local PluginAssetManager = ____PluginAssetManager.PluginAssetManager
        local ____PluginConstants = require("lib.plugin.PluginConstants")
        local PluginDataAccess = ____PluginConstants.PluginDataAccess
        local ____PluginUtils = require("lib.plugin.PluginUtils")
        local PluginUtils = ____PluginUtils.PluginUtils
        local UNINSTALL_OLD_VERSION = false
        ____exports.PluginInstaller = __TS__Class()
        local PluginInstaller = ____exports.PluginInstaller
        PluginInstaller.name = "PluginInstaller"
        function PluginInstaller.prototype.____constructor(self, options)
            self.options = options
            local ____options_0 = options
            local pluginEnv = ____options_0.pluginEnv
            local pluginInfo = ____options_0.pluginInfo
            local contextBuilder = ____options_0.contextBuilder
            local _log = ____options_0.log
            self.log = _log:subLogger("Installer")
            self.internalDataAccess = function() return PluginDataAccess(nil, self.pu.pluginId, self.log) end
            local pu = PluginUtils(nil, pluginEnv, pluginInfo)
            self.pu = pu
        end

        function PluginInstaller.prototype.showAlertDialog(self, title, message)
            showAlert(nil, self.options.displayHandle.index, (self.pu.pluginEnv.pluginName .. ": ") .. title, message)
        end

        function PluginInstaller.prototype.isInstalled(self)
            return self:internalDataAccess():isDataExists()
        end

        function PluginInstaller.prototype.install(self, undo, displayHandle, subPoolRegistry, log)
            if self:isInstalled() then
                log:error("Plugin is already installed")
                return { success = false, oldPluginId = nil }
            end
            local pu = self.pu
            local runtime = self:getRuntime()
            local da = self:internalDataAccess():setData({ builtInImagesInstalled = false, instances = {}, pluginAssets = {} })
            :write()
            local of = __TS__New(
                ObjectFactory,
                {
                    undoBlock = undo,
                    hookManager = runtime:getHookManager(),
                    log = log
                }
            )
            of:HPlugin(self.options.pluginInfo.componentHandle:Parent().index):setLocked(true)
            local ____self_options_pluginEnv_1 = self.options.pluginEnv
            local author = ____self_options_pluginEnv_1.author
            local pluginName = ____self_options_pluginEnv_1.pluginName
            local pluginVersion = ____self_options_pluginEnv_1.pluginVersion
            local pluginId = ____self_options_pluginEnv_1.pluginId
            AssertUtils:assertNonEmpty(author, "author")
            AssertUtils:assertNonEmpty(pluginName, "pluginName")
            AssertUtils:assertNonEmpty(pluginVersion, "pluginVersion")
            AssertUtils:assertNonEmpty(pluginId, "pluginId")
            if pu.pluginEnv.env == "prod" then
                local isInStream = self.options.pluginInfo.componentHandle:Get("InStream")
                log:debug("Plugin.install() verify InStream=" .. tostring(isInStream))
                if not isInStream then
                    self:showAlertDialog("ALERT !",
                        "We recognized that this plugin was installed in a way which make it:\n\n \"Not InStream\".\n\n\n                    This means that the plugin is not saved with the show file, and may not transfer well to other consoles.\n\n\n                    This may have happend if you put the plugin's file directly under your \"plugins\" folder, and not in the correct path.\n\n                    Please see README.pdf for installation instructions.")
                end
            end
            log:debug("provisionPluginSubPools")
            subPoolRegistry:provisionPluginSubPools(
                pu.pluginEnv:getNameAndVersionAsLabel(),
                self.options.pluginAssetsCapacity
            )
            log:debug(("Hook plugin \"" .. self.options.pluginInfo.pluginObjectName) .. "\"")
            runtime:getHookManager():hook({
                hookId = "__PluginObject",
                obj = of:HPlugin(self.options.pluginInfo.pluginObjectName):getObj(),
                onChange = function(pluginObj, changeLevel)
                    if changeLevel == Enums.ChangeLevel.Delete then
                        showAlert(nil, displayHandle.index, pluginName .. " - Plugin Uninstall Required !",
                            "Deleting the plugin object is not enough. If you wish to remove all assets created by the plugin, you need to uninstall it using the plugin's own menu.\n\n 1) Please click \"Oops\" to undo the plugin object deletion.\n\n2) Click the plugin object.\n\n 3) Choose \"Uninstall\"\n\n 4) Delete the plugin object")
                    end
                end
            })
            local pam = PluginAssetManager(
                nil,
                {
                    pluginData = da:getData(),
                    log = log,
                    of = of,
                    subPoolRegistry = subPoolRegistry,
                    pu = pu
                }
            )
            local builtInImages = self.options.builtInImages or ({})
            if objectNumOfItems(nil, builtInImages) > 0 then
                local imageManager = PluginImageManager(
                    nil,
                    {
                        pluginData = da:getData(),
                        pluginAssetManager = pam:getCommonAssetManager(),
                        builtInImages = self.options.builtInImages or ({}),
                        pu = pu,
                        subPoolRegistry = subPoolRegistry,
                        log = log
                    }
                )
                imageManager:installBuiltInImages()
            end
            da:write()
            runtime:onInstall()
            return { success = true }
        end

        function PluginInstaller.prototype.uninstallOldVersion(self, undo, oldPluginId, oldVersion)
            local ____self_options_runtime_2 = self.options.runtime
            local log = ____self_options_runtime_2.log
            local of = __TS__New(
                ObjectFactory,
                {
                    undoBlock = undo,
                    hookManager = self:getRuntime():getHookManager(),
                    log = log
                }
            )
            if oldVersion ~= nil and oldPluginId ~= nil then
                log:info(("Uninstall oldVersion's (" .. oldVersion) .. ") assets:")
                __TS__ArrayForEach(
                    __TS__ArrayFilter(
                        of:HPool("Plugins"):getObj():Children(),
                        function(____, pluginObj)
                            local pluginVersion = of:HPlugin(pluginObj.index):getProps().version
                            return __TS__StringStartsWith(pluginVersion, oldVersion)
                        end
                    ),
                    function(____, pluginObj)
                        UnhookMultiple(nil, pluginObj)
                        log:info("Delete old plugin object, at index: " .. tostring(pluginObj.index))
                        of:HPlugin(pluginObj.index):delete()
                    end
                )
                local oldImageAccess = ImageLibraryAccess(nil, oldPluginId, log)
                log:info("Delete old version images from: " .. oldImageAccess.imageLibraryPath)
                ImageLibraryAccess(nil, oldPluginId, log):deleteAllImages()
            end
        end

        function PluginInstaller.prototype.getOldUserData(self)
            local oldDataDMIndex = self:findOldData()
            if oldDataDMIndex == nil then
                return nil
            else
                local dms = self.options.dataMigrations
                local oldPluginId = dms[oldDataDMIndex + 1].fromPluginId
                local oldVersion = dms[oldDataDMIndex + 1].fromVersion
                self.log:info("Found an old version " .. oldVersion)
                return {
                    userData = self:migrateOldData(oldDataDMIndex),
                    oldPluginId = oldPluginId,
                    oldVersion = oldVersion
                }
            end
        end

        function PluginInstaller.prototype.getOldUserDataWithDialogV1(self)
            local oldDataDMIndex = self:findOldData()
            local userData
            if oldDataDMIndex ~= nil then
                local dms = self.options.dataMigrations
                local oldPluginId = dms[oldDataDMIndex + 1].fromPluginId
                local oldVersion = dms[oldDataDMIndex + 1].fromVersion
                self.log:info("Found an old version " .. oldVersion)
                userData = startUI(
                    nil,
                    self.options.displayHandle,
                    MultiActionDialog(
                        nil,
                        {
                            title = "Version Update",
                            message = ("An old version (" .. self.options.dataMigrations[oldDataDMIndex + 1].fromVersion) ..
                            ") was found.\n\nDo you want to IMPORT the user data from the old version?\n\n Or CREATE NEW initial user data?",
                            actions = {
                                {
                                    label = "IMPORT",
                                    action = function()
                                        return {
                                            type = "Quit",
                                            returnValue = {
                                                userData = self:migrateOldData(oldDataDMIndex),
                                                oldPluginId = oldPluginId,
                                                oldVersion = oldVersion
                                            }
                                        }
                                    end
                                },
                                {
                                    label = "CREATE NEW",
                                    action = function()
                                        return { type = "Quit", returnValue = nil }
                                    end
                                }
                            }
                        }
                    )
                )
            end
            return userData
        end

        function PluginInstaller.prototype.findOldData(self)
            local dms = self.options.dataMigrations
            local i
            if #dms == 0 then
                return
            end
            if self.pu.pluginEnv.env == "dev" then
                local lastDm = dms[#dms]
                if lastDm.toPluginId .. "_dev" == self.pu.pluginEnv.pluginId then
                    lastDm.toPluginId = self.pu.pluginEnv.pluginId
                end
            end
            if dms[#dms].toPluginId ~= self.pu.pluginId then
                error((("DataMigration's last item's toPluginId differs from the current pluginId. dm:" .. dms[#dms].toPluginId) .. ", cur:") ..
                self.pu.pluginId)
            end
            do
                i = #dms - 1
                while i >= 0 do
                    local dm = dms[i + 1]
                    local oldDataAccess = PluginDataAccess(nil, dm.fromPluginId, self.log)
                    if oldDataAccess:isDataExists() then
                        return i
                    end
                    i = i - 1
                end
            end
        end

        function PluginInstaller.prototype.migrateOldData(self, fromDMIndex)
            local dms = self.options.dataMigrations
            local firstDM = dms[fromDMIndex + 1]
            local dataAccess = PluginDataAccess(nil, firstDM.fromPluginId, self.log)
            assert(dataAccess:read())
            local j = fromDMIndex
            local userData = dataAccess:getData().userData
            repeat
                do
                    userData = dms[j + 1]:migrateUserData(userData)
                    j = j + 1
                end
            until not (j < #dms)
            return userData
        end

        function PluginInstaller.prototype.getRuntime(self)
            return self.options.runtime
        end

        function PluginInstaller.prototype.uninstall(self, undo, displayHandle, log, hardCleanup)
            local pu = self.pu
            local ____pu_3 = pu
            local pluginId = ____pu_3.pluginId
            log:info((("uninstall(): pluginId=" .. self.pu.pluginId) .. " hardCleanup=") .. tostring(hardCleanup))
            local spda = self.options.runtime.pluginRegistry:getOrInitSubPoolRegistryDataAccess()
            local subPoolRegistryData = spda
            local da = PluginDataAccess(nil, self.pu.pluginId, self.log)
            if not hardCleanup then
                local dataReadSuccesfuly = da:read()
                if not dataReadSuccesfuly then
                    log:error("uninstall(): failed to read data. deleting data.")
                    self:internalDataAccess():cleanUp()
                    return
                end
            end
            do
                local function ____catch(err)
                    log:error("uninstall(): pluginRuntime.cleanup() error. Continuing uninstall. " ..
                    getErrorMessage(nil, err))
                end
                local ____try, ____hasReturned = pcall(function()
                    log:trace("uninstall: Delete Hooks")
                    local pluginRuntime = self:getRuntime()
                    pluginRuntime:cleanupHooks()
                end)
                if not ____try then
                    ____catch(____hasReturned)
                end
            end
            if not hardCleanup then
                local pluginContext = self.options.contextBuilder:buildPluginContext(
                    da:getData(),
                    undo,
                    subPoolRegistryData,
                    log
                )
                local instanceManager = pluginContext.instanceManager
                do
                    local function ____catch(err)
                        log:error("uninstall(): plugin specific uninstall error: " .. getErrorMessage(nil, err))
                    end
                    local ____try, ____hasReturned = pcall(function()
                        log:trace("uninstall: Call plugin uninstall")
                        __TS__ArrayForEach(
                            instanceManager:getInstanceIds(),
                            function(____, instanceId)
                                self.options:onInstanceDelete(pluginContext, instanceId)
                            end
                        )
                        self.options:onUninstall(
                            da:getData(),
                            undo,
                            displayHandle,
                            spda,
                            log
                        )
                        da:write()
                        spda:write()
                    end)
                    if not ____try then
                        ____catch(____hasReturned)
                    end
                end
            end
            do
                local function ____catch(err)
                    log:error("uninstall(): error deleting plugin assets: " .. getErrorMessage(nil, err))
                end
                local ____try, ____hasReturned = pcall(function()
                    local of = ObjectFactory.noContext
                    log:trace("uninstall: Clean AssetManager")
                    PluginAssetManager(
                        nil,
                        {
                            pluginData = da:getData(),
                            log = log,
                            of = of,
                            subPoolRegistry = __TS__New(SubPoolRegistry, {
                                eventEmitter = self.options.runtime.pluginRegistry.eventDispatcher,
                                pluginId = pluginId,
                                data = subPoolRegistryData,
                                log = log,
                                readOnly = true
                            }),
                            pu = pu
                        }
                    ):deleteAll(undo)
                end)
                if not ____try then
                    ____catch(____hasReturned)
                end
            end
            if not hardCleanup then
                do
                    local function ____catch(err)
                        log:error("uninstall(): error deleting instances assets: " .. getErrorMessage(nil, err))
                    end
                    local ____try, ____hasReturned = pcall(function()
                        local pluginContext = self.options.contextBuilder:buildPluginContext(
                            da:getData(),
                            undo,
                            subPoolRegistryData,
                            log
                        )
                        local instanceManager = pluginContext.instanceManager
                        log:trace("uninstall: clean InstanceManager")
                        instanceManager:deleteAll()
                    end)
                    if not ____try then
                        ____catch(____hasReturned)
                    end
                end
            end
            do
                local function ____catch(err)
                    log:error("uninstall(): error uninstalling images: " .. getErrorMessage(nil, err))
                end
                local ____try, ____hasReturned = pcall(function()
                    log:trace("uninstall: uninstall images")
                    local imageAccess = ImageLibraryAccess(nil, self.pu.pluginId, log)
                    imageAccess:deleteAllImages()
                end)
                if not ____try then
                    ____catch(____hasReturned)
                end
            end
            do
                local function ____catch(err)
                    log:error("uninstall(): error uninstalling images: " .. getErrorMessage(nil, err))
                end
                local ____try, ____hasReturned = pcall(function()
                    log:trace("uninstall: Delete Own Sub-Pools from registry")
                    local registry = __TS__New(SubPoolRegistry, {
                        eventEmitter = self.options.runtime.pluginRegistry.eventDispatcher,
                        pluginId = pluginId,
                        data = subPoolRegistryData,
                        log = log,
                        readOnly = false
                    })
                    local of = ObjectFactory.noContext
                    __TS__ArrayForEach(
                        registry:getAllInternalSubPools(),
                        function(____, subPoolWrapper)
                            local ____subPoolWrapper_4 = subPoolWrapper
                            local range = ____subPoolWrapper_4.range
                            local poolId = ____subPoolWrapper_4.poolId
                            local pool = of:HPool(poolId)
                            if not pool:isRangeEmpty(range) then
                                pool:deleteRange(range, { noConfirm = true })
                            end
                        end
                    )
                    registry:disassociateAllSubPools()
                    if registry:isEmpty() then
                        spda:cleanUp()
                    else
                        spda:write()
                    end
                end)
                if not ____try then
                    ____catch(____hasReturned)
                end
            end
            self:getRuntime():destroy()
            if PluginsRegistry:exists() then
                local pluginRegistry = PluginsRegistry:get()
                log:trace("Emitting \"subPoolsChange\"")
                pluginRegistry.eventDispatcher:emit({ eventName = "subPoolsChange", displayHandle = displayHandle, pluginId =
                pluginId })
                pluginRegistry:unregister(pluginId)
            end
            do
                local function ____catch(err)
                    log:error("uninstall(): error deleting data variable: " .. getErrorMessage(nil, err))
                end
                local ____try, ____hasReturned = pcall(function()
                    log:trace("uninstall: Delete data variable")
                    da:cleanUp()
                end)
                if not ____try then
                    ____catch(____hasReturned)
                end
            end
            local of = ObjectFactory.noContext
            of:HPlugin(self.options.pluginInfo.componentHandle:Parent().index):setLocked(false)
        end

        return ____exports
    end,
    ["lib.plugins.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        do
            local ____export = require("lib.plugins.PluginsRegistry.PluginsRegistry")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        return ____exports
    end,
    ["lib.ui.DialogStack"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local nTimes = ____Utils.nTimes
        ____exports.DialogStack = __TS__Class()
        local DialogStack = ____exports.DialogStack
        DialogStack.name = "DialogStack"
        function DialogStack.prototype.____constructor(self, log)
            self.dialogStack = {}
            self.log = log:subLogger("DialogStack")
        end

        function DialogStack.prototype.newStack(self, _display, dialog)
            self.dialogStack = { dialog }
            self.display = _display
            dialog:show(_display)
        end

        function DialogStack.prototype.action(self, uiAction)
            if self.display == nil then
                error("DialogStack not initialized")
            end
            local curDialog = self.dialogStack[#self.dialogStack]
            curDialog:close()
            self:updateStack(uiAction)
            self:showFrontDialog()
        end

        function DialogStack.prototype.showFrontDialog(self)
            if self.display == nil then
                error("DialogStack not initialized")
            end
            local selfDisplay = self.display
            if #self.dialogStack > 0 then
                self.log:trace("action() show front dialog")
                self.dialogStack[#self.dialogStack]:show(selfDisplay)
            else
                self.log:trace("action() stack is empty")
                self.display = nil
            end
        end

        function DialogStack.prototype.updateStack(self, uiAction)
            self.log:trace("UIAction: " .. uiAction.type)
            repeat
                local ____switch11 = uiAction.type
                local ____cond11 = ____switch11 == "Quit"
                if ____cond11 then
                    do
                        self.dialogStack = {}
                        self.display = nil
                        break
                    end
                end
                ____cond11 = ____cond11 or ____switch11 == "PushDialog"
                if ____cond11 then
                    do
                        if uiAction.type == "PushDialog" then
                            local ____self_dialogStack_0 = self.dialogStack
                            ____self_dialogStack_0[#____self_dialogStack_0 + 1] = uiAction.dialog
                        end
                        break
                    end
                end
                ____cond11 = ____cond11 or ____switch11 == "PopDialog"
                if ____cond11 then
                    do
                        nTimes(
                            nil,
                            uiAction.numOfDialogsToPop or 1,
                            function()
                                table.remove(self.dialogStack)
                            end
                        )
                        break
                    end
                end
                ____cond11 = ____cond11 or ____switch11 == "ReplaceDialog"
                if ____cond11 then
                    do
                        table.remove(self.dialogStack)
                        local ____self_dialogStack_1 = self.dialogStack
                        ____self_dialogStack_1[#____self_dialogStack_1 + 1] = uiAction.dialog
                        break
                    end
                end
                ____cond11 = ____cond11 or ____switch11 == "RefreshDialog"
                if ____cond11 then
                    do
                        break
                    end
                end
            until true
        end

        return ____exports
    end,
    ["lib.plugin.PluginExternalActionRegistry"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.PluginExternalActionRegistry = __TS__Class()
        local PluginExternalActionRegistry = ____exports.PluginExternalActionRegistry
        PluginExternalActionRegistry.name = "PluginExternalActionRegistry"
        function PluginExternalActionRegistry.prototype.____constructor(self, log)
            self.log = log
            self.handlers = {}
        end

        function PluginExternalActionRegistry.prototype.registerHandler(self, actionType, handler)
            self.handlers[actionType] = handler
        end

        function PluginExternalActionRegistry.prototype.getHandler(self, actionType)
            return self.handlers[actionType]
        end

        return ____exports
    end,
    ["lib.plugin.PluginStatelessComponents"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Logger = require("lib.Logger")
        local Logger = ____Logger.Logger
        local ____Utils = require("lib.Utils")
        local typed = ____Utils.typed
        local ____PluginExternalActionRegistry = require("lib.plugin.PluginExternalActionRegistry")
        local PluginExternalActionRegistry = ____PluginExternalActionRegistry.PluginExternalActionRegistry
        --- A Singleton in the LUA global space, that hold statless plugin components.
        -- These components can hold constants, or components that register on LUA load time (before main is called).
        -- I doesn't matter if another show is loaded. It would be nice to clean them up,
        -- but not necessary since they don't hold any state of the plugin.
        ____exports.PluginStatelessComponents = __TS__Class()
        local PluginStatelessComponents = ____exports.PluginStatelessComponents
        PluginStatelessComponents.name = "PluginStatelessComponents"
        function PluginStatelessComponents.prototype.____constructor(self, log)
            self.log = log
            self.externalActionRegistry = __TS__New(PluginExternalActionRegistry, log)
        end

        function PluginStatelessComponents.GET_OR_CREATE(self, pluginId)
            local id = pluginId .. "_stateless"
            if typed(nil, _G)[id] == nil then
                typed(nil, _G)[id] = __TS__New(
                    ____exports.PluginStatelessComponents,
                    Logger(nil, { prefix = { id } })
                )
            end
            return typed(nil, _G)[id]
        end

        return ____exports
    end,
    ["lib.plugin.PluginRuntime"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__Delete = ____lualib.__TS__Delete
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____HookManager = require("lib.HookManager")
        local HookManager = ____HookManager.HookManager
        local ____Logger = require("lib.Logger")
        local Logger = ____Logger.Logger
        local LogLevel = ____Logger.LogLevel
        local ____MAVariables = require("lib.MAVariables")
        local MAVariables = ____MAVariables.MAVariables
        local ____plugins = require("lib.plugins.index")
        local PluginsRegistry = ____plugins.PluginsRegistry
        local ____DialogStack = require("lib.ui.DialogStack")
        local DialogStack = ____DialogStack.DialogStack
        local ____Utils = require("lib.Utils")
        local objectValues = ____Utils.objectValues
        local withDefault = ____Utils.withDefault
        local ____uuid = require("lib.uuid")
        local genUuid = ____uuid.gen
        local ____MutexFactory = require("lib.MutexFactory.MutexFactory")
        local MutexFactory = ____MutexFactory.MutexFactory
        local ____PluginConstants = require("lib.plugin.PluginConstants")
        local PluginDataAccess = ____PluginConstants.PluginDataAccess
        local ____PluginStatelessComponents = require("lib.plugin.PluginStatelessComponents")
        local PluginStatelessComponents = ____PluginStatelessComponents.PluginStatelessComponents
        --- Runtime objects (PluginRuntime and InstanceRuntime) are objects that persist between plugin events.
        -- They are stored in the Global LUA space.
        -- They perish when MA3 is shutdown.
        -- When a new show is loaded, they should also be destroyed.
        -- For now we don't haave a proper listening on showLoad event, so we lazily destroy it when it is accessed for the first time.
        -- This is done by writing the runtime's uuid in the ShowData AddonVars.
        local GlobalVariable = _G
        ____exports.PluginRuntime = __TS__Class()
        local PluginRuntime = ____exports.PluginRuntime
        PluginRuntime.name = "PluginRuntime"
        function PluginRuntime.prototype.____constructor(self, params)
            self.params = params
            local ____params_0 = params
            local pluginId = ____params_0.pluginId
            local pluginEnv = ____params_0.pluginEnv
            local pluginInfo = ____params_0.pluginInfo
            local logLevel = ____params_0.logLevel
            self.logLevel = withDefault(nil, logLevel, pluginEnv.env == "prod" and LogLevel.ERROR or LogLevel.TRACE)
            local rootLog = Logger(nil, { prefix = { pluginId }, logLevel = self.logLevel })
            self.rootLog = rootLog
            local log = rootLog:subLogger("RunTime")
            local uuid = genUuid(nil)
            local pluginRegistry = PluginsRegistry:getOrCreate()
            local mutexFactory = MutexFactory(
                nil,
                rootLog:subLogger("MutexFactory")
            )
            self.mutexFactory = mutexFactory
            log:trace("constructor() uuid=" .. uuid)
            self.runtime_uuid = uuid
            self.pluginId = pluginId
            self.__pluginHooksManager = HookManager(
                nil,
                {
                    id = "plugin",
                    pluginHandle = pluginInfo.componentHandle:Parent(),
                    parentLog = rootLog:subLogger("Plugin:HookManager"),
                    mutexFactory = mutexFactory
                }
            )
            self.__instances = {}
            self.pluginInfo = pluginInfo
            self.log = log
            self.pluginRegistry = pluginRegistry
            self.registryEventListener = function(____, event)
                self.log:trace("Runtime: on('subPoolsChange'): event.pluginId=" .. event.pluginId)
                if PluginDataAccess(nil, self.pluginId, self.log):isDataExists() and event.pluginId ~= self.pluginId then
                    self:onPluginRegistryEvent(event)
                end
            end
            self.dialogStack = __TS__New(DialogStack, self.log)
            self.dataAccess = PluginDataAccess(nil, pluginId, rootLog)
        end

        function PluginRuntime.prototype.update(self, pluginInfo)
            self.pluginInfo = pluginInfo
        end

        function PluginRuntime.prototype.getRuntimeId(self)
            return self.runtime_uuid
        end

        function PluginRuntime.prototype.initPluginsRegistryEventListener(self)
            local pluginRegistry = PluginsRegistry:getOrCreate()
            self.cleanEventListener = pluginRegistry.events:on("subPoolsChange", self.registryEventListener)
        end

        function PluginRuntime.prototype.getLogLevel(self)
            return self.logLevel
        end

        function PluginRuntime.prototype.setLogLevel(self, level)
            self.logLevel = level
            self.rootLog:setLogLevel(level)
            self.pluginRegistry:setLogLevel(level)
        end

        function PluginRuntime.prototype.getHookManager(self)
            return self.__pluginHooksManager
        end

        function PluginRuntime.prototype.getExtActionHandler(self, actionType)
            return PluginStatelessComponents:GET_OR_CREATE(self.pluginId).externalActionRegistry:getHandler(actionType)
        end

        function PluginRuntime.prototype.getOrCreateInstanceRuntime(self, instanceId)
            local instanceRuntime = self.__instances[instanceId]
            if instanceRuntime == nil then
                instanceRuntime = self:createInstanceRuntime(instanceId, self.pluginInfo, self.rootLog, self)
                self.__instances[instanceId] = instanceRuntime
            end
            return instanceRuntime
        end

        function PluginRuntime.prototype.deleteInstanceRuntime(self, instanceId)
            local instanceRuntime = self.__instances[instanceId]
            if instanceRuntime ~= nil then
                instanceRuntime:cleanUp()
            end
            __TS__Delete(self.__instances, instanceId)
        end

        function PluginRuntime.prototype.cleanupHooks(self)
            self.__pluginHooksManager:cleanup()
            for ____, instanceRuntime in ipairs(objectValues(nil, self.__instances)) do
                instanceRuntime:getHookManager():cleanup()
            end
        end

        function PluginRuntime.prototype.onInstall(self)
            self.log:trace("onInstall()")
            local ____self_params_1 = self.params
            local pluginEnv = ____self_params_1.pluginEnv
            local pluginInfo = ____self_params_1.pluginInfo
            self.pluginRegistry:register(pluginEnv, pluginInfo)
            self:initPluginsRegistryEventListener()
        end

        function PluginRuntime.prototype.destroy(self)
            self.log:trace("destroy() uuid=" .. self.runtime_uuid)
            for ____, instanceRuntime in ipairs(objectValues(nil, self.__instances)) do
                instanceRuntime:cleanUp()
            end
            self.__pluginHooksManager:cleanup()
            local ____ = self.cleanEventListener and self:cleanEventListener()
            self.pluginRegistry:unregister(self.pluginId)
            __TS__Delete(GlobalVariable, self.pluginId)
            self.mutexFactory:cleanup()
        end

        local RUNTIME_UUID_VAR_NAME = "RUNTIME_UUID"
        function ____exports.getOrCreateRuntime(self, pluginId, pluginInfo, create)
            local pluginAddonVars = MAVariables(nil, { storageType = "ShowFile", variablesId = pluginId })
            local function createRuntime(self)
                local runtime = create(nil)
                pluginAddonVars:setVar(
                    RUNTIME_UUID_VAR_NAME,
                    runtime:getRuntimeId()
                )
                return runtime
            end
            if GlobalVariable[pluginId] == nil then
                GlobalVariable[pluginId] = createRuntime(nil)
            else
                local runtime = GlobalVariable[pluginId]
                if pluginAddonVars:getVar(RUNTIME_UUID_VAR_NAME) ~= runtime:getRuntimeId() then
                    runtime:destroy()
                    GlobalVariable[pluginId] = createRuntime(nil)
                end
            end
            local runtime = GlobalVariable[pluginId]
            pluginInfo.pluginObjectName = pluginInfo.componentHandle:Parent().name
            runtime:update(pluginInfo)
            return runtime
        end

        return ____exports
    end,
    ["lib.uuid"] = function(...)
        ---------------------------------------------------------------------------------------
        -- Copyright 2012 Rackspace (original), 2013-2021 Thijs Schreijer (modifications)
        --
        -- Licensed under the Apache License, Version 2.0 (the "License");
        -- you may not use this file except in compliance with the License.
        -- You may obtain a copy of the License at
        --
        --     http://www.apache.org/licenses/LICENSE-2.0
        --
        -- Unless requireXXXd by applicable law or agreed to in writing, software
        -- distributed under the License is distributed on an "AS-IS" BASIS,
        -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -- See the License for the specific language governing permissions and
        -- limitations under the License.
        --
        -- see http://www.ietf.org/rfc/rfc4122.txt
        --
        -- Note that this is not a true version 4 (random) UUID.  Since `os.time()` precision is only 1 second, it would be hard
        -- to guarantee spacial uniqueness when two hosts generate a uuid after being seeded during the same second.  This
        -- is solved by using the node field from a version 1 UUID.  It represents the mac address.
        --
        -- 28-apr-2013 modified by Thijs Schreijer from the original [Rackspace code](https://github.com/kans/zirgo/blob/807250b1af6725bad4776c931c89a784c1e34db2/util/uuid.lua) as a generic Lua module.
        -- Regarding the above mention on `os.time()`; the modifications use the `socket.gettime()` function from LuaSocket
        -- if available and hence reduce that problem (provided LuaSocket has been loaded before uuid).
        --
        -- **Important:** the random seed is a global piece of data. Hence setting it is
        -- an application level responsibility, libraries should never set it!
        --
        -- See this issue; [https://github.com/Kong/kong/issues/478](https://github.com/Kong/kong/issues/478)
        -- It demonstrates the problem of using time as a random seed. Specifically when used from multiple processes.
        -- So make sure to seed only once, application wide. And to not have multiple processes do that
        -- simultaneously.
        local M = {}
        -- local math = requireXXX('math')
        -- local os = requireXXX('os')
        -- local string = requireXXX('string')

        local bitsize = 32                               -- bitsize assumed for Lua VM. See randomseed function below.
        local lua_version = tonumber(_VERSION:match("%d%.*%d*")) -- grab Lua version used

        local MATRIX_AND = { { 0, 0 }, { 0, 1 } }
        local MATRIX_OR = { { 0, 1 }, { 1, 1 } }
        local HEXES = '0123456789abcdef'

        local math_floor = math.floor
        local math_random = math.random
        local math_abs = math.abs
        local string_sub = string.sub
        local to_number = tonumber
        local assert = assert
        local type = type

        -- performs the bitwise operation specified by truth matrix on two numbers.
        local function BITWISE(x, y, matrix)
            local z = 0
            local pow = 1
            while x > 0 or y > 0 do
                z = z + (matrix[x % 2 + 1][y % 2 + 1] * pow)
                pow = pow * 2
                x = math_floor(x / 2)
                y = math_floor(y / 2)
            end
            return z
        end

        local function INT2HEX(x)
            local s, base = '', 16
            local d
            while x > 0 do
                d = x % base + 1
                x = math_floor(x / base)
                s = string_sub(HEXES, d, d) .. s
            end
            while #s < 2 do
                s = "0" .. s
            end
            return s
        end

        ----------------------------------------------------------------------------
        -- Creates a new uuid. Either provide a unique hex string, or make sure the
        -- random seed is properly set. The module table itself is a shortcut to this
        -- function, so `my_uuid = uuid.new()` equals `my_uuid = uuid()`.
        --
        -- For proper use there are 3 options;
        --
        -- 1. first requireXXX `luasocket`, then call `uuid.seed()`, and request a uuid using no
        -- parameter, eg. `my_uuid = uuid()`
        -- 2. use `uuid` without `luasocket`, set a random seed using `uuid.randomseed(some_good_seed)`,
        -- and request a uuid using no parameter, eg. `my_uuid = uuid()`
        -- 3. use `uuid` without `luasocket`, and request a uuid using an unique hex string,
        -- eg. `my_uuid = uuid(my_networkcard_macaddress)`
        --
        -- @return a properly formatted uuid string
        -- @param hwaddr (optional) string containing a unique hex value (e.g.: `00:0c:29:69:41:c6`), to be used to compensate for the lesser `math_random()` function. Use a mac address for solid results. If omitted, a fully randomized uuid will be generated, but then you must ensure that the random seed is set properly!
        -- @usage
        -- local uuid = requireXXX("uuid")
        -- print("here's a new uuid: ",uuid())
        function M.gen(hwaddr)
            -- bytes are treated as 8bit unsigned bytes.
            local bytes = {
                math_random(0, 255), math_random(0, 255), math_random(0, 255),
                math_random(0, 255), math_random(0, 255), math_random(0, 255),
                math_random(0, 255), math_random(0, 255), math_random(0, 255),
                math_random(0, 255), math_random(0, 255), math_random(0, 255),
                math_random(0, 255), math_random(0, 255), math_random(0, 255),
                math_random(0, 255)
            }

            if hwaddr then
                assert(type(hwaddr) == "string",
                    "Expected hex string, got " .. type(hwaddr))
                -- Cleanup provided string, assume mac address, so start from back and cleanup until we've got 12 characters
                local i, str = #hwaddr, hwaddr
                hwaddr = ""
                while i > 0 and #hwaddr < 12 do
                    local c = str:sub(i, i):lower()
                    if HEXES:find(c, 1, true) then
                        -- valid HEX character, so append it
                        hwaddr = c .. hwaddr
                    end
                    i = i - 1
                end
                assert(#hwaddr == 12,
                    "Provided string did not contain at least 12 hex characters, retrieved '" ..
                    hwaddr .. "' from '" .. str .. "'")

                -- no split() in lua. :(
                bytes[11] = to_number(hwaddr:sub(1, 2), 16)
                bytes[12] = to_number(hwaddr:sub(3, 4), 16)
                bytes[13] = to_number(hwaddr:sub(5, 6), 16)
                bytes[14] = to_number(hwaddr:sub(7, 8), 16)
                bytes[15] = to_number(hwaddr:sub(9, 10), 16)
                bytes[16] = to_number(hwaddr:sub(11, 12), 16)
            end

            -- set the version
            bytes[7] = BITWISE(bytes[7], 0x0f, MATRIX_AND)
            bytes[7] = BITWISE(bytes[7], 0x40, MATRIX_OR)
            -- set the variant
            bytes[9] = BITWISE(bytes[9], 0x3f, MATRIX_AND)
            bytes[9] = BITWISE(bytes[9], 0x80, MATRIX_OR)
            return INT2HEX(bytes[1]) .. INT2HEX(bytes[2]) .. INT2HEX(bytes[3]) ..
                INT2HEX(bytes[4]) .. "-" .. INT2HEX(bytes[5]) ..
                INT2HEX(bytes[6]) .. "-" .. INT2HEX(bytes[7]) ..
                INT2HEX(bytes[8]) .. "-" .. INT2HEX(bytes[9]) ..
                INT2HEX(bytes[10]) .. "-" .. INT2HEX(bytes[11]) ..
                INT2HEX(bytes[12]) .. INT2HEX(bytes[13]) .. INT2HEX(bytes[14]) ..
                INT2HEX(bytes[15]) .. INT2HEX(bytes[16])
        end

        ----------------------------------------------------------------------------
        -- Improved randomseed function.
        -- Lua 5.1 and 5.2 both truncate the seed given if it exceeds the integer
        -- range. If this happens, the seed will be 0 or 1 and all randomness will
        -- be gone (each application run will generate the same sequence of random
        -- numbers in that case). This improved version drops the most significant
        -- bits in those cases to get the seed within the proper range again.
        -- @param seed the random seed to set (integer from 0 - 2^32, negative values will be made positive)
        -- @return the (potentially modified) seed used
        -- @usage
        -- local socket = requireXXX("socket")  -- gettime() has higher precision than os.time()
        -- local uuid = requireXXX("uuid")
        -- -- see also example at uuid.seed()
        -- uuid.randomseed(socket.gettime()*10000)
        -- print("here's a new uuid: ",uuid())
        function M.randomseed(seed)
            seed = math_floor(math_abs(seed))
            if seed >= (2 ^ bitsize) then
                -- integer overflow, so reduce to prevent a bad seed
                seed = seed - math_floor(seed / 2 ^ bitsize) * (2 ^ bitsize)
            end
            if lua_version < 5.2 then
                -- 5.1 uses (incorrect) signed int
                math.randomseed(seed - 2 ^ (bitsize - 1))
            else
                -- 5.2 uses (correct) unsigned int
                math.randomseed(seed)
            end
            return seed
        end

        ----------------------------------------------------------------------------
        -- Seeds the random generator.
        -- It does so in 3 possible ways;
        --
        -- 1. if in ngx_lua, use `ngx.time() + ngx.worker.pid()` to ensure a unique seed
        -- for each worker. It should ideally be called from the `init_worker` context.
        -- 2. use luasocket `gettime()` function, but it only does so when LuaSocket
        -- has been requireXXXd already.
        -- 3. use `os.time()`: this only offers resolution to one second (used when
        -- LuaSocket hasn't been loaded)
        --
        -- **Important:** the random seed is a global piece of data. Hence setting it is
        -- an application level responsibility, libraries should never set it!
        -- @usage
        -- local socket = requireXXX("socket")  -- gettime() has higher precision than os.time()
        -- -- LuaSocket loaded, so below line does the same as the example from randomseed()
        -- uuid.seed()
        -- print("here's a new uuid: ",uuid())
        function M.seed()
            if _G.ngx ~= nil then
                return M.randomseed(ngx.time() + ngx.worker.pid())
            elseif package.loaded["socket"] and package.loaded["socket"].gettime then
                return M.randomseed(package.loaded["socket"].gettime() * 10000)
            else
                return M.randomseed(os.time())
            end
        end

        return setmetatable(M, {
            __call = function(self, hwaddr)
                return self.gen(hwaddr)
            end
        })
    end,
    ["lib.plugin.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        do
            local ____export = require("lib.plugin.AssetManager")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.ContextBuilderBase")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.EventProviders")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.ExternalActionCommandFactory")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.InstanceRuntimeBase")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.PluginAssetManager")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.PluginBase")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.PluginConstants")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.PluginEnv")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.PluginEventHandler")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.PluginEventHooks")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.PluginImageManager")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.PluginInstaller")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.PluginInstanceManager")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.PluginRuntime")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugin.PluginUtils")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        return ____exports
    end,
    ["lib.plugins.SubPoolRegistry.types.SubPoolRegistryData"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.plugins.SubPoolRegistry.types.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.SocketMutex"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____socket = require("socket")
        local bind = ____socket.bind
        ____exports.SocketMutex = __TS__Class()
        local SocketMutex = ____exports.SocketMutex
        SocketMutex.name = "SocketMutex"
        function SocketMutex.prototype.____constructor(self, port, log)
            self.port = port
            self.isAlive = true
            self.log = log:subLogger(("SocketMutex(port=" .. tostring(port)) .. ")")
        end

        function SocketMutex.prototype.isLocked(self)
            return self._socket ~= nil
        end

        function SocketMutex.prototype.tryLock(self)
            if not self.isAlive then
                return false
            end
            local socket = bind("*", self.port)
            if socket ~= nil then
                self._socket = socket
                return true
            else
                return false
            end
        end

        function SocketMutex.prototype.lock(self)
            if not self.isAlive then
                return false
            end
            local socket
            local ts = os.time()
            repeat
                do
                    socket = bind("*", self.port)
                    if socket ~= nil then
                        self.log:trace("Locked")
                        self._socket = socket
                        return true
                    else
                        self.log:trace("Yield - wait for unlock")
                        coroutine.yield()
                    end
                    if os.time() - ts > 2 then
                        self:destroy()
                        error(self.log:msg("Deadlock Detected - destroyed mutex"))
                    end
                end
            until not (self.isAlive and socket == nil)
        end

        function SocketMutex.prototype.unlock(self)
            if self._socket ~= nil then
                local tempSocket = self._socket
                self._socket = nil
                tempSocket:close()
                self.log:trace("UnLocked")
            end
        end

        function SocketMutex.prototype.destroy(self)
            if self._socket ~= nil then
                self.log:trace("Destroy: closing socket")
                self._socket:close()
                self._socket = nil
                self.isAlive = false
            end
            self.log:trace("Destroy: mutex was not locked")
        end

        return ____exports
    end,
    ["lib.plugins.SocketMutexRegistry.types"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.plugins.SocketMutexRegistry.SocketMutexRegistry"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__ArrayFind = ____lualib.__TS__ArrayFind
        local __TS__Delete = ____lualib.__TS__Delete
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____SocketMutex = require("lib.SocketMutex")
        local SocketMutex = ____SocketMutex.SocketMutex
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        local objectValues = ____Utils.objectValues
        local PLUGIN_SOCKET_MUTEX_START_PORT = 9520
        local PORT_RANGE = 1000
        ____exports.SocketMutexRegistry = __TS__Class()
        local SocketMutexRegistry = ____exports.SocketMutexRegistry
        SocketMutexRegistry.name = "SocketMutexRegistry"
        function SocketMutexRegistry.prototype.____constructor(self)
            self.consumers = {}
        end

        function SocketMutexRegistry.prototype.consumer(self, consumerId, log)
            self.consumers[consumerId] = {}
            local function provisionOrGet(____, mutexId)
                if self.consumers[consumerId] ~= nil and self.consumers[consumerId][mutexId] ~= nil then
                    return self.consumers[consumerId][mutexId]
                end
                do
                    local port = PLUGIN_SOCKET_MUTEX_START_PORT
                    while port < PLUGIN_SOCKET_MUTEX_START_PORT + PORT_RANGE do
                        if not self:isPortProvisioned(port) then
                            local mutex = __TS__New(SocketMutex, port, log)
                            if mutex:tryLock() then
                                mutex:unlock()
                                local consumerMutexes = self.consumers[consumerId]
                                if consumerMutexes == nil then
                                    consumerMutexes = {}
                                    self.consumers[consumerId] = consumerMutexes
                                end
                                consumerMutexes[mutexId] = mutex
                                log:trace(((((("SocketMutexRegistry.provision(" .. consumerId) .. ",") .. mutexId) .. "): found port ") .. tostring(port)) ..
                                " for SocketMutex")
                                return mutex
                            end
                        end
                        port = port + 1
                    end
                end
                error(("SocketMutexRegistry.provision(): mutex capacity of " .. tostring(PORT_RANGE)) .. " exceeded")
            end
            return { provisionOrGet = provisionOrGet }
        end

        function SocketMutexRegistry.prototype.isPortProvisioned(self, port)
            for ____, consumer in ipairs(objectValues(nil, self.consumers)) do
                if __TS__ArrayFind(
                        objectValues(nil, consumer),
                        function(____, m) return m.port == port end
                    ) ~= nil then
                    return true
                end
            end
            return false
        end

        function SocketMutexRegistry.prototype.cleanup(self, consumerId)
            if self.consumers[consumerId] ~= nil then
                for ____, mutex in ipairs(objectValues(nil, self.consumers[consumerId])) do
                    mutex:destroy()
                end
                __TS__Delete(self.consumers, consumerId)
            end
        end

        function SocketMutexRegistry.prototype.destroy(self)
            for ____, consumerId in ipairs(objectKeys(nil, self.consumers)) do
                self:cleanup(consumerId)
            end
        end

        return ____exports
    end,
    ["lib.plugins.PluginsRegistry.types"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.plugins.types"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["plugins.PoolBrowser.src.data.common"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.READ_ONLY_MSG = "Attempt to mutate a readonly DataWrapper"
        function ____exports.getPrevOrNextAssignedItem(self, itemNumber, itemArray, isEmpty)
            do
                local _itemNumber = itemNumber
                while _itemNumber >= 1 do
                    if not isEmpty(nil, itemArray[_itemNumber]) then
                        return _itemNumber
                    end
                    _itemNumber = _itemNumber - 1
                end
            end
            do
                local _itemNumber = itemNumber
                while _itemNumber <= #itemArray do
                    if not isEmpty(nil, itemArray[_itemNumber]) then
                        return _itemNumber
                    end
                    _itemNumber = _itemNumber + 1
                end
            end
        end

        return ____exports
    end,
    ["lib.plugins.SubPoolRegistry.SubPoolWrapper"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__SetDescriptor = ____lualib.__TS__SetDescriptor
        local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____RangeUtils = require("lib.RangeUtils")
        local RangeUtils = ____RangeUtils.RangeUtils
        local ____common = require("plugins.PoolBrowser.src.data.common")
        local READ_ONLY_MSG = ____common.READ_ONLY_MSG
        ____exports.SubPoolWrapper = __TS__Class()
        local SubPoolWrapper = ____exports.SubPoolWrapper
        SubPoolWrapper.name = "SubPoolWrapper"
        function SubPoolWrapper.prototype.____constructor(self, params)
            self.params = params
            self.registry = params.registry
            self.poolWrapper = params.poolWrapper
            self.poolId = params.poolId
            self.subPoolData = params.subPoolData
            self.subPoolId = params.subPoolId
            self.log = params.log
            self.readOnly = params.readOnly
        end

        __TS__SetDescriptor(
            SubPoolWrapper.prototype,
            "id",
            {
                get = function(self)
                    return self.subPoolId
                end
            },
            true
        )
        __TS__SetDescriptor(
            SubPoolWrapper.prototype,
            "name",
            {
                get = function(self)
                    return self.subPoolData.name
                end
            },
            true
        )
        __TS__SetDescriptor(
            SubPoolWrapper.prototype,
            "range",
            {
                get = function(self)
                    return self.subPoolData.range
                end
            },
            true
        )
        __TS__SetDescriptor(
            SubPoolWrapper.prototype,
            "pluginIds",
            {
                get = function(self)
                    return self.subPoolData.pluginIds
                end
            },
            true
        )
        function SubPoolWrapper.prototype.setDirty(self)
            self.registry:setDirty()
        end

        function SubPoolWrapper.prototype.isInternal(self)
            return self.subPoolData.internal
        end

        function SubPoolWrapper.prototype.isOwnedByUs(self)
            return __TS__ArrayIncludes(self.subPoolData.pluginIds, self.registry.pluginId)
        end

        function SubPoolWrapper.prototype.getNamePlaceHolderStartOnly(self)
            return tostring(self.subPoolData.range.start)
        end

        function SubPoolWrapper.prototype.getNamePlaceHolderRange(self)
            local range = self.subPoolData.range
            return ((("[" .. tostring(range.start)) .. "-") .. tostring(range.start + range.size - 1)) .. "]"
        end

        function SubPoolWrapper.prototype.setName(self, newName)
            if self.readOnly then
                error(READ_ONLY_MSG)
            end
            self.subPoolData.name = newName
            self:setDirty()
        end

        function SubPoolWrapper.prototype.setRange(self, newRange)
            if self.readOnly then
                error(READ_ONLY_MSG)
            end
            self.log:trace("setRange() " .. RangeUtils:describe(newRange))
            self.subPoolData.range = newRange
            self:setDirty()
        end

        function SubPoolWrapper.prototype.addReferenceIfNotInternal(self)
            if self.readOnly then
                error(READ_ONLY_MSG)
            end
            if not self.subPoolData.internal and not __TS__ArrayIncludes(self.subPoolData.pluginIds, self.registry.pluginId) then
                local ____self_subPoolData_pluginIds_0 = self.subPoolData.pluginIds
                ____self_subPoolData_pluginIds_0[#____self_subPoolData_pluginIds_0 + 1] = self.registry.pluginId
                self:setDirty()
            end
        end

        function SubPoolWrapper.prototype.getCollidingSubPools(self, newRange)
            return self.poolWrapper:getCollidingSubPools(self.subPoolId, newRange)
        end

        function SubPoolWrapper.prototype.findAvailableSubPoolRange(self, options)
            return self.poolWrapper:findAvailableSubPoolRange(__TS__ObjectAssign({}, options,
                { subPoolId = self.subPoolId }))
        end

        function SubPoolWrapper.prototype.cloneReadOnly(self)
            return self.readOnly and self or __TS__New(
                ____exports.SubPoolWrapper,
                __TS__ObjectAssign({}, self.params, { readOnly = true })
            )
        end

        return ____exports
    end,
    ["lib.plugins.SubPoolRegistry.SubPoolRegistry"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
        local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
        local __TS__New = ____lualib.__TS__New
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__ArrayReduce = ____lualib.__TS__ArrayReduce
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local getStartAndStep
        local ____MAPoolsInfo = require("lib.MAPoolsInfo")
        local MAPoolsInfo = ____MAPoolsInfo.MAPoolsInfo
        local ____PoolUtils = require("lib.PoolUtils")
        local PoolUtils = ____PoolUtils.PoolUtils
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        local ____PoolWrapper = require("lib.plugins.SubPoolRegistry.PoolWrapper")
        local PoolWrapper = ____PoolWrapper.PoolWrapper
        function getStartAndStep(self, poolInfo)
            local step = 100
            local start = 9901
            repeat
                local ____switch37 = poolInfo.maxObjects
                local ____cond37 = ____switch37 == 9999
                if ____cond37 then
                    do
                        start = 9901
                        step = 100
                        break
                    end
                end
                ____cond37 = ____cond37 or ____switch37 == 1024
                if ____cond37 then
                    do
                        start = 1001
                        step = 50
                        break
                    end
                end
                ____cond37 = ____cond37 or ____switch37 == 160
                if ____cond37 then
                    do
                        start = 151
                        step = 10
                        break
                    end
                end
                ____cond37 = ____cond37 or ____switch37 == 128
                if ____cond37 then
                    do
                        start = 121
                        step = 10
                        break
                    end
                end
                do
                    do
                        error("Unknown poolInfo.maxObjects = " .. tostring(poolInfo.maxObjects))
                    end
                end
            until true
            return { start = start, step = step }
        end

        ____exports.SubPoolRegistry = __TS__Class()
        local SubPoolRegistry = ____exports.SubPoolRegistry
        SubPoolRegistry.name = "SubPoolRegistry"
        function SubPoolRegistry.prototype.____constructor(self, params)
            self.params = params
            self.data = params.data:getData()
            self.log = params.log:subLogger("SubPoolRegistry")
            self.readOnly = params.readOnly
            self.pluginId = params.pluginId
        end

        function SubPoolRegistry.prototype.setDirty(self)
            self.params.data:setDirty()
        end

        function SubPoolRegistry.prototype.provisionPluginSubPools(self, name, pluginAssetsCapacity)
            self.log:debug("provisionPluginSubPools: " .. name)
            if #objectKeys(nil, pluginAssetsCapacity) > 0 then
                local ranges = self:findAvailableRanges(pluginAssetsCapacity)
                __TS__ArrayForEach(
                    objectKeys(nil, ranges),
                    function(____, poolId)
                        self:getPool(poolId):addInternalSubPool(ranges[poolId], name)
                    end
                )
            end
        end

        function SubPoolRegistry.prototype.disassociateAllSubPools(self)
            __TS__ArrayForEach(
                objectKeys(nil, self.data.pools),
                function(____, poolId)
                    self:getPool(poolId):disassociateAllSubPools()
                end
            )
            self:setDirty()
        end

        function SubPoolRegistry.prototype.associateAllNonInternalSubPools(self)
            __TS__ArrayForEach(
                objectKeys(nil, self.data.pools),
                function(____, poolId)
                    self:getPool(poolId):associateAllNonInternalSubPools()
                end
            )
            self:setDirty()
        end

        function SubPoolRegistry.prototype.isEmpty(self)
            for ____, poolId in ipairs(objectKeys(nil, self.data.pools)) do
                local poolData = self.data.pools[poolId]
                if poolData ~= nil then
                    if poolData.subPools ~= nil and #objectKeys(nil, poolData.subPools) > 0 then
                        return false
                    end
                end
            end
            return true
        end

        function SubPoolRegistry.prototype.getPluginInternalSubPool(self, pluginId, poolId)
            local subPools = __TS__ArrayFilter(
                self:getPool(poolId):getSubPools(),
                function(____, sp) return sp:isInternal() and __TS__ArrayIncludes(sp.pluginIds, pluginId) end
            )
            if #subPools > 1 then
                error(self.log:msg(((("getPluginInternalSubPool(" .. pluginId) .. ", ") .. poolId) ..
                "): Found more than one internal sub-pool."))
            elseif #subPools == 0 then
                return nil
            end
            return subPools[1]
        end

        function SubPoolRegistry.prototype.getAllInternalSubPools(self)
            local subPools = {}
            __TS__ArrayForEach(
                objectKeys(nil, self.data.pools),
                function(____, poolId)
                    local subPool = self:getPluginInternalSubPool(self.pluginId, poolId)
                    if subPool ~= nil then
                        subPools[#subPools + 1] = subPool
                    end
                end
            )
            return subPools
        end

        function SubPoolRegistry.prototype.getPool(self, poolId)
            local poolData = self.data.pools[poolId]
            if poolData == nil then
                poolData = { subPools = {} }
                self.data.pools[poolId] = poolData
            end
            return __TS__New(PoolWrapper, {
                registry = self,
                poolData = poolData,
                poolId = poolId,
                log = self.params.log,
                readOnly = self.params.readOnly
            })
        end

        function SubPoolRegistry.prototype.getPools(self)
            return __TS__ArrayMap(
                objectKeys(nil, self.data.pools),
                function(____, poolId) return self:getPool(poolId) end
            )
        end

        function SubPoolRegistry.prototype.findAvailableRanges(self, pluginAssetsCapacity)
            local poolIds = objectKeys(nil, pluginAssetsCapacity)
            assert(#poolIds > 0, "pluginAssetsCapacity must include one pool at least")
            local pluginSubPools = {}
            for ____, poolId in ipairs(objectKeys(nil, pluginAssetsCapacity)) do
                local size = pluginAssetsCapacity[poolId]
                local pool = self:getPool(poolId)
                local poolInfo = MAPoolsInfo(nil):byId(poolId)
                local poolObj = poolInfo:getPoolObject(poolInfo:getDefaultParent())
                local ____getStartAndStep_result_0 = getStartAndStep(nil, poolInfo)
                local _start = ____getStartAndStep_result_0.start
                local _step = ____getStartAndStep_result_0.step
                local start = _start
                local step = _step
                local foundOne = false
                while start >= 1 and not foundOne do
                    local range = { start = start, size = size }
                    if start + size - 1 <= poolInfo.maxObjects then
                        local isColliding = #pool:getCollidingSubPools(nil, range) > 0
                        local isEmpty = PoolUtils:isRangeEmpty(poolObj, range)
                        if not isColliding and isEmpty then
                            pluginSubPools[poolId] = range
                            foundOne = true
                        end
                    end
                    start = start - step
                end
                if not foundOne then
                    error(((("Could not find available range of size " .. tostring(size)) .. " in ") .. poolId) ..
                    " pool")
                end
            end
            return pluginSubPools
        end

        function ____exports.createSubPoolRegistryInitialData(self)
            return {
                pools = __TS__ArrayReduce(
                    MAPoolsInfo(nil).allPools,
                    function(____, pools, poolInfo)
                        pools[poolInfo.id] = { subPools = {} }
                        return pools
                    end,
                    {}
                )
            }
        end

        return ____exports
    end,
    ["lib.plugins.SubPoolRegistry.Utils"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.nextSubPoolStart(self, fromIndex, subPoolStartStep)
            if fromIndex % subPoolStartStep == 1 then
                return fromIndex
            else
                return math.ceil(fromIndex / subPoolStartStep) * subPoolStartStep + 1
            end
        end

        --- Conceptually devides a pool to blocks of blockSize, starting at 1,
        -- and return the block range that the given index is within.
        function ____exports.getBlock(self, index, blockSize)
            if blockSize % 10 ~= 0 then
                error("getBlock(): blockSize must be a multiple of 10, and it's " .. tostring(blockSize))
            end
            if index % blockSize == 1 then
                return { start = index, size = blockSize }
            else
                if index % blockSize == 0 then
                    return {
                        start = (math.floor(index / blockSize) - 1) * blockSize + 1,
                        size = blockSize
                    }
                else
                    return {
                        start = math.floor(index / blockSize) * blockSize + 1,
                        size = blockSize
                    }
                end
            end
        end

        --- SubPoolStart always with 1 at the end (e.g 21, 41, 101,...)
        -- This is assuming the subPoolStartStep is a multiply of 10
        --
        -- @param index
        -- @param subPoolStartStep
        -- @returns
        function ____exports.thisSubPoolStart(self, index, subPoolStartStep)
            if subPoolStartStep % 10 ~= 0 then
                error("thisSubPoolStart(): subPoolStartStep must be a multiple of 10, and it's " ..
                tostring(subPoolStartStep))
            end
            if index % subPoolStartStep == 1 then
                return index
            else
                if index % subPoolStartStep == 0 then
                    return (math.floor(index / subPoolStartStep) - 1) * subPoolStartStep + 1
                else
                    return math.floor(index / subPoolStartStep) * subPoolStartStep + 1
                end
            end
        end

        return ____exports
    end,
    ["lib.plugins.SubPoolRegistry.PoolWrapper"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__Delete = ____lualib.__TS__Delete
        local __TS__ArrayIndexOf = ____lualib.__TS__ArrayIndexOf
        local __TS__ArraySplice = ____lualib.__TS__ArraySplice
        local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__ArraySort = ____lualib.__TS__ArraySort
        local __TS__ParseInt = ____lualib.__TS__ParseInt
        local __TS__ArrayFind = ____lualib.__TS__ArrayFind
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAPoolsInfo = require("lib.MAPoolsInfo")
        local MAPoolsInfo = ____MAPoolsInfo.MAPoolsInfo
        local ____PoolUtils = require("lib.PoolUtils")
        local PoolUtils = ____PoolUtils.PoolUtils
        local ____RangeUtils = require("lib.RangeUtils")
        local RangeUtils = ____RangeUtils.RangeUtils
        local ____Utils = require("lib.Utils")
        local findFirstAvailableNumber = ____Utils.findFirstAvailableNumber
        local nTimes = ____Utils.nTimes
        local objectKeys = ____Utils.objectKeys
        local ____SubPoolWrapper = require("lib.plugins.SubPoolRegistry.SubPoolWrapper")
        local SubPoolWrapper = ____SubPoolWrapper.SubPoolWrapper
        local ____Utils = require("lib.plugins.SubPoolRegistry.Utils")
        local getBlock = ____Utils.getBlock
        local nextSubPoolStart = ____Utils.nextSubPoolStart
        ____exports.DEFAULT_IGNORE_EXISTING_OBJECTS = true
        ____exports.READ_ONLY_MSG = "Attempt to mutate a readonly DataWrapper"
        local MIN_USER_SUB_POOLS = 2
        ____exports.PoolWrapper = __TS__Class()
        local PoolWrapper = ____exports.PoolWrapper
        PoolWrapper.name = "PoolWrapper"
        function PoolWrapper.prototype.____constructor(self, params)
            self.params = params
            self.registry = params.registry
            self.poolId = params.poolId
            self.poolData = params.poolData
            self.log = params.log:subLogger(("PoolWrapper(" .. self.poolId) .. ")")
            self.readOnly = params.readOnly
        end

        function PoolWrapper.prototype.setDirty(self)
            self.registry:setDirty()
        end

        function PoolWrapper.prototype.addSubPool(self, size, subPoolStartStep)
            if self.readOnly then
                error(____exports.READ_ONLY_MSG)
            end
            local subPoolId = self:nextSubPoolId()
            local range = self:findAvailableSubPoolRange({ subPoolId = subPoolId, size = size, ignoreExistingObjects =
            ____exports.DEFAULT_IGNORE_EXISTING_OBJECTS, subPoolStartStep = subPoolStartStep })
            return self:doAddSubPool(range)
        end

        function PoolWrapper.prototype.addSubPoolWithRange(self, range)
            return self:doAddSubPool(range)
        end

        function PoolWrapper.prototype.addInternalSubPool(self, range, name)
            return self:doAddSubPool(range, true, name)
        end

        function PoolWrapper.prototype.doAddSubPool(self, range, internal, name)
            if internal == nil then
                internal = false
            end
            if self.readOnly then
                error(____exports.READ_ONLY_MSG)
            end
            local subPoolId = self:nextSubPoolId()
            if #self:getCollidingSubPools(nil, range) ~= 0 then
                error(self.log:msg(("doAddSubPool: Can not add range " .. RangeUtils:describe(range)) ..
                ". it collides with an existing sub-pool"))
            else
                self.log:info((("addSubPool: range=" .. RangeUtils:describe(range)) .. ", subPoolId=") .. subPoolId)
            end
            local subPoolData = {
                id = subPoolId,
                range = range,
                name = name,
                internal = internal,
                pluginIds = { self.registry.pluginId }
            }
            self.poolData.subPools[subPoolId] = subPoolData
            self:setDirty()
            return __TS__New(SubPoolWrapper, {
                registry = self.registry,
                poolWrapper = self,
                poolId = self.poolId,
                subPoolData = subPoolData,
                subPoolId = subPoolId,
                log = self.log,
                readOnly = self.readOnly
            })
        end

        function PoolWrapper.prototype.doDeleteSubPool(self, subPoolId)
            self.log:debug("delete subPoolId=" .. subPoolId)
            __TS__Delete(self.poolData.subPools, subPoolId)
            self:setDirty()
        end

        function PoolWrapper.prototype.removeSubPool(self, subPoolId)
            if self.readOnly then
                error(____exports.READ_ONLY_MSG)
            end
            self.log:info("remove subPoolId=" .. subPoolId)
            local spw = self:getSubPool(subPoolId)
            if spw ~= nil then
                if not spw:isOwnedByUs() or not spw.isInternal then
                    error(self.log:msg("Not allowed to remove internal of not owned sub-pool"))
                else
                    self:doDeleteSubPool(subPoolId)
                end
            end
        end

        function PoolWrapper.prototype.disassociateSubPool(self, subPoolId)
            if self.readOnly then
                error(____exports.READ_ONLY_MSG)
            end
            self.log:info((("disassociate subPoolId=" .. subPoolId) .. " from pluginId=") .. self.registry.pluginId)
            local subPooldata = self.poolData.subPools[subPoolId]
            if subPooldata ~= nil then
                local index = __TS__ArrayIndexOf(subPooldata.pluginIds, self.registry.pluginId)
                local changeMade = false
                if index ~= -1 then
                    __TS__ArraySplice(subPooldata.pluginIds, index, 1)
                    changeMade = true
                end
                if #subPooldata.pluginIds == 0 then
                    self:doDeleteSubPool(subPoolId)
                    changeMade = true
                end
                if changeMade then
                    self:setDirty()
                end
            end
        end

        function PoolWrapper.prototype.associateSubPool(self, subPoolId)
            if self.readOnly then
                error(____exports.READ_ONLY_MSG)
            end
            local subPooldata = self.poolData.subPools[subPoolId]
            if not __TS__ArrayIncludes(subPooldata.pluginIds, self.registry.pluginId) then
                local ____subPooldata_pluginIds_0 = subPooldata.pluginIds
                ____subPooldata_pluginIds_0[#____subPooldata_pluginIds_0 + 1] = self.registry.pluginId
                self:setDirty()
            end
        end

        function PoolWrapper.prototype.getSubPool(self, subPoolId)
            local subPoolData = self.poolData.subPools[subPoolId]
            local ____temp_1
            if subPoolData == nil then
                ____temp_1 = nil
            else
                ____temp_1 = __TS__New(SubPoolWrapper, {
                    registry = self.registry,
                    poolWrapper = self,
                    poolId = self.poolId,
                    subPoolData = subPoolData,
                    subPoolId = subPoolId,
                    log = self.log,
                    readOnly = self.readOnly
                })
            end
            return ____temp_1
        end

        function PoolWrapper.prototype.getSubPools(self)
            return __TS__ArrayMap(
                objectKeys(nil, self.poolData.subPools),
                function(____, subPoolId)
                    return __TS__New(SubPoolWrapper, {
                        registry = self.registry,
                        poolWrapper = self,
                        poolId = self.poolId,
                        subPoolData = self.poolData.subPools[subPoolId],
                        subPoolId = subPoolId,
                        log = self.log,
                        readOnly = self.readOnly
                    })
                end
            )
        end

        function PoolWrapper.prototype.getSortedSubPools(self)
            return __TS__ArraySort(
                self:getSubPools(),
                function(____, a, b) return a.range.start - b.range.start end
            )
        end

        function PoolWrapper.prototype.nextSubPoolId(self)
            local ____self_poolData_2 = self.poolData
            local subPools = ____self_poolData_2.subPools
            local availableSubPoolIdNumber = findFirstAvailableNumber(
                nil,
                __TS__ArraySort(__TS__ArrayMap(
                    objectKeys(nil, subPools),
                    function(____, key) return __TS__ParseInt(key) end
                ))
            )
            return tostring(availableSubPoolIdNumber)
        end

        function PoolWrapper.prototype.findAvailableSubPoolRange(self, options)
            local ____options_3 = options
            local subPoolId = ____options_3.subPoolId
            local size = ____options_3.size
            local ignoreExistingObjects = ____options_3.ignoreExistingObjects
            local subPoolStartStep = ____options_3.subPoolStartStep
            local subPools = self.poolData.subPools
            local poolInfo = MAPoolsInfo(nil):byId(self.poolId)
            local poolObj = poolInfo:getPoolObject()
            local start = 1
            while start < poolInfo.maxObjects do
                local curRange = { start = start, size = size }
                local collidingRanges = self:getCollidingSubPools(subPoolId, curRange)
                if #collidingRanges == 0 then
                    local ____ignoreExistingObjects_4 = ignoreExistingObjects
                    if ____ignoreExistingObjects_4 == nil then
                        ____ignoreExistingObjects_4 = ____exports.DEFAULT_IGNORE_EXISTING_OBJECTS
                    end
                    if ____ignoreExistingObjects_4 or PoolUtils:isRangeEmpty(poolObj, curRange) then
                        return curRange
                    else
                        local emptyRange = PoolUtils:findEmptyRange(
                            self.poolId,
                            (PoolUtils:getLastObjectInRange(self.poolId, curRange) or curRange.start - 1) + 1,
                            size
                        )
                        if emptyRange == nil then
                            error(("findAvailableSubPoolRange: pool " .. self.poolId) .. " is full.")
                        else
                            start = nextSubPoolStart(nil, emptyRange.start, subPoolStartStep)
                        end
                    end
                else
                    local maxRangeEnd = math.max(table.unpack(__TS__ArrayMap(
                        collidingRanges,
                        function(____, r) return RangeUtils:lastIndex(r.range) end
                    )))
                    start = nextSubPoolStart(nil, maxRangeEnd + 1, subPoolStartStep)
                end
            end
            error(("findAvailableSubPoolRange: pool " .. self.poolId) .. " is full.")
        end

        function PoolWrapper.prototype.getCollidingSubPools(self, subPoolId, newRange)
            local collidingSubPools = {}
            for ____, curSubPool in ipairs(self:getSubPools()) do
                if subPoolId ~= curSubPool.id and RangeUtils:intersects(newRange, curSubPool.range) then
                    collidingSubPools[#collidingSubPools + 1] = curSubPool
                end
            end
            return collidingSubPools
        end

        function PoolWrapper.prototype.createInitialUserSubPoolsIfNeeded(self, defaultSubPoolSize)
            if self.readOnly then
                error(____exports.READ_ONLY_MSG)
            end
            self:createSubPoolsForExistingObjects(defaultSubPoolSize)
            self:createEmptySubPoolsIfNeeded(defaultSubPoolSize)
        end

        function PoolWrapper.prototype.createSubPoolsForExistingObjects(self, defaultSubPoolSize)
            local poolId = self.poolId
            local poolsInfo = MAPoolsInfo(nil)
            local poolInfo = poolsInfo:byId(poolId)
            local maxObjects = poolInfo.maxObjects
            local stepSize = defaultSubPoolSize
            __TS__ArrayForEach(
                PoolUtils:getSortedUsedIndice(poolId),
                function(____, usedIndex)
                    local existingSubPoolRanges = __TS__ArrayMap(
                        self:getSubPools(),
                        function(____, sp) return sp.range end
                    )
                    local subPools = self:getSortedSubPools()
                    local function isInSomeSubPool(self, index)
                        return __TS__ArrayFind(
                            existingSubPoolRanges,
                            function(____, r) return RangeUtils:isInRange(index, r) end
                        ) ~= nil
                    end
                    local function getClosestSubPoolRanges(self, index)
                        if #subPools == 0 then
                            return { prev = nil, next = nil }
                        end
                        do
                            local i = 0
                            while i < #subPools do
                                local range = subPools[i + 1].range
                                if i + 1 == #subPools then
                                    local start = range.start
                                    local ____end = RangeUtils:lastIndex(range)
                                    if index > ____end then
                                        return { prev = range, next = nil }
                                    elseif index < start then
                                        return { prev = nil, next = range }
                                    else
                                        error("getClosestSubPoolRanges(): index should be in a sub-pool")
                                    end
                                else
                                    local nextRange = subPools[i + 1 + 1].range
                                    if index < range.start then
                                        return { prev = nil, next = range }
                                    elseif index > RangeUtils:lastIndex(range) and index < nextRange.start then
                                        return { prev = range, next = nextRange }
                                    end
                                end
                                i = i + 1
                            end
                        end
                        error("getClosestSubPoolRanges(): index should be in a sub-pool")
                    end
                    if not isInSomeSubPool(nil, usedIndex) then
                        local currentBlock = getBlock(nil, usedIndex, stepSize)
                        local ____getClosestSubPoolRanges_result_5 = getClosestSubPoolRanges(nil, usedIndex)
                        local prev = ____getClosestSubPoolRanges_result_5.prev
                        local next = ____getClosestSubPoolRanges_result_5.next
                        local start = math.max(
                            currentBlock.start,
                            prev == nil and 0 or RangeUtils:lastIndex(prev) + 1
                        )
                        local last = math.min(
                            RangeUtils:lastIndex(currentBlock),
                            next == nil and maxObjects or next.start - 1
                        )
                        local range = { start = start, size = last - start + 1 }
                        self:addSubPoolWithRange(range)
                    end
                end
            )
        end

        function PoolWrapper.prototype.createEmptySubPoolsIfNeeded(self, defaultSubPoolSize)
            local numOfNonInternalSubPools = #__TS__ArrayFilter(
                self:getSubPools(),
                function(____, sp) return not sp:isInternal() end
            )
            if numOfNonInternalSubPools >= MIN_USER_SUB_POOLS then
                return
            end
            local subPoolsToAdd = MIN_USER_SUB_POOLS - numOfNonInternalSubPools
            nTimes(
                nil,
                subPoolsToAdd,
                function()
                    self:addSubPool(defaultSubPoolSize, defaultSubPoolSize)
                end
            )
        end

        function PoolWrapper.prototype.disassociateAllSubPools(self)
            __TS__ArrayForEach(
                objectKeys(nil, self.poolData.subPools),
                function(____, subPoolId)
                    self:disassociateSubPool(subPoolId)
                end
            )
        end

        function PoolWrapper.prototype.associateAllNonInternalSubPools(self)
            __TS__ArrayForEach(
                objectKeys(nil, self.poolData.subPools),
                function(____, subPoolId)
                    local subPool = self:getSubPool(subPoolId)
                    if not subPool:isInternal() then
                        self:associateSubPool(subPoolId)
                    end
                end
            )
        end

        return ____exports
    end,
    ["lib.plugins.SubPoolRegistry.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        do
            local ____export = require("lib.plugins.SubPoolRegistry.PoolWrapper")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugins.SubPoolRegistry.SubPoolRegistry")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugins.SubPoolRegistry.SubPoolWrapper")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        do
            local ____export = require("lib.plugins.SubPoolRegistry.Utils")
            for ____exportKey, ____exportValue in pairs(____export) do
                if ____exportKey ~= "default" then
                    ____exports[____exportKey] = ____exportValue
                end
            end
        end
        return ____exports
    end,
    ["lib.plugins.PluginsRegistry.OldPluginsRegistryHack"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local GlobalVariable, PLUGINS_REGISTRY_GLOBAL_VAR_NAME
        function ____exports.isPluginsRegistryExists(self)
            return GlobalVariable[PLUGINS_REGISTRY_GLOBAL_VAR_NAME] ~= nil
        end

        function ____exports.getPluginsRegistry(self)
            local registry = GlobalVariable[PLUGINS_REGISTRY_GLOBAL_VAR_NAME]
            return registry
        end

        GlobalVariable = _G
        PLUGINS_REGISTRY_GLOBAL_VAR_NAME = "pro_plugins__plugins_registry__0_3_0"
        function ____exports.onOldUnregister(self, callback)
            if ____exports.isPluginsRegistryExists(nil) then
                local pr = ____exports.getPluginsRegistry(nil)
                local originalUnregister = pr.unregister
                pr.unregister = function(____, pluginId)
                    Echo("old unregister SPY called")
                    originalUnregister(
                        pr,
                        table.unpack({ pluginId })
                    )
                    callback(nil, pluginId)
                end
            end
        end

        return ____exports
    end,
    ["lib.plugins.PluginsRegistry.PluginsEvents"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__ArraySplice = ____lualib.__TS__ArraySplice
        local __TS__ArrayFind = ____lualib.__TS__ArrayFind
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local createEventDispatcher
        local ____EventEmitter = require("lib.EventEmitter")
        local EventEmitter = ____EventEmitter.EventEmitter
        local ____Utils = require("lib.Utils")
        local getErrorMessage = ____Utils.getErrorMessage
        function createEventDispatcher(self, log, eventQueue)
            return {
                emit = function(self, event)
                    log:trace(("emit \"" .. event.eventName) .. "\" ")
                    if __TS__ArrayFind(
                            eventQueue,
                            function(____, e) return e.eventName == event.eventName end
                        ) == nil then
                        log:trace(("adding event \"" .. event.eventName) .. "\" to the eventQueue")
                        eventQueue[#eventQueue + 1] = event
                    else
                        log:trace(("event \"" .. event.eventName) .. "\" already exists in the eventQueue")
                    end
                end
            }
        end

        ____exports.PluginsEvents = __TS__Class()
        local PluginsEvents = ____exports.PluginsEvents
        PluginsEvents.name = "PluginsEvents"
        function PluginsEvents.prototype.____constructor(self, parentLog)
            local log = parentLog:subLogger("PluginsEvents")
            self.log = log
            local eventQueue = {}
            self.eventQueue = eventQueue
            self.eventDispatcher = createEventDispatcher(nil, log, eventQueue)
            local eventEmitter = __TS__New(EventEmitter)
            self.eventEmitter = eventEmitter
            self.events = eventEmitter
        end

        function PluginsEvents.prototype.flushEventQueue(self, log)
            if #self.eventQueue == 0 then
                log:trace("flushEventQueue(): eventQueue.length=" .. tostring(#self.eventQueue))
                return
            end
            local count = 1
            while #self.eventQueue > 0 and count < 100 do
                log:trace((("flushEventQueue(): BEFORE POP: count=" .. tostring(count)) .. ", eventQueue.length=") ..
                tostring(#self.eventQueue))
                local deletedEvents = __TS__ArraySplice(self.eventQueue, 0, 1)
                local event = deletedEvents[1]
                log:trace((((("flushEventQueue(): AFTER POP: count=" .. tostring(count)) .. ", eventQueue.length=") .. tostring(#self.eventQueue)) .. ", event=") ..
                event.eventName)
                do
                    local function ____catch(err)
                        log:error("PluginRegistry.flushEventQueue() ERROR: " .. getErrorMessage(nil, err))
                    end
                    local ____try, ____hasReturned = pcall(function()
                        self.eventEmitter:emit(event)
                    end)
                    if not ____try then
                        ____catch(____hasReturned)
                    end
                end
                count = count + 1
            end
            if count == 100 then
                error("flushEventQueue(): queue reached limit of 100")
            end
        end

        function PluginsEvents.prototype.destroy(self)
            self.log:trace("destroy()")
            self.eventEmitter:removeAllListeners()
            __TS__ArraySplice(self.eventQueue, 0, #self.eventQueue)
        end

        return ____exports
    end,
    ["lib.plugins.PluginsRegistry.PluginsRegistry"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__Delete = ____lualib.__TS__Delete
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local SubPoolRegistryDataAccess, SUB_POOL_REGISTRY_VARIABLED_ID, SUB_POOL_REGISTRY_DATA_VAR_NAME
        local ____Logger = require("lib.Logger")
        local LogLevel = ____Logger.LogLevel
        local Logger = ____Logger.Logger
        local ____MAVariables = require("lib.MAVariables")
        local MAVariables = ____MAVariables.MAVariables
        local ____PersistentDataAccess = require("lib.PersistentDataAccess")
        local PersistentDataAccess = ____PersistentDataAccess.PersistentDataAccess
        local ____SingletonFactory = require("lib.SingletonFactory")
        local getOrCreateShowSingleton = ____SingletonFactory.getOrCreateShowSingleton
        local getShowSingleton = ____SingletonFactory.getShowSingleton
        local isShowSingletonExists = ____SingletonFactory.isShowSingletonExists
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        local ____SubPoolRegistry = require("lib.plugins.SubPoolRegistry.index")
        local SubPoolRegistry = ____SubPoolRegistry.SubPoolRegistry
        local createSubPoolRegistryInitialData = ____SubPoolRegistry.createSubPoolRegistryInitialData
        local ____SocketMutexRegistry = require("lib.plugins.SocketMutexRegistry.SocketMutexRegistry")
        local SocketMutexRegistry = ____SocketMutexRegistry.SocketMutexRegistry
        local ____OldPluginsRegistryHack = require("lib.plugins.PluginsRegistry.OldPluginsRegistryHack")
        local onOldUnregister = ____OldPluginsRegistryHack.onOldUnregister
        local ____PluginsEvents = require("lib.plugins.PluginsRegistry.PluginsEvents")
        local PluginsEvents = ____PluginsEvents.PluginsEvents
        function SubPoolRegistryDataAccess(self, log)
            return PersistentDataAccess(
                nil,
                MAVariables(nil, { storageType = "ShowFile", variablesId = SUB_POOL_REGISTRY_VARIABLED_ID }),
                SUB_POOL_REGISTRY_DATA_VAR_NAME,
                log
            )
        end

        --- Plugins Registry let plugins interact with each other.
        -- This is a global singleton.
        -- It resides in the Global LUA space.
        -- It perishs when MA3 is shutdown.
        local GlobalVariable = _G
        local PLUGINS_REGISTRY_GLOBAL_VAR_NAME = "pro_plugins__plugins_registry__0_5_0"
        ____exports.PLUGINS_REGISTRY_GLOBAL_VERSION = "0.5.0"
        SUB_POOL_REGISTRY_VARIABLED_ID = "pro_plugins__sub_pool_registry__v0_3_0"
        SUB_POOL_REGISTRY_DATA_VAR_NAME = "SUB_POOL_REGISTRY_DATA"
        local SUB_POOL_REGISTRY_VERSION = "0.3.0"
        ____exports.PluginsRegistry = __TS__Class()
        local PluginsRegistry = ____exports.PluginsRegistry
        PluginsRegistry.name = "PluginsRegistry"
        function PluginsRegistry.prototype.____constructor(self)
            self.version = ____exports.PLUGINS_REGISTRY_GLOBAL_VERSION
            self.pluginsData = {}
            local log = Logger(nil,
                { prefix = { "PluginsRegistry v" .. ____exports.PLUGINS_REGISTRY_GLOBAL_VERSION }, logLevel = LogLevel
                .ERROR })
            self.log = log
            local pluginsEvents = __TS__New(PluginsEvents, log)
            self.pluginsEvents = pluginsEvents
            self.eventDispatcher = pluginsEvents.eventDispatcher
            self.events = pluginsEvents.events
            self.socketMutexRegistry = __TS__New(SocketMutexRegistry)
            self.subPoolRegistryDataAccess = SubPoolRegistryDataAccess(nil, log)
            onOldUnregister(
                nil,
                function(____, pluginId) return self:onOldUnregister(pluginId) end
            )
        end

        function PluginsRegistry.prototype.onOldUnregister(self, pluginId)
            self.log:trace("onOldUnregister pluginId=" .. pluginId)
            self.subPoolRegistryDataAccess:read()
            __TS__New(SubPoolRegistry, {
                data = self.subPoolRegistryDataAccess,
                pluginId = pluginId,
                readOnly = false,
                eventEmitter = self.eventDispatcher,
                log = self.log
            }):disassociateAllSubPools()
            self.eventDispatcher:emit({
                eventName = "subPoolsChange",
                displayHandle = GetDisplayByIndex(1),
                pluginId = pluginId
            })
            coroutine.yield()
            self.log:trace(("onOldUnregister pluginId=" .. pluginId) .. ": FLUSH")
            self:flushEventQueue(self.log)
        end

        function PluginsRegistry.prototype.flushEventQueue(self, log)
            return self.pluginsEvents:flushEventQueue(log)
        end

        function PluginsRegistry.prototype.getOrInitSubPoolRegistryDataAccess(self)
            local spda = self.subPoolRegistryDataAccess
            if not spda:isCachedDataExists() then
                if spda:isDataExists() then
                    if not spda:read() then
                        error((("Could not find MA variables data: variablesId=" .. spda.variablesId) .. ", varName=") ..
                        spda.varName)
                    end
                else
                    spda:setData(createSubPoolRegistryInitialData(nil))
                end
            end
            return spda
        end

        function PluginsRegistry.prototype.subPoolRegistryDataExists(self)
            return self.subPoolRegistryDataAccess:isDataExists()
        end

        function PluginsRegistry.prototype.getSubPoolRegistryId(self)
            return self.subPoolRegistryDataAccess.variablesId
        end

        function PluginsRegistry.prototype.destroy(self)
            self.log:trace("destroy()")
            self.pluginsEvents:destroy()
            __TS__ArrayForEach(
                objectKeys(nil, self.pluginsData),
                function(____, pluginId)
                    __TS__Delete(self.pluginsData, pluginId)
                end
            )
            __TS__Delete(GlobalVariable, PLUGINS_REGISTRY_GLOBAL_VAR_NAME)
            self.socketMutexRegistry:destroy()
        end

        function PluginsRegistry.prototype.getRegisteredPluginIds(self)
            return objectKeys(nil, self.pluginsData)
        end

        function PluginsRegistry.prototype.register(self, pluginEnv, pluginInfo)
            self.pluginsData[pluginEnv.pluginId] = { pluginInfo = pluginInfo, pluginEnv = pluginEnv }
        end

        function PluginsRegistry.prototype.unregister(self, pluginId)
            __TS__Delete(self.pluginsData, pluginId)
            local pluginIds = objectKeys(nil, self.pluginsData)
            if #pluginIds == 0 then
                self.log:debug("unregister() no more plugins left. destroying registry")
                self:destroy()
            else
                self.log:debug(("unregister() still " .. tostring(#pluginIds)) .. " plugins left")
            end
            self.socketMutexRegistry:cleanup(pluginId)
        end

        function PluginsRegistry.prototype.setLogLevel(self, level)
            self.log:setLogLevel(level)
        end

        function PluginsRegistry.prototype.describe(self)
            return PLUGINS_REGISTRY_GLOBAL_VAR_NAME
        end

        function PluginsRegistry.getOrCreate(self)
            return getOrCreateShowSingleton(
                nil,
                PLUGINS_REGISTRY_GLOBAL_VAR_NAME,
                function() return __TS__New(____exports.PluginsRegistry) end
            )
        end

        function PluginsRegistry.get(self)
            return getShowSingleton(nil, PLUGINS_REGISTRY_GLOBAL_VAR_NAME)
        end

        function PluginsRegistry.exists(self)
            return isShowSingletonExists(nil, PLUGINS_REGISTRY_GLOBAL_VAR_NAME)
        end

        --- ***********************************************
        -- These functions are for the Dev Tools only
        -- ************************************************
        ____exports.SubPoolsRegistryDevToolsUtils = {
            version = SUB_POOL_REGISTRY_VERSION,
            readSubPoolRegistryData = function(self)
                local spda = SubPoolRegistryDataAccess(
                    nil,
                    Logger(nil)
                )
                if spda:isDataExists() then
                    spda:read()
                    return spda:getData()
                else
                    return nil
                end
            end,
            deleteSubPoolRegistryData = function(self)
                local spda = SubPoolRegistryDataAccess(
                    nil,
                    Logger(nil)
                )
                spda:cleanUp()
            end
        }
        return ____exports
    end,
    ["lib.plugin.PluginEventHandler"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Logger = require("lib.Logger")
        local LogLevel = ____Logger.LogLevel
        local ____PluginsRegistry = require("lib.plugins.PluginsRegistry.PluginsRegistry")
        local PluginsRegistry = ____PluginsRegistry.PluginsRegistry
        local ____ui = require("lib.ui.index")
        local showAlert = ____ui.showAlert
        local startUI = ____ui.startUI
        local ____dialogs = require("lib.ui.dialogs.index")
        local MultiActionDialog = ____dialogs.MultiActionDialog
        local ____Utils = require("lib.Utils")
        local protectedCall = ____Utils.protectedCall
        local ____EventProviders = require("lib.plugin.EventProviders")
        local eventBuilder = ____EventProviders.eventBuilder
        local MultiProvider = ____EventProviders.MultiProvider
        ____exports.PluginEventHandler = __TS__Class()
        local PluginEventHandler = ____exports.PluginEventHandler
        PluginEventHandler.name = "PluginEventHandler"
        function PluginEventHandler.prototype.____constructor(self, options)
            self.options = options
            self.state = { isDuringReadWriteEvent = false, curEventName = nil }
            local pu = self.options.pu
            self.log = self.options.log:subLogger("EventHandler")
            self.eventBuilder = function(____, eventName)
                return eventBuilder(
                    nil,
                    eventName,
                    pu,
                    self.options.runtime,
                    self.options.displayHandle,
                    self.options.log
                )
            end
        end

        function PluginEventHandler.prototype.handlePluginEvent(self, eventName, action, options)
            local ____self_2 = self:eventBuilder(eventName)
            local ____self_2_withUndo_3 = ____self_2.withUndo
            local ____options_undoBlockEnabled_0 = options
            if ____options_undoBlockEnabled_0 ~= nil then
                ____options_undoBlockEnabled_0 = ____options_undoBlockEnabled_0.undoBlockEnabled
            end
            local eventBuilder = ____self_2_withUndo_3(____self_2, { undoBlockEnabled = ____options_undoBlockEnabled_0 })
            if self.options.needsInstall then
                local event = eventBuilder:withData():withSubPoolRegistryData():build()
                return self:doHandleEvent(
                    event,
                    function(____, p)
                        local context = self.options.contextBuilder:buildPluginContext(
                            p.data:getData(),
                            p.undo,
                            p.subPoolRegistryData,
                            event.log
                        )
                        return action(nil, context)
                    end
                )
            else
                local event = eventBuilder:build()
                return self:doHandleEvent(
                    event,
                    function(____, p)
                        local context = self.options.contextBuilder:buildPluginContext({}, p.undo, {}, event.log)
                        return action(nil, context)
                    end
                )
            end
        end

        function PluginEventHandler.prototype.handlePluginEventReadOnly(self, eventName, action, options)
            if self.options.needsInstall then
                local ____self_6 = self:eventBuilder(eventName):withData({ readOnly = true })
                local ____self_6_withUndo_7 = ____self_6.withUndo
                local ____options_undoBlockEnabled_4 = options
                if ____options_undoBlockEnabled_4 ~= nil then
                    ____options_undoBlockEnabled_4 = ____options_undoBlockEnabled_4.undoBlockEnabled
                end
                local event = ____self_6_withUndo_7(____self_6, { undoBlockEnabled = ____options_undoBlockEnabled_4 })
                :withSubPoolRegistryData({ readOnly = true }):build()
                return self:doHandleEvent(
                    event,
                    function(____, p)
                        local context = self.options.contextBuilder:buildPluginContextReadOnly(
                            p.data:getData(),
                            p.undo,
                            p.subPoolRegistryData,
                            event.log
                        )
                        return action(nil, context)
                    end,
                    true
                )
            else
                local ____self_10 = self:eventBuilder(eventName)
                local ____self_10_withUndo_11 = ____self_10.withUndo
                local ____options_undoBlockEnabled_8 = options
                if ____options_undoBlockEnabled_8 ~= nil then
                    ____options_undoBlockEnabled_8 = ____options_undoBlockEnabled_8.undoBlockEnabled
                end
                local event = ____self_10_withUndo_11(____self_10, { undoBlockEnabled = ____options_undoBlockEnabled_8 })
                :build()
                return self:doHandleEvent(
                    event,
                    function(____, p)
                        local context = self.options.contextBuilder:buildPluginContextReadOnly({}, p.undo, {}, event.log)
                        return action(nil, context)
                    end,
                    true
                )
            end
        end

        function PluginEventHandler.prototype.handleInstanceEvent(self, eventName, instanceId, action, options)
            if not self.options.needsInstall then
                error("Plugin with no install can not have instances")
            end
            local ____self_14 = self:eventBuilder(eventName):withData()
            local ____self_14_withUndo_15 = ____self_14.withUndo
            local ____options_undoBlockEnabled_12 = options
            if ____options_undoBlockEnabled_12 ~= nil then
                ____options_undoBlockEnabled_12 = ____options_undoBlockEnabled_12.undoBlockEnabled
            end
            local event = ____self_14_withUndo_15(____self_14, { undoBlockEnabled = ____options_undoBlockEnabled_12 })
            :withSubPoolRegistryData():build()
            return self:doHandleEvent(
                event,
                function(____, p)
                    local context = self.options.contextBuilder:buildInstanceContext(
                        p.data:getData(),
                        instanceId,
                        p.undo,
                        p.subPoolRegistryData,
                        event.log
                    )
                    return action(nil, context)
                end
            )
        end

        function PluginEventHandler.prototype.handleInstanceEventReadOnly(self, eventName, instanceId, action, options)
            if not self.options.needsInstall then
                error("Plugin has no install")
            end
            local ____self_18 = self:eventBuilder(eventName):withData({ readOnly = true })
            local ____self_18_withUndo_19 = ____self_18.withUndo
            local ____options_undoBlockEnabled_16 = options
            if ____options_undoBlockEnabled_16 ~= nil then
                ____options_undoBlockEnabled_16 = ____options_undoBlockEnabled_16.undoBlockEnabled
            end
            local event = ____self_18_withUndo_19(____self_18, { undoBlockEnabled = ____options_undoBlockEnabled_16 })
            :withSubPoolRegistryData({ readOnly = true }):build()
            return self:doHandleEvent(
                event,
                function(____, p)
                    local context = self.options.contextBuilder:buildInstanceContextReadOnly(
                        p.data:getData(),
                        instanceId,
                        p.undo,
                        p.subPoolRegistryData,
                        event.log
                    )
                    return action(nil, context)
                end,
                true
            )
        end

        function PluginEventHandler.prototype.handleInstallEvent(self, fn)
            if not self.options.needsInstall then
                error("Plugin has no install")
            end
            local event = self:eventBuilder("Install"):withUndo():withSubPoolRegistryData():build()
            return self:doHandleEvent(
                event,
                function(____, p)
                    return fn(nil, p.undo, p.subPoolRegistryData, event.log)
                end,
                true
            )
        end

        function PluginEventHandler.prototype.handleInitUserDataEvent(self, fn)
            if not self.options.needsInstall then
                error("Plugin has no install")
            end
            local event = self:eventBuilder("Init User Data"):withData():build()
            return self:doHandleEvent(
                event,
                function(____, p)
                    return fn(
                        nil,
                        p.data:getData()
                    )
                end,
                true
            )
        end

        function PluginEventHandler.prototype.handleUninstallEvent(self, eventName, fn)
            local event = self:eventBuilder(eventName):withUndo():build()
            return self:doHandleEvent(
                event,
                function(____, p)
                    return fn(nil, p.undo, event.log)
                end,
                true
            )
        end

        function PluginEventHandler.prototype.doHandleEvent(self, event, fn, readOnly)
            if readOnly == nil then
                readOnly = false
            end
            local function handleEvent()
                local provider = MultiProvider(
                    nil,
                    event.log,
                    event.providers,
                    { log = self.options.log:subLogger(event.eventName) }
                )
                provider:prepare()
                local result = fn(
                    nil,
                    provider:getValue()
                )
                provider:finalize()
                return result
            end
            local result = self:wrapEventHandler(event.eventName, handleEvent, readOnly, event.log)
            if PluginsRegistry:exists() then
                PluginsRegistry:get():flushEventQueue(self.log:subLogger("POST EVENT"))
            end
            return result
        end

        function PluginEventHandler.prototype.handleProtectedEvent(self, eventName, fn)
            local event = self:eventBuilder(eventName):build()
            self:wrapEventHandler(event.eventName, fn, true, event.log)
        end

        function PluginEventHandler.prototype.wrapEventHandler(self, eventName, handleEvent, readOnly, log)
            log:trace("event START")
            if not readOnly then
                if self.state.isDuringReadWriteEvent then
                    error((("PluginEventHandler: Can not start a new event during another event handling. Currently handled event: " .. tostring(self.state.curEventName)) .. ", newEvent: ") ..
                    eventName)
                else
                    self.state.isDuringReadWriteEvent = true
                    self.state.curEventName = eventName
                end
            end
            local ____self_options_20 = self.options
            local displayHandle = ____self_options_20.displayHandle
            local pluginEnv = ____self_options_20.pluginEnv
            local pluginName = self.options.pluginEnv.pluginName
            local function handleEventError(____, proError)
                showAlert(nil, displayHandle.index,
                    ((pluginName .. " (v") .. self.options.pluginEnv.pluginVersion) .. "): ERROR !",
                    ("Oops, this error just occured:\n\n" .. proError.message) ..
                    "\n\n- Please make a screenshot of this screen\n\n  - And click OK to DumpLog.")
                Cmd("DumpLog")
                showAlert(
                    nil,
                    displayHandle.index,
                    pluginName .. ": Collect Log File",
                    ("Please send the screenshort you've made, and also please locate the log file (.txt) that was just created. It should be under:\n\n " .. tostring(GetPath(Enums.PathType.CrashLog))) ..
                    "\n\n Please send this file to:\n\n hepi@ma3-pro-plugins.com\n\nThank You !"
                )
                if log:getLogLevel() ~= LogLevel.TRACE then
                    self.options.runtime:setLogLevel(LogLevel.TRACE)
                    showAlert(nil, displayHandle.index, pluginEnv.pluginName .. ": Please Reproduce",
                        "We enabled TRACE logs now.\n\n Could you please reproduce the error again.\n\nThank you, and sorry for your trouble.")
                end
                startUI(
                    nil,
                    displayHandle,
                    MultiActionDialog(
                        nil,
                        {
                            title = self.options.pluginEnv.pluginName .. ": Re-init Plugin Data?",
                            message =
                            "If the main menu doesn't work, then the plugin's data might be corrupted. Click \"Uninstall\" to delete ALL plugin data.",
                            actions = {
                                {
                                    label = "Keep going",
                                    action = function() return { type = "Quit" } end
                                },
                                {
                                    label = "Uninstall",
                                    action = function()
                                        self.options:hardUninstall()
                                        return { type = "Quit" }
                                    end
                                }
                            }
                        }
                    )
                )
                self.state.isDuringReadWriteEvent = false
            end
            local ____protectedCall_result_21 = protectedCall(
                nil,
                {
                    fn = function() return handleEvent(nil) end,
                    onError = handleEventError,
                    errorPrefix = pluginName
                }
            )
            local success = ____protectedCall_result_21.success
            local returnValue = ____protectedCall_result_21.returnValue
            self.state.isDuringReadWriteEvent = false
            if not success then
                error(pluginName .. ": PluginEventManager ERROR. See Traceback above.", 0)
            end
            log:trace("event END")
            return returnValue
        end

        return ____exports
    end,
    ["lib.plugin.types.types"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.plugin.types.pluginDataTypes"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.plugin.types.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["lib.plugin.PluginConstants"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____MAVariables = require("lib.MAVariables")
        local MAVariables = ____MAVariables.MAVariables
        local ____PersistentDataAccess = require("lib.PersistentDataAccess")
        local PersistentDataAccess = ____PersistentDataAccess.PersistentDataAccess
        ____exports.PLUGIN_DATA_VAR_NAME = "PLUGIN_DATA"
        function ____exports.PluginDataAccess(self, pluginId, log)
            return PersistentDataAccess(
                nil,
                MAVariables(nil, { storageType = "ShowFile", variablesId = pluginId }),
                ____exports.PLUGIN_DATA_VAR_NAME,
                log,
                { isDirtyEnabled = false }
            )
        end

        return ____exports
    end,
    ["lib.plugin.PluginBase"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__New = ____lualib.__TS__New
        local __TS__SetDescriptor = ____lualib.__TS__SetDescriptor
        local __TS__SparseArrayNew = ____lualib.__TS__SparseArrayNew
        local __TS__SparseArrayPush = ____lualib.__TS__SparseArrayPush
        local __TS__SparseArraySpread = ____lualib.__TS__SparseArraySpread
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ExternalCommandCodecV2 = require("lib.ExternalCommandCodecV2")
        local ActionCodec = ____ExternalCommandCodecV2.ActionCodec
        local ____PluginConstants = require("lib.plugin.PluginConstants")
        local PluginDataAccess = ____PluginConstants.PluginDataAccess
        local ____PluginsRegistry = require("lib.plugins.PluginsRegistry.PluginsRegistry")
        local PluginsRegistry = ____PluginsRegistry.PluginsRegistry
        local ____SubPoolRegistry = require("lib.plugins.SubPoolRegistry.index")
        local SubPoolRegistry = ____SubPoolRegistry.SubPoolRegistry
        local ____ui = require("lib.ui.index")
        local showAlert = ____ui.showAlert
        local startUI = ____ui.startUI
        local ____components = require("lib.ui.components.index")
        local ModalDialog = ____components.ModalDialog
        local UIFactory = ____components.UIFactory
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        local ____PluginEventHandler = require("lib.plugin.PluginEventHandler")
        local PluginEventHandler = ____PluginEventHandler.PluginEventHandler
        local ____PluginInstaller = require("lib.plugin.PluginInstaller")
        local PluginInstaller = ____PluginInstaller.PluginInstaller
        local ____PluginSignals = require("lib.plugin.PluginSignals")
        local PluginSignals = ____PluginSignals.PluginSignals
        local ____PluginUtils = require("lib.plugin.PluginUtils")
        local PluginUtils = ____PluginUtils.PluginUtils
        ____exports.PluginBase = __TS__Class()
        local PluginBase = ____exports.PluginBase
        PluginBase.name = "PluginBase"
        function PluginBase.prototype.____constructor(self, options)
            self.options = options
            local ____options_0 = options
            local builtInImages = ____options_0.builtInImages
            local pluginEnv = ____options_0.pluginEnv
            local pluginInfo = ____options_0.pluginInfo
            local contextBuilder = ____options_0.contextBuilder
            local createDefaultUserData = ____options_0.createDefaultUserData
            local pluginAssetsCapacity = ____options_0.pluginAssetsCapacity
            local dataMigrations = ____options_0.dataMigrations
            local displayHandle = ____options_0.displayHandle
            local runtime = ____options_0.runtime
            local _needsInstall = ____options_0.needsInstall
            local ____temp_1
            if _needsInstall == nil then
                ____temp_1 = true
            else
                ____temp_1 = _needsInstall
            end
            self.needsInstall = ____temp_1
            local log = runtime.log
            runtime:update(pluginInfo)
            self.internalDataAccess = function() return PluginDataAccess(nil, self.pu.pluginId, self.log) end
            self.createDefaultUserData = createDefaultUserData
            local pu = PluginUtils(nil, pluginEnv, pluginInfo)
            local eventHandler = __TS__New(
                PluginEventHandler,
                {
                    pu = pu,
                    pluginEnv = pluginEnv,
                    displayHandle = options.displayHandle,
                    contextBuilder = contextBuilder,
                    log = log,
                    runtime = runtime,
                    needsInstall = self.needsInstall,
                    hardUninstall = function() return self:uninstall(self.displayHandle, true) end
                }
            )
            self.pu = pu
            self.contextBuilder = contextBuilder
            self.eventHandler = eventHandler
            self.contextBuilder:setEventHandler(eventHandler)
            self.displayHandle = displayHandle
            self._installer = __TS__New(
                PluginInstaller,
                {
                    pluginInfo = pluginInfo,
                    pluginEnv = pluginEnv,
                    contextBuilder = contextBuilder,
                    builtInImages = builtInImages,
                    pluginAssetsCapacity = pluginAssetsCapacity,
                    dataMigrations = dataMigrations,
                    displayHandle = displayHandle,
                    eventHandler = eventHandler,
                    onInstanceDelete = self.onInstanceDelete,
                    onUninstall = function(____, pluginData, undo, displayHandle, subPoolRegistryData, log)
                        return self:onUninstall(
                            pluginData,
                            undo,
                            displayHandle,
                            subPoolRegistryData,
                            log
                        )
                    end,
                    log = log,
                    runtime = runtime
                }
            )
            local signals = __TS__New(PluginSignals, self.pu.pluginInfo, log)
            self.dialogFactory = {
                ModalDialog = function(____, options)
                    return __TS__New(ModalDialog,
                        { pluginInfo = self.pu.pluginInfo, pluginSignals = signals, options = options, log = log })
                end,
                uiFactory = __TS__New(UIFactory, { pluginInfo = pluginInfo, pluginSignals = signals, log = self.log }),
                pluginSignals = signals
            }
        end

        __TS__SetDescriptor(
            PluginBase.prototype,
            "log",
            {
                get = function(self)
                    return self:getRuntime().log
                end
            },
            true
        )
        function PluginBase.prototype.handleMain(self, params)
            local ____params_2 = params
            local argument = ____params_2.argument
            local MainDialog = ____params_2.MainDialog
            local ExternalActionHandler = ____params_2.ExternalActionHandler
            local userDialogV2 = ____params_2.userDialogV2
            local runtime = self:getRuntime()
            if self:isInstalled() then
                PluginsRegistry:getOrCreate():register(self.pu.pluginEnv, self.options.pluginInfo)
                runtime:initPluginsRegistryEventListener()
            end
            if argument == nil then
                if userDialogV2 then
                    self:showDialog(MainDialog(nil, self))
                else
                    startUI(
                        nil,
                        self.options.displayHandle,
                        MainDialog(nil, self)
                    )
                end
            else
                local action = ActionCodec:decodeAction(argument)
                local ____runtime_getExtActionHandler_result_handle_result_3 = runtime:getExtActionHandler(action.type)
                if ____runtime_getExtActionHandler_result_handle_result_3 ~= nil then
                    ____runtime_getExtActionHandler_result_handle_result_3 =
                    ____runtime_getExtActionHandler_result_handle_result_3:handle(self, action)
                end
                local handled = ____runtime_getExtActionHandler_result_handle_result_3
                if not handled then
                    ExternalActionHandler(
                        nil,
                        self,
                        runtime.log:subLogger("ExtAction")
                    ):handle(action)
                end
            end
        end

        function PluginBase.prototype.handleMainV2(self, params)
            local ____params_5 = params
            local argument = ____params_5.argument
            local MainDialog = ____params_5.MainDialog
            local ExternalActionHandler = ____params_5.ExternalActionHandler
            local runtime = self:getRuntime()
            if self:isInstalled() then
                PluginsRegistry:getOrCreate():register(self.pu.pluginEnv, self.options.pluginInfo)
                runtime:initPluginsRegistryEventListener()
                self:handlePluginEventReadOnly(
                    "InitHooks",
                    function(____, pluginContext)
                        self:initHooks(pluginContext)
                    end
                )
            end
            if argument == nil then
                self:showDialog(MainDialog(nil, self))
            else
                local action = ActionCodec:decodeAction(argument)
                ExternalActionHandler(
                    nil,
                    self,
                    runtime.log:subLogger("ExtAction")
                ):handle(action)
            end
        end

        function PluginBase.prototype.showDialog(self, dialog)
            self.eventHandler:handleProtectedEvent(
                "ShowDialog",
                function()
                    self:getRuntime().dialogStack:newStack(self.displayHandle, dialog)
                end
            )
        end

        function PluginBase.prototype.dialogAction(self, action)
            self.eventHandler:handleProtectedEvent(
                "DialogAction",
                function()
                    self:getRuntime().dialogStack:action(action)
                end
            )
        end

        function PluginBase.prototype.isInstalled(self)
            return self._installer:isInstalled()
        end

        function PluginBase.prototype.getInstanceIds(self)
            if not self.needsInstall then
                error("Plugin with no install can not have instances")
            end
            local da = self:internalDataAccess()
            if da:read() then
                return objectKeys(
                    nil,
                    da:getData().instances
                )
            else
                return {}
            end
        end

        function PluginBase.prototype.install(self, displayHandle, userData)
            if not self.needsInstall then
                error("Plugin with no install")
            end
            local ____temp_6 = self.eventHandler:handleInstallEvent(function(____, undo, subPoolRegistryData, log)
                return self._installer:install(
                    undo,
                    displayHandle,
                    __TS__New(
                        SubPoolRegistry,
                        {
                            eventEmitter = self:getRuntime().pluginRegistry.eventDispatcher,
                            pluginId = self.pu.pluginId,
                            data = subPoolRegistryData,
                            log = log,
                            readOnly = false
                        }
                    ),
                    log
                )
            end)
            local success = ____temp_6.success
            local oldPluginId = ____temp_6.oldPluginId
            if success then
                local oldPluginId = self.eventHandler:handleInitUserDataEvent(function(____, pluginData)
                    if userData == nil then
                        local result = self._installer:getOldUserDataWithDialogV1()
                        if result == nil then
                            pluginData.userData = self:createDefaultUserData()
                        else
                            local userData = result.userData
                            local oldPluginId = result.oldPluginId
                            local oldVersion = result.oldVersion
                            pluginData.userData = userData
                            return oldPluginId
                        end
                    else
                        pluginData.userData = userData
                    end
                end)
                return self.eventHandler:handlePluginEvent(
                    "Post Install",
                    function(____, context)
                        return self:onInstall(context, oldPluginId)
                    end
                )
            end
        end

        function PluginBase.prototype.getMigratedOldUserData(self)
            return self._installer:getOldUserData()
        end

        function PluginBase.prototype.uninstall(self, displayHandle, hardUninstall)
            if not self.needsInstall then
                error("Plugin with no install")
            end
            self.eventHandler:handleUninstallEvent(
                "Uninstall",
                function(____, undo, log)
                    local ____self_9 = self._installer
                    local ____self_9_uninstall_10 = ____self_9.uninstall
                    local ____array_8 = __TS__SparseArrayNew(undo, displayHandle, log)
                    local ____temp_7
                    if hardUninstall == nil then
                        ____temp_7 = false
                    else
                        ____temp_7 = hardUninstall
                    end
                    __TS__SparseArrayPush(____array_8, ____temp_7)
                    ____self_9_uninstall_10(
                        ____self_9,
                        __TS__SparseArraySpread(____array_8)
                    )
                end
            )
        end

        function PluginBase.prototype.showAlertDialog(self, title, message)
            showAlert(nil, self.options.displayHandle.index, (self.pu.pluginEnv.pluginName .. ": ") .. title, message)
        end

        function PluginBase.prototype.provisionInstance(self, instanceConfig, onProvisioned)
            if not self.needsInstall then
                error("Plugin with no install can not have instances")
            end
            self.eventHandler:handlePluginEvent(
                "Provision Instance",
                function(____, context)
                    local instanceId = context.instanceManager:provisionNewInstance(self:createInitialInstanceData(
                    instanceConfig, context.pluginData, context.of, context.mainAssetManager))
                    onProvisioned(
                        nil,
                        context:buildInstanceContext(instanceId)
                    )
                end
            )
        end

        function PluginBase.prototype.getRuntime(self)
            return self.options.runtime
        end

        function PluginBase.prototype.deleteInstance(self, context, instanceId)
            if not self.needsInstall then
                error("Plugin with no install can not have instances")
            end
            local ____context_11 = context
            local undo = ____context_11.undo
            local pu = ____context_11.pu
            local pluginRuntime = ____context_11.pluginRuntime
            local ____pluginRuntime_12 = pluginRuntime
            local log = ____pluginRuntime_12.log
            local ____pu_13 = pu
            local pluginId = ____pu_13.pluginId
            local pluginHandle = ____pu_13.pluginHandle
            pluginRuntime:deleteInstanceRuntime(instanceId)
            self:onInstanceDelete(context, instanceId)
            context.mainAssetManager:getInstanceAssetManager(instanceId):deleteAll(undo)
            context.instanceManager:deleteInstance(instanceId)
        end

        function PluginBase.prototype.setLogLevel(self, logLevel)
            self:getRuntime():setLogLevel(logLevel)
        end

        function PluginBase.prototype.getLogLevel(self)
            return self:getRuntime():getLogLevel()
        end

        function PluginBase.prototype.handlePluginEvent(self, eventName, action, options)
            return self.eventHandler:handlePluginEvent(eventName, action, options)
        end

        function PluginBase.prototype.handleInstanceEvent(self, eventName, instanceId, action, options)
            return self.eventHandler:handleInstanceEvent(eventName, instanceId, action, options)
        end

        function PluginBase.prototype.handlePluginEventReadOnly(self, eventName, action, options)
            return self.eventHandler:handlePluginEventReadOnly(eventName, action, options)
        end

        function PluginBase.prototype.handleInstanceEventReadOnly(self, eventName, instanceId, action, options)
            return self.eventHandler:handleInstanceEventReadOnly(eventName, instanceId, action, options)
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.types.pluginDataTypes"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["plugins.MidiEncoders.src.types.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["plugins.MidiEncoders.src.data.UserDataWrapper"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        local ____InstanceUserDataWrapper = require("plugins.MidiEncoders.src.data.InstanceUserDataWrapper")
        local InstanceUserDataWrapper = ____InstanceUserDataWrapper.InstanceUserDataWrapper
        function ____exports.UserDataWrapper(self, userData, log, of, readOnly, pam, subPoolRegistry)
            local ____userData_0 = userData
            local pluginConfig = ____userData_0.config
            return {
                getNumOfInstances = function(self)
                    return #objectKeys(nil, userData.instances)
                end,
                getInstanceIds = function(self)
                    return objectKeys(nil, userData.instances)
                end,
                getInstances = function(self)
                    return __TS__ArrayMap(
                        self:getInstanceIds(),
                        function(____, instanceId) return self:instance(instanceId) end
                    )
                end,
                instance = function(self, instanceId)
                    return InstanceUserDataWrapper(
                        nil,
                        self,
                        instanceId,
                        of,
                        log,
                        readOnly,
                        pam:getInstanceAssetManager(instanceId),
                        subPoolRegistry
                    )
                end,
                instanceData = function(self, instanceId)
                    return userData.instances[instanceId]
                end,
                setInstanceConfig = function(self, instanceId, config)
                    local ____config_1 = config
                    userData.instances[instanceId].config = ____config_1
                    return ____config_1
                end
            }
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.data.InstanceUserDataWrapper"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.InstanceUserDataWrapper(self, userDataWrapper, instanceId, of, log, readOnly,
                                                     instanceAssetManager, subPoolRegistry)
            local userData = userDataWrapper:instanceData(instanceId)
            return {
                getConfig = function(self)
                    return userData.config
                end
            }
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.data.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        do
            local ____InstanceUserDataWrapper = require("plugins.MidiEncoders.src.data.InstanceUserDataWrapper")
            local InstanceUserDataWrapper = ____InstanceUserDataWrapper.InstanceUserDataWrapper
            ____exports.InstanceUserDataWrapper = InstanceUserDataWrapper
        end
        do
            local ____UserDataWrapper = require("plugins.MidiEncoders.src.data.UserDataWrapper")
            local UserDataWrapper = ____UserDataWrapper.UserDataWrapper
            ____exports.UserDataWrapper = UserDataWrapper
        end
        return ____exports
    end,
    ["plugins.MidiEncoders.src.EventHandler"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.EventHandler(self, log)
            return {}
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.__imagesB64.index"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.images = {}
        return ____exports
    end,
    ["plugins.MidiEncoders.src.types.externalActions"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["plugins.MidiEncoders.src.types.types"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        return ____exports
    end,
    ["plugins.MidiEncoders.src.AssetTypes"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.AssetTypes = {
            encoderRotateMacro = function(self, encoderNumber, midiValue)
                return (("encoder" .. tostring(encoderNumber)) .. "MidiValue") .. tostring(midiValue)
            end
        }
        return ____exports
    end,
    ["plugins.MidiEncoders.src.ContextBuilder"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ObjectAssign = ____lualib.__TS__ObjectAssign
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____plugin = require("lib.plugin.index")
        local ContextBuilderBase = ____plugin.ContextBuilderBase
        local ____data = require("plugins.MidiEncoders.src.data.index")
        local UserDataWrapper = ____data.UserDataWrapper
        local ____EventHandler = require("plugins.MidiEncoders.src.EventHandler")
        local EventHandler = ____EventHandler.EventHandler
        local ______imagesB64 = require("plugins.MidiEncoders.src.__imagesB64.index")
        local builtInImages = ______imagesB64.images
        function ____exports.ContextBuilder(self, pu, displayHandle, runtime)
            local function enrichPluginContext(self, context)
                return __TS__ObjectAssign(
                    {},
                    context,
                    {
                        userDataWrapper = UserDataWrapper(
                            nil,
                            context.pluginData.userData,
                            runtime.log,
                            context.of,
                            false,
                            context.mainAssetManager,
                            context.subPoolRegistry
                        ),
                        actions = EventHandler(nil, runtime.log)
                    }
                )
            end
            local function enrichPluginContextReadOnly(self, context)
                local ____context_0 = context
                local pluginData = ____context_0.pluginData
                local log = ____context_0.log
                local of = ____context_0.of
                local mainAssetManager = ____context_0.mainAssetManager
                return __TS__ObjectAssign(
                    {},
                    context,
                    {
                        userDataWrapper = UserDataWrapper(
                            nil,
                            pluginData.userData,
                            log,
                            of,
                            true,
                            mainAssetManager,
                            context.subPoolRegistry
                        )
                    }
                )
            end
            local function enrichInstanceContextReadOnly(self, context)
                local ____context_1 = context
                local pluginData = ____context_1.pluginData
                local log = ____context_1.log
                local of = ____context_1.of
                local mainAssetManager = ____context_1.mainAssetManager
                local userDataWrapper = UserDataWrapper(
                    nil,
                    pluginData.userData,
                    log,
                    of,
                    true,
                    mainAssetManager,
                    context.subPoolRegistry
                )
                return __TS__ObjectAssign(
                    {},
                    context,
                    {
                        userDataWrapper = userDataWrapper,
                        instanceDataWrapper = userDataWrapper:instance(context.instanceId)
                    }
                )
            end
            local function enrichInstanceContext(self, context)
                local ____context_2 = context
                local of = ____context_2.of
                local log = runtime.log
                return __TS__ObjectAssign(
                    {},
                    context,
                    {
                        actions = EventHandler(nil, log),
                        instanceUserDataWrapper = UserDataWrapper(
                            nil,
                            context.pluginData.userData,
                            log,
                            of,
                            false,
                            context.mainAssetManager,
                            context.subPoolRegistry
                        ):instance(context.instanceId),
                        userDataWrapper = UserDataWrapper(
                            nil,
                            context.pluginData.userData,
                            log,
                            of,
                            false,
                            context.mainAssetManager,
                            context.subPoolRegistry
                        ),
                        pluginConfig = context.pluginData.userData.config
                    }
                )
            end
            return __TS__New(ContextBuilderBase, {
                pu = pu,
                componentNumber = 1,
                builtInImages = builtInImages,
                enrichPluginContextReadOnly = enrichPluginContextReadOnly,
                enrichInstanceContextReadOnly = enrichInstanceContextReadOnly,
                enrichInstanceContext = enrichInstanceContext,
                enrichPluginContext = enrichPluginContext,
                displayHandle = displayHandle,
                runtime = runtime
            })
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.DataMigrations"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.userDataMigrations = {
            {
                fromPluginId = "pro_plugins__midi_encoders__v1_0_1",
                fromVersion = "1.0.1",
                toPluginId = "pro_plugins__midi_encoders__v1_0_2",
                migrateUserData = function(____, oldUserData)
                    return oldUserData
                end
            },
            {
                fromPluginId = "pro_plugins__midi_encoders__v1_0_2",
                fromVersion = "1.0.2",
                toPluginId = "pro_plugins__midi_encoders__v1_1_0",
                migrateUserData = function(____, oldUserData)
                    return oldUserData
                end
            },
            {
                fromPluginId = "pro_plugins__midi_encoders__v1_1_0",
                fromVersion = "1.1.0",
                toPluginId = "pro_plugins__midi_encoders__v1_1_1",
                migrateUserData = function(____, oldUserData)
                    return oldUserData
                end
            },
            {
                fromPluginId = "pro_plugins__midi_encoders__v1_1_1",
                fromVersion = "1.1.1",
                toPluginId = "pro_plugins__midi_encoders__v1_1_2",
                migrateUserData = function(____, oldUserData)
                    return oldUserData
                end
            }
        }
        return ____exports
    end,
    ["plugins.MidiEncoders.src.EncoderLocator"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__ArrayJoin = ____lualib.__TS__ArrayJoin
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local getRect, getArrangementModeEncoder, LAYOUT_BAR_POSITION_ENCODER_OBJ_MAP
        function getRect(self, obj)
            return obj:Get("AbsClientRect")
        end

        function getArrangementModeEncoder(self, innerBoxLower, encoderNumber)
            if encoderNumber == 5 or encoderNumber == 10 then
                return getRect(nil, innerBoxLower[encoderNumber == 5 and "Encoder5aScr" or "Encoder5bScr"])
            end
            if innerBoxLower["Arrangement" .. tostring(encoderNumber % 5)]:Get("visible") then
                return getRect(
                    nil,
                    innerBoxLower["Arrangement" .. tostring(encoderNumber % 5)]
                )
            else
                if encoderNumber % 5 <= 3 then
                    return getRect(
                        nil,
                        innerBoxLower[("ArrangementSplit" .. (encoderNumber > 5 and "Outer" or "Inner")) .. tostring(encoderNumber % 5)]
                    )
                end
            end
        end

        --- This wheel center offset of 35 is fixed also in these cases:
        -- displayRatio is different (checked 1.0, 0.75)
        local WHEEL_CENTER_OFFSET_X = 35
        local LayoutBarEncoderFunction = LayoutBarEncoderFunction or ({})
        LayoutBarEncoderFunction.Position = 0
        LayoutBarEncoderFunction[LayoutBarEncoderFunction.Position] = "Position"
        LayoutBarEncoderFunction.Arrangement = 1
        LayoutBarEncoderFunction[LayoutBarEncoderFunction.Arrangement] = "Arrangement"
        function ____exports.EncoderLocator(self, log)
            local getEncoderWheelCenter, getEncoderPlaceCenter, getEncoderRect, getEncoderRectPresetBar, getEncoderRectLayoutBar, getEncoderRectStageViewBar, getEncoderRectTimecodeBar
            function getEncoderWheelCenter(self, encoderNumber)
                local rect = getEncoderRect(nil, encoderNumber)
                if rect == nil then
                    return nil
                else
                    return { x = rect.x + WHEEL_CENTER_OFFSET_X, y = rect.y + rect.h / 2 }
                end
            end

            function getEncoderPlaceCenter(self, encoderNumber)
                local rect = getEncoderRect(nil, encoderNumber)
                if rect == nil then
                    return nil
                else
                    return { x = rect.x + rect.w / 2, y = rect.y + rect.h / 2 }
                end
            end

            function getEncoderRect(self, encoderNumber)
                local displayNumber = 1
                local display = GetDisplayByIndex(displayNumber)
                local encoderBar = display.EncoderBarContainer.EncoderBar
                local presetBar = encoderBar["PresetBar 3"]
                local layoutBar = encoderBar["LayoutBar 3"]
                local stageViewBar = encoderBar["StageViewBar 3"]
                local timecodeBar = encoderBar["TimecodeBar 3"]
                if presetBar ~= nil then
                    return getEncoderRectPresetBar(nil, presetBar, encoderNumber)
                elseif layoutBar ~= nil then
                    return getEncoderRectLayoutBar(nil, layoutBar, encoderNumber)
                elseif stageViewBar ~= nil then
                    return getEncoderRectStageViewBar(nil, stageViewBar, encoderNumber)
                elseif timecodeBar ~= nil then
                    return getEncoderRectTimecodeBar(nil, timecodeBar, encoderNumber)
                else
                    log:warn(("Could not detect encoders bar type: EncoderBarContainer.Children = [" .. table.concat(
                        __TS__ArrayMap(
                            encoderBar:Children(),
                            function(____, c) return c.name end
                        ),
                        ","
                    )) .. "]")
                    return
                end
            end

            function getEncoderRectPresetBar(self, presetBar, encoderNumber)
                local encoderPlace = presetBar.EncodersArea["EncoderPlace" .. tostring((encoderNumber - 1) % 5 + 1)]
                local encoderGrid1 = encoderPlace["UILayoutGrid 3"]
                local encoderGrid2 = encoderPlace["UILayoutGrid 4"]
                local function getScreenEncoderWheel(self, encoderGrid)
                    local encoder = encoderGrid[3]
                    if encoder:GetClass() == "ScreenEncoderControl" then
                        return encoder:Get("AbsClientRect")
                    else
                        log:warn("Could not detect screen encoders. encoderGrid1[3].GetClass() = " ..
                        encoderGrid1[3]:GetClass())
                        return
                    end
                end
                if encoderNumber == 5 then
                    return getScreenEncoderWheel(nil, encoderGrid1)
                elseif encoderNumber == 10 then
                    Echo("encoderNumber=" .. tostring(encoderNumber))
                    return getScreenEncoderWheel(nil, encoderGrid2)
                end
                if encoderGrid1[5]:GetClass() == "EncoderControl" then
                    return
                end
                if encoderGrid1[5]:GetClass() == "PresetEncoderControl" then
                    local encoderGrid1ThirdChild = encoderGrid1[3]
                    if encoderGrid1ThirdChild:GetClass() == "SwipeButtonList" then
                    end
                    local encoderGrid2ThirdChild = encoderGrid2[3]
                    local encoderGrid1_5Child = encoderGrid1[5]
                    local encoderGrid2_5Child = encoderGrid2[5]
                    local encoderGrid1Rect = encoderGrid1:Get("AbsClientRect")
                    local swipeButtonWidth = encoderGrid1ThirdChild:Get("AbsClientRect").w
                    return { x = encoderGrid1Rect.x + swipeButtonWidth, y = encoderGrid1Rect.y, w = encoderGrid1Rect.w, h =
                    encoderGrid1Rect.h }
                else
                    log:warn(("Could not detect encoderPlace type. encoderGrid1 child classes: [" .. __TS__ArrayJoin(
                        __TS__ArrayMap(
                            encoderGrid1:Children(),
                            function(____, c) return c.GetClass end
                        ),
                        ","
                    )) .. "]")
                    return
                end
            end

            function getEncoderRectLayoutBar(self, layoutBar, encoderNumber)
                log:trace("LayoutView")
                local innerBoxLower = layoutBar.InnerBox.Lower
                local encoderFunction = layoutBar.InnerBox.EncoderFunction:Get("SELECTEDITEMIDX")
                repeat
                    local ____switch29 = encoderFunction
                    local ____cond29 = ____switch29 == LayoutBarEncoderFunction.Position
                    if ____cond29 then
                        do
                            local encoderObj = innerBoxLower[LAYOUT_BAR_POSITION_ENCODER_OBJ_MAP[encoderNumber]]
                            return getRect(nil, encoderObj)
                        end
                    end
                    ____cond29 = ____cond29 or ____switch29 == LayoutBarEncoderFunction.Arrangement
                    if ____cond29 then
                        do
                            return getArrangementModeEncoder(nil, innerBoxLower, encoderNumber)
                        end
                    end
                until true
            end

            function getEncoderRectStageViewBar(self, stageViewBar, encoderNumber)
                log:trace("StageView")
                local innerBoxLower = stageViewBar.InnerBox.Lower
                return getArrangementModeEncoder(nil, innerBoxLower, encoderNumber)
            end

            function getEncoderRectTimecodeBar(self, timecodeBar, encoderNumber)
                log:trace("Timecode")
                local innerBoxLower = timecodeBar.InnerBox.Lower
                if encoderNumber == 5 or encoderNumber == 10 then
                    return getRect(nil, innerBoxLower[("Encoder5" .. (encoderNumber == 5 and "a" or "b")) .. "Scr"])
                else
                    return getRect(
                        nil,
                        innerBoxLower[("Encoder" .. tostring(encoderNumber % 5)) .. (encoderNumber <= 5 and "a" or "b")]
                    )
                end
            end

            return {
                getEncoderWheelCenter = getEncoderWheelCenter,
                getEncoderPlaceCenter = getEncoderPlaceCenter,
                getEncodersDisplayNumber = function() return 1 end
            }
        end

        LAYOUT_BAR_POSITION_ENCODER_OBJ_MAP = {
            [1] = "TransX",
            [2] = "TransY",
            [3] = "ScaleAll",
            [4] = "RotZ",
            [5] = "Encoder5aScr",
            [6] = "ScaleX",
            [7] = "ScaleY",
            [8] = "RatioAll",
            [9] = "RotZ",
            [10] = "Encoder5bScr"
        }
        return ____exports
    end,
    ["plugins.MidiEncoders.src.__env"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____PluginEnv = require("lib.plugin.PluginEnv")
        local PluginEnv = ____PluginEnv.PluginEnv
        ____exports.PLUGIN_ENV = __TS__New(PluginEnv, {
            env = "prod",
            pluginName = "MIDI Encoders",
            pluginId = "pro_plugins__midi_encoders__v1_1_2",
            pluginVersion = "1.1.2",
            author = "Pro Plugins"
        })
        return ____exports
    end,
    ["plugins.MidiEncoders.src.common"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__StringStartsWith = ____lualib.__TS__StringStartsWith
        local __TS__ArrayReverse = ____lualib.__TS__ArrayReverse
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ______env = require("plugins.MidiEncoders.src.__env")
        local PLUGIN_ENV = ______env.PLUGIN_ENV
        local MIDI_REMOTE_NAME_PREFIX = PLUGIN_ENV.pluginId
        function ____exports.createMidiRemoteNameInstancePrefix(self, instanceId)
            return (MIDI_REMOTE_NAME_PREFIX .. " I") .. instanceId
        end

        function ____exports.createMidiRemoteName(self, instanceId, tag)
            return (____exports.createMidiRemoteNameInstancePrefix(nil, instanceId) .. " ") .. tag
        end

        function ____exports.clearAllRemotes(self, of)
            for ____, remote in ipairs(__TS__ArrayReverse(of:HMidiRemotes():getRemotes())) do
                if __TS__StringStartsWith(remote.name, MIDI_REMOTE_NAME_PREFIX) then
                    remote:unlock()
                    remote:delete()
                end
            end
        end

        ____exports.INNER_OUTER_INVERSION_MOMENTARY_BUTTON_ID = "setInnerOuter"
        --- There are 5 physical encoder, each of them with inner and outer encoders.
        -- This is the max number of encoder that can appear on the screen.
        -- It does not matter if we you 5 or 10 midi encoders.
        ____exports.NUM_OF_ENCODERS = 10
        return ____exports
    end,
    ["plugins.MidiEncoders.src.defaultConfig"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ______env = require("plugins.MidiEncoders.src.__env")
        local PLUGIN_ENV = ______env.PLUGIN_ENV
        local MAX_MACRO_CAPACITY = 400
        ____exports.PLUGIN_ASSETS_MAX_CAPACITY = { Macros = MAX_MACRO_CAPACITY, Pages = 1, Sequences = 10 }
        ____exports.DEFAULT_RELATIVE_MODE = "Mode2-offset"
        function ____exports.createDefaultConfig(self)
            if PLUGIN_ENV.env == "dev" then
                return {
                    enabled = true,
                    rotateDirection = "normal",
                    maxAmount = 10,
                    defaultMidiChannel = 11,
                    midiRelativeMode = "Mode2-offset",
                    midiMappings = {
                        encoder1Rotate = { enabled = true, midiType = "Control", midiChannel = 11, midiIndex = 11 },
                        encoder2Rotate = { enabled = true, midiType = "Control", midiChannel = 11, midiIndex = 12 },
                        encoder3Rotate = { enabled = true, midiType = "Control", midiChannel = 11, midiIndex = 13 },
                        encoder4Rotate = { enabled = true, midiType = "Control", midiChannel = 11, midiIndex = 14 },
                        encoder5Rotate = { enabled = true, midiType = "Control", midiChannel = 11, midiIndex = 15 },
                        encoder1Click = { enabled = true, midiType = "Note", midiChannel = 11, midiIndex = 24 },
                        encoder2Click = { enabled = true, midiType = "Note", midiChannel = 11, midiIndex = 25 },
                        encoder3Click = { enabled = true, midiType = "Note", midiChannel = 11, midiIndex = 26 },
                        encoder4Click = { enabled = true, midiType = "Note", midiChannel = 11, midiIndex = 27 },
                        encoder5Click = { enabled = true, midiType = "Note", midiChannel = 11, midiIndex = 28 },
                        toggleInnerOuterIndex = { enabled = true, midiType = "Note", midiChannel = 11, midiIndex = 40 }
                    }
                }
            else
                return {
                    enabled = true,
                    rotateDirection = "normal",
                    maxAmount = 10,
                    defaultMidiChannel = 1,
                    midiRelativeMode = "Mode1-2comp",
                    midiMappings = {
                        encoder1Rotate = { enabled = true, midiType = "Control", midiChannel = 1, midiIndex = 1 },
                        encoder2Rotate = { enabled = true, midiType = "Control", midiChannel = 1, midiIndex = 2 },
                        encoder3Rotate = { enabled = true, midiType = "Control", midiChannel = 1, midiIndex = 3 },
                        encoder4Rotate = { enabled = true, midiType = "Control", midiChannel = 1, midiIndex = 4 },
                        encoder5Rotate = { enabled = true, midiType = "Control", midiChannel = 1, midiIndex = 5 },
                        encoder1Click = { enabled = true, midiType = "Note", midiChannel = 1, midiIndex = 11 },
                        encoder2Click = { enabled = true, midiType = "Note", midiChannel = 1, midiIndex = 12 },
                        encoder3Click = { enabled = true, midiType = "Note", midiChannel = 1, midiIndex = 13 },
                        encoder4Click = { enabled = true, midiType = "Note", midiChannel = 1, midiIndex = 14 },
                        encoder5Click = { enabled = true, midiType = "Note", midiChannel = 1, midiIndex = 15 },
                        toggleInnerOuterIndex = { enabled = true, midiType = "Note", midiChannel = 1, midiIndex = 21 }
                    }
                }
            end
        end

        function ____exports.createEmptyUserData(self)
            return { config = {}, pluginState = {}, instances = {} }
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.ExecutorToggle"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.ExecutorToggle(self, params)
            local getSeq, createMacroAssetType, generate, addMidiRemotes, assetManager, macrosAssetTypePrefix, actionName, actionValueLabel, log, of
            function getSeq(self)
                return assetManager.provisionOrGet:sequence(macrosAssetTypePrefix .. "_Seq")
            end

            function createMacroAssetType(self, action)
                local assetType = ((macrosAssetTypePrefix .. "_") .. action) .. "_Macro"
                return assetType
            end

            function generate(self, genParams)
                local ____genParams_1 = genParams
                local createCommand = ____genParams_1.createCommand
                local pressMacro = assetManager.provisionOrGet:macro(createMacroAssetType(nil, "press")):store({ label = (actionName .. " ") ..
                actionValueLabel(nil, "press") }):setLines({ { command = createCommand(nil, "press") } })
                local releaseMacro = assetManager.provisionOrGet:macro(createMacroAssetType(nil, "release")):store({ label = (actionName .. " ") ..
                actionValueLabel(nil, "release") }):setLines({ { command = createCommand(nil, "release") } })
                Cmd("ClearAll")
                local seq = getSeq(nil):store({ label = actionName, mode = "Overwrite" })
                seq:storeCue(1, { mode = "Overwrite" }):setLabel(actionValueLabel(nil, "press")):setProps({ command =
                pressMacro.addr })
                seq:getOffCue():setProps({ command = releaseMacro.addr })
            end

            function addMidiRemotes(self, midiMapping, enabled, finalize)
                local ____midiMapping_2 = midiMapping
                local midiChannel = ____midiMapping_2.midiChannel
                local midiIndex = ____midiMapping_2.midiIndex
                local midiType = ____midiMapping_2.midiType
                local remote = of:HMidiRemotes():addRemote()
                if midiType ~= "Note" then
                    log:warn(("ExecutorToggle for action " .. actionName) .. ": midiType must be \"Note\"")
                end
                local seq = getSeq(nil)
                remote:setProps({
                    enabled = enabled,
                    midiChannel = midiChannel,
                    midiIndex = midiIndex,
                    midiType = midiType,
                    key = "Flash"
                }):setTarget(seq)
                if finalize ~= nil then
                    finalize(nil, remote)
                end
            end

            local ____params_0 = params
            assetManager = ____params_0.assetManager
            macrosAssetTypePrefix = ____params_0.assetTypePrefix
            actionName = ____params_0.actionName
            actionValueLabel = ____params_0.actionValueLabel
            log = ____params_0.log
            of = ____params_0.of
            return { generate = generate, addMidiRemotes = addMidiRemotes }
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.RelativeMidiMap"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        --- NOTE: MA3 ignores CC with value 0 ! (Even if TriggerOn is 0)
        -- In Mode-1 and Mode-3 this is not an issue, because CC with value 0 means 0 amount.
        -- But in Mode-2, CC with 0 means amount -64 which wlil be ignored. Which is... a non-issue.
        local function createRelativeMidiMaps(self, midiRelativeMode, maxAmount)
            repeat
                local ____switch3 = midiRelativeMode
                local ____cond3 = ____switch3 == "Mode1-2comp"
                if ____cond3 then
                    do
                        local midiValueToAmount = {}
                        local amountToMidiValue = {}
                        do
                            local amount = 0
                            while amount <= math.min(maxAmount, 63) do
                                midiValueToAmount[amount] = amount
                                midiValueToAmount[128 - amount] = -amount
                                amountToMidiValue[amount] = amount
                                amountToMidiValue[-amount] = 128 - amount
                                amount = amount + 1
                            end
                        end
                        return { midiValueToAmount = midiValueToAmount, amountToMidiValue = amountToMidiValue }
                    end
                end
                ____cond3 = ____cond3 or ____switch3 == "Mode2-offset"
                if ____cond3 then
                    do
                        local midiValueToAmount = {}
                        local amountToMidiValue = {}
                        do
                            local amount = 1
                            while amount <= math.min(maxAmount, 63) do
                                midiValueToAmount[64 + amount] = amount
                                midiValueToAmount[64 - amount] = -amount
                                amountToMidiValue[amount] = 64 + amount
                                amountToMidiValue[-amount] = 64 - amount
                                amount = amount + 1
                            end
                        end
                        return { midiValueToAmount = midiValueToAmount, amountToMidiValue = amountToMidiValue }
                    end
                end
                ____cond3 = ____cond3 or ____switch3 == "Mode3-SignBit"
                if ____cond3 then
                    do
                        local midiValueToAmount = {}
                        local amountToMidiValue = {}
                        do
                            local amount = 0
                            while amount <= math.min(maxAmount, 63) do
                                midiValueToAmount[amount] = amount
                                midiValueToAmount[64 + amount] = -amount
                                amountToMidiValue[amount] = amount
                                amountToMidiValue[-amount] = 64 + amount
                                amount = amount + 1
                            end
                        end
                        return { midiValueToAmount = midiValueToAmount, amountToMidiValue = amountToMidiValue }
                    end
                end
                do
                    do
                        error("unsupported MidiRelativeMode")
                    end
                end
            until true
        end
        --- Maps value as string to an amount
        ____exports.RELATIVE_MIDI_MODES = {
            ["Mode1-2comp"] = createRelativeMidiMaps(nil, "Mode1-2comp", 63),
            ["Mode2-offset"] = createRelativeMidiMaps(nil, "Mode2-offset", 63),
            ["Mode3-SignBit"] = createRelativeMidiMaps(nil, "Mode3-SignBit", 63)
        }
        return ____exports
    end,
    ["plugins.MidiEncoders.src.TempGlobalVariableFactory"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        function ____exports.TempGlobalVariableFactory(self, pluginId)
            local encoder, momentaryButton, varPrefix
            function encoder(self, encoderNumber, instanceId)
                return ((varPrefix .. instanceId) .. "_enc") .. tostring(encoderNumber)
            end

            function momentaryButton(self, buttonId, instanceId)
                return ((varPrefix .. instanceId) .. "_button") .. buttonId
            end

            varPrefix = ("TEMP__" .. pluginId) .. "__"
            return { encoder = encoder, momentaryButton = momentaryButton }
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.Generator"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__ArraySort = ____lualib.__TS__ArraySort
        local __TS__ArrayReverse = ____lualib.__TS__ArrayReverse
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Utils = require("lib.Utils")
        local series = ____Utils.series
        local ____AssetTypes = require("plugins.MidiEncoders.src.AssetTypes")
        local AssetTypes = ____AssetTypes.AssetTypes
        local ____common = require("plugins.MidiEncoders.src.common")
        local clearAllRemotes = ____common.clearAllRemotes
        local ____ExecutorToggle = require("plugins.MidiEncoders.src.ExecutorToggle")
        local ExecutorToggle = ____ExecutorToggle.ExecutorToggle
        local ____RelativeMidiMap = require("plugins.MidiEncoders.src.RelativeMidiMap")
        local RELATIVE_MIDI_MODES = ____RelativeMidiMap.RELATIVE_MIDI_MODES
        local ____TempGlobalVariableFactory = require("plugins.MidiEncoders.src.TempGlobalVariableFactory")
        local TempGlobalVariableFactory = ____TempGlobalVariableFactory.TempGlobalVariableFactory
        function ____exports.Generator(self, context)
            local generate, generateEncoderRotateMacros, deleteEncoderRotateMacros, updateMidiRemotes, addMidiRemotes, generateToggleInnerOuterInversion, createEncoderRotateMacros, createEncoderClickMacro, finalizeRemote, addMidiRemotesForEncoder, updateMidiRemotesForEncoderRotate, updateMidiRemotesForEncoderClick, generateFixedAmountMacroExamples, config, encoderNumbers, innerOuterToggleButton
            function generate(self)
                generateFixedAmountMacroExamples(nil)
                __TS__ArrayForEach(
                    encoderNumbers,
                    function(____, encoderNumber)
                        createEncoderClickMacro(nil, encoderNumber)
                    end
                )
                generateEncoderRotateMacros(nil)
                generateToggleInnerOuterInversion(nil)
                addMidiRemotes(nil)
            end

            function generateEncoderRotateMacros(self)
                __TS__ArrayForEach(
                    encoderNumbers,
                    function(____, encoderNumber)
                        if config.midiMappings[("encoder" .. tostring(encoderNumber)) .. "Rotate"].enabled then
                            createEncoderRotateMacros(nil, encoderNumber)
                        end
                    end
                )
            end

            function deleteEncoderRotateMacros(self)
                local im = context.instanceAssetManager
                __TS__ArrayForEach(
                    encoderNumbers,
                    function(____, encoderNumber)
                        local rotateAssetType = ("encoder" .. tostring(encoderNumber)) .. "Rotate"
                        if im:isProvisioned(rotateAssetType, "Macros", 1) then
                            im:delete(context.undo, "Macros", rotateAssetType)
                        end
                        do
                            local midiValue = 0
                            while midiValue <= 127 do
                                local assetType = AssetTypes:encoderRotateMacro(encoderNumber, midiValue)
                                if im:isProvisioned(assetType, "Macros", 1) then
                                    im:delete(context.undo, "Macros", assetType)
                                end
                                midiValue = midiValue + 1
                            end
                        end
                    end
                )
            end

            function updateMidiRemotes(self)
                clearAllRemotes(nil, context.of)
                deleteEncoderRotateMacros(nil)
                generateEncoderRotateMacros(nil)
                addMidiRemotes(nil)
            end

            function addMidiRemotes(self)
                __TS__ArrayForEach(
                    encoderNumbers,
                    function(____, encoderNumber)
                        addMidiRemotesForEncoder(nil, encoderNumber)
                    end
                )
                if config.enabled and config.midiMappings.toggleInnerOuterIndex.enabled then
                    innerOuterToggleButton:addMidiRemotes(
                        config.midiMappings.toggleInnerOuterIndex,
                        config.enabled,
                        function(____, remote) return finalizeRemote(nil, remote, "toggle") end
                    )
                end
            end

            function generateToggleInnerOuterInversion(self)
                innerOuterToggleButton:generate({ createCommand = function(____, action) return context
                    .externalActionCommandFactory:create({ type = "setInnerOuterInvertion", params = { instanceId = context.instanceId, state = action == "press" and "inverted" or "normal" } }) end })
            end

            function createEncoderRotateMacros(self, encoderNumber)
                local ____context_1 = context
                local instanceId = ____context_1.instanceId
                local maxAmount = config.maxAmount
                local midiRelativeMode = config.midiRelativeMode
                local relativeMidiMaps = RELATIVE_MIDI_MODES[midiRelativeMode]
                local rotateMacro = context.instanceAssetManager.provisionOrGet:macro(("encoder" .. tostring(encoderNumber)) ..
                "Rotate")
                rotateMacro:store({ label = ("Encoder " .. tostring(encoderNumber)) .. " Rotate " }):setLines({ { command = context.externalActionCommandFactory:create({ type = "encoderRotateAction", params = { instanceId = instanceId, encoderNumber = encoderNumber } }) } })
                local function createSetMidiValueMacro(self, amount)
                    local midiValue = relativeMidiMaps.amountToMidiValue[amount]
                    local macro = context.instanceAssetManager.provisionOrGet:macro(AssetTypes:encoderRotateMacro(
                    encoderNumber, midiValue))
                    macro:store({ label = (("Encoder " .. tostring(encoderNumber)) .. " val ") .. tostring(midiValue) })
                        :setLines({ { command = ((("LUA \"" .. TempGlobalVariableFactory(nil, context.pu.pluginId):encoder(encoderNumber, instanceId)) .. "=") .. tostring(midiValue)) .. "\"" } })
                    return macro
                end
                do
                    local amount = 1
                    while amount <= maxAmount do
                        createSetMidiValueMacro(nil, amount)
                        createSetMidiValueMacro(nil, -amount)
                        amount = amount + 1
                    end
                end
            end

            function createEncoderClickMacro(self, encoderNumber)
                local ____context_2 = context
                local instanceId = ____context_2.instanceId
                local macro = context.instanceAssetManager.provisionOrGet:macro(("encoder" .. tostring(encoderNumber)) ..
                "Click")
                macro:store({ label = ("Encoder " .. tostring(encoderNumber)) .. " Click" }):setLines({ { command = context.externalActionCommandFactory:create({ type = "encoderClickAction", params = { instanceId = instanceId, encoderNumber = encoderNumber } }) } })
            end

            function finalizeRemote(self, midiRemote, tag)
                midiRemote:getObj().name = context.midiRemotes:createRemoteName(context.instanceId, tag)
                midiRemote:lock()
            end

            function addMidiRemotesForEncoder(self, encoderNumber)
                updateMidiRemotesForEncoderRotate(nil, encoderNumber)
                updateMidiRemotesForEncoderClick(nil, encoderNumber)
            end

            function updateMidiRemotesForEncoderRotate(self, encoderNumber)
                local midiMappings = config.midiMappings
                local maxAmount = config.maxAmount
                local midiRelativeMode = config.midiRelativeMode
                local pluginEnabled = config.enabled
                local ____midiMappings_index_3 = midiMappings[("encoder" .. tostring(encoderNumber)) .. "Rotate"]
                local _enabled = ____midiMappings_index_3.enabled
                local midiIndex = ____midiMappings_index_3.midiIndex
                local midiChannel = ____midiMappings_index_3.midiChannel
                local enabled = pluginEnabled and _enabled
                if not enabled then
                    return
                end
                local rotateMacro = context.instanceAssetManager.get:macro(("encoder" .. tostring(encoderNumber)) ..
                "Rotate")
                local rotateRemote = context.of:HMidiRemotes():addRemote()
                rotateRemote:setProps({
                    enabled = enabled,
                    midiChannel = midiChannel,
                    midiIndex = midiIndex,
                    triggerOn = 0,
                    triggerOff = 0,
                    midiType = "Control",
                    key = "Go+"
                }):setTarget(rotateMacro)
                finalizeRemote(nil, rotateRemote, "rotate")
                local relativeMidiMaps = RELATIVE_MIDI_MODES[midiRelativeMode]
                local function createSetMidiValueRemote(self, midiValue)
                    local macro = context.instanceAssetManager.provisionOrGet:macro((("encoder" .. tostring(encoderNumber)) .. "MidiValue") ..
                    tostring(midiValue))
                    local midiRemote = context.of:HMidiRemotes():addRemote()
                    midiRemote:setProps({
                        enabled = enabled,
                        midiChannel = midiChannel,
                        midiIndex = midiIndex,
                        triggerOn = midiValue,
                        triggerOff = 0,
                        midiType = "Control",
                        key = "Go+"
                    }):setTarget(macro)
                    finalizeRemote(nil, midiRemote, "rotate")
                end
                local midiValues = {}
                do
                    local amount = 1
                    while amount <= maxAmount do
                        midiValues[#midiValues + 1] = relativeMidiMaps.amountToMidiValue[amount]
                        midiValues[#midiValues + 1] = relativeMidiMaps.amountToMidiValue[-amount]
                        amount = amount + 1
                    end
                end
                __TS__ArrayForEach(
                    __TS__ArrayReverse(__TS__ArraySort(midiValues)),
                    function(____, midiValue)
                        createSetMidiValueRemote(nil, midiValue)
                    end
                )
            end

            function updateMidiRemotesForEncoderClick(self, encoderNumber)
                local midiMappings = config.midiMappings
                local pluginEnabled = config.enabled
                local ____midiMappings_index_4 = midiMappings[("encoder" .. tostring(encoderNumber)) .. "Click"]
                local _enabled = ____midiMappings_index_4.enabled
                local midiType = ____midiMappings_index_4.midiType
                local midiIndex = ____midiMappings_index_4.midiIndex
                local midiChannel = ____midiMappings_index_4.midiChannel
                local enabled = pluginEnabled and _enabled
                if not enabled then
                    return
                end
                local macro = context.instanceAssetManager.get:macro(("encoder" .. tostring(encoderNumber)) .. "Click")
                local remote = context.of:HMidiRemotes():addRemote()
                remote:setProps({
                    enabled = enabled,
                    midiChannel = midiChannel,
                    midiIndex = midiIndex,
                    midiType = midiType,
                    key = "Go+"
                }):setTarget(macro)
                finalizeRemote(nil, remote, "click")
            end

            function generateFixedAmountMacroExamples(self)
                local createMacro
                function createMacro(self, direction)
                    local rotateUpMacro = context.instanceAssetManager.provisionOrGet:macro(("encoderRotate" .. direction) ..
                    "WithAmount")
                    rotateUpMacro:store({ label = ("Encoder Rotate " .. direction) .. " Template" }):setLines({ { command = context.externalActionCommandFactory:create({ type = "encoderRotateWithAmountAction", params = { encoderNumber = 1, amount = direction == "Right" and 1 or -1 } }) } })
                end

                createMacro(nil, "Right")
                createMacro(nil, "Left")
            end

            local ____context_0 = context
            local of = ____context_0.of
            local log = ____context_0.log
            config = context.instanceUserDataWrapper:getConfig()
            encoderNumbers = series(nil, 1, 5)
            innerOuterToggleButton = ExecutorToggle(
                nil,
                {
                    assetManager = context.instanceAssetManager,
                    assetTypePrefix = "toggleInnerOuter",
                    actionValueLabel = function(____, action) return action == "press" and "Encoders Inverted" or
                        "Encoders Normal" end,
                    actionName = "Toggle MIDI Encoders Inner/Outer",
                    of = of,
                    log = log
                }
            )
            return { generate = generate, updateMidiRemotes = updateMidiRemotes }
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.InstanceCreator"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Generator = require("plugins.MidiEncoders.src.Generator")
        local Generator = ____Generator.Generator
        local function createInstance(self, context)
            Generator(nil, context):generate()
            context.of:HMidiRemotes():getObj().enabled = true
        end
        ____exports.InstanceCreator = { createInstance = createInstance }
        return ____exports
    end,
    ["plugins.MidiEncoders.src.InstanceRuntime"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____InstanceRuntimeBase = require("lib.plugin.InstanceRuntimeBase")
        local InstanceRuntimeBase = ____InstanceRuntimeBase.InstanceRuntimeBase
        ____exports.InstanceRuntime = __TS__Class()
        local InstanceRuntime = ____exports.InstanceRuntime
        InstanceRuntime.name = "InstanceRuntime"
        __TS__ClassExtends(InstanceRuntime, InstanceRuntimeBase)
        function InstanceRuntime.prototype.____constructor(self, instanceId, pluginInfo, parentLog, pluginRuntime)
            InstanceRuntimeBase.prototype.____constructor(
                self,
                instanceId,
                pluginInfo,
                parentLog,
                pluginRuntime
            )
            self.innerOuterInvertionState = "normal"
        end

        function InstanceRuntime.prototype.setConfig(self, config)
            self.config = config
        end

        function InstanceRuntime.prototype.getConfig(self)
            return self.config
        end

        function InstanceRuntime.prototype.getInnerOuterInvertion(self)
            return self.innerOuterInvertionState
        end

        function InstanceRuntime.prototype.setInnerOuterInvertion(self, state)
            self.innerOuterInvertionState = state
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.Runtime"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Logger = require("lib.Logger")
        local LogLevel = ____Logger.LogLevel
        local ____plugin = require("lib.plugin.index")
        local PluginRuntime = ____plugin.PluginRuntime
        local ____Utils = require("lib.Utils")
        local objectValues = ____Utils.objectValues
        local series = ____Utils.series
        local ______env = require("plugins.MidiEncoders.src.__env")
        local PLUGIN_ENV = ______env.PLUGIN_ENV
        local ____common = require("plugins.MidiEncoders.src.common")
        local NUM_OF_ENCODERS = ____common.NUM_OF_ENCODERS
        local ____InstanceRuntime = require("plugins.MidiEncoders.src.InstanceRuntime")
        local InstanceRuntime = ____InstanceRuntime.InstanceRuntime
        ____exports.Runtime = __TS__Class()
        local Runtime = ____exports.Runtime
        Runtime.name = "Runtime"
        __TS__ClassExtends(Runtime, PluginRuntime)
        function Runtime.prototype.____constructor(self, pluginId, pluginInfo)
            PluginRuntime.prototype.____constructor(self,
                { pluginId = pluginId, pluginInfo = pluginInfo, pluginEnv = PLUGIN_ENV, logLevel = PLUGIN_ENV.env ==
                "prod" and LogLevel.ERROR or LogLevel.TRACE })
            self.encoderAccumTurnAmountMutex = {}
            self.encoderAccumTurnAmount = {}
            self.encodersTouchMutex = self.mutexFactory:create(self.log:subLogger("Touch"))
            __TS__ArrayForEach(
                series(nil, 1, NUM_OF_ENCODERS),
                function(____, encoderNumber)
                    local mutex = self.mutexFactory:create()
                    self.encoderAccumTurnAmountMutex[encoderNumber] = mutex
                    self.encoderAccumTurnAmount[encoderNumber] = 0
                end
            )
        end

        function Runtime.prototype.destroy(self)
            PluginRuntime.prototype.destroy(self)
            self.encodersTouchMutex:destroy()
            for ____, mutex in ipairs(objectValues(nil, self.encoderAccumTurnAmountMutex)) do
                mutex:destroy()
            end
        end

        function Runtime.prototype.onPluginRegistryEvent(self, event)
        end

        function Runtime.prototype.createInstanceRuntime(self, instanceId, pluginInfo, log)
            return __TS__New(
                InstanceRuntime,
                instanceId,
                pluginInfo,
                log,
                self
            )
        end

        function Runtime.prototype.getEncoderTouchMutex(self)
            return self.encodersTouchMutex
        end

        function Runtime.prototype.addToEncoderAccumAmount(self, encoderNumber, amount)
            self.encoderAccumTurnAmountMutex[encoderNumber]:lock()
            local ____self_encoderAccumTurnAmount_0, ____encoderNumber_1 = self.encoderAccumTurnAmount, encoderNumber
            ____self_encoderAccumTurnAmount_0[____encoderNumber_1] = ____self_encoderAccumTurnAmount_0
            [____encoderNumber_1] + amount
            local newAmount = self.encoderAccumTurnAmount[encoderNumber]
            self.encoderAccumTurnAmountMutex[encoderNumber]:unlock()
            return newAmount
        end

        function Runtime.prototype.getAndResetEncoderAccumAmount(self, encoderNumber)
            self.encoderAccumTurnAmountMutex[encoderNumber]:lock()
            local amount = self.encoderAccumTurnAmount[encoderNumber]
            self.encoderAccumTurnAmount[encoderNumber] = 0
            self.encoderAccumTurnAmountMutex[encoderNumber]:unlock()
            return amount
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.PPlugin"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__ArrayReverse = ____lualib.__TS__ArrayReverse
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ObjectFactory = require("lib.ObjectFactory")
        local ObjectFactory = ____ObjectFactory.ObjectFactory
        local ____plugin = require("lib.plugin.index")
        local PluginBase = ____plugin.PluginBase
        local PluginUtils = ____plugin.PluginUtils
        local ____common = require("plugins.MidiEncoders.src.common")
        local clearAllRemotes = ____common.clearAllRemotes
        local createMidiRemoteNameInstancePrefix = ____common.createMidiRemoteNameInstancePrefix
        local ____ContextBuilder = require("plugins.MidiEncoders.src.ContextBuilder")
        local ContextBuilder = ____ContextBuilder.ContextBuilder
        local ____DataMigrations = require("plugins.MidiEncoders.src.DataMigrations")
        local userDataMigrations = ____DataMigrations.userDataMigrations
        local ____defaultConfig = require("plugins.MidiEncoders.src.defaultConfig")
        local createEmptyUserData = ____defaultConfig.createEmptyUserData
        local PLUGIN_ASSETS_MAX_CAPACITY = ____defaultConfig.PLUGIN_ASSETS_MAX_CAPACITY
        local ____EventHandler = require("plugins.MidiEncoders.src.EventHandler")
        local EventHandler = ____EventHandler.EventHandler
        local ____Generator = require("plugins.MidiEncoders.src.Generator")
        local Generator = ____Generator.Generator
        local ____InstanceCreator = require("plugins.MidiEncoders.src.InstanceCreator")
        local InstanceCreator = ____InstanceCreator.InstanceCreator
        local ______env = require("plugins.MidiEncoders.src.__env")
        local PLUGIN_ENV = ______env.PLUGIN_ENV
        local ______imagesB64 = require("plugins.MidiEncoders.src.__imagesB64.index")
        local builtInImages = ______imagesB64.images
        ____exports.PPlugin = __TS__Class()
        local PPlugin = ____exports.PPlugin
        PPlugin.name = "PPlugin"
        __TS__ClassExtends(PPlugin, PluginBase)
        function PPlugin.prototype.____constructor(self, pluginInfo, displayHandle, runtime)
            local pu = PluginUtils(nil, PLUGIN_ENV, pluginInfo)
            local contextBuilder = ContextBuilder(nil, pu, displayHandle, runtime)
            PluginBase.prototype.____constructor(self, {
                pluginEnv = PLUGIN_ENV,
                pluginInfo = pluginInfo,
                contextBuilder = contextBuilder,
                builtInImages = builtInImages,
                createDefaultUserData = createEmptyUserData,
                pluginAssetsCapacity = PLUGIN_ASSETS_MAX_CAPACITY,
                displayHandle = displayHandle,
                dataMigrations = userDataMigrations,
                runtime = runtime
            })
            self.userEventHandler = EventHandler(
                nil,
                runtime.log:subLogger("ActionHandler")
            )
        end

        function PPlugin.prototype.initHooks(self, context)
        end

        function PPlugin.prototype.createInitialInstanceData(self, instanceConfig)
            return { config = instanceConfig, state = {} }
        end

        function PPlugin.prototype.createInstance(self, instanceCreateParams)
            self:provisionInstance(
                instanceCreateParams.config,
                function(____, context)
                    InstanceCreator:createInstance(context)
                end
            )
        end

        function PPlugin.prototype.onInstanceDelete(self, context, instanceId)
            for ____, remote in ipairs(__TS__ArrayReverse(context.of:HMidiRemotes():getRemotes())) do
                if remote.name == createMidiRemoteNameInstancePrefix(nil, instanceId) then
                    remote:unlock()
                    remote:delete()
                end
            end
        end

        function PPlugin.prototype.updateInstanceConfig(self, instanceId, config)
            self:handleInstanceEvent(
                "Update Config",
                instanceId,
                function(____, context)
                    local ____context_0 = context
                    local undo = ____context_0.undo
                    context.userDataWrapper:setInstanceConfig(instanceId, config)
                    self:cleanMIDIRemotes(undo)
                    Generator(nil, context):updateMidiRemotes()
                    self:getRuntime():getOrCreateInstanceRuntime(instanceId):setConfig(config)
                end
            )
        end

        function PPlugin.prototype.onInstall(self, context, oldPluginId)
            local ____context_1 = context
            local log = ____context_1.log
            local userDataWrapper = ____context_1.userDataWrapper
            local numOfInstances = userDataWrapper:getNumOfInstances()
            log:trace("onInstall(): numOfInstances=" .. tostring(numOfInstances))
            if numOfInstances > 0 then
                __TS__ArrayForEach(
                    userDataWrapper:getInstanceIds(),
                    function(____, instanceId)
                        context.instanceManager:loadUserInstance(instanceId,
                            context.pluginData.userData.instances[instanceId])
                        InstanceCreator:createInstance(context:buildInstanceContext(instanceId))
                    end
                )
            end
        end

        function PPlugin.prototype.onUninstall(self, pluginData, undo, displayHandle, subPoolRegistryData, log)
            self:cleanMIDIRemotes(undo)
        end

        function PPlugin.prototype.cleanMIDIRemotes(self, undo)
            clearAllRemotes(
                nil,
                __TS__New(ObjectFactory, { undoBlock = undo })
            )
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.EncoderRotator"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____DebugUtils = require("lib.DebugUtils")
        local DebugUtils = ____DebugUtils.DebugUtils
        local ____Utils = require("lib.Utils")
        local series = ____Utils.series
        local ____common = require("plugins.MidiEncoders.src.common")
        local NUM_OF_ENCODERS = ____common.NUM_OF_ENCODERS
        local ____EncoderLocator = require("plugins.MidiEncoders.src.EncoderLocator")
        local EncoderLocator = ____EncoderLocator.EncoderLocator
        --- The Magical Numbers
        -- With Radius 20, and angle step of 0.28 radians.
        -- The each step increases the rotation with 1%.
        -- Which equals to the actual console encoders in Coarse resolution, per one encoder click.
        local TOUCH_ROTATE_RADIUS = 20
        local TOUCH_ROTATE_ANGULAR_STEP_RADIANS = 0.28
        local MAX_ANGLE = 3.05433
        function ____exports.EncoderRotator(self, plugin, log)
            local rotate, rotateAccumulatedAmount, getAllAccumAmounts, rotateAllEncoders, rotateEncoder, touchRotate, amountMode
            function rotate(self, encoderNumber, amount)
                local newAmount = plugin:getRuntime():addToEncoderAccumAmount(encoderNumber, amount)
                log:trace((("Encoder " .. tostring(encoderNumber)) .. ": Added to amount: newAmount = ") ..
                tostring(newAmount))
                rotateAccumulatedAmount(nil)
            end

            function rotateAccumulatedAmount(self)
                local runtime = plugin:getRuntime()
                local touchMutex = runtime:getEncoderTouchMutex()
                if touchMutex:tryLock() then
                    do
                        local function ____catch(err)
                            log:error("ERROR: " .. tostring(err))
                        end
                        local ____try, ____hasReturned = pcall(function()
                            local quit = false
                            repeat
                                do
                                    local ____getAllAccumAmounts_result_0 = getAllAccumAmounts(nil, runtime)
                                    local encoderAmounts = ____getAllAccumAmounts_result_0.encoderAmounts
                                    local nonZeroAmountsExist = ____getAllAccumAmounts_result_0.nonZeroAmountsExist
                                    if nonZeroAmountsExist then
                                        rotateAllEncoders(nil, encoderAmounts)
                                    else
                                        quit = true
                                    end
                                end
                            until quit
                        end)
                        if not ____try then
                            ____catch(____hasReturned)
                        end
                        do
                            touchMutex:unlock()
                        end
                    end
                else
                    log:trace("Could not get touch lock")
                end
            end

            function getAllAccumAmounts(self, runtime)
                local nonZeroAmountsExist = false
                local encoderAmounts = __TS__ArrayMap(
                    series(nil, 1, NUM_OF_ENCODERS),
                    function(____, encoderNumber)
                        local amount = runtime:getAndResetEncoderAccumAmount(encoderNumber)
                        if math.abs(amount) > 0 then
                            nonZeroAmountsExist = true
                        end
                        return amount
                    end
                )
                return { encoderAmounts = encoderAmounts, nonZeroAmountsExist = nonZeroAmountsExist }
            end

            function rotateAllEncoders(self, encoderAmounts)
                local rotateDone = false
                __TS__ArrayForEach(
                    encoderAmounts,
                    function(____, amount, encoderIndex)
                        if math.abs(amount) > 0 then
                            local encoderNumber = encoderIndex + 1
                            rotateEncoder(nil, encoderNumber,
                                amountMode == "linear" and amount or
                                (amount > 0 and amount * amount or -(amount * amount)))
                            rotateDone = true
                        end
                    end
                )
                return rotateDone
            end

            function rotateEncoder(self, encoderNumber, amount)
                local wheelCenter = EncoderLocator(nil, log):getEncoderWheelCenter(encoderNumber)
                if wheelCenter ~= nil then
                    touchRotate(nil, wheelCenter, amount, encoderNumber)
                end
            end

            function touchRotate(self, center, amount, encoderNumber)
                local touchId = encoderNumber
                local radius = 20
                local screenNumber = 1
                local function polarPos1(self, angle)
                    return {
                        x = center.x + math.cos(angle) * TOUCH_ROTATE_RADIUS,
                        y = center.y + math.sin(angle) * radius
                    }
                end
                local function doTouch(self, action, pos)
                    log:trace(((((((tostring(touchId) .. "-") .. action) .. ": [") .. tostring(pos.x)) .. ",") .. tostring(pos.y)) ..
                    "]")
                    Touch(
                        screenNumber,
                        action,
                        touchId,
                        pos.x,
                        pos.y
                    )
                end
                local angle = amount > 0 and math.min(amount * TOUCH_ROTATE_ANGULAR_STEP_RADIANS, MAX_ANGLE) or
                math.max(amount * TOUCH_ROTATE_ANGULAR_STEP_RADIANS, -MAX_ANGLE)
                log:trace((((("ROTATE: amount=" .. tostring(amount)) .. ", radius=") .. tostring(radius)) .. ", angle=") ..
                tostring(angle * 180))
                doTouch(nil, "press", center)
                doTouch(
                    nil,
                    "move",
                    polarPos1(nil, 0)
                )
                doTouch(
                    nil,
                    "move",
                    polarPos1(nil, angle)
                )
                doTouch(
                    nil,
                    "release",
                    polarPos1(nil, angle)
                )
            end

            amountMode = "linear"
            return { rotate = rotate }
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.ExternalActionHandler"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____common = require("plugins.MidiEncoders.src.common")
        local NUM_OF_ENCODERS = ____common.NUM_OF_ENCODERS
        local ____EncoderLocator = require("plugins.MidiEncoders.src.EncoderLocator")
        local EncoderLocator = ____EncoderLocator.EncoderLocator
        local ____EncoderRotator = require("plugins.MidiEncoders.src.EncoderRotator")
        local EncoderRotator = ____EncoderRotator.EncoderRotator
        local ____RelativeMidiMap = require("plugins.MidiEncoders.src.RelativeMidiMap")
        local RELATIVE_MIDI_MODES = ____RelativeMidiMap.RELATIVE_MIDI_MODES
        local ____TempGlobalVariableFactory = require("plugins.MidiEncoders.src.TempGlobalVariableFactory")
        local TempGlobalVariableFactory = ____TempGlobalVariableFactory.TempGlobalVariableFactory
        local GlobalVariable = _G
        local CLICK_TOUCH_IF_OFFSET = NUM_OF_ENCODERS
        ____exports.ExternalActionHandler = function(____, plugin, log)
            local getEncoderAmount, tempGlobalVariableFactory
            function getEncoderAmount(self, instanceId, encoderNumber)
                local midiValue = GlobalVariable[tempGlobalVariableFactory:encoder(encoderNumber, instanceId)]
                if midiValue == nil then
                    error(log:msg("midiValue is undefined encoderNumber=" .. tostring(encoderNumber)))
                end
                local instanceRuntime = plugin:getRuntime():getOrCreateInstanceRuntime(instanceId)
                local config = instanceRuntime:getConfig()
                if config == nil then
                    config = plugin:handleInstanceEventReadOnly(
                        "GetConfig",
                        instanceId,
                        function(____, context) return context.instanceDataWrapper:getConfig() end
                    )
                    instanceRuntime:setConfig(config)
                end
                local relativeMidiMaps = RELATIVE_MIDI_MODES[config.midiRelativeMode]
                local amount = relativeMidiMaps.midiValueToAmount[midiValue]
                if amount == nil then
                    error(log:msg((("amount is undefined encoderNumber=" .. tostring(encoderNumber)) .. ", mode=") ..
                    config.midiRelativeMode))
                end
                if config.rotateDirection == "inverted" then
                    amount = -amount
                end
                return amount
            end

            tempGlobalVariableFactory = TempGlobalVariableFactory(nil, plugin.pu.pluginId)
            local function modifyEncoderNumber(self, instanceId, rawEncoderNumber)
                local invertedEncoders = plugin:getRuntime():getOrCreateInstanceRuntime(instanceId)
                :getInnerOuterInvertion()
                return invertedEncoders == "normal" and rawEncoderNumber or rawEncoderNumber + 5
            end
            return {
                handle = function(self, action)
                    repeat
                        local ____switch5 = action.type
                        local ____cond5 = ____switch5 == "encoderRotateAction"
                        if ____cond5 then
                            do
                                local ____action_params_0 = action.params
                                local instanceId = ____action_params_0.instanceId
                                local rawEncoderNumber = ____action_params_0.encoderNumber
                                local amount = getEncoderAmount(nil, instanceId, rawEncoderNumber)
                                local encoderNumber = modifyEncoderNumber(nil, instanceId, rawEncoderNumber)
                                EncoderRotator(nil, plugin, log):rotate(encoderNumber, amount)
                                break
                            end
                        end
                        ____cond5 = ____cond5 or ____switch5 == "encoderRotateWithAmountAction"
                        if ____cond5 then
                            do
                                local ____action_params_1 = action.params
                                local encoderNumber = ____action_params_1.encoderNumber
                                local amount = ____action_params_1.amount
                                EncoderRotator(nil, plugin, log):rotate(encoderNumber, amount)
                                break
                            end
                        end
                        ____cond5 = ____cond5 or ____switch5 == "encoderClickAction"
                        if ____cond5 then
                            do
                                local ____action_params_2 = action.params
                                local instanceId = ____action_params_2.instanceId
                                local rawEncoderNumber = ____action_params_2.encoderNumber
                                local encoderNumber = modifyEncoderNumber(nil, instanceId, rawEncoderNumber)
                                local locator = EncoderLocator(nil, log)
                                local screenNumber = locator:getEncodersDisplayNumber()
                                local touchId = encoderNumber + CLICK_TOUCH_IF_OFFSET
                                local encoderPlaceCenter = locator:getEncoderPlaceCenter(encoderNumber)
                                if encoderPlaceCenter ~= nil then
                                    local touchMutex = plugin:getRuntime():getEncoderTouchMutex()
                                    touchMutex:lock()
                                    log:trace(((((tostring(touchId) .. "-press&release}: [") .. tostring(encoderPlaceCenter.x)) .. ",") .. tostring(encoderPlaceCenter.y)) ..
                                    "]")
                                    Touch(
                                        screenNumber,
                                        "press",
                                        touchId,
                                        encoderPlaceCenter.x,
                                        encoderPlaceCenter.y
                                    )
                                    Touch(
                                        screenNumber,
                                        "release",
                                        touchId,
                                        encoderPlaceCenter.x,
                                        encoderPlaceCenter.y
                                    )
                                    touchMutex:unlock()
                                end
                                break
                            end
                        end
                        ____cond5 = ____cond5 or ____switch5 == "setInnerOuterInvertion"
                        if ____cond5 then
                            do
                                local ____action_params_3 = action.params
                                local instanceId = ____action_params_3.instanceId
                                local state = ____action_params_3.state
                                assert(
                                    state ~= nil,
                                    log:msg("setInnerOuterInvertion action: state is undefined")
                                )
                                log:trace("setInnerOuterInvertion: " .. state)
                                plugin:getRuntime():getOrCreateInstanceRuntime(instanceId):setInnerOuterInvertion(state)
                                break
                            end
                        end
                        do
                            error("Unsupported external plugin action type: " .. tostring(action.type))
                        end
                    until true
                end
            }
        end
        return ____exports
    end,
    ["plugins.MidiEncoders.src.__pluginId"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        ____exports.PLUGIN_ID = "pro_plugins__plugin_template__v0_1_0"
        return ____exports
    end,
    ["lib.ui.dialogs.PluginToubleshootingDialogV2"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____Logger = require("lib.Logger")
        local LogLevel = ____Logger.LogLevel
        local ____dialogs = require("lib.ui.dialogs.index")
        local ActionDialogV2 = ____dialogs.ActionDialogV2
        local ____Utils = require("lib.Utils")
        local typed = ____Utils.typed
        function ____exports.PluginTroubleshootingDialogV2(self, plugin)
            return __TS__New(
                ActionDialogV2,
                plugin,
                {
                    id = "plugin_troubleshooting",
                    width = 800,
                    title = "ToubleShooting",
                    message =
                    "Contact:\n        \nhepi@ma3-pro-plugins.com\n       \nYou can try setting the Log Level to\n\nDEBUG or TRACE to get more info.\n\n_\n",
                    messageWidth = "60%",
                    body = function(____, ui)
                        return ui:HInputFieldGrid({
                            labelColumnSize = { sizePolicy = "Fixed", size = 150 },
                            valueColumnSize = { sizePolicy = "Stretch", size = 1 },
                            rowSize = { sizePolicy = "Fixed", size = 50 },
                            data = { logLevel = plugin:getLogLevel() },
                            inputFields = { typed(
                                nil,
                                {
                                    id = "logLevel",
                                    fieldType = "selection",
                                    label = "Log Level",
                                    items = {
                                        { id = LogLevel.TRACE, label = "TRACE" },
                                        { id = LogLevel.DEBUG, label = "DEBUG" },
                                        { id = LogLevel.INFO,  label = "INFO" },
                                        { id = LogLevel.WARN,  label = "WARN" },
                                        { id = LogLevel.ERROR, label = "ERROR" }
                                    },
                                    onChange = function(____, itemId)
                                        plugin:setLogLevel(itemId)
                                    end
                                }
                            ) }
                        })
                    end,
                    actions = {
                        id = "actions",
                        direction = "Horizontal",
                        actions = { {
                            label = "Close",
                            action = function()
                                plugin:dialogAction({ type = "PopDialog" })
                            end
                        } }
                    }
                }
            )
        end

        return ____exports
    end,
    ["lib.ui.dialogs.PluginAboutDialogV2"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ActionDialogV2 = require("lib.ui.dialogs.ActionDialogV2")
        local ActionDialogV2 = ____ActionDialogV2.ActionDialogV2
        local ____PluginToubleshootingDialogV2 = require("lib.ui.dialogs.PluginToubleshootingDialogV2")
        local PluginTroubleshootingDialogV2 = ____PluginToubleshootingDialogV2.PluginTroubleshootingDialogV2
        function ____exports.PluginAboutDialogV2(self, plugin)
            local ____plugin_pu_pluginEnv_0 = plugin.pu.pluginEnv
            local pluginName = ____plugin_pu_pluginEnv_0.pluginName
            local pluginVersion = ____plugin_pu_pluginEnv_0.pluginVersion
            local env = ____plugin_pu_pluginEnv_0.env
            local pluginId = ____plugin_pu_pluginEnv_0.pluginId
            return __TS__New(
                ActionDialogV2,
                plugin,
                {
                    id = plugin.pu.pluginId .. "_about",
                    width = 600,
                    title = "About",
                    message = ((("\n" .. pluginName) .. "\n            \nDeveloped by: MA3 Pro Plugins\n            \nwww.ma3-pro-plugins.com\n            \nVersion: ") .. pluginVersion .. (env == "dev" and "_DEV" or "")) ..
                    "\n            ",
                    actions = {
                        id = "actions",
                        direction = "Horizontal",
                        actions = {
                            {
                                label = "Troubleshooting",
                                action = function()
                                    plugin:dialogAction({
                                        type = "PushDialog",
                                        dialog = PluginTroubleshootingDialogV2(nil, plugin)
                                    })
                                end
                            },
                            {
                                label = "Back",
                                action = function()
                                    plugin:dialogAction({ type = "PopDialog" })
                                end
                            }
                        }
                    }
                }
            )
        end

        return ____exports
    end,
    ["lib.ui.dialogs.PluginMainDialogSingleInstance"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____dialogs = require("lib.ui.dialogs.index")
        local UninstallDialogV2 = ____dialogs.UninstallDialogV2
        local ____PluginAboutDialogV2 = require("lib.ui.dialogs.PluginAboutDialogV2")
        local PluginAboutDialogV2 = ____PluginAboutDialogV2.PluginAboutDialogV2
        local ____UserDialogBase = require("lib.ui.dialogs.UserDialogBase")
        local UserDialogBase = ____UserDialogBase.UserDialogBase
        ____exports.PluginMainDialogSingleInstance = __TS__Class()
        local PluginMainDialogSingleInstance = ____exports.PluginMainDialogSingleInstance
        PluginMainDialogSingleInstance.name = "PluginMainDialogSingleInstance"
        __TS__ClassExtends(PluginMainDialogSingleInstance, UserDialogBase)
        function PluginMainDialogSingleInstance.prototype.____constructor(self, params)
            self.params = params
            local ____params_0 = params
            local plugin = ____params_0.plugin
            UserDialogBase.prototype.____constructor(self, params.plugin,
                { id = plugin.pu.pluginId .. "_main", title = plugin.pu.pluginEnv.pluginName })
        end

        function PluginMainDialogSingleInstance.prototype.getContent(self)
            local ____self_params_1 = self.params
            local plugin = ____self_params_1.plugin
            local getActions = ____self_params_1.getActions
            local onInstallClicked = ____self_params_1.onInstallClicked
            local log = plugin:getRuntime().log
            log:trace("PluginMainDialogSingleInstance.show()")
            local ____plugin_pu_pluginEnv_2 = plugin.pu.pluginEnv
            local pluginName = ____plugin_pu_pluginEnv_2.pluginName
            local isInstalled = plugin:isInstalled()
            local instanceIds = plugin:getInstanceIds()
            local actions = {}
            if #instanceIds == 0 then
                actions[#actions + 1] = {
                    label = "Install",
                    action = function()
                        onInstallClicked(nil)
                    end
                }
            end
            if isInstalled and instanceIds ~= nil and #instanceIds == 1 then
                for ____, action in ipairs(getActions(nil, instanceIds[1])) do
                    actions[#actions + 1] = action
                end
            end
            if isInstalled then
                actions[#actions + 1] = {
                    label = "Uninstall",
                    action = function()
                        if plugin.pu.pluginEnv.env == "dev" then
                            plugin:uninstall(self.plugin.displayHandle)
                            plugin:dialogAction({ type = "RefreshDialog" })
                        else
                            plugin:dialogAction({
                                type = "ReplaceDialog",
                                dialog = UninstallDialogV2(nil, plugin)
                            })
                        end
                    end
                }
            end
            actions[#actions + 1] = {
                label = "About",
                action = function()
                    plugin:dialogAction({
                        type = "PushDialog",
                        dialog = PluginAboutDialogV2(nil, plugin)
                    })
                end
            }
            local grid = self.ui:HActionList({
                id = "selectPluginOptions",
                actions = actions,
                direction = "Vertical",
                actionHeight = 100,
                textAlignmentH = "Center"
            })
            return grid
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.ui.ConfigurationHelpDialogs"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____dialogs = require("lib.ui.dialogs.index")
        local AlertDialogV2 = ____dialogs.AlertDialogV2
        function ____exports.RELATIVE_MODE_HELP_DIALOG(self, plugin)
            return __TS__New(AlertDialogV2, plugin, {
                id = "relativeModeHelp",
                title = "Relative Mode Help",
                font = "console20",
                align = "Left",
                width = 800,
                message =
                "\nStandard MIDI Relative modes:                             \n\n\n                      MIDI  | Relative | MIDI  | Relative \n\n                      Value | Amount   | Value | Amount   \n\n                      ------+----------+-------+----------\n\nMode 1 - (2's comp):  1     | 1        | 127   | -1       \n\n                      2     | 2        | 126   | -2       \n\n                      ------+----------+-------+----------\n\nMode 2 - (Offset):    65    | 1        | 63    | -1       \n\n                      66    | 2        | 62    | -2       \n\n                      ------+----------+-------+----------\n\nMode 3 - (SignBit):   1     | 1        | 65    | -1       \n\n                      2     | 2        | 66    | -2       \n\n"
            })
        end

        function ____exports.FLIP_INNER_OUTER_HELP_DIALOG(self, plugin)
            return __TS__New(AlertDialogV2, plugin, {
                id = "flipInnerOuterHelp",
                title = "Flip Inner/Outer Help",
                font = "console20",
                align = "Left",
                width = 800,
                message =
                "\nFlips the encoders 1-5 (Inner encoder) to controll\n\nencoders 6-10 (Outer encoders).\n\n\n\nEncoders 5 and 10 are the ScreenEncoders which scroll X and Y in the selected window.\n\n\n\nThe outer encoders (6-9) are mainly in use in 3D view setup,\n\nLayoutView setup, Timecode view, etc...\n\n"
            })
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.ui.CreateOrConfigureMidiEncodersDialogV3"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__Class = ____lualib.__TS__Class
        local __TS__ClassExtends = ____lualib.__TS__ClassExtends
        local __TS__Spread = ____lualib.__TS__Spread
        local __TS__SparseArrayNew = ____lualib.__TS__SparseArrayNew
        local __TS__SparseArrayPush = ____lualib.__TS__SparseArrayPush
        local __TS__SparseArraySpread = ____lualib.__TS__SparseArraySpread
        local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
        local __TS__ArrayMap = ____lualib.__TS__ArrayMap
        local __TS__ArrayReduce = ____lualib.__TS__ArrayReduce
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____ui = require("lib.ui.index")
        local UIColors = ____ui.UIColors
        local ____components = require("lib.ui.components.index")
        local DEFAULT_DIVIDER_WIDTH = ____components.DEFAULT_DIVIDER_WIDTH
        local HELP_ICON_WIDTH = ____components.HELP_ICON_WIDTH
        local TableDivider = ____components.TableDivider
        local ____dialogs = require("lib.ui.dialogs.index")
        local UserDialogBase = ____dialogs.UserDialogBase
        local ____Utils = require("lib.Utils")
        local objectKeys = ____Utils.objectKeys
        local objectValues = ____Utils.objectValues
        local series = ____Utils.series
        local typed = ____Utils.typed
        local ____defaultConfig = require("plugins.MidiEncoders.src.defaultConfig")
        local createDefaultConfig = ____defaultConfig.createDefaultConfig
        local ____ConfigurationHelpDialogs = require("plugins.MidiEncoders.src.ui.ConfigurationHelpDialogs")
        local FLIP_INNER_OUTER_HELP_DIALOG = ____ConfigurationHelpDialogs.FLIP_INNER_OUTER_HELP_DIALOG
        local RELATIVE_MODE_HELP_DIALOG = ____ConfigurationHelpDialogs.RELATIVE_MODE_HELP_DIALOG
        local ROW_HEIGHT = 50
        local FIELD_LABEL_WIDTH = 280
        local FIELD_LABEL_TEXT_ALIGN = "Left"
        local DIVIDER_COLOR = UIColors.FrameColor
        ____exports.ALL_MIDI_RELATIVE_MODES = { { id = "Mode1-2comp", label = "Mode 1 : Two`s Complement" }, { id = "Mode2-offset", label = "Mode 2 : Binary Offset" }, { id = "Mode3-SignBit", label = "Mode 3 : Singed Magnitude" } }
        ____exports.CreateOrConfigureMidiEncodersDialogV3 = __TS__Class()
        local CreateOrConfigureMidiEncodersDialogV3 = ____exports.CreateOrConfigureMidiEncodersDialogV3
        CreateOrConfigureMidiEncodersDialogV3.name = "CreateOrConfigureMidiEncodersDialogV3"
        __TS__ClassExtends(CreateOrConfigureMidiEncodersDialogV3, UserDialogBase)
        function CreateOrConfigureMidiEncodersDialogV3.prototype.____constructor(self, plugin, options)
            UserDialogBase.prototype.____constructor(self, plugin,
                { id = "configure_midi_ecndoers", title = "MIDI Encoders Configuration", width = 600 })
            self.plugin = plugin
            self.options = options
            self.channelInputBoxes = {}
        end

        function CreateOrConfigureMidiEncodersDialogV3.prototype.getContent(self)
            local plugin = self.plugin
            local options = self.options
            local log = plugin:getRuntime().log
            log:trace("CreateOrConfigureMidiEncodersDialogV3.show()")
            local ____temp_0 = self:getInitialConfig()
            local config = ____temp_0.instanceConfig
            local userDataFromOldVersion = ____temp_0.userDataFromOldVersion
            local function submit(____, caller)
                if options.type == "create" then
                    local ____plugin_4 = plugin
                    local ____plugin_install_5 = plugin.install
                    local ____self_plugin_displayHandle_3 = self.plugin.displayHandle
                    local ____userDataFromOldVersion_userData_1 = userDataFromOldVersion
                    if ____userDataFromOldVersion_userData_1 ~= nil then
                        ____userDataFromOldVersion_userData_1 = ____userDataFromOldVersion_userData_1.userData
                    end
                    ____plugin_install_5(____plugin_4, ____self_plugin_displayHandle_3,
                        ____userDataFromOldVersion_userData_1)
                    if userDataFromOldVersion == nil then
                        plugin:createInstance({ config = config, createOptions = {} })
                    end
                else
                    plugin:updateInstanceConfig(options.instanceId, config)
                end
                plugin:dialogAction({ type = "PopDialog" })
            end
            local midiInDeviceGrid = self:createMidiInDeviceGrid()
            local inputFieldsGrid = self:createInputFieldsGrid(config)
            local midiMappingTableGrid = self:createMidiMappingGrid(config)
            local formActionsGrid = self.ui:HHorizontalGrid({
                children = {
                    {
                        comp = self.ui:UIButton({ id = "submit", label = options.type == "create" and "Install" or
                        "Update", signals = { clicked = submit } }),
                        item = { sizePolicy = "Stretch", size = 1 }
                    },
                    {
                        comp = self.ui:UIButton({
                            id = "cancel",
                            label = "Cancel",
                            signals = {
                                clicked = function()
                                    self.plugin:dialogAction({ type = "PopDialog" })
                                end
                            }
                        }),
                        item = { sizePolicy = "Stretch", size = 1 }
                    }
                }
            })
            local divider = self.ui:UIText({ backColor = DIVIDER_COLOR })
            local ____self_7 = self.ui
            local ____self_7_HVerticalGrid_8 = ____self_7.HVerticalGrid
            local ____array_6 = __TS__SparseArrayNew(__TS__Spread(options.type == "create" and
            userDataFromOldVersion ~= nil and ({ {
                comp = self.ui:UIText({ text = "Loaded configuration from version " .. userDataFromOldVersion.oldVersion, backColor = UIColors.LabelBG }),
                item = { sizePolicy = "Fixed", size = ROW_HEIGHT }
            } }) or ({})))
            __TS__SparseArrayPush(
                ____array_6,
                { comp = midiInDeviceGrid, item = { sizePolicy = "Content" } },
                { comp = inputFieldsGrid, item = { sizePolicy = "Content" } },
                { comp = divider, item = { sizePolicy = "Fixed", size = DEFAULT_DIVIDER_WIDTH } },
                { comp = midiMappingTableGrid, item = { sizePolicy = "Content" } },
                { comp = formActionsGrid, item = { sizePolicy = "Fixed", size = 100 } }
            )
            local formGrid = ____self_7_HVerticalGrid_8(
                ____self_7,
                { children = { __TS__SparseArraySpread(____array_6) } }
            )
            return formGrid
        end

        function CreateOrConfigureMidiEncodersDialogV3.prototype.createMidiInDeviceGrid(self)
            local uiFactory = self.ui
            local deviceName = Root().StationSettings.LocalSettings.OnPCMidiInDeviceName
            local function openOnpcSettings()
                self:close()
                Timer(
                    function()
                        CmdIndirect("Menu OnpcSettings")
                    end,
                    0.5,
                    1
                )
            end
            local midiDeviceRow = uiFactory:HHorizontalGrid({
                children = {
                    {
                        comp = uiFactory:UIText({ text = "MIDI In Device", backColor = UIColors
                        .BackgroundSelectedInverted, textAlignmentH = FIELD_LABEL_TEXT_ALIGN }),
                        item = { sizePolicy = "Fixed", size = FIELD_LABEL_WIDTH }
                    },
                    {
                        comp = uiFactory:UIButton({
                            id = "midiDeviceIn",
                            label = deviceName,
                            signals = {
                                clicked = function()
                                    openOnpcSettings(nil)
                                end
                            }
                        }),
                        item = { sizePolicy = "Stretch", size = 1 }
                    }
                }
            })
            local midiViaWingEnabled = Root().StationSettings.LocalSettings.onPCMidiFromWing
            local midiViaWingRow = uiFactory:HHorizontalGrid({
                children = {
                    {
                        comp = uiFactory:UIText({ text = "MIDI Via Wing", backColor = UIColors
                        .BackgroundSelectedInverted, textAlignmentH = FIELD_LABEL_TEXT_ALIGN }),
                        item = { sizePolicy = "Fixed", size = FIELD_LABEL_WIDTH }
                    },
                    {
                        comp = uiFactory:UIButton({
                            id = "midiViaWing",
                            label = midiViaWingEnabled and "Yes" or "No",
                            props = { textColor = midiViaWingEnabled and UIColors.AlertText or UIColors.Text },
                            signals = {
                                clicked = function()
                                    openOnpcSettings(nil)
                                end
                            }
                        }),
                        item = { sizePolicy = "Stretch", size = 1 }
                    }
                }
            })
            return self.ui:HVerticalGrid({ children = { { comp = midiDeviceRow, item = { sizePolicy = "Fixed", size = ROW_HEIGHT } }, { comp = midiViaWingRow, item = { sizePolicy = "Fixed", size = ROW_HEIGHT } } } })
        end

        function CreateOrConfigureMidiEncodersDialogV3.prototype.createInputFieldsGrid(self, config)
            return self.ui:HInputFieldGrid({
                rowSize = { sizePolicy = "Fixed", size = ROW_HEIGHT },
                labelColumnSize = { sizePolicy = "Fixed", size = FIELD_LABEL_WIDTH },
                valueColumnSize = { sizePolicy = "Stretch", size = 1 },
                data = config,
                textAlignmentH = FIELD_LABEL_TEXT_ALIGN,
                inputFields = {
                    {
                        fieldType = "selection",
                        id = "midiRelativeMode",
                        label = "Relative Mode",
                        items = { { id = "Mode1-2comp", label = "Mode1 2`Comp" }, { id = "Mode2-offset", label = "Mode2 Offset" }, { id = "Mode3-SignBit", label = "Mode3 SignBit" } },
                        helpAction = function()
                            self.plugin:dialogAction({
                                type = "PushDialog",
                                dialog = RELATIVE_MODE_HELP_DIALOG(nil, self.plugin)
                            })
                        end
                    },
                    { fieldType = "boolean",   id = "enabled",         label = "MIDI Remotes",     stateLabels = { trueState = "Enabled", falseState = "Disabled" } },
                    { fieldType = "selection", id = "rotateDirection", label = "Rotate Direction", items = { { id = "inverted", label = "Inverted" }, { id = "normal", label = "Normal" } } },
                    {
                        fieldType = "input",
                        id = "defaultMidiChannel",
                        label = "Set All MIDI Channels",
                        type = "POSITIVE_NUMBER",
                        range = { min = 1, max = 16 },
                        onChange = function(____, value)
                            config.defaultMidiChannel = value
                            __TS__ArrayForEach(
                                objectKeys(nil, config.midiMappings),
                                function(____, key)
                                    local ____table_channelInputBoxes_index_setText_result_9 = self.channelInputBoxes
                                    [key]
                                    if ____table_channelInputBoxes_index_setText_result_9 ~= nil then
                                        ____table_channelInputBoxes_index_setText_result_9 =
                                        ____table_channelInputBoxes_index_setText_result_9:setText(tostring(value))
                                    end
                                    local configEntry = config.midiMappings[key]
                                    configEntry.midiChannel = value
                                end
                            )
                        end
                    }
                }
            })
        end

        function CreateOrConfigureMidiEncodersDialogV3.prototype.createMidiMappingGrid(self, config)
            local createMappingRow, uiFactory
            function createMappingRow(self, params)
                local ____params_15 = params
                local id = ____params_15.id
                local label = ____params_15.label
                local channelInputBoxes = ____params_15.channelInputBoxes
                local helpAction = ____params_15.helpAction
                local mapping = config.midiMappings[id]
                local channelInputBox = uiFactory:UIInputBox({
                    id = id .. "_channel",
                    label = label .. " MIDI Channel",
                    props = { showKeyboardButton = "No" },
                    type = "POSITIVE_NUMBER",
                    range = { min = 1, max = 16 },
                    value = mapping.midiChannel,
                    onChange = function(____, value)
                        mapping.midiChannel = value
                    end
                })
                channelInputBoxes[id] = channelInputBox
                return {
                    uiFactory:HHorizontalGrid({
                        children = {
                            {
                                comp = uiFactory:HToggle({
                                    id = id .. "_enabled",
                                    initialState = mapping.enabled,
                                    label = { type = "icon", onIcon = "CheckboxChecked", offIcon = "CheckboxUnchecked" },
                                    onChange = function(____, state)
                                        Echo((("Update config " .. id) .. ", state=") .. tostring(state))
                                        mapping.enabled = state
                                    end
                                }),
                                item = { sizePolicy = "Fixed", size = 50 }
                            },
                            {
                                comp = uiFactory:UIText({
                                    text = label,
                                    backColor = UIColors.LabelBG,
                                    textColor = UIColors.Text,
                                    alignmentH = FIELD_LABEL_TEXT_ALIGN,
                                    textAlignmentH = FIELD_LABEL_TEXT_ALIGN
                                }),
                                item = { sizePolicy = "Stretch", size = 1 }
                            },
                            table.unpack(helpAction == nil and ({}) or ({ typed(
                                nil,
                                {
                                    comp = uiFactory:UIButton({
                                        id = id .. "_help",
                                        label = "",
                                        icon = "QuestionMarkIcon",
                                        props = { backColor = UIColors.BackgroundSelectedInverted, w = HELP_ICON_WIDTH, h = HELP_ICON_WIDTH },
                                        signals = { clicked = function()
                                            helpAction(nil)
                                        end }
                                    }),
                                    item = { sizePolicy = "Fixed", size = HELP_ICON_WIDTH }
                                }
                            ) }))
                        }
                    }),
                    uiFactory:UIText({ text = mapping.midiType, backColor = UIColors.BackgroundSelected }),
                    channelInputBox,
                    uiFactory:UIInputBox({
                        id = id .. "_index",
                        label = label .. " MIDI Index",
                        props = { showKeyboardButton = "No", alignmentH = "Center" },
                        type = "POSITIVE_NUMBER",
                        range = { min = 0, max = 127 },
                        value = mapping.midiIndex,
                        onChange = function(____, value)
                            config.midiMappings[id].midiIndex = value
                        end
                    })
                }
            end

            uiFactory = self.ui
            local ____uiFactory_HTableGrid_14 = uiFactory.HTableGrid
            local ____temp_12 = { { label = "Function", item = { sizePolicy = "Fixed", size = FIELD_LABEL_WIDTH } }, { label = "Type", item = { sizePolicy = "Fixed", size = 100 } }, { label = "Channel", item = { sizePolicy = "Fixed", size = 100 } }, { label = "Index", item = { sizePolicy = "Fixed", size = 100 } } }
            local ____temp_13 = { sizePolicy = "Fixed", size = ROW_HEIGHT }
            local ____array_11 = __TS__SparseArrayNew(table.unpack(__TS__ArrayMap(
                series(nil, 1, 5),
                function(____, encoderNumber)
                    return createMappingRow(
                        nil,
                        {
                            id = ("encoder" .. tostring(encoderNumber)) .. "Rotate",
                            label = ("Encoder " .. tostring(encoderNumber)) .. " Rotate",
                            channelInputBoxes = self.channelInputBoxes
                        }
                    )
                end
            )))
            __TS__SparseArrayPush(
                ____array_11,
                TableDivider(nil),
                table.unpack(__TS__ArrayMap(
                    series(nil, 1, 5),
                    function(____, encoderNumber)
                        return createMappingRow(
                            nil,
                            {
                                id = ("encoder" .. tostring(encoderNumber)) .. "Click",
                                label = ("Encoder " .. tostring(encoderNumber)) .. " Click",
                                channelInputBoxes = self.channelInputBoxes
                            }
                        )
                    end
                ))
            )
            __TS__SparseArrayPush(
                ____array_11,
                TableDivider(nil),
                createMappingRow(
                    nil,
                    {
                        id = "toggleInnerOuterIndex",
                        label = "Flip Inner/Outer",
                        channelInputBoxes = self.channelInputBoxes,
                        helpAction = function()
                            self.plugin:dialogAction({
                                type = "PushDialog",
                                dialog = FLIP_INNER_OUTER_HELP_DIALOG(nil, self.plugin)
                            })
                        end
                    }
                ),
                TableDivider(nil)
            )
            return ____uiFactory_HTableGrid_14(
                uiFactory,
                {
                    columns = ____temp_12,
                    rowSize = ____temp_13,
                    rows = { __TS__SparseArraySpread(____array_11) }
                }
            )
        end

        function CreateOrConfigureMidiEncodersDialogV3.prototype.getInitialConfig(self)
            local options = self.options
            if options.type == "configure" then
                return self.plugin:handlePluginEventReadOnly(
                    "Get Instance Config",
                    function(____, context)
                        local c = context.pluginData.userData.instances[options.instanceId].config
                        local midiMappingsClone = __TS__ArrayReduce(
                            objectKeys(nil, c.midiMappings),
                            function(____, prev, key)
                                local m = c.midiMappings[key]
                                local enabled = m.enabled
                                local midiChannel = m.midiChannel
                                local midiType = m.midiType
                                local midiIndex = m.midiIndex
                                prev[key] = { enabled = enabled, midiChannel = midiChannel, midiType = midiType, midiIndex =
                                midiIndex }
                                return prev
                            end,
                            {}
                        )
                        local clone = {
                            maxAmount = c.maxAmount,
                            defaultMidiChannel = c.defaultMidiChannel,
                            midiRelativeMode = c.midiRelativeMode,
                            midiMappings = midiMappingsClone,
                            enabled = c.enabled,
                            rotateDirection = c.rotateDirection
                        }
                        return { instanceConfig = clone }
                    end
                )
            else
                local oldUserData = self.plugin:getMigratedOldUserData()
                if oldUserData == nil then
                    return { instanceConfig = createDefaultConfig(nil) }
                else
                    return {
                        userDataFromOldVersion = oldUserData,
                        instanceConfig = objectValues(nil, oldUserData.userData.instances)[1].config
                    }
                end
            end
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.ui.MainDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____PluginMainDialogSingleInstance = require("lib.ui.dialogs.PluginMainDialogSingleInstance")
        local PluginMainDialogSingleInstance = ____PluginMainDialogSingleInstance.PluginMainDialogSingleInstance
        local ____CreateOrConfigureMidiEncodersDialogV3 = require(
        "plugins.MidiEncoders.src.ui.CreateOrConfigureMidiEncodersDialogV3")
        local CreateOrConfigureMidiEncodersDialogV3 = ____CreateOrConfigureMidiEncodersDialogV3
        .CreateOrConfigureMidiEncodersDialogV3
        function ____exports.MainDialog(self, plugin, instanceId)
            local log = plugin:getRuntime().log
            local isInstalled = plugin:isInstalled()
            local instanceIds
            if isInstalled then
                instanceIds = plugin:handlePluginEventReadOnly(
                    "Get Instance",
                    function(____, context)
                        return context:getInstanceIds()
                    end
                )
            end
            local function getActions(____, instanceId)
                return { {
                    label = "Configure",
                    action = function()
                        plugin:dialogAction({
                            type = "PushDialog",
                            dialog = __TS__New(CreateOrConfigureMidiEncodersDialogV3, plugin,
                                { type = "configure", instanceId = instanceId })
                        })
                    end
                } }
            end
            return __TS__New(
                PluginMainDialogSingleInstance,
                {
                    plugin = plugin,
                    getActions = getActions,
                    onInstallClicked = function()
                        plugin:dialogAction({
                            type = "PushDialog",
                            dialog = __TS__New(CreateOrConfigureMidiEncodersDialogV3, plugin, { type = "create" })
                        })
                    end
                }
            )
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.main"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__New = ____lualib.__TS__New
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____plugin = require("lib.plugin.index")
        local getOrCreateRuntime = ____plugin.getOrCreateRuntime
        local ____PluginInfo = require("lib.PluginInfo")
        local PluginInfo = ____PluginInfo.PluginInfo
        local ____PluginsRegistry = require("lib.plugins.PluginsRegistry.PluginsRegistry")
        local PluginsRegistry = ____PluginsRegistry.PluginsRegistry
        local ____ExternalActionHandler = require("plugins.MidiEncoders.src.ExternalActionHandler")
        local ExternalActionHandler = ____ExternalActionHandler.ExternalActionHandler
        local ____PPlugin = require("plugins.MidiEncoders.src.PPlugin")
        local PPlugin = ____PPlugin.PPlugin
        local ____Runtime = require("plugins.MidiEncoders.src.Runtime")
        local Runtime = ____Runtime.Runtime
        local ____MainDialog = require("plugins.MidiEncoders.src.ui.MainDialog")
        local MainDialog = ____MainDialog.MainDialog
        local ______env = require("plugins.MidiEncoders.src.__env")
        local PLUGIN_ENV = ______env.PLUGIN_ENV
        local pluginInfo = PluginInfo(nil, ...)
        PluginsRegistry:getOrCreate():register(PLUGIN_ENV, pluginInfo)
        local function main(displayHandle, argument)
            local pluginId = PLUGIN_ENV.pluginId
            local runtime = getOrCreateRuntime(
                nil,
                pluginId,
                pluginInfo,
                function()
                    return __TS__New(Runtime, pluginId, pluginInfo)
                end
            )
            __TS__New(PPlugin, pluginInfo, displayHandle, runtime):handleMain({ userDialogV2 = true, argument = argument, MainDialog =
            MainDialog, ExternalActionHandler = ExternalActionHandler })
        end
        return main
    end,
    ["plugins.MidiEncoders.src.ui.ConfigureHelpDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
        local ____exports = {}
        local ____dialogs = require("lib.ui.dialogs.index")
        local AlertDialog = ____dialogs.AlertDialog
        function ____exports.ConfigureHelpDialog(self)
            return AlertDialog(nil,
                { title = "Configuration Help", message = "\nMode1-2comp: \n\nMode2-offset:\n\nMode3-SignBit:\n\n" })
        end

        return ____exports
    end,
    ["plugins.MidiEncoders.src.ui.CreateOrConfigureMidiEncodersDialog"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
    end,
    ["plugins.MidiEncoders.src.ui.CreateOrConfigureMidiEncodersDialogV2"] = function(...)
        local ____lualib = require("lualib_bundle")
        local __TS__SourceMapTraceBack = ____lualib.__TS__SourceMapTraceBack
    end,
}
local __TS__SourceMapTraceBack = require("lualib_bundle").__TS__SourceMapTraceBack
__TS__SourceMapTraceBack(debug.getinfo(1).short_src,
    { ["2563"] = { line = 1, file = "CommandUtils.ts" }, ["2564"] = { line = 2, file = "CommandUtils.ts" }, ["2565"] = { line = 3, file = "CommandUtils.ts" },
        ["2566"] = { line = 4, file = "CommandUtils.ts" }, ["2567"] = { line = 1, file = "CommandUtils.ts" }, ["2570"] = { line = 10, file = "CommandUtils.ts" },
        ["2571"] = { line = 11, file = "CommandUtils.ts" }, ["2572"] = { line = 12, file = "CommandUtils.ts" }, ["2573"] = { line = 13, file = "CommandUtils.ts" },
        ["2574"] = { line = 13, file = "CommandUtils.ts" }, ["2575"] = { line = 13, file = "CommandUtils.ts" }, ["2577"] = { line = 13, file = "CommandUtils.ts" },
        ["2579"] = { line = 13, file = "CommandUtils.ts" }, ["2580"] = { line = 10, file = "CommandUtils.ts" }, ["2581"] = { line = 16, file = "CommandUtils.ts" },
        ["2582"] = { line = 16, file = "CommandUtils.ts" }, ["2583"] = { line = 16, file = "CommandUtils.ts" }, ["2585"] = { line = 17, file = "CommandUtils.ts" },
        ["2586"] = { line = 17, file = "CommandUtils.ts" }, ["2587"] = { line = 17, file = "CommandUtils.ts" }, ["2589"] = { line = 17, file = "CommandUtils.ts" },
        ["2591"] = { line = 17, file = "CommandUtils.ts" }, ["2592"] = { line = 19, file = "CommandUtils.ts" }, ["2593"] = { line = 20, file = "CommandUtils.ts" },
        ["2594"] = { line = 21, file = "CommandUtils.ts" }, ["2596"] = { line = 19, file = "CommandUtils.ts" }, ["2597"] = { line = 25, file = "CommandUtils.ts" },
        ["2598"] = { line = 26, file = "CommandUtils.ts" }, ["2599"] = { line = 27, file = "CommandUtils.ts" }, ["2601"] = { line = 29, file = "CommandUtils.ts" },
        ["2603"] = { line = 25, file = "CommandUtils.ts" }, ["2604"] = { line = 33, file = "CommandUtils.ts" }, ["2605"] = { line = 34, file = "CommandUtils.ts" },
        ["2606"] = { line = 35, file = "CommandUtils.ts" }, ["2607"] = { line = 36, file = "CommandUtils.ts" }, ["2609"] = { line = 38, file = "CommandUtils.ts" },
        ["2611"] = { line = 33, file = "CommandUtils.ts" }, ["2612"] = { line = 42, file = "CommandUtils.ts" }, ["2613"] = { line = 43, file = "CommandUtils.ts" },
        ["2614"] = { line = 44, file = "CommandUtils.ts" }, ["2616"] = { line = 46, file = "CommandUtils.ts" }, ["2618"] = { line = 42, file = "CommandUtils.ts" },
        ["2619"] = { line = 50, file = "CommandUtils.ts" }, ["2620"] = { line = 16, file = "CommandUtils.ts" }, ["2638"] = { line = 10, file = "ExternalCommandCodecV2.ts" },
        ["2639"] = { line = 17, file = "ExternalCommandCodecV2.ts" }, ["2640"] = { line = 18, file = "ExternalCommandCodecV2.ts" },
        ["2641"] = { line = 19, file = "ExternalCommandCodecV2.ts" }, ["2642"] = { line = 20, file = "ExternalCommandCodecV2.ts" },
        ["2643"] = { line = 21, file = "ExternalCommandCodecV2.ts" }, ["2644"] = { line = 22, file = "ExternalCommandCodecV2.ts" },
        ["2645"] = { line = 23, file = "ExternalCommandCodecV2.ts" }, ["2647"] = { line = 25, file = "ExternalCommandCodecV2.ts" },
        ["2649"] = { line = 17, file = "ExternalCommandCodecV2.ts" }, ["2650"] = { line = 29, file = "ExternalCommandCodecV2.ts" },
        ["2651"] = { line = 30, file = "ExternalCommandCodecV2.ts" }, ["2652"] = { line = 31, file = "ExternalCommandCodecV2.ts" },
        ["2653"] = { line = 32, file = "ExternalCommandCodecV2.ts" }, ["2654"] = { line = 32, file = "ExternalCommandCodecV2.ts" },
        ["2655"] = { line = 32, file = "ExternalCommandCodecV2.ts" }, ["2656"] = { line = 33, file = "ExternalCommandCodecV2.ts" },
        ["2659"] = { line = 36, file = "ExternalCommandCodecV2.ts" }, ["2660"] = { line = 29, file = "ExternalCommandCodecV2.ts" },
        ["2661"] = { line = 39, file = "ExternalCommandCodecV2.ts" }, ["2662"] = { line = 40, file = "ExternalCommandCodecV2.ts" },
        ["2664"] = { line = 41, file = "ExternalCommandCodecV2.ts" }, ["2665"] = { line = 42, file = "ExternalCommandCodecV2.ts" },
        ["2668"] = { line = 43, file = "ExternalCommandCodecV2.ts" }, ["2671"] = { line = 46, file = "ExternalCommandCodecV2.ts" },
        ["2674"] = { line = 47, file = "ExternalCommandCodecV2.ts" }, ["2675"] = { line = 48, file = "ExternalCommandCodecV2.ts" },
        ["2676"] = { line = 49, file = "ExternalCommandCodecV2.ts" }, ["2677"] = { line = 50, file = "ExternalCommandCodecV2.ts" },
        ["2682"] = { line = 54, file = "ExternalCommandCodecV2.ts" }, ["2685"] = { line = 55, file = "ExternalCommandCodecV2.ts" },
        ["2690"] = { line = 58, file = "ExternalCommandCodecV2.ts" }, ["2694"] = { line = 39, file = "ExternalCommandCodecV2.ts" },
        ["2699"] = { line = 68, file = "ExternalCommandCodecV2.ts" }, ["2700"] = { line = 69, file = "ExternalCommandCodecV2.ts" },
        ["2701"] = { line = 70, file = "ExternalCommandCodecV2.ts" }, ["2702"] = { line = 71, file = "ExternalCommandCodecV2.ts" },
        ["2703"] = { line = 72, file = "ExternalCommandCodecV2.ts" }, ["2704"] = { line = 73, file = "ExternalCommandCodecV2.ts" },
        ["2705"] = { line = 74, file = "ExternalCommandCodecV2.ts" }, ["2706"] = { line = 75, file = "ExternalCommandCodecV2.ts" },
        ["2708"] = { line = 77, file = "ExternalCommandCodecV2.ts" }, ["2709"] = { line = 68, file = "ExternalCommandCodecV2.ts" },
        ["2710"] = { line = 83, file = "ExternalCommandCodecV2.ts" }, ["2717"] = { line = 1, file = "TimeUtils.ts" },
        ["2718"] = { line = 1, file = "TimeUtils.ts" }, ["2719"] = { line = 3, file = "TimeUtils.ts" }, ["2720"] = { line = 4, file = "TimeUtils.ts" },
        ["2721"] = { line = 3, file = "TimeUtils.ts" }, ["2732"] = { line = 1, file = "Logger.ts" }, ["2733"] = { line = 1, file = "Logger.ts" },
        ["2734"] = { line = 3, file = "Logger.ts" }, ["2735"] = { line = 4, file = "Logger.ts" }, ["2736"] = { line = 4, file = "Logger.ts" },
        ["2737"] = { line = 5, file = "Logger.ts" }, ["2738"] = { line = 5, file = "Logger.ts" }, ["2739"] = { line = 6, file = "Logger.ts" },
        ["2740"] = { line = 6, file = "Logger.ts" }, ["2741"] = { line = 7, file = "Logger.ts" }, ["2742"] = { line = 7, file = "Logger.ts" },
        ["2743"] = { line = 8, file = "Logger.ts" }, ["2744"] = { line = 8, file = "Logger.ts" }, ["2745"] = { line = 11, file = "Logger.ts" },
        ["2746"] = { line = 12, file = "Logger.ts" }, ["2747"] = { line = 13, file = "Logger.ts" }, ["2748"] = { line = 14, file = "Logger.ts" },
        ["2749"] = { line = 15, file = "Logger.ts" }, ["2750"] = { line = 16, file = "Logger.ts" }, ["2751"] = { line = 11, file = "Logger.ts" },
        ["2752"] = { line = 19, file = "Logger.ts" }, ["2753"] = { line = 20, file = "Logger.ts" }, ["2754"] = { line = 19, file = "Logger.ts" },
        ["2755"] = { line = 23, file = "Logger.ts" }, ["2758"] = { line = 35, file = "Logger.ts" }, ["2759"] = { line = 36, file = "Logger.ts" },
        ["2760"] = { line = 36, file = "Logger.ts" }, ["2761"] = { line = 36, file = "Logger.ts" }, ["2762"] = { line = 36, file = "Logger.ts" },
        ["2763"] = { line = 37, file = "Logger.ts" }, ["2764"] = { line = 37, file = "Logger.ts" }, ["2765"] = { line = 37, file = "Logger.ts" },
        ["2766"] = { line = 37, file = "Logger.ts" }, ["2767"] = { line = 37, file = "Logger.ts" }, ["2768"] = { line = 37, file = "Logger.ts" },
        ["2769"] = { line = 37, file = "Logger.ts" }, ["2770"] = { line = 38, file = "Logger.ts" }, ["2771"] = { line = 41, file = "Logger.ts" },
        ["2772"] = { line = 42, file = "Logger.ts" }, ["2773"] = { line = 44, file = "Logger.ts" }, ["2774"] = { line = 45, file = "Logger.ts" },
        ["2775"] = { line = 46, file = "Logger.ts" }, ["2776"] = { line = 46, file = "Logger.ts" }, ["2777"] = { line = 46, file = "Logger.ts" },
        ["2779"] = { line = 46, file = "Logger.ts" }, ["2781"] = { line = 46, file = "Logger.ts" }, ["2782"] = { line = 47, file = "Logger.ts" },
        ["2783"] = { line = 48, file = "Logger.ts" }, ["2784"] = { line = 44, file = "Logger.ts" }, ["2785"] = { line = 51, file = "Logger.ts" },
        ["2786"] = { line = 52, file = "Logger.ts" }, ["2787"] = { line = 53, file = "Logger.ts" }, ["2788"] = { line = 54, file = "Logger.ts" },
        ["2790"] = { line = 56, file = "Logger.ts" }, ["2791"] = { line = 57, file = "Logger.ts" }, ["2792"] = { line = 51, file = "Logger.ts" },
        ["2793"] = { line = 60, file = "Logger.ts" }, ["2794"] = { line = 61, file = "Logger.ts" }, ["2795"] = { line = 62, file = "Logger.ts" },
        ["2796"] = { line = 63, file = "Logger.ts" }, ["2798"] = { line = 65, file = "Logger.ts" }, ["2799"] = { line = 66, file = "Logger.ts" },
        ["2800"] = { line = 60, file = "Logger.ts" }, ["2801"] = { line = 69, file = "Logger.ts" }, ["2802"] = { line = 70, file = "Logger.ts" },
        ["2803"] = { line = 69, file = "Logger.ts" }, ["2804"] = { line = 73, file = "Logger.ts" }, ["2805"] = { line = 74, file = "Logger.ts" },
        ["2806"] = { line = 73, file = "Logger.ts" }, ["2807"] = { line = 77, file = "Logger.ts" }, ["2808"] = { line = 78, file = "Logger.ts" },
        ["2809"] = { line = 79, file = "Logger.ts" }, ["2811"] = { line = 77, file = "Logger.ts" }, ["2812"] = { line = 83, file = "Logger.ts" },
        ["2813"] = { line = 84, file = "Logger.ts" }, ["2814"] = { line = 85, file = "Logger.ts" }, ["2816"] = { line = 83, file = "Logger.ts" },
        ["2817"] = { line = 89, file = "Logger.ts" }, ["2818"] = { line = 90, file = "Logger.ts" }, ["2819"] = { line = 91, file = "Logger.ts" },
        ["2821"] = { line = 89, file = "Logger.ts" }, ["2822"] = { line = 94, file = "Logger.ts" }, ["2823"] = { line = 95, file = "Logger.ts" },
        ["2824"] = { line = 96, file = "Logger.ts" }, ["2826"] = { line = 94, file = "Logger.ts" }, ["2827"] = { line = 100, file = "Logger.ts" },
        ["2828"] = { line = 101, file = "Logger.ts" }, ["2829"] = { line = 100, file = "Logger.ts" }, ["2830"] = { line = 104, file = "Logger.ts" },
        ["2831"] = { line = 105, file = "Logger.ts" }, ["2832"] = { line = 105, file = "Logger.ts" }, ["2833"] = { line = 105, file = "Logger.ts" },
        ["2834"] = { line = 105, file = "Logger.ts" }, ["2835"] = { line = 105, file = "Logger.ts" }, ["2836"] = { line = 105, file = "Logger.ts" },
        ["2837"] = { line = 105, file = "Logger.ts" }, ["2838"] = { line = 105, file = "Logger.ts" }, ["2839"] = { line = 105, file = "Logger.ts" },
        ["2840"] = { line = 105, file = "Logger.ts" }, ["2841"] = { line = 106, file = "Logger.ts" }, ["2842"] = { line = 107, file = "Logger.ts" },
        ["2843"] = { line = 104, file = "Logger.ts" }, ["2844"] = { line = 110, file = "Logger.ts" }, ["2845"] = { line = 111, file = "Logger.ts" },
        ["2846"] = { line = 112, file = "Logger.ts" }, ["2847"] = { line = 113, file = "Logger.ts" }, ["2849"] = { line = 110, file = "Logger.ts" },
        ["2850"] = { line = 117, file = "Logger.ts" }, ["2851"] = { line = 118, file = "Logger.ts" }, ["2852"] = { line = 119, file = "Logger.ts" },
        ["2853"] = { line = 120, file = "Logger.ts" }, ["2854"] = { line = 121, file = "Logger.ts" }, ["2855"] = { line = 122, file = "Logger.ts" },
        ["2856"] = { line = 123, file = "Logger.ts" }, ["2857"] = { line = 124, file = "Logger.ts" }, ["2858"] = { line = 125, file = "Logger.ts" },
        ["2859"] = { line = 126, file = "Logger.ts" }, ["2860"] = { line = 127, file = "Logger.ts" }, ["2861"] = { line = 128, file = "Logger.ts" },
        ["2862"] = { line = 117, file = "Logger.ts" }, ["2863"] = { line = 35, file = "Logger.ts" }, ["2872"] = { line = 2, file = "StringUtils.ts" },
        ["2873"] = { line = 3, file = "StringUtils.ts" }, ["2875"] = { line = 4, file = "StringUtils.ts" }, ["2876"] = { line = 4, file = "StringUtils.ts" },
        ["2877"] = { line = 5, file = "StringUtils.ts" }, ["2878"] = { line = 4, file = "StringUtils.ts" }, ["2881"] = { line = 2, file = "StringUtils.ts" },
        ["2885"] = { line = 15, file = "StringUtils.ts" }, ["2886"] = { line = 16, file = "StringUtils.ts" }, ["2887"] = { line = 17, file = "StringUtils.ts" },
        ["2889"] = { line = 19, file = "StringUtils.ts" }, ["2890"] = { line = 19, file = "StringUtils.ts" }, ["2891"] = { line = 20, file = "StringUtils.ts" },
        ["2892"] = { line = 21, file = "StringUtils.ts" }, ["2895"] = { line = 19, file = "StringUtils.ts" }, ["2899"] = { line = 25, file = "StringUtils.ts" },
        ["2900"] = { line = 25, file = "StringUtils.ts" }, ["2901"] = { line = 26, file = "StringUtils.ts" }, ["2902"] = { line = 27, file = "StringUtils.ts" },
        ["2905"] = { line = 25, file = "StringUtils.ts" }, ["2908"] = { line = 31, file = "StringUtils.ts" }, ["2909"] = { line = 15, file = "StringUtils.ts" },
        ["2915"] = { line = 40, file = "StringUtils.ts" }, ["2916"] = { line = 41, file = "StringUtils.ts" }, ["2918"] = { line = 42, file = "StringUtils.ts" },
        ["2919"] = { line = 42, file = "StringUtils.ts" }, ["2920"] = { line = 43, file = "StringUtils.ts" }, ["2921"] = { line = 44, file = "StringUtils.ts" },
        ["2923"] = { line = 42, file = "StringUtils.ts" }, ["2926"] = { line = 47, file = "StringUtils.ts" }, ["2927"] = { line = 40, file = "StringUtils.ts" },
        ["2928"] = { line = 50, file = "StringUtils.ts" }, ["2929"] = { line = 51, file = "StringUtils.ts" }, ["2930"] = { line = 52, file = "StringUtils.ts" },
        ["2931"] = { line = 52, file = "StringUtils.ts" }, ["2932"] = { line = 52, file = "StringUtils.ts" }, ["2933"] = { line = 52, file = "StringUtils.ts" },
        ["2934"] = { line = 53, file = "StringUtils.ts" }, ["2935"] = { line = 52, file = "StringUtils.ts" }, ["2936"] = { line = 52, file = "StringUtils.ts" },
        ["2937"] = { line = 55, file = "StringUtils.ts" }, ["2938"] = { line = 50, file = "StringUtils.ts" }, ["2939"] = { line = 58, file = "StringUtils.ts" },
        ["2949"] = { line = 47, file = "Utils.ts" }, ["2950"] = { line = 48, file = "Utils.ts" }, ["2951"] = { line = 49, file = "Utils.ts" },
        ["2952"] = { line = 50, file = "Utils.ts" }, ["2954"] = { line = 52, file = "Utils.ts" }, ["2955"] = { line = 47, file = "Utils.ts" },
        ["2957"] = { line = 4, file = "Utils.ts" }, ["2958"] = { line = 5, file = "Utils.ts" }, ["2959"] = { line = 4, file = "Utils.ts" },
        ["2960"] = { line = 8, file = "Utils.ts" }, ["2961"] = { line = 9, file = "Utils.ts" }, ["2962"] = { line = 8, file = "Utils.ts" },
        ["2963"] = { line = 12, file = "Utils.ts" }, ["2964"] = { line = 13, file = "Utils.ts" }, ["2965"] = { line = 13, file = "Utils.ts" },
        ["2966"] = { line = 13, file = "Utils.ts" }, ["2968"] = { line = 13, file = "Utils.ts" }, ["2970"] = { line = 13, file = "Utils.ts" },
        ["2971"] = { line = 12, file = "Utils.ts" }, ["2972"] = { line = 16, file = "Utils.ts" }, ["2973"] = { line = 17, file = "Utils.ts" },
        ["2974"] = { line = 17, file = "Utils.ts" }, ["2975"] = { line = 17, file = "Utils.ts" }, ["2977"] = { line = 17, file = "Utils.ts" },
        ["2979"] = { line = 17, file = "Utils.ts" }, ["2980"] = { line = 16, file = "Utils.ts" }, ["2981"] = { line = 20, file = "Utils.ts" },
        ["2982"] = { line = 21, file = "Utils.ts" }, ["2983"] = { line = 22, file = "Utils.ts" }, ["2985"] = { line = 24, file = "Utils.ts" },
        ["2986"] = { line = 20, file = "Utils.ts" }, ["2987"] = { line = 27, file = "Utils.ts" }, ["2988"] = { line = 32, file = "Utils.ts" },
        ["2989"] = { line = 33, file = "Utils.ts" }, ["2990"] = { line = 34, file = "Utils.ts" }, ["2991"] = { line = 27, file = "Utils.ts" },
        ["2992"] = { line = 38, file = "Utils.ts" }, ["2993"] = { line = 39, file = "Utils.ts" }, ["2994"] = { line = 40, file = "Utils.ts" },
        ["2995"] = { line = 41, file = "Utils.ts" }, ["2997"] = { line = 43, file = "Utils.ts" }, ["2998"] = { line = 38, file = "Utils.ts" },
        ["2999"] = { line = 55, file = "Utils.ts" }, ["3000"] = { line = 57, file = "Utils.ts" }, ["3001"] = { line = 58, file = "Utils.ts" },
        ["3002"] = { line = 57, file = "Utils.ts" }, ["3003"] = { line = 61, file = "Utils.ts" }, ["3004"] = { line = 62, file = "Utils.ts" },
        ["3005"] = { line = 61, file = "Utils.ts" }, ["3006"] = { line = 65, file = "Utils.ts" }, ["3007"] = { line = 66, file = "Utils.ts" },
        ["3008"] = { line = 65, file = "Utils.ts" }, ["3009"] = { line = 69, file = "Utils.ts" }, ["3010"] = { line = 70, file = "Utils.ts" },
        ["3011"] = { line = 69, file = "Utils.ts" }, ["3012"] = { line = 73, file = "Utils.ts" }, ["3013"] = { line = 74, file = "Utils.ts" },
        ["3014"] = { line = 73, file = "Utils.ts" }, ["3020"] = { line = 83, file = "Utils.ts" }, ["3021"] = { line = 84, file = "Utils.ts" },
        ["3022"] = { line = 84, file = "Utils.ts" }, ["3023"] = { line = 84, file = "Utils.ts" }, ["3024"] = { line = 84, file = "Utils.ts" },
        ["3025"] = { line = 83, file = "Utils.ts" }, ["3029"] = { line = 92, file = "Utils.ts" }, ["3030"] = { line = 93, file = "Utils.ts" },
        ["3032"] = { line = 94, file = "Utils.ts" }, ["3033"] = { line = 94, file = "Utils.ts" }, ["3034"] = { line = 95, file = "Utils.ts" },
        ["3035"] = { line = 94, file = "Utils.ts" }, ["3038"] = { line = 92, file = "Utils.ts" }, ["3040"] = { line = 102, file = "Utils.ts" },
        ["3041"] = { line = 103, file = "Utils.ts" }, ["3042"] = { line = 104, file = "Utils.ts" }, ["3044"] = { line = 106, file = "Utils.ts" },
        ["3045"] = { line = 107, file = "Utils.ts" }, ["3046"] = { line = 108, file = "Utils.ts" }, ["3047"] = { line = 109, file = "Utils.ts" },
        ["3049"] = { line = 111, file = "Utils.ts" }, ["3051"] = { line = 113, file = "Utils.ts" }, ["3052"] = { line = 102, file = "Utils.ts" },
        ["3053"] = { line = 117, file = "Utils.ts" }, ["3054"] = { line = 117, file = "Utils.ts" }, ["3055"] = { line = 117, file = "Utils.ts" },
        ["3057"] = { line = 118, file = "Utils.ts" }, ["3058"] = { line = 119, file = "Utils.ts" }, ["3060"] = { line = 120, file = "Utils.ts" },
        ["3061"] = { line = 120, file = "Utils.ts" }, ["3062"] = { line = 120, file = "Utils.ts" }, ["3065"] = { line = 121, file = "Utils.ts" },
        ["3068"] = { line = 124, file = "Utils.ts" }, ["3069"] = { line = 124, file = "Utils.ts" }, ["3070"] = { line = 124, file = "Utils.ts" },
        ["3071"] = { line = 124, file = "Utils.ts" }, ["3072"] = { line = 124, file = "Utils.ts" }, ["3073"] = { line = 124, file = "Utils.ts" },
        ["3074"] = { line = 117, file = "Utils.ts" }, ["3075"] = { line = 128, file = "Utils.ts" }, ["3076"] = { line = 129, file = "Utils.ts" },
        ["3077"] = { line = 130, file = "Utils.ts" }, ["3078"] = { line = 131, file = "Utils.ts" }, ["3079"] = { line = 132, file = "Utils.ts" },
        ["3081"] = { line = 135, file = "Utils.ts" }, ["3082"] = { line = 136, file = "Utils.ts" }, ["3084"] = { line = 139, file = "Utils.ts" },
        ["3085"] = { line = 140, file = "Utils.ts" }, ["3087"] = { line = 143, file = "Utils.ts" }, ["3088"] = { line = 128, file = "Utils.ts" },
        ["3089"] = { line = 147, file = "Utils.ts" }, ["3090"] = { line = 148, file = "Utils.ts" }, ["3091"] = { line = 147, file = "Utils.ts" },
        ["3094"] = { line = 165, file = "Utils.ts" }, ["3095"] = { line = 170, file = "Utils.ts" }, ["3096"] = { line = 170, file = "Utils.ts" },
        ["3097"] = { line = 170, file = "Utils.ts" }, ["3098"] = { line = 170, file = "Utils.ts" }, ["3099"] = { line = 171, file = "Utils.ts" },
        ["3100"] = { line = 173, file = "Utils.ts" }, ["3101"] = { line = 175, file = "Utils.ts" }, ["3104"] = { line = 178, file = "Utils.ts" },
        ["3105"] = { line = 179, file = "Utils.ts" }, ["3106"] = { line = 180, file = "Utils.ts" }, ["3107"] = { line = 181, file = "Utils.ts" },
        ["3108"] = { line = 173, file = "Utils.ts" }, ["3109"] = { line = 184, file = "Utils.ts" }, ["3110"] = { line = 184, file = "Utils.ts" },
        ["3111"] = { line = 184, file = "Utils.ts" }, ["3112"] = { line = 184, file = "Utils.ts" }, ["3113"] = { line = 186, file = "Utils.ts" },
        ["3114"] = { line = 187, file = "Utils.ts" }, ["3115"] = { line = 188, file = "Utils.ts" }, ["3117"] = { line = 190, file = "Utils.ts" },
        ["3119"] = { line = 165, file = "Utils.ts" }, ["3137"] = { line = 1, file = "MAUtils.ts" }, ["3138"] = { line = 1, file = "MAUtils.ts" },
        ["3139"] = { line = 2, file = "MAUtils.ts" }, ["3140"] = { line = 2, file = "MAUtils.ts" }, ["3141"] = { line = 3, file = "MAUtils.ts" },
        ["3142"] = { line = 3, file = "MAUtils.ts" }, ["3143"] = { line = 24, file = "MAUtils.ts" }, ["3144"] = { line = 25, file = "MAUtils.ts" },
        ["3145"] = { line = 26, file = "MAUtils.ts" }, ["3146"] = { line = 27, file = "MAUtils.ts" }, ["3149"] = { line = 24, file = "MAUtils.ts" },
        ["3150"] = { line = 5, file = "MAUtils.ts" }, ["3151"] = { line = 6, file = "MAUtils.ts" }, ["3152"] = { line = 7, file = "MAUtils.ts" },
        ["3153"] = { line = 8, file = "MAUtils.ts" }, ["3154"] = { line = 5, file = "MAUtils.ts" }, ["3155"] = { line = 11, file = "MAUtils.ts" },
        ["3156"] = { line = 14, file = "MAUtils.ts" }, ["3157"] = { line = 15, file = "MAUtils.ts" }, ["3158"] = { line = 17, file = "MAUtils.ts" },
        ["3159"] = { line = 11, file = "MAUtils.ts" }, ["3160"] = { line = 20, file = "MAUtils.ts" }, ["3161"] = { line = 21, file = "MAUtils.ts" },
        ["3162"] = { line = 20, file = "MAUtils.ts" }, ["3163"] = { line = 32, file = "MAUtils.ts" }, ["3164"] = { line = 33, file = "MAUtils.ts" },
        ["3165"] = { line = 34, file = "MAUtils.ts" }, ["3167"] = { line = 36, file = "MAUtils.ts" }, ["3168"] = { line = 37, file = "MAUtils.ts" },
        ["3169"] = { line = 38, file = "MAUtils.ts" }, ["3170"] = { line = 39, file = "MAUtils.ts" }, ["3174"] = { line = 32, file = "MAUtils.ts" },
        ["3178"] = { line = 49, file = "MAUtils.ts" }, ["3179"] = { line = 53, file = "MAUtils.ts" }, ["3180"] = { line = 54, file = "MAUtils.ts" },
        ["3182"] = { line = 55, file = "MAUtils.ts" }, ["3183"] = { line = 55, file = "MAUtils.ts" }, ["3184"] = { line = 56, file = "MAUtils.ts" },
        ["3185"] = { line = 57, file = "MAUtils.ts" }, ["3186"] = { line = 58, file = "MAUtils.ts" }, ["3188"] = { line = 55, file = "MAUtils.ts" },
        ["3193"] = { line = 62, file = "MAUtils.ts" }, ["3194"] = { line = 62, file = "MAUtils.ts" }, ["3195"] = { line = 63, file = "MAUtils.ts" },
        ["3196"] = { line = 64, file = "MAUtils.ts" }, ["3197"] = { line = 65, file = "MAUtils.ts" }, ["3199"] = { line = 62, file = "MAUtils.ts" },
        ["3203"] = { line = 69, file = "MAUtils.ts" }, ["3204"] = { line = 49, file = "MAUtils.ts" }, ["3205"] = { line = 72, file = "MAUtils.ts" },
        ["3206"] = { line = 74, file = "MAUtils.ts" }, ["3207"] = { line = 75, file = "MAUtils.ts" }, ["3208"] = { line = 76, file = "MAUtils.ts" },
        ["3209"] = { line = 77, file = "MAUtils.ts" }, ["3210"] = { line = 78, file = "MAUtils.ts" }, ["3211"] = { line = 79, file = "MAUtils.ts" },
        ["3212"] = { line = 80, file = "MAUtils.ts" }, ["3213"] = { line = 81, file = "MAUtils.ts" }, ["3215"] = { line = 82, file = "MAUtils.ts" },
        ["3219"] = { line = 85, file = "MAUtils.ts" }, ["3220"] = { line = 86, file = "MAUtils.ts" }, ["3221"] = { line = 87, file = "MAUtils.ts" },
        ["3222"] = { line = 88, file = "MAUtils.ts" }, ["3223"] = { line = 89, file = "MAUtils.ts" }, ["3225"] = { line = 90, file = "MAUtils.ts" },
        ["3229"] = { line = 93, file = "MAUtils.ts" }, ["3230"] = { line = 94, file = "MAUtils.ts" }, ["3231"] = { line = 95, file = "MAUtils.ts" },
        ["3232"] = { line = 96, file = "MAUtils.ts" }, ["3233"] = { line = 97, file = "MAUtils.ts" }, ["3234"] = { line = 98, file = "MAUtils.ts" },
        ["3236"] = { line = 99, file = "MAUtils.ts" }, ["3240"] = { line = 101, file = "MAUtils.ts" }, ["3241"] = { line = 102, file = "MAUtils.ts" },
        ["3242"] = { line = 102, file = "MAUtils.ts" }, ["3243"] = { line = 102, file = "MAUtils.ts" }, ["3244"] = { line = 102, file = "MAUtils.ts" },
        ["3245"] = { line = 103, file = "MAUtils.ts" }, ["3247"] = { line = 104, file = "MAUtils.ts" }, ["3251"] = { line = 106, file = "MAUtils.ts" },
        ["3253"] = { line = 107, file = "MAUtils.ts" }, ["3257"] = { line = 109, file = "MAUtils.ts" }, ["3258"] = { line = 110, file = "MAUtils.ts" },
        ["3259"] = { line = 111, file = "MAUtils.ts" }, ["3260"] = { line = 111, file = "MAUtils.ts" }, ["3261"] = { line = 111, file = "MAUtils.ts" },
        ["3262"] = { line = 111, file = "MAUtils.ts" }, ["3263"] = { line = 111, file = "MAUtils.ts" }, ["3266"] = { line = 114, file = "MAUtils.ts" },
        ["3271"] = { line = 118, file = "MAUtils.ts" }, ["3272"] = { line = 119, file = "MAUtils.ts" }, ["3273"] = { line = 120, file = "MAUtils.ts" },
        ["3275"] = { line = 121, file = "MAUtils.ts" }, ["3279"] = { line = 123, file = "MAUtils.ts" }, ["3280"] = { line = 123, file = "MAUtils.ts" },
        ["3281"] = { line = 123, file = "MAUtils.ts" }, ["3282"] = { line = 123, file = "MAUtils.ts" }, ["3283"] = { line = 123, file = "MAUtils.ts" },
        ["3286"] = { line = 126, file = "MAUtils.ts" }, ["3287"] = { line = 127, file = "MAUtils.ts" }, ["3288"] = { line = 128, file = "MAUtils.ts" },
        ["3290"] = { line = 129, file = "MAUtils.ts" }, ["3294"] = { line = 132, file = "MAUtils.ts" }, ["3295"] = { line = 132, file = "MAUtils.ts" },
        ["3296"] = { line = 132, file = "MAUtils.ts" }, ["3297"] = { line = 132, file = "MAUtils.ts" }, ["3298"] = { line = 132, file = "MAUtils.ts" },
        ["3301"] = { line = 135, file = "MAUtils.ts" }, ["3303"] = { line = 137, file = "MAUtils.ts" }, ["3304"] = { line = 74, file = "MAUtils.ts" },
        ["3308"] = { line = 145, file = "MAUtils.ts" }, ["3309"] = { line = 146, file = "MAUtils.ts" }, ["3310"] = { line = 147, file = "MAUtils.ts" },
        ["3311"] = { line = 147, file = "MAUtils.ts" }, ["3312"] = { line = 147, file = "MAUtils.ts" }, ["3313"] = { line = 147, file = "MAUtils.ts" },
        ["3314"] = { line = 147, file = "MAUtils.ts" }, ["3315"] = { line = 145, file = "MAUtils.ts" }, ["3330"] = { line = 5, file = "HookManager.ts" },
        ["3331"] = { line = 5, file = "HookManager.ts" }, ["3332"] = { line = 16, file = "HookManager.ts" }, ["3333"] = { line = 17, file = "HookManager.ts" },
        ["3334"] = { line = 17, file = "HookManager.ts" }, ["3338"] = { line = 25, file = "HookManager.ts" }, ["3345"] = { line = 41, file = "HookManager.ts" },
        ["3346"] = { line = 137, file = "HookManager.ts" }, ["3347"] = { line = 137, file = "HookManager.ts" }, ["3348"] = { line = 138, file = "HookManager.ts" },
        ["3349"] = { line = 138, file = "HookManager.ts" }, ["3350"] = { line = 138, file = "HookManager.ts" }, ["3351"] = { line = 138, file = "HookManager.ts" },
        ["3352"] = { line = 138, file = "HookManager.ts" }, ["3353"] = { line = 138, file = "HookManager.ts" }, ["3354"] = { line = 138, file = "HookManager.ts" },
        ["3356"] = { line = 141, file = "HookManager.ts" }, ["3357"] = { line = 142, file = "HookManager.ts" }, ["3358"] = { line = 142, file = "HookManager.ts" },
        ["3359"] = { line = 142, file = "HookManager.ts" }, ["3360"] = { line = 143, file = "HookManager.ts" }, ["3361"] = { line = 145, file = "HookManager.ts" },
        ["3364"] = { line = 148, file = "HookManager.ts" }, ["3365"] = { line = 149, file = "HookManager.ts" }, ["3368"] = { line = 153, file = "HookManager.ts" },
        ["3369"] = { line = 153, file = "HookManager.ts" }, ["3370"] = { line = 155, file = "HookManager.ts" }, ["3371"] = { line = 156, file = "HookManager.ts" },
        ["3372"] = { line = 158, file = "HookManager.ts" }, ["3373"] = { line = 159, file = "HookManager.ts" }, ["3374"] = { line = 160, file = "HookManager.ts" },
        ["3375"] = { line = 161, file = "HookManager.ts" }, ["3378"] = { line = 47, file = "HookManager.ts" }, ["3379"] = { line = 47, file = "HookManager.ts" },
        ["3380"] = { line = 47, file = "HookManager.ts" }, ["3381"] = { line = 47, file = "HookManager.ts" }, ["3382"] = { line = 47, file = "HookManager.ts" },
        ["3383"] = { line = 48, file = "HookManager.ts" }, ["3384"] = { line = 49, file = "HookManager.ts" }, ["3385"] = { line = 52, file = "HookManager.ts" },
        ["3386"] = { line = 53, file = "HookManager.ts" }, ["3387"] = { line = 62, file = "HookManager.ts" }, ["3388"] = { line = 59, file = "HookManager.ts" },
        ["3389"] = { line = 60, file = "HookManager.ts" }, ["3390"] = { line = 61, file = "HookManager.ts" }, ["3391"] = { line = 63, file = "HookManager.ts" },
        ["3392"] = { line = 66, file = "HookManager.ts" }, ["3393"] = { line = 68, file = "HookManager.ts" }, ["3394"] = { line = 69, file = "HookManager.ts" },
        ["3395"] = { line = 70, file = "HookManager.ts" }, ["3397"] = { line = 75, file = "HookManager.ts" }, ["3398"] = { line = 76, file = "HookManager.ts" },
        ["3399"] = { line = 77, file = "HookManager.ts" }, ["3400"] = { line = 78, file = "HookManager.ts" }, ["3402"] = { line = 82, file = "HookManager.ts" },
        ["3403"] = { line = 83, file = "HookManager.ts" }, ["3404"] = { line = 84, file = "HookManager.ts" }, ["3405"] = { line = 85, file = "HookManager.ts" },
        ["3406"] = { line = 86, file = "HookManager.ts" }, ["3409"] = { line = 88, file = "HookManager.ts" }, ["3410"] = { line = 90, file = "HookManager.ts" },
        ["3411"] = { line = 91, file = "HookManager.ts" }, ["3412"] = { line = 92, file = "HookManager.ts" }, ["3413"] = { line = 93, file = "HookManager.ts" },
        ["3414"] = { line = 94, file = "HookManager.ts" }, ["3415"] = { line = 95, file = "HookManager.ts" }, ["3417"] = { line = 97, file = "HookManager.ts" },
        ["3419"] = { line = 99, file = "HookManager.ts" }, ["3420"] = { line = 93, file = "HookManager.ts" }, ["3421"] = { line = 101, file = "HookManager.ts" },
        ["3422"] = { line = 102, file = "HookManager.ts" }, ["3423"] = { line = 103, file = "HookManager.ts" }, ["3424"] = { line = 104, file = "HookManager.ts" },
        ["3426"] = { line = 106, file = "HookManager.ts" }, ["3427"] = { line = 107, file = "HookManager.ts" }, ["3428"] = { line = 108, file = "HookManager.ts" },
        ["3429"] = { line = 109, file = "HookManager.ts" }, ["3431"] = { line = 111, file = "HookManager.ts" }, ["3439"] = { line = 119, file = "HookManager.ts" },
        ["3440"] = { line = 120, file = "HookManager.ts" }, ["3443"] = { line = 122, file = "HookManager.ts" }, ["3444"] = { line = 83, file = "HookManager.ts" },
        ["3445"] = { line = 126, file = "HookManager.ts" }, ["3446"] = { line = 132, file = "HookManager.ts" }, ["3447"] = { line = 53, file = "HookManager.ts" },
        ["3448"] = { line = 166, file = "HookManager.ts" }, ["3449"] = { line = 167, file = "HookManager.ts" }, ["3450"] = { line = 168, file = "HookManager.ts" },
        ["3451"] = { line = 169, file = "HookManager.ts" }, ["3452"] = { line = 170, file = "HookManager.ts" }, ["3455"] = { line = 173, file = "HookManager.ts" },
        ["3456"] = { line = 166, file = "HookManager.ts" }, ["3457"] = { line = 176, file = "HookManager.ts" }, ["3458"] = { line = 41, file = "HookManager.ts" },
        ["3465"] = { line = 35, file = "types.ts" }, ["3466"] = { line = 36, file = "types.ts" }, ["3467"] = { line = 36, file = "types.ts" },
        ["3468"] = { line = 37, file = "types.ts" }, ["3469"] = { line = 37, file = "types.ts" }, ["3470"] = { line = 38, file = "types.ts" },
        ["3471"] = { line = 38, file = "types.ts" }, ["3472"] = { line = 39, file = "types.ts" }, ["3473"] = { line = 39, file = "types.ts" },
        ["3474"] = { line = 40, file = "types.ts" }, ["3475"] = { line = 40, file = "types.ts" }, ["3476"] = { line = 41, file = "types.ts" },
        ["3477"] = { line = 41, file = "types.ts" }, ["3478"] = { line = 43, file = "types.ts" }, ["3479"] = { line = 44, file = "types.ts" },
        ["3480"] = { line = 45, file = "types.ts" }, ["3481"] = { line = 46, file = "types.ts" }, ["3482"] = { line = 47, file = "types.ts" },
        ["3483"] = { line = 48, file = "types.ts" }, ["3484"] = { line = 49, file = "types.ts" }, ["3485"] = { line = 43, file = "types.ts" },
        ["3486"] = { line = 51, file = "types.ts" }, ["3487"] = { line = 52, file = "types.ts" }, ["3488"] = { line = 52, file = "types.ts" },
        ["3489"] = { line = 53, file = "types.ts" }, ["3490"] = { line = 53, file = "types.ts" }, ["3491"] = { line = 54, file = "types.ts" },
        ["3492"] = { line = 54, file = "types.ts" }, ["3493"] = { line = 55, file = "types.ts" }, ["3494"] = { line = 55, file = "types.ts" },
        ["3495"] = { line = 56, file = "types.ts" }, ["3496"] = { line = 56, file = "types.ts" }, ["3497"] = { line = 57, file = "types.ts" },
        ["3498"] = { line = 57, file = "types.ts" }, ["3499"] = { line = 58, file = "types.ts" }, ["3500"] = { line = 58, file = "types.ts" },
        ["3501"] = { line = 59, file = "types.ts" }, ["3502"] = { line = 59, file = "types.ts" }, ["3503"] = { line = 60, file = "types.ts" },
        ["3504"] = { line = 60, file = "types.ts" }, ["3505"] = { line = 61, file = "types.ts" }, ["3506"] = { line = 61, file = "types.ts" },
        ["3507"] = { line = 62, file = "types.ts" }, ["3508"] = { line = 62, file = "types.ts" }, ["3509"] = { line = 63, file = "types.ts" },
        ["3510"] = { line = 63, file = "types.ts" }, ["3511"] = { line = 64, file = "types.ts" }, ["3512"] = { line = 64, file = "types.ts" },
        ["3513"] = { line = 65, file = "types.ts" }, ["3514"] = { line = 65, file = "types.ts" }, ["3516"] = { line = 78, file = "types.ts" },
        ["3517"] = { line = 78, file = "types.ts" }, ["3518"] = { line = 78, file = "types.ts" }, ["3520"] = { line = 82, file = "types.ts" },
        ["3521"] = { line = 83, file = "types.ts" }, ["3522"] = { line = 83, file = "types.ts" }, ["3523"] = { line = 84, file = "types.ts" },
        ["3524"] = { line = 84, file = "types.ts" }, ["3525"] = { line = 111, file = "types.ts" }, ["3526"] = { line = 112, file = "types.ts" },
        ["3527"] = { line = 113, file = "types.ts" }, ["3528"] = { line = 114, file = "types.ts" }, ["3529"] = { line = 115, file = "types.ts" },
        ["3531"] = { line = 117, file = "types.ts" }, ["3533"] = { line = 112, file = "types.ts" }, ["3542"] = { line = 1, file = "HMedia.ts" },
        ["3543"] = { line = 1, file = "HMedia.ts" }, ["3544"] = { line = 1, file = "HMedia.ts" }, ["3545"] = { line = 2, file = "HMedia.ts" },
        ["3546"] = { line = 2, file = "HMedia.ts" }, ["3547"] = { line = 5, file = "HMedia.ts" }, ["3548"] = { line = 5, file = "HMedia.ts" },
        ["3549"] = { line = 5, file = "HMedia.ts" }, ["3550"] = { line = 6, file = "HMedia.ts" }, ["3551"] = { line = 5, file = "HMedia.ts" },
        ["3552"] = { line = 7, file = "HMedia.ts" }, ["3553"] = { line = 7, file = "HMedia.ts" }, ["3554"] = { line = 7, file = "HMedia.ts" },
        ["3555"] = { line = 7, file = "HMedia.ts" }, ["3556"] = { line = 7, file = "HMedia.ts" }, ["3557"] = { line = 7, file = "HMedia.ts" },
        ["3558"] = { line = 7, file = "HMedia.ts" }, ["3559"] = { line = 7, file = "HMedia.ts" }, ["3560"] = { line = 7, file = "HMedia.ts" },
        ["3561"] = { line = 7, file = "HMedia.ts" }, ["3562"] = { line = 7, file = "HMedia.ts" }, ["3563"] = { line = 7, file = "HMedia.ts" },
        ["3564"] = { line = 6, file = "HMedia.ts" }, ["3565"] = { line = 6, file = "HMedia.ts" }, ["3566"] = { line = 11, file = "HMedia.ts" },
        ["3576"] = { line = 68, file = "HAppearance.ts" }, ["3577"] = { line = 1, file = "HAppearance.ts" }, ["3578"] = { line = 1, file = "HAppearance.ts" },
        ["3579"] = { line = 2, file = "HAppearance.ts" }, ["3580"] = { line = 2, file = "HAppearance.ts" }, ["3581"] = { line = 3, file = "HAppearance.ts" },
        ["3582"] = { line = 3, file = "HAppearance.ts" }, ["3583"] = { line = 5, file = "HAppearance.ts" }, ["3584"] = { line = 5, file = "HAppearance.ts" },
        ["3585"] = { line = 5, file = "HAppearance.ts" }, ["3586"] = { line = 68, file = "HAppearance.ts" }, ["3587"] = { line = 79, file = "HAppearance.ts" },
        ["3588"] = { line = 80, file = "HAppearance.ts" }, ["3589"] = { line = 81, file = "HAppearance.ts" }, ["3590"] = { line = 82, file = "HAppearance.ts" },
        ["3591"] = { line = 83, file = "HAppearance.ts" }, ["3592"] = { line = 85, file = "HAppearance.ts" }, ["3594"] = { line = 30, file = "HAppearance.ts" },
        ["3595"] = { line = 30, file = "HAppearance.ts" }, ["3596"] = { line = 30, file = "HAppearance.ts" }, ["3597"] = { line = 30, file = "HAppearance.ts" },
        ["3598"] = { line = 32, file = "HAppearance.ts" }, ["3599"] = { line = 33, file = "HAppearance.ts" }, ["3600"] = { line = 30, file = "HAppearance.ts" },
        ["3601"] = { line = 34, file = "HAppearance.ts" }, ["3602"] = { line = 34, file = "HAppearance.ts" }, ["3603"] = { line = 34, file = "HAppearance.ts" },
        ["3604"] = { line = 34, file = "HAppearance.ts" }, ["3605"] = { line = 34, file = "HAppearance.ts" }, ["3606"] = { line = 34, file = "HAppearance.ts" },
        ["3607"] = { line = 34, file = "HAppearance.ts" }, ["3608"] = { line = 34, file = "HAppearance.ts" }, ["3609"] = { line = 34, file = "HAppearance.ts" },
        ["3610"] = { line = 34, file = "HAppearance.ts" }, ["3611"] = { line = 34, file = "HAppearance.ts" }, ["3612"] = { line = 34, file = "HAppearance.ts" },
        ["3613"] = { line = 32, file = "HAppearance.ts" }, ["3614"] = { line = 37, file = "HAppearance.ts" }, ["3615"] = { line = 38, file = "HAppearance.ts" },
        ["3616"] = { line = 37, file = "HAppearance.ts" }, ["3617"] = { line = 41, file = "HAppearance.ts" }, ["3618"] = { line = 42, file = "HAppearance.ts" },
        ["3619"] = { line = 43, file = "HAppearance.ts" }, ["3620"] = { line = 43, file = "HAppearance.ts" }, ["3621"] = { line = 43, file = "HAppearance.ts" },
        ["3622"] = { line = 43, file = "HAppearance.ts" }, ["3624"] = { line = 46, file = "HAppearance.ts" }, ["3625"] = { line = 47, file = "HAppearance.ts" },
        ["3627"] = { line = 50, file = "HAppearance.ts" }, ["3628"] = { line = 41, file = "HAppearance.ts" }, ["3629"] = { line = 54, file = "HAppearance.ts" },
        ["3630"] = { line = 55, file = "HAppearance.ts" }, ["3631"] = { line = 56, file = "HAppearance.ts" }, ["3632"] = { line = 57, file = "HAppearance.ts" },
        ["3633"] = { line = 54, file = "HAppearance.ts" }, ["3640"] = { line = 1, file = "common.ts" }, ["3641"] = { line = 1, file = "common.ts" },
        ["3642"] = { line = 5, file = "common.ts" }, ["3643"] = { line = 6, file = "common.ts" }, ["3644"] = { line = 7, file = "common.ts" },
        ["3645"] = { line = 8, file = "common.ts" }, ["3647"] = { line = 10, file = "common.ts" }, ["3650"] = { line = 5, file = "common.ts" },
        ["3651"] = { line = 16, file = "common.ts" }, ["3652"] = { line = 17, file = "common.ts" }, ["3653"] = { line = 19, file = "common.ts" },
        ["3654"] = { line = 20, file = "common.ts" }, ["3655"] = { line = 21, file = "common.ts" }, ["3656"] = { line = 22, file = "common.ts" },
        ["3657"] = { line = 23, file = "common.ts" }, ["3659"] = { line = 25, file = "common.ts" }, ["3661"] = { line = 27, file = "common.ts" },
        ["3663"] = { line = 29, file = "common.ts" }, ["3665"] = { line = 20, file = "common.ts" }, ["3666"] = { line = 32, file = "common.ts" },
        ["3667"] = { line = 33, file = "common.ts" }, ["3668"] = { line = 32, file = "common.ts" }, ["3669"] = { line = 19, file = "common.ts" },
        ["3670"] = { line = 16, file = "common.ts" }, ["3679"] = { line = 1, file = "HBasicObject.ts" }, ["3680"] = { line = 1, file = "HBasicObject.ts" },
        ["3681"] = { line = 3, file = "HBasicObject.ts" }, ["3682"] = { line = 3, file = "HBasicObject.ts" }, ["3684"] = { line = 14, file = "HBasicObject.ts" },
        ["3685"] = { line = 14, file = "HBasicObject.ts" }, ["3686"] = { line = 32, file = "HBasicObject.ts" }, ["3687"] = { line = 34, file = "HBasicObject.ts" },
        ["3688"] = { line = 34, file = "HBasicObject.ts" }, ["3689"] = { line = 35, file = "HBasicObject.ts" }, ["3690"] = { line = 36, file = "HBasicObject.ts" },
        ["3691"] = { line = 37, file = "HBasicObject.ts" }, ["3692"] = { line = 39, file = "HBasicObject.ts" }, ["3693"] = { line = 41, file = "HBasicObject.ts" },
        ["3694"] = { line = 42, file = "HBasicObject.ts" }, ["3695"] = { line = 43, file = "HBasicObject.ts" }, ["3696"] = { line = 44, file = "HBasicObject.ts" },
        ["3697"] = { line = 31, file = "HBasicObject.ts" }, ["3702"] = { line = 70, file = "HBasicObject.ts" }, ["3710"] = { line = 74, file = "HBasicObject.ts" },
        ["3714"] = { line = 48, file = "HBasicObject.ts" }, ["3715"] = { line = 49, file = "HBasicObject.ts" }, ["3716"] = { line = 50, file = "HBasicObject.ts" },
        ["3718"] = { line = 52, file = "HBasicObject.ts" }, ["3720"] = { line = 48, file = "HBasicObject.ts" }, ["3721"] = { line = 61, file = "HBasicObject.ts" },
        ["3722"] = { line = 62, file = "HBasicObject.ts" }, ["3723"] = { line = 63, file = "HBasicObject.ts" }, ["3724"] = { line = 64, file = "HBasicObject.ts" },
        ["3726"] = { line = 66, file = "HBasicObject.ts" }, ["3727"] = { line = 61, file = "HBasicObject.ts" }, ["3728"] = { line = 77, file = "HBasicObject.ts" },
        ["3731"] = { line = 82, file = "HBasicObject.ts" }, ["3734"] = { line = 79, file = "HBasicObject.ts" }, ["3735"] = { line = 80, file = "HBasicObject.ts" },
        ["3741"] = { line = 78, file = "HBasicObject.ts" }, ["3744"] = { line = 77, file = "HBasicObject.ts" }, ["3745"] = { line = 104, file = "HBasicObject.ts" },
        ["3746"] = { line = 105, file = "HBasicObject.ts" }, ["3747"] = { line = 106, file = "HBasicObject.ts" },
        ["3748"] = { line = 107, file = "HBasicObject.ts" }, ["3750"] = { line = 109, file = "HBasicObject.ts" },
        ["3751"] = { line = 109, file = "HBasicObject.ts" }, ["3752"] = { line = 109, file = "HBasicObject.ts" },
        ["3753"] = { line = 109, file = "HBasicObject.ts" }, ["3754"] = { line = 109, file = "HBasicObject.ts" },
        ["3755"] = { line = 104, file = "HBasicObject.ts" }, ["3756"] = { line = 116, file = "HBasicObject.ts" },
        ["3757"] = { line = 117, file = "HBasicObject.ts" }, ["3758"] = { line = 118, file = "HBasicObject.ts" },
        ["3759"] = { line = 119, file = "HBasicObject.ts" }, ["3761"] = { line = 122, file = "HBasicObject.ts" },
        ["3762"] = { line = 123, file = "HBasicObject.ts" }, ["3763"] = { line = 123, file = "HBasicObject.ts" },
        ["3764"] = { line = 123, file = "HBasicObject.ts" }, ["3765"] = { line = 123, file = "HBasicObject.ts" },
        ["3767"] = { line = 125, file = "HBasicObject.ts" }, ["3769"] = { line = 127, file = "HBasicObject.ts" },
        ["3770"] = { line = 116, file = "HBasicObject.ts" }, ["3771"] = { line = 132, file = "HBasicObject.ts" },
        ["3781"] = { line = 291, file = "HObject.ts" }, ["3782"] = { line = 1, file = "HObject.ts" }, ["3783"] = { line = 1, file = "HObject.ts" },
        ["3784"] = { line = 2, file = "HObject.ts" }, ["3785"] = { line = 2, file = "HObject.ts" }, ["3786"] = { line = 2, file = "HObject.ts" },
        ["3787"] = { line = 2, file = "HObject.ts" }, ["3788"] = { line = 4, file = "HObject.ts" }, ["3789"] = { line = 4, file = "HObject.ts" },
        ["3790"] = { line = 5, file = "HObject.ts" }, ["3791"] = { line = 5, file = "HObject.ts" }, ["3792"] = { line = 291, file = "HObject.ts" },
        ["3793"] = { line = 292, file = "HObject.ts" }, ["3794"] = { line = 293, file = "HObject.ts" }, ["3795"] = { line = 294, file = "HObject.ts" },
        ["3796"] = { line = 295, file = "HObject.ts" }, ["3797"] = { line = 295, file = "HObject.ts" }, ["3798"] = { line = 295, file = "HObject.ts" },
        ["3799"] = { line = 295, file = "HObject.ts" }, ["3800"] = { line = 296, file = "HObject.ts" }, ["3801"] = { line = 297, file = "HObject.ts" },
        ["3803"] = { line = 299, file = "HObject.ts" }, ["3805"] = { line = 305, file = "HObject.ts" }, ["3807"] = { line = 306, file = "HObject.ts" },
        ["3808"] = { line = 307, file = "HObject.ts" }, ["3810"] = { line = 307, file = "HObject.ts" }, ["3812"] = { line = 308, file = "HObject.ts" },
        ["3814"] = { line = 308, file = "HObject.ts" }, ["3816"] = { line = 309, file = "HObject.ts" }, ["3818"] = { line = 309, file = "HObject.ts" },
        ["3820"] = { line = 310, file = "HObject.ts" }, ["3822"] = { line = 310, file = "HObject.ts" }, ["3824"] = { line = 311, file = "HObject.ts" },
        ["3826"] = { line = 311, file = "HObject.ts" }, ["3830"] = { line = 313, file = "HObject.ts" }, ["3835"] = { line = 321, file = "HObject.ts" },
        ["3837"] = { line = 322, file = "HObject.ts" }, ["3838"] = { line = 323, file = "HObject.ts" }, ["3840"] = { line = 323, file = "HObject.ts" },
        ["3842"] = { line = 324, file = "HObject.ts" }, ["3844"] = { line = 324, file = "HObject.ts" }, ["3846"] = { line = 325, file = "HObject.ts" },
        ["3848"] = { line = 325, file = "HObject.ts" }, ["3850"] = { line = 326, file = "HObject.ts" }, ["3852"] = { line = 326, file = "HObject.ts" },
        ["3854"] = { line = 327, file = "HObject.ts" }, ["3856"] = { line = 327, file = "HObject.ts" }, ["3860"] = { line = 329, file = "HObject.ts" },
        ["3866"] = { line = 14, file = "HObject.ts" }, ["3867"] = { line = 14, file = "HObject.ts" }, ["3868"] = { line = 14, file = "HObject.ts" },
        ["3869"] = { line = 17, file = "HObject.ts" }, ["3870"] = { line = 22, file = "HObject.ts" }, ["3871"] = { line = 22, file = "HObject.ts" },
        ["3872"] = { line = 23, file = "HObject.ts" }, ["3873"] = { line = 25, file = "HObject.ts" }, ["3874"] = { line = 26, file = "HObject.ts" },
        ["3876"] = { line = 17, file = "HObject.ts" }, ["3877"] = { line = 28, file = "HObject.ts" }, ["3878"] = { line = 28, file = "HObject.ts" },
        ["3879"] = { line = 28, file = "HObject.ts" }, ["3880"] = { line = 32, file = "HObject.ts" }, ["3881"] = { line = 22, file = "HObject.ts" },
        ["3882"] = { line = 35, file = "HObject.ts" }, ["3883"] = { line = 36, file = "HObject.ts" }, ["3884"] = { line = 35, file = "HObject.ts" },
        ["3885"] = { line = 39, file = "HObject.ts" }, ["3886"] = { line = 40, file = "HObject.ts" }, ["3887"] = { line = 41, file = "HObject.ts" },
        ["3888"] = { line = 42, file = "HObject.ts" }, ["3889"] = { line = 43, file = "HObject.ts" }, ["3890"] = { line = 43, file = "HObject.ts" },
        ["3891"] = { line = 43, file = "HObject.ts" }, ["3892"] = { line = 43, file = "HObject.ts" }, ["3893"] = { line = 43, file = "HObject.ts" },
        ["3895"] = { line = 45, file = "HObject.ts" }, ["3896"] = { line = 39, file = "HObject.ts" }, ["3897"] = { line = 48, file = "HObject.ts" },
        ["3898"] = { line = 49, file = "HObject.ts" }, ["3899"] = { line = 48, file = "HObject.ts" }, ["3900"] = { line = 54, file = "HObject.ts" },
        ["3901"] = { line = 55, file = "HObject.ts" }, ["3902"] = { line = 56, file = "HObject.ts" }, ["3903"] = { line = 54, file = "HObject.ts" },
        ["3904"] = { line = 59, file = "HObject.ts" }, ["3905"] = { line = 60, file = "HObject.ts" }, ["3906"] = { line = 61, file = "HObject.ts" },
        ["3907"] = { line = 59, file = "HObject.ts" }, ["3908"] = { line = 64, file = "HObject.ts" }, ["3909"] = { line = 65, file = "HObject.ts" },
        ["3910"] = { line = 64, file = "HObject.ts" }, ["3911"] = { line = 68, file = "HObject.ts" }, ["3912"] = { line = 69, file = "HObject.ts" },
        ["3913"] = { line = 68, file = "HObject.ts" }, ["3914"] = { line = 73, file = "HObject.ts" }, ["3917"] = { line = 78, file = "HObject.ts" },
        ["3920"] = { line = 75, file = "HObject.ts" }, ["3921"] = { line = 76, file = "HObject.ts" }, ["3927"] = { line = 74, file = "HObject.ts" },
        ["3930"] = { line = 73, file = "HObject.ts" }, ["3931"] = { line = 82, file = "HObject.ts" }, ["3932"] = { line = 83, file = "HObject.ts" },
        ["3933"] = { line = 84, file = "HObject.ts" }, ["3934"] = { line = 85, file = "HObject.ts" }, ["3936"] = { line = 87, file = "HObject.ts" },
        ["3937"] = { line = 88, file = "HObject.ts" }, ["3938"] = { line = 89, file = "HObject.ts" }, ["3939"] = { line = 90, file = "HObject.ts" },
        ["3941"] = { line = 92, file = "HObject.ts" }, ["3945"] = { line = 96, file = "HObject.ts" }, ["3946"] = { line = 96, file = "HObject.ts" },
        ["3947"] = { line = 96, file = "HObject.ts" }, ["3949"] = { line = 97, file = "HObject.ts" }, ["3950"] = { line = 82, file = "HObject.ts" },
        ["3951"] = { line = 100, file = "HObject.ts" }, ["3952"] = { line = 101, file = "HObject.ts" }, ["3953"] = { line = 100, file = "HObject.ts" },
        ["3954"] = { line = 104, file = "HObject.ts" }, ["3955"] = { line = 105, file = "HObject.ts" }, ["3956"] = { line = 106, file = "HObject.ts" },
        ["3957"] = { line = 107, file = "HObject.ts" }, ["3960"] = { line = 110, file = "HObject.ts" }, ["3961"] = { line = 111, file = "HObject.ts" },
        ["3962"] = { line = 112, file = "HObject.ts" }, ["3965"] = { line = 104, file = "HObject.ts" }, ["3966"] = { line = 117, file = "HObject.ts" },
        ["3967"] = { line = 118, file = "HObject.ts" }, ["3968"] = { line = 119, file = "HObject.ts" }, ["3969"] = { line = 117, file = "HObject.ts" },
        ["3970"] = { line = 122, file = "HObject.ts" }, ["3971"] = { line = 123, file = "HObject.ts" }, ["3972"] = { line = 124, file = "HObject.ts" },
        ["3973"] = { line = 122, file = "HObject.ts" }, ["3974"] = { line = 130, file = "HObject.ts" }, ["3975"] = { line = 131, file = "HObject.ts" },
        ["3976"] = { line = 132, file = "HObject.ts" }, ["3977"] = { line = 133, file = "HObject.ts" }, ["3978"] = { line = 134, file = "HObject.ts" },
        ["3979"] = { line = 135, file = "HObject.ts" }, ["3980"] = { line = 136, file = "HObject.ts" }, ["3981"] = { line = 137, file = "HObject.ts" },
        ["3982"] = { line = 138, file = "HObject.ts" }, ["3983"] = { line = 133, file = "HObject.ts" }, ["3985"] = { line = 141, file = "HObject.ts" },
        ["3986"] = { line = 130, file = "HObject.ts" }, ["3987"] = { line = 144, file = "HObject.ts" }, ["3988"] = { line = 145, file = "HObject.ts" },
        ["3989"] = { line = 146, file = "HObject.ts" }, ["3991"] = { line = 148, file = "HObject.ts" }, ["3992"] = { line = 149, file = "HObject.ts" },
        ["3993"] = { line = 149, file = "HObject.ts" }, ["3994"] = { line = 149, file = "HObject.ts" }, ["3996"] = { line = 149, file = "HObject.ts" },
        ["3997"] = { line = 149, file = "HObject.ts" }, ["3998"] = { line = 149, file = "HObject.ts" }, ["4001"] = { line = 144, file = "HObject.ts" },
        ["4002"] = { line = 153, file = "HObject.ts" }, ["4003"] = { line = 154, file = "HObject.ts" }, ["4004"] = { line = 154, file = "HObject.ts" },
        ["4005"] = { line = 154, file = "HObject.ts" }, ["4007"] = { line = 154, file = "HObject.ts" }, ["4008"] = { line = 155, file = "HObject.ts" },
        ["4009"] = { line = 156, file = "HObject.ts" }, ["4010"] = { line = 157, file = "HObject.ts" }, ["4012"] = { line = 159, file = "HObject.ts" },
        ["4013"] = { line = 160, file = "HObject.ts" }, ["4014"] = { line = 161, file = "HObject.ts" }, ["4015"] = { line = 162, file = "HObject.ts" },
        ["4016"] = { line = 163, file = "HObject.ts" }, ["4019"] = { line = 166, file = "HObject.ts" }, ["4020"] = { line = 167, file = "HObject.ts" },
        ["4021"] = { line = 168, file = "HObject.ts" }, ["4022"] = { line = 169, file = "HObject.ts" }, ["4024"] = { line = 171, file = "HObject.ts" },
        ["4025"] = { line = 172, file = "HObject.ts" }, ["4026"] = { line = 173, file = "HObject.ts" }, ["4028"] = { line = 175, file = "HObject.ts" },
        ["4029"] = { line = 175, file = "HObject.ts" }, ["4030"] = { line = 175, file = "HObject.ts" }, ["4031"] = { line = 175, file = "HObject.ts" },
        ["4036"] = { line = 180, file = "HObject.ts" }, ["4037"] = { line = 153, file = "HObject.ts" }, ["4038"] = { line = 183, file = "HObject.ts" },
        ["4039"] = { line = 184, file = "HObject.ts" }, ["4040"] = { line = 184, file = "HObject.ts" }, ["4041"] = { line = 184, file = "HObject.ts" },
        ["4042"] = { line = 184, file = "HObject.ts" }, ["4043"] = { line = 185, file = "HObject.ts" }, ["4044"] = { line = 186, file = "HObject.ts" },
        ["4046"] = { line = 188, file = "HObject.ts" }, ["4048"] = { line = 190, file = "HObject.ts" }, ["4049"] = { line = 183, file = "HObject.ts" },
        ["4050"] = { line = 196, file = "HObject.ts" }, ["4051"] = { line = 197, file = "HObject.ts" }, ["4052"] = { line = 197, file = "HObject.ts" },
        ["4053"] = { line = 197, file = "HObject.ts" }, ["4054"] = { line = 197, file = "HObject.ts" }, ["4055"] = { line = 198, file = "HObject.ts" },
        ["4056"] = { line = 199, file = "HObject.ts" }, ["4057"] = { line = 196, file = "HObject.ts" }, ["4058"] = { line = 202, file = "HObject.ts" },
        ["4059"] = { line = 203, file = "HObject.ts" }, ["4060"] = { line = 204, file = "HObject.ts" }, ["4061"] = { line = 205, file = "HObject.ts" },
        ["4062"] = { line = 206, file = "HObject.ts" }, ["4063"] = { line = 207, file = "HObject.ts" }, ["4064"] = { line = 208, file = "HObject.ts" },
        ["4065"] = { line = 209, file = "HObject.ts" }, ["4066"] = { line = 210, file = "HObject.ts" }, ["4070"] = { line = 214, file = "HObject.ts" },
        ["4071"] = { line = 202, file = "HObject.ts" }, ["4072"] = { line = 217, file = "HObject.ts" }, ["4073"] = { line = 218, file = "HObject.ts" },
        ["4074"] = { line = 219, file = "HObject.ts" }, ["4075"] = { line = 220, file = "HObject.ts" }, ["4077"] = { line = 222, file = "HObject.ts" },
        ["4078"] = { line = 223, file = "HObject.ts" }, ["4080"] = { line = 225, file = "HObject.ts" }, ["4082"] = { line = 227, file = "HObject.ts" },
        ["4083"] = { line = 217, file = "HObject.ts" }, ["4084"] = { line = 230, file = "HObject.ts" }, ["4085"] = { line = 231, file = "HObject.ts" },
        ["4086"] = { line = 232, file = "HObject.ts" }, ["4088"] = { line = 234, file = "HObject.ts" }, ["4089"] = { line = 230, file = "HObject.ts" },
        ["4090"] = { line = 237, file = "HObject.ts" }, ["4091"] = { line = 238, file = "HObject.ts" }, ["4092"] = { line = 239, file = "HObject.ts" },
        ["4093"] = { line = 240, file = "HObject.ts" }, ["4094"] = { line = 241, file = "HObject.ts" }, ["4095"] = { line = 242, file = "HObject.ts" },
        ["4096"] = { line = 243, file = "HObject.ts" }, ["4098"] = { line = 245, file = "HObject.ts" }, ["4099"] = { line = 245, file = "HObject.ts" },
        ["4100"] = { line = 245, file = "HObject.ts" }, ["4101"] = { line = 245, file = "HObject.ts" }, ["4104"] = { line = 248, file = "HObject.ts" },
        ["4105"] = { line = 237, file = "HObject.ts" }, ["4106"] = { line = 251, file = "HObject.ts" }, ["4107"] = { line = 252, file = "HObject.ts" },
        ["4108"] = { line = 253, file = "HObject.ts" }, ["4109"] = { line = 251, file = "HObject.ts" }, ["4110"] = { line = 259, file = "HObject.ts" },
        ["4111"] = { line = 260, file = "HObject.ts" }, ["4112"] = { line = 261, file = "HObject.ts" }, ["4113"] = { line = 262, file = "HObject.ts" },
        ["4114"] = { line = 263, file = "HObject.ts" }, ["4115"] = { line = 264, file = "HObject.ts" }, ["4117"] = { line = 266, file = "HObject.ts" },
        ["4118"] = { line = 259, file = "HObject.ts" }, ["4119"] = { line = 269, file = "HObject.ts" }, ["4120"] = { line = 270, file = "HObject.ts" },
        ["4121"] = { line = 269, file = "HObject.ts" }, ["4122"] = { line = 273, file = "HObject.ts" }, ["4123"] = { line = 274, file = "HObject.ts" },
        ["4124"] = { line = 273, file = "HObject.ts" }, ["4133"] = { line = 1, file = "HPreset.ts" }, ["4134"] = { line = 1, file = "HPreset.ts" },
        ["4135"] = { line = 1, file = "HPreset.ts" }, ["4136"] = { line = 2, file = "HPreset.ts" }, ["4137"] = { line = 2, file = "HPreset.ts" },
        ["4138"] = { line = 5, file = "HPreset.ts" }, ["4139"] = { line = 6, file = "HPreset.ts" }, ["4140"] = { line = 6, file = "HPreset.ts" },
        ["4141"] = { line = 7, file = "HPreset.ts" }, ["4142"] = { line = 7, file = "HPreset.ts" }, ["4143"] = { line = 8, file = "HPreset.ts" },
        ["4144"] = { line = 8, file = "HPreset.ts" }, ["4145"] = { line = 9, file = "HPreset.ts" }, ["4146"] = { line = 9, file = "HPreset.ts" },
        ["4147"] = { line = 10, file = "HPreset.ts" }, ["4148"] = { line = 10, file = "HPreset.ts" }, ["4149"] = { line = 11, file = "HPreset.ts" },
        ["4150"] = { line = 11, file = "HPreset.ts" }, ["4151"] = { line = 12, file = "HPreset.ts" }, ["4152"] = { line = 12, file = "HPreset.ts" },
        ["4153"] = { line = 13, file = "HPreset.ts" }, ["4154"] = { line = 13, file = "HPreset.ts" }, ["4155"] = { line = 14, file = "HPreset.ts" },
        ["4156"] = { line = 14, file = "HPreset.ts" }, ["4157"] = { line = 15, file = "HPreset.ts" }, ["4158"] = { line = 15, file = "HPreset.ts" },
        ["4159"] = { line = 16, file = "HPreset.ts" }, ["4160"] = { line = 16, file = "HPreset.ts" }, ["4161"] = { line = 17, file = "HPreset.ts" },
        ["4162"] = { line = 17, file = "HPreset.ts" }, ["4163"] = { line = 18, file = "HPreset.ts" }, ["4164"] = { line = 18, file = "HPreset.ts" },
        ["4165"] = { line = 19, file = "HPreset.ts" }, ["4166"] = { line = 19, file = "HPreset.ts" }, ["4167"] = { line = 21, file = "HPreset.ts" },
        ["4168"] = { line = 21, file = "HPreset.ts" }, ["4169"] = { line = 21, file = "HPreset.ts" }, ["4170"] = { line = 23, file = "HPreset.ts" },
        ["4171"] = { line = 24, file = "HPreset.ts" }, ["4172"] = { line = 21, file = "HPreset.ts" }, ["4173"] = { line = 25, file = "HPreset.ts" },
        ["4174"] = { line = 25, file = "HPreset.ts" }, ["4175"] = { line = 25, file = "HPreset.ts" }, ["4176"] = { line = 25, file = "HPreset.ts" },
        ["4177"] = { line = 25, file = "HPreset.ts" }, ["4178"] = { line = 25, file = "HPreset.ts" }, ["4179"] = { line = 25, file = "HPreset.ts" },
        ["4180"] = { line = 25, file = "HPreset.ts" }, ["4181"] = { line = 23, file = "HPreset.ts" }, ["4182"] = { line = 30, file = "HPreset.ts" },
        ["4194"] = { line = 46, file = "MAPoolsInfo.ts" }, ["4195"] = { line = 47, file = "MAPoolsInfo.ts" }, ["4196"] = { line = 48, file = "MAPoolsInfo.ts" },
        ["4197"] = { line = 49, file = "MAPoolsInfo.ts" }, ["4198"] = { line = 51, file = "MAPoolsInfo.ts" }, ["4199"] = { line = 52, file = "MAPoolsInfo.ts" },
        ["4200"] = { line = 53, file = "MAPoolsInfo.ts" }, ["4201"] = { line = 54, file = "MAPoolsInfo.ts" }, ["4204"] = { line = 58, file = "MAPoolsInfo.ts" },
        ["4205"] = { line = 51, file = "MAPoolsInfo.ts" }, ["4206"] = { line = 61, file = "MAPoolsInfo.ts" }, ["4207"] = { line = 63, file = "MAPoolsInfo.ts" },
        ["4208"] = { line = 64, file = "MAPoolsInfo.ts" }, ["4209"] = { line = 65, file = "MAPoolsInfo.ts" }, ["4210"] = { line = 66, file = "MAPoolsInfo.ts" },
        ["4213"] = { line = 69, file = "MAPoolsInfo.ts" }, ["4214"] = { line = 61, file = "MAPoolsInfo.ts" }, ["4215"] = { line = 102, file = "MAPoolsInfo.ts" },
        ["4216"] = { line = 102, file = "MAPoolsInfo.ts" }, ["4217"] = { line = 102, file = "MAPoolsInfo.ts" }, ["4218"] = { line = 103, file = "MAPoolsInfo.ts" },
        ["4219"] = { line = 103, file = "MAPoolsInfo.ts" }, ["4220"] = { line = 103, file = "MAPoolsInfo.ts" }, ["4225"] = { line = 108, file = "MAPoolsInfo.ts" },
        ["4233"] = { line = 109, file = "MAPoolsInfo.ts" }, ["4241"] = { line = 110, file = "MAPoolsInfo.ts" }, ["4249"] = { line = 111, file = "MAPoolsInfo.ts" },
        ["4257"] = { line = 112, file = "MAPoolsInfo.ts" }, ["4265"] = { line = 113, file = "MAPoolsInfo.ts" }, ["4273"] = { line = 114, file = "MAPoolsInfo.ts" },
        ["4274"] = { line = 114, file = "MAPoolsInfo.ts" }, ["4275"] = { line = 114, file = "MAPoolsInfo.ts" }, ["4277"] = { line = 114, file = "MAPoolsInfo.ts" },
        ["4279"] = { line = 114, file = "MAPoolsInfo.ts" }, ["4287"] = { line = 115, file = "MAPoolsInfo.ts" }, ["4295"] = { line = 116, file = "MAPoolsInfo.ts" },
        ["4303"] = { line = 117, file = "MAPoolsInfo.ts" }, ["4311"] = { line = 118, file = "MAPoolsInfo.ts" }, ["4315"] = { line = 105, file = "MAPoolsInfo.ts" },
        ["4316"] = { line = 106, file = "MAPoolsInfo.ts" }, ["4317"] = { line = 105, file = "MAPoolsInfo.ts" }, ["4318"] = { line = 120, file = "MAPoolsInfo.ts" },
        ["4319"] = { line = 120, file = "MAPoolsInfo.ts" }, ["4320"] = { line = 120, file = "MAPoolsInfo.ts" }, ["4321"] = { line = 121, file = "MAPoolsInfo.ts" },
        ["4322"] = { line = 121, file = "MAPoolsInfo.ts" }, ["4323"] = { line = 121, file = "MAPoolsInfo.ts" }, ["4324"] = { line = 122, file = "MAPoolsInfo.ts" },
        ["4325"] = { line = 123, file = "MAPoolsInfo.ts" }, ["4326"] = { line = 123, file = "MAPoolsInfo.ts" }, ["4327"] = { line = 123, file = "MAPoolsInfo.ts" },
        ["4328"] = { line = 124, file = "MAPoolsInfo.ts" }, ["4329"] = { line = 122, file = "MAPoolsInfo.ts" }, ["4330"] = { line = 130, file = "MAPoolsInfo.ts" },
        ["4331"] = { line = 131, file = "MAPoolsInfo.ts" }, ["4332"] = { line = 131, file = "MAPoolsInfo.ts" }, ["4333"] = { line = 131, file = "MAPoolsInfo.ts" },
        ["4334"] = { line = 132, file = "MAPoolsInfo.ts" }, ["4335"] = { line = 133, file = "MAPoolsInfo.ts" }, ["4336"] = { line = 134, file = "MAPoolsInfo.ts" },
        ["4337"] = { line = 135, file = "MAPoolsInfo.ts" }, ["4338"] = { line = 136, file = "MAPoolsInfo.ts" }, ["4339"] = { line = 136, file = "MAPoolsInfo.ts" },
        ["4340"] = { line = 136, file = "MAPoolsInfo.ts" }, ["4341"] = { line = 137, file = "MAPoolsInfo.ts" }, ["4342"] = { line = 138, file = "MAPoolsInfo.ts" },
        ["4343"] = { line = 139, file = "MAPoolsInfo.ts" }, ["4344"] = { line = 140, file = "MAPoolsInfo.ts" }, ["4345"] = { line = 131, file = "MAPoolsInfo.ts" },
        ["4346"] = { line = 131, file = "MAPoolsInfo.ts" }, ["4347"] = { line = 142, file = "MAPoolsInfo.ts" }, ["4348"] = { line = 142, file = "MAPoolsInfo.ts" },
        ["4349"] = { line = 142, file = "MAPoolsInfo.ts" }, ["4350"] = { line = 143, file = "MAPoolsInfo.ts" }, ["4351"] = { line = 144, file = "MAPoolsInfo.ts" },
        ["4352"] = { line = 145, file = "MAPoolsInfo.ts" }, ["4353"] = { line = 146, file = "MAPoolsInfo.ts" }, ["4354"] = { line = 147, file = "MAPoolsInfo.ts" },
        ["4355"] = { line = 147, file = "MAPoolsInfo.ts" }, ["4356"] = { line = 147, file = "MAPoolsInfo.ts" }, ["4357"] = { line = 147, file = "MAPoolsInfo.ts" },
        ["4359"] = { line = 147, file = "MAPoolsInfo.ts" }, ["4360"] = { line = 147, file = "MAPoolsInfo.ts" }, ["4361"] = { line = 148, file = "MAPoolsInfo.ts" },
        ["4362"] = { line = 149, file = "MAPoolsInfo.ts" }, ["4363"] = { line = 150, file = "MAPoolsInfo.ts" }, ["4364"] = { line = 151, file = "MAPoolsInfo.ts" },
        ["4365"] = { line = 142, file = "MAPoolsInfo.ts" }, ["4366"] = { line = 142, file = "MAPoolsInfo.ts" }, ["4367"] = { line = 153, file = "MAPoolsInfo.ts" },
        ["4368"] = { line = 153, file = "MAPoolsInfo.ts" }, ["4369"] = { line = 153, file = "MAPoolsInfo.ts" }, ["4370"] = { line = 154, file = "MAPoolsInfo.ts" },
        ["4371"] = { line = 155, file = "MAPoolsInfo.ts" }, ["4372"] = { line = 156, file = "MAPoolsInfo.ts" }, ["4373"] = { line = 157, file = "MAPoolsInfo.ts" },
        ["4374"] = { line = 158, file = "MAPoolsInfo.ts" }, ["4375"] = { line = 158, file = "MAPoolsInfo.ts" }, ["4376"] = { line = 158, file = "MAPoolsInfo.ts" },
        ["4377"] = { line = 158, file = "MAPoolsInfo.ts" }, ["4379"] = { line = 158, file = "MAPoolsInfo.ts" }, ["4380"] = { line = 158, file = "MAPoolsInfo.ts" },
        ["4381"] = { line = 159, file = "MAPoolsInfo.ts" }, ["4382"] = { line = 160, file = "MAPoolsInfo.ts" }, ["4383"] = { line = 161, file = "MAPoolsInfo.ts" },
        ["4384"] = { line = 162, file = "MAPoolsInfo.ts" }, ["4385"] = { line = 153, file = "MAPoolsInfo.ts" }, ["4386"] = { line = 153, file = "MAPoolsInfo.ts" },
        ["4387"] = { line = 164, file = "MAPoolsInfo.ts" }, ["4388"] = { line = 164, file = "MAPoolsInfo.ts" }, ["4389"] = { line = 164, file = "MAPoolsInfo.ts" },
        ["4390"] = { line = 165, file = "MAPoolsInfo.ts" }, ["4391"] = { line = 166, file = "MAPoolsInfo.ts" }, ["4392"] = { line = 167, file = "MAPoolsInfo.ts" },
        ["4393"] = { line = 168, file = "MAPoolsInfo.ts" }, ["4394"] = { line = 169, file = "MAPoolsInfo.ts" }, ["4395"] = { line = 169, file = "MAPoolsInfo.ts" },
        ["4396"] = { line = 169, file = "MAPoolsInfo.ts" }, ["4397"] = { line = 170, file = "MAPoolsInfo.ts" }, ["4398"] = { line = 171, file = "MAPoolsInfo.ts" },
        ["4399"] = { line = 172, file = "MAPoolsInfo.ts" }, ["4400"] = { line = 173, file = "MAPoolsInfo.ts" }, ["4401"] = { line = 164, file = "MAPoolsInfo.ts" },
        ["4402"] = { line = 164, file = "MAPoolsInfo.ts" }, ["4403"] = { line = 175, file = "MAPoolsInfo.ts" }, ["4404"] = { line = 175, file = "MAPoolsInfo.ts" },
        ["4405"] = { line = 175, file = "MAPoolsInfo.ts" }, ["4406"] = { line = 176, file = "MAPoolsInfo.ts" }, ["4407"] = { line = 177, file = "MAPoolsInfo.ts" },
        ["4408"] = { line = 178, file = "MAPoolsInfo.ts" }, ["4409"] = { line = 179, file = "MAPoolsInfo.ts" }, ["4410"] = { line = 180, file = "MAPoolsInfo.ts" },
        ["4411"] = { line = 180, file = "MAPoolsInfo.ts" }, ["4412"] = { line = 180, file = "MAPoolsInfo.ts" }, ["4413"] = { line = 181, file = "MAPoolsInfo.ts" },
        ["4414"] = { line = 182, file = "MAPoolsInfo.ts" }, ["4415"] = { line = 183, file = "MAPoolsInfo.ts" }, ["4416"] = { line = 184, file = "MAPoolsInfo.ts" },
        ["4417"] = { line = 175, file = "MAPoolsInfo.ts" }, ["4418"] = { line = 175, file = "MAPoolsInfo.ts" }, ["4419"] = { line = 186, file = "MAPoolsInfo.ts" },
        ["4420"] = { line = 186, file = "MAPoolsInfo.ts" }, ["4421"] = { line = 186, file = "MAPoolsInfo.ts" }, ["4422"] = { line = 187, file = "MAPoolsInfo.ts" },
        ["4423"] = { line = 188, file = "MAPoolsInfo.ts" }, ["4424"] = { line = 189, file = "MAPoolsInfo.ts" }, ["4425"] = { line = 190, file = "MAPoolsInfo.ts" },
        ["4426"] = { line = 191, file = "MAPoolsInfo.ts" }, ["4427"] = { line = 191, file = "MAPoolsInfo.ts" }, ["4428"] = { line = 191, file = "MAPoolsInfo.ts" },
        ["4429"] = { line = 191, file = "MAPoolsInfo.ts" }, ["4431"] = { line = 191, file = "MAPoolsInfo.ts" }, ["4432"] = { line = 191, file = "MAPoolsInfo.ts" },
        ["4433"] = { line = 192, file = "MAPoolsInfo.ts" }, ["4434"] = { line = 193, file = "MAPoolsInfo.ts" }, ["4435"] = { line = 194, file = "MAPoolsInfo.ts" },
        ["4436"] = { line = 195, file = "MAPoolsInfo.ts" }, ["4437"] = { line = 186, file = "MAPoolsInfo.ts" }, ["4438"] = { line = 186, file = "MAPoolsInfo.ts" },
        ["4439"] = { line = 197, file = "MAPoolsInfo.ts" }, ["4440"] = { line = 197, file = "MAPoolsInfo.ts" }, ["4441"] = { line = 197, file = "MAPoolsInfo.ts" },
        ["4442"] = { line = 198, file = "MAPoolsInfo.ts" }, ["4443"] = { line = 199, file = "MAPoolsInfo.ts" }, ["4444"] = { line = 200, file = "MAPoolsInfo.ts" },
        ["4445"] = { line = 201, file = "MAPoolsInfo.ts" }, ["4446"] = { line = 202, file = "MAPoolsInfo.ts" }, ["4447"] = { line = 203, file = "MAPoolsInfo.ts" },
        ["4448"] = { line = 203, file = "MAPoolsInfo.ts" }, ["4449"] = { line = 203, file = "MAPoolsInfo.ts" }, ["4450"] = { line = 204, file = "MAPoolsInfo.ts" },
        ["4451"] = { line = 205, file = "MAPoolsInfo.ts" }, ["4452"] = { line = 206, file = "MAPoolsInfo.ts" }, ["4453"] = { line = 207, file = "MAPoolsInfo.ts" },
        ["4454"] = { line = 208, file = "MAPoolsInfo.ts" }, ["4455"] = { line = 197, file = "MAPoolsInfo.ts" }, ["4456"] = { line = 197, file = "MAPoolsInfo.ts" },
        ["4457"] = { line = 210, file = "MAPoolsInfo.ts" }, ["4458"] = { line = 210, file = "MAPoolsInfo.ts" }, ["4459"] = { line = 210, file = "MAPoolsInfo.ts" },
        ["4460"] = { line = 211, file = "MAPoolsInfo.ts" }, ["4461"] = { line = 212, file = "MAPoolsInfo.ts" }, ["4462"] = { line = 213, file = "MAPoolsInfo.ts" },
        ["4463"] = { line = 214, file = "MAPoolsInfo.ts" }, ["4464"] = { line = 215, file = "MAPoolsInfo.ts" }, ["4465"] = { line = 215, file = "MAPoolsInfo.ts" },
        ["4466"] = { line = 215, file = "MAPoolsInfo.ts" }, ["4467"] = { line = 216, file = "MAPoolsInfo.ts" }, ["4468"] = { line = 216, file = "MAPoolsInfo.ts" },
        ["4469"] = { line = 216, file = "MAPoolsInfo.ts" }, ["4470"] = { line = 217, file = "MAPoolsInfo.ts" }, ["4471"] = { line = 218, file = "MAPoolsInfo.ts" },
        ["4472"] = { line = 219, file = "MAPoolsInfo.ts" }, ["4473"] = { line = 220, file = "MAPoolsInfo.ts" }, ["4474"] = { line = 210, file = "MAPoolsInfo.ts" },
        ["4475"] = { line = 210, file = "MAPoolsInfo.ts" }, ["4476"] = { line = 221, file = "MAPoolsInfo.ts" }, ["4477"] = { line = 221, file = "MAPoolsInfo.ts" },
        ["4478"] = { line = 221, file = "MAPoolsInfo.ts" }, ["4479"] = { line = 222, file = "MAPoolsInfo.ts" }, ["4480"] = { line = 223, file = "MAPoolsInfo.ts" },
        ["4481"] = { line = 224, file = "MAPoolsInfo.ts" }, ["4482"] = { line = 225, file = "MAPoolsInfo.ts" }, ["4483"] = { line = 226, file = "MAPoolsInfo.ts" },
        ["4484"] = { line = 226, file = "MAPoolsInfo.ts" }, ["4485"] = { line = 226, file = "MAPoolsInfo.ts" }, ["4486"] = { line = 226, file = "MAPoolsInfo.ts" },
        ["4488"] = { line = 226, file = "MAPoolsInfo.ts" }, ["4489"] = { line = 226, file = "MAPoolsInfo.ts" }, ["4490"] = { line = 227, file = "MAPoolsInfo.ts" },
        ["4491"] = { line = 228, file = "MAPoolsInfo.ts" }, ["4492"] = { line = 229, file = "MAPoolsInfo.ts" }, ["4493"] = { line = 230, file = "MAPoolsInfo.ts" },
        ["4494"] = { line = 221, file = "MAPoolsInfo.ts" }, ["4495"] = { line = 221, file = "MAPoolsInfo.ts" }, ["4496"] = { line = 231, file = "MAPoolsInfo.ts" },
        ["4497"] = { line = 231, file = "MAPoolsInfo.ts" }, ["4498"] = { line = 231, file = "MAPoolsInfo.ts" }, ["4499"] = { line = 232, file = "MAPoolsInfo.ts" },
        ["4500"] = { line = 233, file = "MAPoolsInfo.ts" }, ["4501"] = { line = 234, file = "MAPoolsInfo.ts" }, ["4502"] = { line = 235, file = "MAPoolsInfo.ts" },
        ["4503"] = { line = 236, file = "MAPoolsInfo.ts" }, ["4504"] = { line = 236, file = "MAPoolsInfo.ts" }, ["4505"] = { line = 236, file = "MAPoolsInfo.ts" },
        ["4506"] = { line = 237, file = "MAPoolsInfo.ts" }, ["4507"] = { line = 237, file = "MAPoolsInfo.ts" }, ["4508"] = { line = 237, file = "MAPoolsInfo.ts" },
        ["4509"] = { line = 238, file = "MAPoolsInfo.ts" }, ["4510"] = { line = 239, file = "MAPoolsInfo.ts" }, ["4511"] = { line = 240, file = "MAPoolsInfo.ts" },
        ["4512"] = { line = 241, file = "MAPoolsInfo.ts" }, ["4513"] = { line = 231, file = "MAPoolsInfo.ts" }, ["4514"] = { line = 231, file = "MAPoolsInfo.ts" },
        ["4515"] = { line = 242, file = "MAPoolsInfo.ts" }, ["4516"] = { line = 242, file = "MAPoolsInfo.ts" }, ["4517"] = { line = 242, file = "MAPoolsInfo.ts" },
        ["4518"] = { line = 243, file = "MAPoolsInfo.ts" }, ["4519"] = { line = 244, file = "MAPoolsInfo.ts" }, ["4520"] = { line = 245, file = "MAPoolsInfo.ts" },
        ["4521"] = { line = 246, file = "MAPoolsInfo.ts" }, ["4522"] = { line = 247, file = "MAPoolsInfo.ts" }, ["4523"] = { line = 247, file = "MAPoolsInfo.ts" },
        ["4524"] = { line = 247, file = "MAPoolsInfo.ts" }, ["4525"] = { line = 247, file = "MAPoolsInfo.ts" }, ["4527"] = { line = 247, file = "MAPoolsInfo.ts" },
        ["4528"] = { line = 247, file = "MAPoolsInfo.ts" }, ["4529"] = { line = 248, file = "MAPoolsInfo.ts" }, ["4530"] = { line = 249, file = "MAPoolsInfo.ts" },
        ["4531"] = { line = 250, file = "MAPoolsInfo.ts" }, ["4532"] = { line = 251, file = "MAPoolsInfo.ts" }, ["4533"] = { line = 242, file = "MAPoolsInfo.ts" },
        ["4534"] = { line = 242, file = "MAPoolsInfo.ts" }, ["4535"] = { line = 252, file = "MAPoolsInfo.ts" }, ["4536"] = { line = 252, file = "MAPoolsInfo.ts" },
        ["4537"] = { line = 252, file = "MAPoolsInfo.ts" }, ["4538"] = { line = 253, file = "MAPoolsInfo.ts" }, ["4539"] = { line = 254, file = "MAPoolsInfo.ts" },
        ["4540"] = { line = 255, file = "MAPoolsInfo.ts" }, ["4541"] = { line = 256, file = "MAPoolsInfo.ts" }, ["4542"] = { line = 257, file = "MAPoolsInfo.ts" },
        ["4543"] = { line = 257, file = "MAPoolsInfo.ts" }, ["4544"] = { line = 257, file = "MAPoolsInfo.ts" }, ["4545"] = { line = 257, file = "MAPoolsInfo.ts" },
        ["4547"] = { line = 257, file = "MAPoolsInfo.ts" }, ["4548"] = { line = 257, file = "MAPoolsInfo.ts" }, ["4549"] = { line = 258, file = "MAPoolsInfo.ts" },
        ["4550"] = { line = 259, file = "MAPoolsInfo.ts" }, ["4551"] = { line = 260, file = "MAPoolsInfo.ts" }, ["4552"] = { line = 261, file = "MAPoolsInfo.ts" },
        ["4553"] = { line = 252, file = "MAPoolsInfo.ts" }, ["4554"] = { line = 252, file = "MAPoolsInfo.ts" }, ["4555"] = { line = 262, file = "MAPoolsInfo.ts" },
        ["4556"] = { line = 262, file = "MAPoolsInfo.ts" }, ["4557"] = { line = 262, file = "MAPoolsInfo.ts" }, ["4558"] = { line = 263, file = "MAPoolsInfo.ts" },
        ["4559"] = { line = 264, file = "MAPoolsInfo.ts" }, ["4560"] = { line = 265, file = "MAPoolsInfo.ts" }, ["4561"] = { line = 266, file = "MAPoolsInfo.ts" },
        ["4562"] = { line = 267, file = "MAPoolsInfo.ts" }, ["4563"] = { line = 267, file = "MAPoolsInfo.ts" }, ["4564"] = { line = 267, file = "MAPoolsInfo.ts" },
        ["4565"] = { line = 267, file = "MAPoolsInfo.ts" }, ["4567"] = { line = 267, file = "MAPoolsInfo.ts" }, ["4568"] = { line = 267, file = "MAPoolsInfo.ts" },
        ["4569"] = { line = 268, file = "MAPoolsInfo.ts" }, ["4570"] = { line = 269, file = "MAPoolsInfo.ts" }, ["4571"] = { line = 270, file = "MAPoolsInfo.ts" },
        ["4572"] = { line = 271, file = "MAPoolsInfo.ts" }, ["4573"] = { line = 262, file = "MAPoolsInfo.ts" }, ["4574"] = { line = 262, file = "MAPoolsInfo.ts" },
        ["4575"] = { line = 273, file = "MAPoolsInfo.ts" }, ["4576"] = { line = 273, file = "MAPoolsInfo.ts" }, ["4577"] = { line = 273, file = "MAPoolsInfo.ts" },
        ["4578"] = { line = 274, file = "MAPoolsInfo.ts" }, ["4579"] = { line = 275, file = "MAPoolsInfo.ts" }, ["4580"] = { line = 276, file = "MAPoolsInfo.ts" },
        ["4581"] = { line = 277, file = "MAPoolsInfo.ts" }, ["4582"] = { line = 278, file = "MAPoolsInfo.ts" }, ["4583"] = { line = 278, file = "MAPoolsInfo.ts" },
        ["4584"] = { line = 278, file = "MAPoolsInfo.ts" }, ["4585"] = { line = 279, file = "MAPoolsInfo.ts" }, ["4586"] = { line = 280, file = "MAPoolsInfo.ts" },
        ["4587"] = { line = 281, file = "MAPoolsInfo.ts" }, ["4588"] = { line = 282, file = "MAPoolsInfo.ts" }, ["4589"] = { line = 273, file = "MAPoolsInfo.ts" },
        ["4590"] = { line = 273, file = "MAPoolsInfo.ts" }, ["4591"] = { line = 284, file = "MAPoolsInfo.ts" }, ["4592"] = { line = 284, file = "MAPoolsInfo.ts" },
        ["4593"] = { line = 284, file = "MAPoolsInfo.ts" }, ["4594"] = { line = 285, file = "MAPoolsInfo.ts" }, ["4595"] = { line = 286, file = "MAPoolsInfo.ts" },
        ["4596"] = { line = 287, file = "MAPoolsInfo.ts" }, ["4597"] = { line = 288, file = "MAPoolsInfo.ts" }, ["4598"] = { line = 289, file = "MAPoolsInfo.ts" },
        ["4599"] = { line = 289, file = "MAPoolsInfo.ts" }, ["4600"] = { line = 289, file = "MAPoolsInfo.ts" }, ["4601"] = { line = 289, file = "MAPoolsInfo.ts" },
        ["4603"] = { line = 289, file = "MAPoolsInfo.ts" }, ["4604"] = { line = 289, file = "MAPoolsInfo.ts" }, ["4605"] = { line = 290, file = "MAPoolsInfo.ts" },
        ["4606"] = { line = 291, file = "MAPoolsInfo.ts" }, ["4607"] = { line = 292, file = "MAPoolsInfo.ts" }, ["4608"] = { line = 293, file = "MAPoolsInfo.ts" },
        ["4609"] = { line = 284, file = "MAPoolsInfo.ts" }, ["4610"] = { line = 284, file = "MAPoolsInfo.ts" }, ["4611"] = { line = 294, file = "MAPoolsInfo.ts" },
        ["4612"] = { line = 294, file = "MAPoolsInfo.ts" }, ["4613"] = { line = 294, file = "MAPoolsInfo.ts" }, ["4614"] = { line = 295, file = "MAPoolsInfo.ts" },
        ["4615"] = { line = 296, file = "MAPoolsInfo.ts" }, ["4616"] = { line = 297, file = "MAPoolsInfo.ts" }, ["4617"] = { line = 298, file = "MAPoolsInfo.ts" },
        ["4618"] = { line = 299, file = "MAPoolsInfo.ts" }, ["4619"] = { line = 299, file = "MAPoolsInfo.ts" }, ["4620"] = { line = 299, file = "MAPoolsInfo.ts" },
        ["4621"] = { line = 299, file = "MAPoolsInfo.ts" }, ["4623"] = { line = 299, file = "MAPoolsInfo.ts" }, ["4624"] = { line = 299, file = "MAPoolsInfo.ts" },
        ["4625"] = { line = 300, file = "MAPoolsInfo.ts" }, ["4626"] = { line = 301, file = "MAPoolsInfo.ts" }, ["4627"] = { line = 302, file = "MAPoolsInfo.ts" },
        ["4628"] = { line = 303, file = "MAPoolsInfo.ts" }, ["4629"] = { line = 294, file = "MAPoolsInfo.ts" }, ["4630"] = { line = 294, file = "MAPoolsInfo.ts" },
        ["4631"] = { line = 304, file = "MAPoolsInfo.ts" }, ["4632"] = { line = 304, file = "MAPoolsInfo.ts" }, ["4633"] = { line = 304, file = "MAPoolsInfo.ts" },
        ["4634"] = { line = 305, file = "MAPoolsInfo.ts" }, ["4635"] = { line = 306, file = "MAPoolsInfo.ts" }, ["4636"] = { line = 307, file = "MAPoolsInfo.ts" },
        ["4637"] = { line = 308, file = "MAPoolsInfo.ts" }, ["4638"] = { line = 309, file = "MAPoolsInfo.ts" }, ["4639"] = { line = 310, file = "MAPoolsInfo.ts" },
        ["4640"] = { line = 310, file = "MAPoolsInfo.ts" }, ["4641"] = { line = 310, file = "MAPoolsInfo.ts" }, ["4642"] = { line = 310, file = "MAPoolsInfo.ts" },
        ["4644"] = { line = 310, file = "MAPoolsInfo.ts" }, ["4645"] = { line = 310, file = "MAPoolsInfo.ts" }, ["4646"] = { line = 311, file = "MAPoolsInfo.ts" },
        ["4647"] = { line = 312, file = "MAPoolsInfo.ts" }, ["4648"] = { line = 313, file = "MAPoolsInfo.ts" }, ["4649"] = { line = 314, file = "MAPoolsInfo.ts" },
        ["4650"] = { line = 315, file = "MAPoolsInfo.ts" }, ["4651"] = { line = 304, file = "MAPoolsInfo.ts" }, ["4652"] = { line = 304, file = "MAPoolsInfo.ts" },
        ["4653"] = { line = 316, file = "MAPoolsInfo.ts" }, ["4654"] = { line = 316, file = "MAPoolsInfo.ts" }, ["4655"] = { line = 316, file = "MAPoolsInfo.ts" },
        ["4656"] = { line = 317, file = "MAPoolsInfo.ts" }, ["4657"] = { line = 318, file = "MAPoolsInfo.ts" }, ["4658"] = { line = 319, file = "MAPoolsInfo.ts" },
        ["4659"] = { line = 320, file = "MAPoolsInfo.ts" }, ["4660"] = { line = 321, file = "MAPoolsInfo.ts" }, ["4661"] = { line = 322, file = "MAPoolsInfo.ts" },
        ["4662"] = { line = 322, file = "MAPoolsInfo.ts" }, ["4663"] = { line = 322, file = "MAPoolsInfo.ts" }, ["4664"] = { line = 322, file = "MAPoolsInfo.ts" },
        ["4666"] = { line = 322, file = "MAPoolsInfo.ts" }, ["4667"] = { line = 322, file = "MAPoolsInfo.ts" }, ["4668"] = { line = 323, file = "MAPoolsInfo.ts" },
        ["4669"] = { line = 324, file = "MAPoolsInfo.ts" }, ["4670"] = { line = 325, file = "MAPoolsInfo.ts" }, ["4671"] = { line = 326, file = "MAPoolsInfo.ts" },
        ["4672"] = { line = 327, file = "MAPoolsInfo.ts" }, ["4673"] = { line = 316, file = "MAPoolsInfo.ts" }, ["4674"] = { line = 316, file = "MAPoolsInfo.ts" },
        ["4675"] = { line = 328, file = "MAPoolsInfo.ts" }, ["4676"] = { line = 328, file = "MAPoolsInfo.ts" }, ["4677"] = { line = 328, file = "MAPoolsInfo.ts" },
        ["4678"] = { line = 329, file = "MAPoolsInfo.ts" }, ["4679"] = { line = 330, file = "MAPoolsInfo.ts" }, ["4680"] = { line = 331, file = "MAPoolsInfo.ts" },
        ["4681"] = { line = 332, file = "MAPoolsInfo.ts" }, ["4682"] = { line = 333, file = "MAPoolsInfo.ts" }, ["4683"] = { line = 334, file = "MAPoolsInfo.ts" },
        ["4684"] = { line = 334, file = "MAPoolsInfo.ts" }, ["4685"] = { line = 334, file = "MAPoolsInfo.ts" }, ["4686"] = { line = 334, file = "MAPoolsInfo.ts" },
        ["4688"] = { line = 334, file = "MAPoolsInfo.ts" }, ["4689"] = { line = 334, file = "MAPoolsInfo.ts" }, ["4690"] = { line = 335, file = "MAPoolsInfo.ts" },
        ["4691"] = { line = 336, file = "MAPoolsInfo.ts" }, ["4692"] = { line = 337, file = "MAPoolsInfo.ts" }, ["4693"] = { line = 338, file = "MAPoolsInfo.ts" },
        ["4694"] = { line = 339, file = "MAPoolsInfo.ts" }, ["4695"] = { line = 328, file = "MAPoolsInfo.ts" }, ["4696"] = { line = 328, file = "MAPoolsInfo.ts" },
        ["4697"] = { line = 340, file = "MAPoolsInfo.ts" }, ["4698"] = { line = 340, file = "MAPoolsInfo.ts" }, ["4699"] = { line = 340, file = "MAPoolsInfo.ts" },
        ["4700"] = { line = 341, file = "MAPoolsInfo.ts" }, ["4701"] = { line = 342, file = "MAPoolsInfo.ts" }, ["4702"] = { line = 343, file = "MAPoolsInfo.ts" },
        ["4703"] = { line = 344, file = "MAPoolsInfo.ts" }, ["4704"] = { line = 345, file = "MAPoolsInfo.ts" }, ["4705"] = { line = 346, file = "MAPoolsInfo.ts" },
        ["4706"] = { line = 346, file = "MAPoolsInfo.ts" }, ["4707"] = { line = 346, file = "MAPoolsInfo.ts" }, ["4708"] = { line = 346, file = "MAPoolsInfo.ts" },
        ["4710"] = { line = 346, file = "MAPoolsInfo.ts" }, ["4711"] = { line = 346, file = "MAPoolsInfo.ts" }, ["4712"] = { line = 347, file = "MAPoolsInfo.ts" },
        ["4713"] = { line = 348, file = "MAPoolsInfo.ts" }, ["4714"] = { line = 349, file = "MAPoolsInfo.ts" }, ["4715"] = { line = 350, file = "MAPoolsInfo.ts" },
        ["4716"] = { line = 351, file = "MAPoolsInfo.ts" }, ["4717"] = { line = 340, file = "MAPoolsInfo.ts" }, ["4718"] = { line = 340, file = "MAPoolsInfo.ts" },
        ["4719"] = { line = 352, file = "MAPoolsInfo.ts" }, ["4720"] = { line = 352, file = "MAPoolsInfo.ts" }, ["4721"] = { line = 352, file = "MAPoolsInfo.ts" },
        ["4722"] = { line = 353, file = "MAPoolsInfo.ts" }, ["4723"] = { line = 354, file = "MAPoolsInfo.ts" }, ["4724"] = { line = 355, file = "MAPoolsInfo.ts" },
        ["4725"] = { line = 356, file = "MAPoolsInfo.ts" }, ["4726"] = { line = 357, file = "MAPoolsInfo.ts" }, ["4727"] = { line = 358, file = "MAPoolsInfo.ts" },
        ["4728"] = { line = 358, file = "MAPoolsInfo.ts" }, ["4729"] = { line = 358, file = "MAPoolsInfo.ts" }, ["4730"] = { line = 358, file = "MAPoolsInfo.ts" },
        ["4732"] = { line = 358, file = "MAPoolsInfo.ts" }, ["4733"] = { line = 358, file = "MAPoolsInfo.ts" }, ["4734"] = { line = 359, file = "MAPoolsInfo.ts" },
        ["4735"] = { line = 360, file = "MAPoolsInfo.ts" }, ["4736"] = { line = 361, file = "MAPoolsInfo.ts" }, ["4737"] = { line = 362, file = "MAPoolsInfo.ts" },
        ["4738"] = { line = 363, file = "MAPoolsInfo.ts" }, ["4739"] = { line = 352, file = "MAPoolsInfo.ts" }, ["4740"] = { line = 352, file = "MAPoolsInfo.ts" },
        ["4741"] = { line = 364, file = "MAPoolsInfo.ts" }, ["4742"] = { line = 364, file = "MAPoolsInfo.ts" }, ["4743"] = { line = 364, file = "MAPoolsInfo.ts" },
        ["4744"] = { line = 365, file = "MAPoolsInfo.ts" }, ["4745"] = { line = 366, file = "MAPoolsInfo.ts" }, ["4746"] = { line = 367, file = "MAPoolsInfo.ts" },
        ["4747"] = { line = 368, file = "MAPoolsInfo.ts" }, ["4748"] = { line = 369, file = "MAPoolsInfo.ts" }, ["4749"] = { line = 370, file = "MAPoolsInfo.ts" },
        ["4750"] = { line = 370, file = "MAPoolsInfo.ts" }, ["4751"] = { line = 370, file = "MAPoolsInfo.ts" }, ["4752"] = { line = 370, file = "MAPoolsInfo.ts" },
        ["4754"] = { line = 370, file = "MAPoolsInfo.ts" }, ["4755"] = { line = 370, file = "MAPoolsInfo.ts" }, ["4756"] = { line = 371, file = "MAPoolsInfo.ts" },
        ["4757"] = { line = 372, file = "MAPoolsInfo.ts" }, ["4758"] = { line = 373, file = "MAPoolsInfo.ts" }, ["4759"] = { line = 374, file = "MAPoolsInfo.ts" },
        ["4760"] = { line = 375, file = "MAPoolsInfo.ts" }, ["4761"] = { line = 364, file = "MAPoolsInfo.ts" }, ["4762"] = { line = 364, file = "MAPoolsInfo.ts" },
        ["4763"] = { line = 376, file = "MAPoolsInfo.ts" }, ["4764"] = { line = 376, file = "MAPoolsInfo.ts" }, ["4765"] = { line = 376, file = "MAPoolsInfo.ts" },
        ["4766"] = { line = 377, file = "MAPoolsInfo.ts" }, ["4767"] = { line = 378, file = "MAPoolsInfo.ts" }, ["4768"] = { line = 379, file = "MAPoolsInfo.ts" },
        ["4769"] = { line = 380, file = "MAPoolsInfo.ts" }, ["4770"] = { line = 381, file = "MAPoolsInfo.ts" }, ["4771"] = { line = 382, file = "MAPoolsInfo.ts" },
        ["4772"] = { line = 382, file = "MAPoolsInfo.ts" }, ["4773"] = { line = 382, file = "MAPoolsInfo.ts" }, ["4774"] = { line = 382, file = "MAPoolsInfo.ts" },
        ["4776"] = { line = 382, file = "MAPoolsInfo.ts" }, ["4777"] = { line = 382, file = "MAPoolsInfo.ts" }, ["4778"] = { line = 383, file = "MAPoolsInfo.ts" },
        ["4779"] = { line = 384, file = "MAPoolsInfo.ts" }, ["4780"] = { line = 385, file = "MAPoolsInfo.ts" }, ["4781"] = { line = 386, file = "MAPoolsInfo.ts" },
        ["4782"] = { line = 387, file = "MAPoolsInfo.ts" }, ["4783"] = { line = 376, file = "MAPoolsInfo.ts" }, ["4784"] = { line = 376, file = "MAPoolsInfo.ts" },
        ["4785"] = { line = 388, file = "MAPoolsInfo.ts" }, ["4786"] = { line = 388, file = "MAPoolsInfo.ts" }, ["4787"] = { line = 388, file = "MAPoolsInfo.ts" },
        ["4788"] = { line = 389, file = "MAPoolsInfo.ts" }, ["4789"] = { line = 390, file = "MAPoolsInfo.ts" }, ["4790"] = { line = 391, file = "MAPoolsInfo.ts" },
        ["4791"] = { line = 392, file = "MAPoolsInfo.ts" }, ["4792"] = { line = 393, file = "MAPoolsInfo.ts" }, ["4793"] = { line = 394, file = "MAPoolsInfo.ts" },
        ["4794"] = { line = 394, file = "MAPoolsInfo.ts" }, ["4795"] = { line = 394, file = "MAPoolsInfo.ts" }, ["4796"] = { line = 394, file = "MAPoolsInfo.ts" },
        ["4798"] = { line = 394, file = "MAPoolsInfo.ts" }, ["4799"] = { line = 394, file = "MAPoolsInfo.ts" }, ["4800"] = { line = 395, file = "MAPoolsInfo.ts" },
        ["4801"] = { line = 396, file = "MAPoolsInfo.ts" }, ["4802"] = { line = 397, file = "MAPoolsInfo.ts" }, ["4803"] = { line = 398, file = "MAPoolsInfo.ts" },
        ["4804"] = { line = 399, file = "MAPoolsInfo.ts" }, ["4805"] = { line = 388, file = "MAPoolsInfo.ts" }, ["4806"] = { line = 388, file = "MAPoolsInfo.ts" },
        ["4807"] = { line = 400, file = "MAPoolsInfo.ts" }, ["4808"] = { line = 400, file = "MAPoolsInfo.ts" }, ["4809"] = { line = 400, file = "MAPoolsInfo.ts" },
        ["4810"] = { line = 401, file = "MAPoolsInfo.ts" }, ["4811"] = { line = 402, file = "MAPoolsInfo.ts" }, ["4812"] = { line = 403, file = "MAPoolsInfo.ts" },
        ["4813"] = { line = 404, file = "MAPoolsInfo.ts" }, ["4814"] = { line = 405, file = "MAPoolsInfo.ts" }, ["4815"] = { line = 406, file = "MAPoolsInfo.ts" },
        ["4816"] = { line = 406, file = "MAPoolsInfo.ts" }, ["4817"] = { line = 406, file = "MAPoolsInfo.ts" }, ["4818"] = { line = 406, file = "MAPoolsInfo.ts" },
        ["4820"] = { line = 406, file = "MAPoolsInfo.ts" }, ["4821"] = { line = 406, file = "MAPoolsInfo.ts" }, ["4822"] = { line = 407, file = "MAPoolsInfo.ts" },
        ["4823"] = { line = 408, file = "MAPoolsInfo.ts" }, ["4824"] = { line = 409, file = "MAPoolsInfo.ts" }, ["4825"] = { line = 410, file = "MAPoolsInfo.ts" },
        ["4826"] = { line = 411, file = "MAPoolsInfo.ts" }, ["4827"] = { line = 400, file = "MAPoolsInfo.ts" }, ["4828"] = { line = 400, file = "MAPoolsInfo.ts" },
        ["4829"] = { line = 412, file = "MAPoolsInfo.ts" }, ["4830"] = { line = 412, file = "MAPoolsInfo.ts" }, ["4831"] = { line = 412, file = "MAPoolsInfo.ts" },
        ["4832"] = { line = 413, file = "MAPoolsInfo.ts" }, ["4833"] = { line = 414, file = "MAPoolsInfo.ts" }, ["4834"] = { line = 415, file = "MAPoolsInfo.ts" },
        ["4835"] = { line = 416, file = "MAPoolsInfo.ts" }, ["4836"] = { line = 417, file = "MAPoolsInfo.ts" }, ["4837"] = { line = 418, file = "MAPoolsInfo.ts" },
        ["4838"] = { line = 418, file = "MAPoolsInfo.ts" }, ["4839"] = { line = 418, file = "MAPoolsInfo.ts" }, ["4840"] = { line = 418, file = "MAPoolsInfo.ts" },
        ["4842"] = { line = 418, file = "MAPoolsInfo.ts" }, ["4843"] = { line = 418, file = "MAPoolsInfo.ts" }, ["4844"] = { line = 419, file = "MAPoolsInfo.ts" },
        ["4845"] = { line = 420, file = "MAPoolsInfo.ts" }, ["4846"] = { line = 421, file = "MAPoolsInfo.ts" }, ["4847"] = { line = 422, file = "MAPoolsInfo.ts" },
        ["4848"] = { line = 423, file = "MAPoolsInfo.ts" }, ["4849"] = { line = 412, file = "MAPoolsInfo.ts" }, ["4850"] = { line = 412, file = "MAPoolsInfo.ts" },
        ["4851"] = { line = 424, file = "MAPoolsInfo.ts" }, ["4852"] = { line = 424, file = "MAPoolsInfo.ts" }, ["4853"] = { line = 424, file = "MAPoolsInfo.ts" },
        ["4854"] = { line = 425, file = "MAPoolsInfo.ts" }, ["4855"] = { line = 426, file = "MAPoolsInfo.ts" }, ["4856"] = { line = 427, file = "MAPoolsInfo.ts" },
        ["4857"] = { line = 428, file = "MAPoolsInfo.ts" }, ["4858"] = { line = 429, file = "MAPoolsInfo.ts" }, ["4859"] = { line = 430, file = "MAPoolsInfo.ts" },
        ["4860"] = { line = 430, file = "MAPoolsInfo.ts" }, ["4861"] = { line = 430, file = "MAPoolsInfo.ts" }, ["4862"] = { line = 430, file = "MAPoolsInfo.ts" },
        ["4864"] = { line = 430, file = "MAPoolsInfo.ts" }, ["4865"] = { line = 430, file = "MAPoolsInfo.ts" }, ["4866"] = { line = 431, file = "MAPoolsInfo.ts" },
        ["4867"] = { line = 432, file = "MAPoolsInfo.ts" }, ["4868"] = { line = 433, file = "MAPoolsInfo.ts" }, ["4869"] = { line = 434, file = "MAPoolsInfo.ts" },
        ["4870"] = { line = 435, file = "MAPoolsInfo.ts" }, ["4871"] = { line = 424, file = "MAPoolsInfo.ts" }, ["4872"] = { line = 424, file = "MAPoolsInfo.ts" },
        ["4873"] = { line = 436, file = "MAPoolsInfo.ts" }, ["4874"] = { line = 436, file = "MAPoolsInfo.ts" }, ["4875"] = { line = 436, file = "MAPoolsInfo.ts" },
        ["4876"] = { line = 437, file = "MAPoolsInfo.ts" }, ["4877"] = { line = 438, file = "MAPoolsInfo.ts" }, ["4878"] = { line = 439, file = "MAPoolsInfo.ts" },
        ["4879"] = { line = 440, file = "MAPoolsInfo.ts" }, ["4880"] = { line = 441, file = "MAPoolsInfo.ts" }, ["4881"] = { line = 442, file = "MAPoolsInfo.ts" },
        ["4882"] = { line = 442, file = "MAPoolsInfo.ts" }, ["4883"] = { line = 442, file = "MAPoolsInfo.ts" }, ["4884"] = { line = 442, file = "MAPoolsInfo.ts" },
        ["4886"] = { line = 442, file = "MAPoolsInfo.ts" }, ["4887"] = { line = 442, file = "MAPoolsInfo.ts" }, ["4888"] = { line = 443, file = "MAPoolsInfo.ts" },
        ["4889"] = { line = 444, file = "MAPoolsInfo.ts" }, ["4890"] = { line = 445, file = "MAPoolsInfo.ts" }, ["4891"] = { line = 446, file = "MAPoolsInfo.ts" },
        ["4892"] = { line = 447, file = "MAPoolsInfo.ts" }, ["4893"] = { line = 436, file = "MAPoolsInfo.ts" }, ["4894"] = { line = 436, file = "MAPoolsInfo.ts" },
        ["4895"] = { line = 448, file = "MAPoolsInfo.ts" }, ["4896"] = { line = 448, file = "MAPoolsInfo.ts" }, ["4897"] = { line = 448, file = "MAPoolsInfo.ts" },
        ["4898"] = { line = 449, file = "MAPoolsInfo.ts" }, ["4899"] = { line = 450, file = "MAPoolsInfo.ts" }, ["4900"] = { line = 451, file = "MAPoolsInfo.ts" },
        ["4901"] = { line = 452, file = "MAPoolsInfo.ts" }, ["4902"] = { line = 453, file = "MAPoolsInfo.ts" }, ["4903"] = { line = 454, file = "MAPoolsInfo.ts" },
        ["4904"] = { line = 454, file = "MAPoolsInfo.ts" }, ["4905"] = { line = 454, file = "MAPoolsInfo.ts" }, ["4906"] = { line = 454, file = "MAPoolsInfo.ts" },
        ["4908"] = { line = 454, file = "MAPoolsInfo.ts" }, ["4909"] = { line = 454, file = "MAPoolsInfo.ts" }, ["4910"] = { line = 455, file = "MAPoolsInfo.ts" },
        ["4911"] = { line = 456, file = "MAPoolsInfo.ts" }, ["4912"] = { line = 457, file = "MAPoolsInfo.ts" }, ["4913"] = { line = 458, file = "MAPoolsInfo.ts" },
        ["4914"] = { line = 459, file = "MAPoolsInfo.ts" }, ["4915"] = { line = 448, file = "MAPoolsInfo.ts" }, ["4916"] = { line = 448, file = "MAPoolsInfo.ts" },
        ["4917"] = { line = 460, file = "MAPoolsInfo.ts" }, ["4918"] = { line = 460, file = "MAPoolsInfo.ts" }, ["4919"] = { line = 460, file = "MAPoolsInfo.ts" },
        ["4920"] = { line = 461, file = "MAPoolsInfo.ts" }, ["4921"] = { line = 462, file = "MAPoolsInfo.ts" }, ["4922"] = { line = 463, file = "MAPoolsInfo.ts" },
        ["4923"] = { line = 464, file = "MAPoolsInfo.ts" }, ["4924"] = { line = 465, file = "MAPoolsInfo.ts" }, ["4925"] = { line = 466, file = "MAPoolsInfo.ts" },
        ["4926"] = { line = 466, file = "MAPoolsInfo.ts" }, ["4927"] = { line = 466, file = "MAPoolsInfo.ts" }, ["4928"] = { line = 466, file = "MAPoolsInfo.ts" },
        ["4930"] = { line = 466, file = "MAPoolsInfo.ts" }, ["4931"] = { line = 466, file = "MAPoolsInfo.ts" }, ["4932"] = { line = 467, file = "MAPoolsInfo.ts" },
        ["4933"] = { line = 468, file = "MAPoolsInfo.ts" }, ["4934"] = { line = 469, file = "MAPoolsInfo.ts" }, ["4935"] = { line = 470, file = "MAPoolsInfo.ts" },
        ["4936"] = { line = 471, file = "MAPoolsInfo.ts" }, ["4937"] = { line = 460, file = "MAPoolsInfo.ts" }, ["4938"] = { line = 460, file = "MAPoolsInfo.ts" },
        ["4939"] = { line = 473, file = "MAPoolsInfo.ts" }, ["4940"] = { line = 473, file = "MAPoolsInfo.ts" }, ["4941"] = { line = 473, file = "MAPoolsInfo.ts" },
        ["4942"] = { line = 474, file = "MAPoolsInfo.ts" }, ["4943"] = { line = 475, file = "MAPoolsInfo.ts" }, ["4944"] = { line = 476, file = "MAPoolsInfo.ts" },
        ["4945"] = { line = 477, file = "MAPoolsInfo.ts" }, ["4946"] = { line = 478, file = "MAPoolsInfo.ts" }, ["4947"] = { line = 478, file = "MAPoolsInfo.ts" },
        ["4948"] = { line = 478, file = "MAPoolsInfo.ts" }, ["4949"] = { line = 478, file = "MAPoolsInfo.ts" }, ["4951"] = { line = 478, file = "MAPoolsInfo.ts" },
        ["4952"] = { line = 478, file = "MAPoolsInfo.ts" }, ["4953"] = { line = 479, file = "MAPoolsInfo.ts" }, ["4954"] = { line = 480, file = "MAPoolsInfo.ts" },
        ["4955"] = { line = 481, file = "MAPoolsInfo.ts" }, ["4956"] = { line = 482, file = "MAPoolsInfo.ts" }, ["4957"] = { line = 473, file = "MAPoolsInfo.ts" },
        ["4958"] = { line = 473, file = "MAPoolsInfo.ts" }, ["4959"] = { line = 484, file = "MAPoolsInfo.ts" }, ["4960"] = { line = 484, file = "MAPoolsInfo.ts" },
        ["4961"] = { line = 484, file = "MAPoolsInfo.ts" }, ["4962"] = { line = 485, file = "MAPoolsInfo.ts" }, ["4963"] = { line = 486, file = "MAPoolsInfo.ts" },
        ["4964"] = { line = 487, file = "MAPoolsInfo.ts" }, ["4965"] = { line = 488, file = "MAPoolsInfo.ts" }, ["4966"] = { line = 489, file = "MAPoolsInfo.ts" },
        ["4967"] = { line = 489, file = "MAPoolsInfo.ts" }, ["4968"] = { line = 489, file = "MAPoolsInfo.ts" }, ["4969"] = { line = 490, file = "MAPoolsInfo.ts" },
        ["4970"] = { line = 491, file = "MAPoolsInfo.ts" }, ["4971"] = { line = 492, file = "MAPoolsInfo.ts" }, ["4972"] = { line = 493, file = "MAPoolsInfo.ts" },
        ["4973"] = { line = 484, file = "MAPoolsInfo.ts" }, ["4974"] = { line = 484, file = "MAPoolsInfo.ts" }, ["4975"] = { line = 495, file = "MAPoolsInfo.ts" },
        ["4976"] = { line = 495, file = "MAPoolsInfo.ts" }, ["4977"] = { line = 495, file = "MAPoolsInfo.ts" }, ["4978"] = { line = 496, file = "MAPoolsInfo.ts" },
        ["4979"] = { line = 497, file = "MAPoolsInfo.ts" }, ["4980"] = { line = 498, file = "MAPoolsInfo.ts" }, ["4981"] = { line = 499, file = "MAPoolsInfo.ts" },
        ["4982"] = { line = 500, file = "MAPoolsInfo.ts" }, ["4983"] = { line = 500, file = "MAPoolsInfo.ts" }, ["4984"] = { line = 500, file = "MAPoolsInfo.ts" },
        ["4985"] = { line = 500, file = "MAPoolsInfo.ts" }, ["4987"] = { line = 500, file = "MAPoolsInfo.ts" }, ["4988"] = { line = 500, file = "MAPoolsInfo.ts" },
        ["4989"] = { line = 501, file = "MAPoolsInfo.ts" }, ["4990"] = { line = 502, file = "MAPoolsInfo.ts" }, ["4991"] = { line = 503, file = "MAPoolsInfo.ts" },
        ["4992"] = { line = 504, file = "MAPoolsInfo.ts" }, ["4993"] = { line = 505, file = "MAPoolsInfo.ts" }, ["4994"] = { line = 495, file = "MAPoolsInfo.ts" },
        ["4995"] = { line = 495, file = "MAPoolsInfo.ts" }, ["4996"] = { line = 507, file = "MAPoolsInfo.ts" }, ["4997"] = { line = 507, file = "MAPoolsInfo.ts" },
        ["4998"] = { line = 507, file = "MAPoolsInfo.ts" }, ["4999"] = { line = 508, file = "MAPoolsInfo.ts" }, ["5000"] = { line = 509, file = "MAPoolsInfo.ts" },
        ["5001"] = { line = 510, file = "MAPoolsInfo.ts" }, ["5002"] = { line = 511, file = "MAPoolsInfo.ts" }, ["5003"] = { line = 512, file = "MAPoolsInfo.ts" },
        ["5004"] = { line = 512, file = "MAPoolsInfo.ts" }, ["5005"] = { line = 512, file = "MAPoolsInfo.ts" }, ["5006"] = { line = 513, file = "MAPoolsInfo.ts" },
        ["5007"] = { line = 513, file = "MAPoolsInfo.ts" }, ["5008"] = { line = 513, file = "MAPoolsInfo.ts" }, ["5009"] = { line = 514, file = "MAPoolsInfo.ts" },
        ["5010"] = { line = 516, file = "MAPoolsInfo.ts" }, ["5011"] = { line = 517, file = "MAPoolsInfo.ts" }, ["5012"] = { line = 507, file = "MAPoolsInfo.ts" },
        ["5013"] = { line = 507, file = "MAPoolsInfo.ts" }, ["5014"] = { line = 519, file = "MAPoolsInfo.ts" }, ["5015"] = { line = 519, file = "MAPoolsInfo.ts" },
        ["5016"] = { line = 519, file = "MAPoolsInfo.ts" }, ["5017"] = { line = 520, file = "MAPoolsInfo.ts" }, ["5018"] = { line = 521, file = "MAPoolsInfo.ts" },
        ["5019"] = { line = 522, file = "MAPoolsInfo.ts" }, ["5020"] = { line = 523, file = "MAPoolsInfo.ts" }, ["5021"] = { line = 524, file = "MAPoolsInfo.ts" },
        ["5022"] = { line = 524, file = "MAPoolsInfo.ts" }, ["5023"] = { line = 524, file = "MAPoolsInfo.ts" }, ["5024"] = { line = 525, file = "MAPoolsInfo.ts" },
        ["5025"] = { line = 525, file = "MAPoolsInfo.ts" }, ["5026"] = { line = 525, file = "MAPoolsInfo.ts" }, ["5027"] = { line = 526, file = "MAPoolsInfo.ts" },
        ["5028"] = { line = 527, file = "MAPoolsInfo.ts" }, ["5029"] = { line = 528, file = "MAPoolsInfo.ts" }, ["5030"] = { line = 529, file = "MAPoolsInfo.ts" },
        ["5031"] = { line = 519, file = "MAPoolsInfo.ts" }, ["5032"] = { line = 519, file = "MAPoolsInfo.ts" }, ["5033"] = { line = 531, file = "MAPoolsInfo.ts" },
        ["5034"] = { line = 531, file = "MAPoolsInfo.ts" }, ["5035"] = { line = 531, file = "MAPoolsInfo.ts" }, ["5036"] = { line = 532, file = "MAPoolsInfo.ts" },
        ["5037"] = { line = 533, file = "MAPoolsInfo.ts" }, ["5038"] = { line = 534, file = "MAPoolsInfo.ts" }, ["5039"] = { line = 535, file = "MAPoolsInfo.ts" },
        ["5040"] = { line = 536, file = "MAPoolsInfo.ts" }, ["5041"] = { line = 536, file = "MAPoolsInfo.ts" }, ["5042"] = { line = 536, file = "MAPoolsInfo.ts" },
        ["5043"] = { line = 536, file = "MAPoolsInfo.ts" }, ["5045"] = { line = 536, file = "MAPoolsInfo.ts" }, ["5046"] = { line = 536, file = "MAPoolsInfo.ts" },
        ["5047"] = { line = 537, file = "MAPoolsInfo.ts" }, ["5048"] = { line = 538, file = "MAPoolsInfo.ts" }, ["5049"] = { line = 539, file = "MAPoolsInfo.ts" },
        ["5050"] = { line = 540, file = "MAPoolsInfo.ts" }, ["5051"] = { line = 531, file = "MAPoolsInfo.ts" }, ["5052"] = { line = 531, file = "MAPoolsInfo.ts" },
        ["5053"] = { line = 542, file = "MAPoolsInfo.ts" }, ["5054"] = { line = 542, file = "MAPoolsInfo.ts" }, ["5055"] = { line = 542, file = "MAPoolsInfo.ts" },
        ["5056"] = { line = 543, file = "MAPoolsInfo.ts" }, ["5057"] = { line = 544, file = "MAPoolsInfo.ts" }, ["5058"] = { line = 545, file = "MAPoolsInfo.ts" },
        ["5059"] = { line = 546, file = "MAPoolsInfo.ts" }, ["5060"] = { line = 547, file = "MAPoolsInfo.ts" }, ["5061"] = { line = 547, file = "MAPoolsInfo.ts" },
        ["5062"] = { line = 547, file = "MAPoolsInfo.ts" }, ["5063"] = { line = 548, file = "MAPoolsInfo.ts" }, ["5064"] = { line = 549, file = "MAPoolsInfo.ts" },
        ["5065"] = { line = 550, file = "MAPoolsInfo.ts" }, ["5066"] = { line = 551, file = "MAPoolsInfo.ts" }, ["5067"] = { line = 542, file = "MAPoolsInfo.ts" },
        ["5068"] = { line = 542, file = "MAPoolsInfo.ts" }, ["5069"] = { line = 553, file = "MAPoolsInfo.ts" }, ["5070"] = { line = 553, file = "MAPoolsInfo.ts" },
        ["5071"] = { line = 553, file = "MAPoolsInfo.ts" }, ["5072"] = { line = 554, file = "MAPoolsInfo.ts" }, ["5073"] = { line = 555, file = "MAPoolsInfo.ts" },
        ["5074"] = { line = 556, file = "MAPoolsInfo.ts" }, ["5075"] = { line = 557, file = "MAPoolsInfo.ts" }, ["5076"] = { line = 558, file = "MAPoolsInfo.ts" },
        ["5077"] = { line = 558, file = "MAPoolsInfo.ts" }, ["5078"] = { line = 558, file = "MAPoolsInfo.ts" }, ["5079"] = { line = 559, file = "MAPoolsInfo.ts" },
        ["5080"] = { line = 560, file = "MAPoolsInfo.ts" }, ["5081"] = { line = 561, file = "MAPoolsInfo.ts" }, ["5082"] = { line = 562, file = "MAPoolsInfo.ts" },
        ["5083"] = { line = 553, file = "MAPoolsInfo.ts" }, ["5084"] = { line = 553, file = "MAPoolsInfo.ts" }, ["5085"] = { line = 564, file = "MAPoolsInfo.ts" },
        ["5086"] = { line = 564, file = "MAPoolsInfo.ts" }, ["5087"] = { line = 564, file = "MAPoolsInfo.ts" }, ["5088"] = { line = 565, file = "MAPoolsInfo.ts" },
        ["5089"] = { line = 566, file = "MAPoolsInfo.ts" }, ["5090"] = { line = 567, file = "MAPoolsInfo.ts" }, ["5091"] = { line = 568, file = "MAPoolsInfo.ts" },
        ["5092"] = { line = 569, file = "MAPoolsInfo.ts" }, ["5093"] = { line = 569, file = "MAPoolsInfo.ts" }, ["5094"] = { line = 569, file = "MAPoolsInfo.ts" },
        ["5095"] = { line = 570, file = "MAPoolsInfo.ts" }, ["5096"] = { line = 570, file = "MAPoolsInfo.ts" }, ["5097"] = { line = 570, file = "MAPoolsInfo.ts" },
        ["5098"] = { line = 571, file = "MAPoolsInfo.ts" }, ["5099"] = { line = 573, file = "MAPoolsInfo.ts" }, ["5100"] = { line = 574, file = "MAPoolsInfo.ts" },
        ["5101"] = { line = 564, file = "MAPoolsInfo.ts" }, ["5102"] = { line = 564, file = "MAPoolsInfo.ts" }, ["5103"] = { line = 576, file = "MAPoolsInfo.ts" },
        ["5104"] = { line = 576, file = "MAPoolsInfo.ts" }, ["5105"] = { line = 576, file = "MAPoolsInfo.ts" }, ["5106"] = { line = 577, file = "MAPoolsInfo.ts" },
        ["5107"] = { line = 578, file = "MAPoolsInfo.ts" }, ["5108"] = { line = 579, file = "MAPoolsInfo.ts" }, ["5109"] = { line = 580, file = "MAPoolsInfo.ts" },
        ["5110"] = { line = 581, file = "MAPoolsInfo.ts" }, ["5111"] = { line = 581, file = "MAPoolsInfo.ts" }, ["5112"] = { line = 581, file = "MAPoolsInfo.ts" },
        ["5113"] = { line = 581, file = "MAPoolsInfo.ts" }, ["5115"] = { line = 581, file = "MAPoolsInfo.ts" }, ["5116"] = { line = 581, file = "MAPoolsInfo.ts" },
        ["5117"] = { line = 582, file = "MAPoolsInfo.ts" }, ["5118"] = { line = 583, file = "MAPoolsInfo.ts" }, ["5119"] = { line = 584, file = "MAPoolsInfo.ts" },
        ["5120"] = { line = 585, file = "MAPoolsInfo.ts" }, ["5121"] = { line = 576, file = "MAPoolsInfo.ts" }, ["5122"] = { line = 576, file = "MAPoolsInfo.ts" },
        ["5123"] = { line = 586, file = "MAPoolsInfo.ts" }, ["5124"] = { line = 586, file = "MAPoolsInfo.ts" }, ["5125"] = { line = 586, file = "MAPoolsInfo.ts" },
        ["5126"] = { line = 587, file = "MAPoolsInfo.ts" }, ["5127"] = { line = 588, file = "MAPoolsInfo.ts" }, ["5128"] = { line = 589, file = "MAPoolsInfo.ts" },
        ["5129"] = { line = 590, file = "MAPoolsInfo.ts" }, ["5130"] = { line = 591, file = "MAPoolsInfo.ts" }, ["5131"] = { line = 591, file = "MAPoolsInfo.ts" },
        ["5132"] = { line = 591, file = "MAPoolsInfo.ts" }, ["5133"] = { line = 591, file = "MAPoolsInfo.ts" }, ["5135"] = { line = 591, file = "MAPoolsInfo.ts" },
        ["5136"] = { line = 591, file = "MAPoolsInfo.ts" }, ["5137"] = { line = 592, file = "MAPoolsInfo.ts" }, ["5138"] = { line = 593, file = "MAPoolsInfo.ts" },
        ["5139"] = { line = 594, file = "MAPoolsInfo.ts" }, ["5140"] = { line = 595, file = "MAPoolsInfo.ts" }, ["5141"] = { line = 586, file = "MAPoolsInfo.ts" },
        ["5142"] = { line = 586, file = "MAPoolsInfo.ts" }, ["5143"] = { line = 130, file = "MAPoolsInfo.ts" }, ["5144"] = { line = 599, file = "MAPoolsInfo.ts" },
        ["5145"] = { line = 599, file = "MAPoolsInfo.ts" }, ["5146"] = { line = 599, file = "MAPoolsInfo.ts" }, ["5147"] = { line = 600, file = "MAPoolsInfo.ts" },
        ["5148"] = { line = 601, file = "MAPoolsInfo.ts" }, ["5149"] = { line = 599, file = "MAPoolsInfo.ts" }, ["5150"] = { line = 602, file = "MAPoolsInfo.ts" },
        ["5151"] = { line = 599, file = "MAPoolsInfo.ts" }, ["5152"] = { line = 604, file = "MAPoolsInfo.ts" }, ["5153"] = { line = 606, file = "MAPoolsInfo.ts" },
        ["5154"] = { line = 607, file = "MAPoolsInfo.ts" }, ["5155"] = { line = 607, file = "MAPoolsInfo.ts" }, ["5156"] = { line = 607, file = "MAPoolsInfo.ts" },
        ["5157"] = { line = 607, file = "MAPoolsInfo.ts" }, ["5158"] = { line = 606, file = "MAPoolsInfo.ts" }, ["5159"] = { line = 611, file = "MAPoolsInfo.ts" },
        ["5160"] = { line = 612, file = "MAPoolsInfo.ts" }, ["5161"] = { line = 613, file = "MAPoolsInfo.ts" }, ["5162"] = { line = 614, file = "MAPoolsInfo.ts" },
        ["5163"] = { line = 615, file = "MAPoolsInfo.ts" }, ["5164"] = { line = 611, file = "MAPoolsInfo.ts" }, ["5165"] = { line = 604, file = "MAPoolsInfo.ts" },
        ["5174"] = { line = 110, file = "HCue.ts" }, ["5175"] = { line = 1, file = "HCue.ts" }, ["5176"] = { line = 1, file = "HCue.ts" },
        ["5177"] = { line = 3, file = "HCue.ts" }, ["5178"] = { line = 3, file = "HCue.ts" }, ["5179"] = { line = 110, file = "HCue.ts" },
        ["5180"] = { line = 114, file = "HCue.ts" }, ["5181"] = { line = 115, file = "HCue.ts" }, ["5183"] = { line = 116, file = "HCue.ts" },
        ["5184"] = { line = 116, file = "HCue.ts" }, ["5185"] = { line = 117, file = "HCue.ts" }, ["5186"] = { line = 118, file = "HCue.ts" },
        ["5187"] = { line = 119, file = "HCue.ts" }, ["5189"] = { line = 116, file = "HCue.ts" }, ["5194"] = { line = 123, file = "HCue.ts" },
        ["5195"] = { line = 123, file = "HCue.ts" }, ["5196"] = { line = 124, file = "HCue.ts" }, ["5197"] = { line = 125, file = "HCue.ts" },
        ["5198"] = { line = 126, file = "HCue.ts" }, ["5200"] = { line = 123, file = "HCue.ts" }, ["5204"] = { line = 130, file = "HCue.ts" },
        ["5206"] = { line = 6, file = "HCue.ts" }, ["5207"] = { line = 6, file = "HCue.ts" }, ["5208"] = { line = 6, file = "HCue.ts" },
        ["5209"] = { line = 6, file = "HCue.ts" }, ["5210"] = { line = 11, file = "HCue.ts" }, ["5211"] = { line = 11, file = "HCue.ts" },
        ["5212"] = { line = 12, file = "HCue.ts" }, ["5213"] = { line = 12, file = "HCue.ts" }, ["5214"] = { line = 13, file = "HCue.ts" },
        ["5215"] = { line = 14, file = "HCue.ts" }, ["5216"] = { line = 15, file = "HCue.ts" }, ["5217"] = { line = 16, file = "HCue.ts" },
        ["5218"] = { line = 12, file = "HCue.ts" }, ["5219"] = { line = 18, file = "HCue.ts" }, ["5220"] = { line = 18, file = "HCue.ts" },
        ["5221"] = { line = 18, file = "HCue.ts" }, ["5222"] = { line = 6, file = "HCue.ts" }, ["5223"] = { line = 19, file = "HCue.ts" },
        ["5224"] = { line = 20, file = "HCue.ts" }, ["5225"] = { line = 21, file = "HCue.ts" }, ["5226"] = { line = 22, file = "HCue.ts" },
        ["5227"] = { line = 23, file = "HCue.ts" }, ["5228"] = { line = 24, file = "HCue.ts" }, ["5229"] = { line = 25, file = "HCue.ts" },
        ["5230"] = { line = 26, file = "HCue.ts" }, ["5231"] = { line = 27, file = "HCue.ts" }, ["5232"] = { line = 28, file = "HCue.ts" },
        ["5233"] = { line = 29, file = "HCue.ts" }, ["5234"] = { line = 30, file = "HCue.ts" }, ["5237"] = { line = 33, file = "HCue.ts" },
        ["5238"] = { line = 25, file = "HCue.ts" }, ["5239"] = { line = 22, file = "HCue.ts" }, ["5240"] = { line = 19, file = "HCue.ts" },
        ["5241"] = { line = 11, file = "HCue.ts" }, ["5242"] = { line = 38, file = "HCue.ts" }, ["5243"] = { line = 39, file = "HCue.ts" },
        ["5244"] = { line = 38, file = "HCue.ts" }, ["5245"] = { line = 45, file = "HCue.ts" }, ["5246"] = { line = 46, file = "HCue.ts" },
        ["5247"] = { line = 47, file = "HCue.ts" }, ["5248"] = { line = 47, file = "HCue.ts" }, ["5249"] = { line = 48, file = "HCue.ts" },
        ["5251"] = { line = 49, file = "HCue.ts" }, ["5253"] = { line = 47, file = "HCue.ts" }, ["5254"] = { line = 45, file = "HCue.ts" },
        ["5255"] = { line = 52, file = "HCue.ts" }, ["5256"] = { line = 53, file = "HCue.ts" }, ["5257"] = { line = 54, file = "HCue.ts" },
        ["5259"] = { line = 56, file = "HCue.ts" }, ["5261"] = { line = 52, file = "HCue.ts" }, ["5262"] = { line = 60, file = "HCue.ts" },
        ["5263"] = { line = 61, file = "HCue.ts" }, ["5264"] = { line = 62, file = "HCue.ts" }, ["5265"] = { line = 60, file = "HCue.ts" },
        ["5266"] = { line = 65, file = "HCue.ts" }, ["5267"] = { line = 66, file = "HCue.ts" }, ["5268"] = { line = 67, file = "HCue.ts" },
        ["5269"] = { line = 65, file = "HCue.ts" }, ["5270"] = { line = 70, file = "HCue.ts" }, ["5271"] = { line = 71, file = "HCue.ts" },
        ["5272"] = { line = 70, file = "HCue.ts" }, ["5273"] = { line = 74, file = "HCue.ts" }, ["5274"] = { line = 75, file = "HCue.ts" },
        ["5275"] = { line = 74, file = "HCue.ts" }, ["5276"] = { line = 79, file = "HCue.ts" }, ["5277"] = { line = 80, file = "HCue.ts" },
        ["5278"] = { line = 81, file = "HCue.ts" }, ["5279"] = { line = 82, file = "HCue.ts" }, ["5281"] = { line = 84, file = "HCue.ts" },
        ["5282"] = { line = 85, file = "HCue.ts" }, ["5283"] = { line = 86, file = "HCue.ts" }, ["5284"] = { line = 87, file = "HCue.ts" },
        ["5286"] = { line = 89, file = "HCue.ts" }, ["5290"] = { line = 94, file = "HCue.ts" }, ["5291"] = { line = 79, file = "HCue.ts" },
        ["5292"] = { line = 98, file = "HCue.ts" }, ["5293"] = { line = 99, file = "HCue.ts" }, ["5294"] = { line = 99, file = "HCue.ts" },
        ["5295"] = { line = 99, file = "HCue.ts" }, ["5297"] = { line = 99, file = "HCue.ts" }, ["5298"] = { line = 100, file = "HCue.ts" },
        ["5299"] = { line = 101, file = "HCue.ts" }, ["5301"] = { line = 103, file = "HCue.ts" }, ["5303"] = { line = 98, file = "HCue.ts" },
        ["5316"] = { line = 9, file = "DisplayUtils.ts" }, ["5317"] = { line = 11, file = "DisplayUtils.ts" }, ["5318"] = { line = 12, file = "DisplayUtils.ts" },
        ["5319"] = { line = 13, file = "DisplayUtils.ts" }, ["5320"] = { line = 15, file = "DisplayUtils.ts" }, ["5321"] = { line = 18, file = "DisplayUtils.ts" },
        ["5322"] = { line = 13, file = "DisplayUtils.ts" }, ["5323"] = { line = 20, file = "DisplayUtils.ts" }, ["5324"] = { line = 21, file = "DisplayUtils.ts" },
        ["5325"] = { line = 22, file = "DisplayUtils.ts" }, ["5326"] = { line = 20, file = "DisplayUtils.ts" }, ["5327"] = { line = 9, file = "DisplayUtils.ts" },
        ["5328"] = { line = 26, file = "DisplayUtils.ts" }, ["5337"] = { line = 2, file = "HDisplay.ts" }, ["5338"] = { line = 2, file = "HDisplay.ts" },
        ["5339"] = { line = 3, file = "HDisplay.ts" }, ["5340"] = { line = 3, file = "HDisplay.ts" }, ["5341"] = { line = 5, file = "HDisplay.ts" },
        ["5342"] = { line = 5, file = "HDisplay.ts" }, ["5343"] = { line = 5, file = "HDisplay.ts" }, ["5344"] = { line = 9, file = "HDisplay.ts" },
        ["5345"] = { line = 5, file = "HDisplay.ts" }, ["5346"] = { line = 11, file = "HDisplay.ts" }, ["5347"] = { line = 11, file = "HDisplay.ts" },
        ["5348"] = { line = 11, file = "HDisplay.ts" }, ["5349"] = { line = 11, file = "HDisplay.ts" }, ["5350"] = { line = 11, file = "HDisplay.ts" },
        ["5351"] = { line = 11, file = "HDisplay.ts" }, ["5352"] = { line = 12, file = "HDisplay.ts" }, ["5353"] = { line = 9, file = "HDisplay.ts" },
        ["5354"] = { line = 15, file = "HDisplay.ts" }, ["5355"] = { line = 16, file = "HDisplay.ts" }, ["5356"] = { line = 15, file = "HDisplay.ts" },
        ["5357"] = { line = 19, file = "HDisplay.ts" }, ["5358"] = { line = 20, file = "HDisplay.ts" }, ["5359"] = { line = 19, file = "HDisplay.ts" },
        ["5360"] = { line = 25, file = "HDisplay.ts" }, ["5371"] = { line = 1, file = "HSequence.ts" }, ["5372"] = { line = 1, file = "HSequence.ts" },
        ["5373"] = { line = 2, file = "HSequence.ts" }, ["5374"] = { line = 2, file = "HSequence.ts" }, ["5375"] = { line = 3, file = "HSequence.ts" },
        ["5376"] = { line = 3, file = "HSequence.ts" }, ["5377"] = { line = 4, file = "HSequence.ts" }, ["5378"] = { line = 4, file = "HSequence.ts" },
        ["5379"] = { line = 11, file = "HSequence.ts" }, ["5381"] = { line = 16, file = "HSequence.ts" }, ["5382"] = { line = 18, file = "HSequence.ts" },
        ["5383"] = { line = 18, file = "HSequence.ts" }, ["5384"] = { line = 18, file = "HSequence.ts" }, ["5385"] = { line = 18, file = "HSequence.ts" },
        ["5386"] = { line = 21, file = "HSequence.ts" }, ["5387"] = { line = 22, file = "HSequence.ts" }, ["5388"] = { line = 18, file = "HSequence.ts" },
        ["5389"] = { line = 23, file = "HSequence.ts" }, ["5390"] = { line = 23, file = "HSequence.ts" }, ["5391"] = { line = 23, file = "HSequence.ts" },
        ["5392"] = { line = 23, file = "HSequence.ts" }, ["5393"] = { line = 23, file = "HSequence.ts" }, ["5394"] = { line = 23, file = "HSequence.ts" },
        ["5395"] = { line = 23, file = "HSequence.ts" }, ["5396"] = { line = 23, file = "HSequence.ts" }, ["5397"] = { line = 23, file = "HSequence.ts" },
        ["5398"] = { line = 23, file = "HSequence.ts" }, ["5399"] = { line = 23, file = "HSequence.ts" }, ["5400"] = { line = 23, file = "HSequence.ts" },
        ["5401"] = { line = 21, file = "HSequence.ts" }, ["5402"] = { line = 28, file = "HSequence.ts" }, ["5403"] = { line = 28, file = "HSequence.ts" },
        ["5404"] = { line = 28, file = "HSequence.ts" }, ["5405"] = { line = 34, file = "HSequence.ts" }, ["5406"] = { line = 35, file = "HSequence.ts" },
        ["5407"] = { line = 35, file = "HSequence.ts" }, ["5408"] = { line = 35, file = "HSequence.ts" }, ["5409"] = { line = 36, file = "HSequence.ts" },
        ["5410"] = { line = 37, file = "HSequence.ts" }, ["5411"] = { line = 38, file = "HSequence.ts" }, ["5412"] = { line = 39, file = "HSequence.ts" },
        ["5413"] = { line = 34, file = "HSequence.ts" }, ["5414"] = { line = 42, file = "HSequence.ts" }, ["5415"] = { line = 43, file = "HSequence.ts" },
        ["5416"] = { line = 42, file = "HSequence.ts" }, ["5417"] = { line = 49, file = "HSequence.ts" }, ["5418"] = { line = 50, file = "HSequence.ts" },
        ["5419"] = { line = 51, file = "HSequence.ts" }, ["5421"] = { line = 53, file = "HSequence.ts" }, ["5422"] = { line = 54, file = "HSequence.ts" },
        ["5423"] = { line = 49, file = "HSequence.ts" }, ["5424"] = { line = 57, file = "HSequence.ts" }, ["5425"] = { line = 58, file = "HSequence.ts" },
        ["5426"] = { line = 57, file = "HSequence.ts" }, ["5427"] = { line = 61, file = "HSequence.ts" }, ["5428"] = { line = 62, file = "HSequence.ts" },
        ["5429"] = { line = 61, file = "HSequence.ts" }, ["5430"] = { line = 65, file = "HSequence.ts" }, ["5431"] = { line = 66, file = "HSequence.ts" },
        ["5432"] = { line = 65, file = "HSequence.ts" }, ["5433"] = { line = 74, file = "HSequence.ts" }, ["5434"] = { line = 75, file = "HSequence.ts" },
        ["5435"] = { line = 75, file = "HSequence.ts" }, ["5436"] = { line = 75, file = "HSequence.ts" }, ["5437"] = { line = 75, file = "HSequence.ts" },
        ["5439"] = { line = 75, file = "HSequence.ts" }, ["5440"] = { line = 75, file = "HSequence.ts" }, ["5442"] = { line = 75, file = "HSequence.ts" },
        ["5443"] = { line = 75, file = "HSequence.ts" }, ["5444"] = { line = 75, file = "HSequence.ts" }, ["5446"] = { line = 75, file = "HSequence.ts" },
        ["5448"] = { line = 75, file = "HSequence.ts" }, ["5449"] = { line = 76, file = "HSequence.ts" }, ["5450"] = { line = 76, file = "HSequence.ts" },
        ["5451"] = { line = 76, file = "HSequence.ts" }, ["5453"] = { line = 76, file = "HSequence.ts" }, ["5454"] = { line = 77, file = "HSequence.ts" },
        ["5455"] = { line = 79, file = "HSequence.ts" }, ["5456"] = { line = 80, file = "HSequence.ts" }, ["5457"] = { line = 74, file = "HSequence.ts" },
        ["5458"] = { line = 83, file = "HSequence.ts" }, ["5459"] = { line = 84, file = "HSequence.ts" }, ["5460"] = { line = 85, file = "HSequence.ts" },
        ["5461"] = { line = 83, file = "HSequence.ts" }, ["5462"] = { line = 88, file = "HSequence.ts" }, ["5463"] = { line = 89, file = "HSequence.ts" },
        ["5464"] = { line = 88, file = "HSequence.ts" }, ["5465"] = { line = 96, file = "HSequence.ts" }, ["5466"] = { line = 97, file = "HSequence.ts" },
        ["5467"] = { line = 98, file = "HSequence.ts" }, ["5469"] = { line = 99, file = "HSequence.ts" }, ["5470"] = { line = 99, file = "HSequence.ts" },
        ["5471"] = { line = 100, file = "HSequence.ts" }, ["5472"] = { line = 101, file = "HSequence.ts" }, ["5473"] = { line = 99, file = "HSequence.ts" },
        ["5476"] = { line = 103, file = "HSequence.ts" }, ["5477"] = { line = 96, file = "HSequence.ts" }, ["5478"] = { line = 106, file = "HSequence.ts" },
        ["5479"] = { line = 107, file = "HSequence.ts" }, ["5480"] = { line = 108, file = "HSequence.ts" }, ["5481"] = { line = 108, file = "HSequence.ts" },
        ["5482"] = { line = 108, file = "HSequence.ts" }, ["5484"] = { line = 108, file = "HSequence.ts" }, ["5486"] = { line = 108, file = "HSequence.ts" },
        ["5487"] = { line = 106, file = "HSequence.ts" }, ["5488"] = { line = 115, file = "HSequence.ts" }, ["5489"] = { line = 116, file = "HSequence.ts" },
        ["5490"] = { line = 117, file = "HSequence.ts" }, ["5491"] = { line = 118, file = "HSequence.ts" }, ["5492"] = { line = 119, file = "HSequence.ts" },
        ["5494"] = { line = 122, file = "HSequence.ts" }, ["5495"] = { line = 122, file = "HSequence.ts" }, ["5496"] = { line = 122, file = "HSequence.ts" },
        ["5497"] = { line = 122, file = "HSequence.ts" }, ["5498"] = { line = 115, file = "HSequence.ts" }, ["5499"] = { line = 129, file = "HSequence.ts" },
        ["5500"] = { line = 130, file = "HSequence.ts" }, ["5501"] = { line = 131, file = "HSequence.ts" }, ["5502"] = { line = 132, file = "HSequence.ts" },
        ["5503"] = { line = 133, file = "HSequence.ts" }, ["5505"] = { line = 136, file = "HSequence.ts" }, ["5506"] = { line = 136, file = "HSequence.ts" },
        ["5507"] = { line = 136, file = "HSequence.ts" }, ["5508"] = { line = 136, file = "HSequence.ts" }, ["5509"] = { line = 129, file = "HSequence.ts" },
        ["5510"] = { line = 141, file = "HSequence.ts" }, ["5511"] = { line = 142, file = "HSequence.ts" }, ["5512"] = { line = 141, file = "HSequence.ts" },
        ["5513"] = { line = 145, file = "HSequence.ts" }, ["5514"] = { line = 146, file = "HSequence.ts" }, ["5515"] = { line = 145, file = "HSequence.ts" },
        ["5516"] = { line = 149, file = "HSequence.ts" }, ["5517"] = { line = 150, file = "HSequence.ts" }, ["5518"] = { line = 150, file = "HSequence.ts" },
        ["5519"] = { line = 150, file = "HSequence.ts" }, ["5521"] = { line = 150, file = "HSequence.ts" }, ["5522"] = { line = 151, file = "HSequence.ts" },
        ["5523"] = { line = 152, file = "HSequence.ts" }, ["5524"] = { line = 149, file = "HSequence.ts" }, ["5525"] = { line = 155, file = "HSequence.ts" },
        ["5526"] = { line = 156, file = "HSequence.ts" }, ["5527"] = { line = 155, file = "HSequence.ts" }, ["5528"] = { line = 159, file = "HSequence.ts" },
        ["5529"] = { line = 160, file = "HSequence.ts" }, ["5530"] = { line = 161, file = "HSequence.ts" }, ["5531"] = { line = 159, file = "HSequence.ts" },
        ["5550"] = { line = 110, file = "HExecutor.ts" }, ["5551"] = { line = 1, file = "HExecutor.ts" }, ["5552"] = { line = 1, file = "HExecutor.ts" },
        ["5553"] = { line = 1, file = "HExecutor.ts" }, ["5554"] = { line = 2, file = "HExecutor.ts" }, ["5555"] = { line = 2, file = "HExecutor.ts" },
        ["5556"] = { line = 3, file = "HExecutor.ts" }, ["5557"] = { line = 3, file = "HExecutor.ts" }, ["5558"] = { line = 121, file = "HExecutor.ts" },
        ["5559"] = { line = 122, file = "HExecutor.ts" }, ["5560"] = { line = 121, file = "HExecutor.ts" }, ["5561"] = { line = 125, file = "HExecutor.ts" },
        ["5562"] = { line = 126, file = "HExecutor.ts" }, ["5563"] = { line = 126, file = "HExecutor.ts" }, ["5564"] = { line = 126, file = "HExecutor.ts" },
        ["5565"] = { line = 126, file = "HExecutor.ts" }, ["5566"] = { line = 127, file = "HExecutor.ts" }, ["5567"] = { line = 125, file = "HExecutor.ts" },
        ["5568"] = { line = 7, file = "HExecutor.ts" }, ["5569"] = { line = 7, file = "HExecutor.ts" }, ["5570"] = { line = 7, file = "HExecutor.ts" },
        ["5571"] = { line = 10, file = "HExecutor.ts" }, ["5572"] = { line = 11, file = "HExecutor.ts" }, ["5573"] = { line = 12, file = "HExecutor.ts" },
        ["5574"] = { line = 13, file = "HExecutor.ts" }, ["5575"] = { line = 15, file = "HExecutor.ts" }, ["5576"] = { line = 18, file = "HExecutor.ts" },
        ["5577"] = { line = 19, file = "HExecutor.ts" }, ["5578"] = { line = 19, file = "HExecutor.ts" }, ["5579"] = { line = 19, file = "HExecutor.ts" },
        ["5580"] = { line = 19, file = "HExecutor.ts" }, ["5581"] = { line = 19, file = "HExecutor.ts" }, ["5582"] = { line = 20, file = "HExecutor.ts" },
        ["5584"] = { line = 22, file = "HExecutor.ts" }, ["5585"] = { line = 22, file = "HExecutor.ts" }, ["5586"] = { line = 22, file = "HExecutor.ts" },
        ["5587"] = { line = 22, file = "HExecutor.ts" }, ["5588"] = { line = 22, file = "HExecutor.ts" }, ["5589"] = { line = 23, file = "HExecutor.ts" },
        ["5591"] = { line = 24, file = "HExecutor.ts" }, ["5595"] = { line = 31, file = "HExecutor.ts" }, ["5597"] = { line = 13, file = "HExecutor.ts" },
        ["5598"] = { line = 7, file = "HExecutor.ts" }, ["5599"] = { line = 36, file = "HExecutor.ts" }, ["5600"] = { line = 10, file = "HExecutor.ts" },
        ["5601"] = { line = 39, file = "HExecutor.ts" }, ["5602"] = { line = 40, file = "HExecutor.ts" }, ["5603"] = { line = 41, file = "HExecutor.ts" },
        ["5604"] = { line = 39, file = "HExecutor.ts" }, ["5605"] = { line = 44, file = "HExecutor.ts" }, ["5606"] = { line = 45, file = "HExecutor.ts" },
        ["5607"] = { line = 44, file = "HExecutor.ts" }, ["5608"] = { line = 48, file = "HExecutor.ts" }, ["5609"] = { line = 49, file = "HExecutor.ts" },
        ["5610"] = { line = 49, file = "HExecutor.ts" }, ["5611"] = { line = 49, file = "HExecutor.ts" }, ["5612"] = { line = 49, file = "HExecutor.ts" },
        ["5613"] = { line = 49, file = "HExecutor.ts" }, ["5614"] = { line = 48, file = "HExecutor.ts" }, ["5615"] = { line = 52, file = "HExecutor.ts" },
        ["5616"] = { line = 53, file = "HExecutor.ts" }, ["5617"] = { line = 54, file = "HExecutor.ts" }, ["5618"] = { line = 52, file = "HExecutor.ts" },
        ["5619"] = { line = 57, file = "HExecutor.ts" }, ["5620"] = { line = 58, file = "HExecutor.ts" }, ["5621"] = { line = 59, file = "HExecutor.ts" },
        ["5622"] = { line = 57, file = "HExecutor.ts" }, ["5623"] = { line = 66, file = "HExecutor.ts" }, ["5624"] = { line = 67, file = "HExecutor.ts" },
        ["5625"] = { line = 66, file = "HExecutor.ts" }, ["5626"] = { line = 70, file = "HExecutor.ts" }, ["5627"] = { line = 71, file = "HExecutor.ts" },
        ["5628"] = { line = 70, file = "HExecutor.ts" }, ["5629"] = { line = 74, file = "HExecutor.ts" }, ["5630"] = { line = 75, file = "HExecutor.ts" },
        ["5631"] = { line = 74, file = "HExecutor.ts" }, ["5632"] = { line = 79, file = "HExecutor.ts" }, ["5633"] = { line = 110, file = "HExecutor.ts" },
        ["5634"] = { line = 130, file = "HExecutor.ts" }, ["5635"] = { line = 131, file = "HExecutor.ts" }, ["5636"] = { line = 132, file = "HExecutor.ts" },
        ["5637"] = { line = 133, file = "HExecutor.ts" }, ["5640"] = { line = 135, file = "HExecutor.ts" }, ["5641"] = { line = 136, file = "HExecutor.ts" },
        ["5642"] = { line = 137, file = "HExecutor.ts" }, ["5644"] = { line = 141, file = "HExecutor.ts" }, ["5646"] = { line = 142, file = "HExecutor.ts" },
        ["5647"] = { line = 143, file = "HExecutor.ts" }, ["5648"] = { line = 131, file = "HExecutor.ts" }, ["5657"] = { line = 1, file = "HGroup.ts" },
        ["5658"] = { line = 1, file = "HGroup.ts" }, ["5659"] = { line = 1, file = "HGroup.ts" }, ["5660"] = { line = 3, file = "HGroup.ts" },
        ["5661"] = { line = 3, file = "HGroup.ts" }, ["5662"] = { line = 6, file = "HGroup.ts" }, ["5663"] = { line = 6, file = "HGroup.ts" },
        ["5664"] = { line = 6, file = "HGroup.ts" }, ["5665"] = { line = 7, file = "HGroup.ts" }, ["5666"] = { line = 8, file = "HGroup.ts" },
        ["5667"] = { line = 6, file = "HGroup.ts" }, ["5668"] = { line = 9, file = "HGroup.ts" }, ["5669"] = { line = 9, file = "HGroup.ts" },
        ["5670"] = { line = 9, file = "HGroup.ts" }, ["5671"] = { line = 9, file = "HGroup.ts" }, ["5672"] = { line = 9, file = "HGroup.ts" },
        ["5673"] = { line = 9, file = "HGroup.ts" }, ["5674"] = { line = 9, file = "HGroup.ts" }, ["5675"] = { line = 9, file = "HGroup.ts" },
        ["5676"] = { line = 7, file = "HGroup.ts" }, ["5677"] = { line = 12, file = "HGroup.ts" }, ["5678"] = { line = 13, file = "HGroup.ts" },
        ["5679"] = { line = 12, file = "HGroup.ts" }, ["5680"] = { line = 17, file = "HGroup.ts" }, ["5689"] = { line = 1, file = "HMacroLine.ts" },
        ["5690"] = { line = 1, file = "HMacroLine.ts" }, ["5691"] = { line = 1, file = "HMacroLine.ts" }, ["5692"] = { line = 1, file = "HMacroLine.ts" },
        ["5693"] = { line = 2, file = "HMacroLine.ts" }, ["5694"] = { line = 2, file = "HMacroLine.ts" }, ["5695"] = { line = 12, file = "HMacroLine.ts" },
        ["5696"] = { line = 18, file = "HMacroLine.ts" }, ["5697"] = { line = 18, file = "HMacroLine.ts" }, ["5698"] = { line = 18, file = "HMacroLine.ts" },
        ["5699"] = { line = 18, file = "HMacroLine.ts" }, ["5700"] = { line = 20, file = "HMacroLine.ts" }, ["5701"] = { line = 18, file = "HMacroLine.ts" },
        ["5702"] = { line = 21, file = "HMacroLine.ts" }, ["5703"] = { line = 21, file = "HMacroLine.ts" }, ["5704"] = { line = 21, file = "HMacroLine.ts" },
        ["5705"] = { line = 21, file = "HMacroLine.ts" }, ["5706"] = { line = 22, file = "HMacroLine.ts" }, ["5707"] = { line = 23, file = "HMacroLine.ts" },
        ["5708"] = { line = 24, file = "HMacroLine.ts" }, ["5709"] = { line = 24, file = "HMacroLine.ts" }, ["5710"] = { line = 24, file = "HMacroLine.ts" },
        ["5711"] = { line = 24, file = "HMacroLine.ts" }, ["5712"] = { line = 24, file = "HMacroLine.ts" }, ["5713"] = { line = 25, file = "HMacroLine.ts" },
        ["5714"] = { line = 26, file = "HMacroLine.ts" }, ["5716"] = { line = 28, file = "HMacroLine.ts" }, ["5717"] = { line = 23, file = "HMacroLine.ts" },
        ["5718"] = { line = 30, file = "HMacroLine.ts" }, ["5719"] = { line = 31, file = "HMacroLine.ts" }, ["5720"] = { line = 31, file = "HMacroLine.ts" },
        ["5721"] = { line = 31, file = "HMacroLine.ts" }, ["5722"] = { line = 31, file = "HMacroLine.ts" }, ["5723"] = { line = 31, file = "HMacroLine.ts" },
        ["5724"] = { line = 30, file = "HMacroLine.ts" }, ["5725"] = { line = 21, file = "HMacroLine.ts" }, ["5726"] = { line = 21, file = "HMacroLine.ts" },
        ["5727"] = { line = 20, file = "HMacroLine.ts" }, ["5728"] = { line = 20, file = "HMacroLine.ts" }, ["5729"] = { line = 20, file = "HMacroLine.ts" },
        ["5730"] = { line = 39, file = "HMacroLine.ts" }, ["5731"] = { line = 39, file = "HMacroLine.ts" }, ["5732"] = { line = 39, file = "HMacroLine.ts" },
        ["5742"] = { line = 1, file = "HMacro.ts" }, ["5743"] = { line = 1, file = "HMacro.ts" }, ["5744"] = { line = 1, file = "HMacro.ts" },
        ["5745"] = { line = 2, file = "HMacro.ts" }, ["5746"] = { line = 2, file = "HMacro.ts" }, ["5747"] = { line = 3, file = "HMacro.ts" },
        ["5748"] = { line = 3, file = "HMacro.ts" }, ["5749"] = { line = 5, file = "HMacro.ts" }, ["5750"] = { line = 5, file = "HMacro.ts" },
        ["5751"] = { line = 14, file = "HMacro.ts" }, ["5752"] = { line = 14, file = "HMacro.ts" }, ["5753"] = { line = 14, file = "HMacro.ts" },
        ["5754"] = { line = 17, file = "HMacro.ts" }, ["5755"] = { line = 18, file = "HMacro.ts" }, ["5756"] = { line = 14, file = "HMacro.ts" },
        ["5757"] = { line = 19, file = "HMacro.ts" }, ["5758"] = { line = 19, file = "HMacro.ts" }, ["5759"] = { line = 19, file = "HMacro.ts" },
        ["5760"] = { line = 19, file = "HMacro.ts" }, ["5761"] = { line = 20, file = "HMacro.ts" }, ["5762"] = { line = 21, file = "HMacro.ts" },
        ["5763"] = { line = 22, file = "HMacro.ts" }, ["5764"] = { line = 19, file = "HMacro.ts" }, ["5765"] = { line = 19, file = "HMacro.ts" },
        ["5766"] = { line = 17, file = "HMacro.ts" }, ["5767"] = { line = 26, file = "HMacro.ts" }, ["5768"] = { line = 28, file = "HMacro.ts" },
        ["5769"] = { line = 31, file = "HMacro.ts" }, ["5770"] = { line = 32, file = "HMacro.ts" }, ["5771"] = { line = 33, file = "HMacro.ts" },
        ["5773"] = { line = 35, file = "HMacro.ts" }, ["5774"] = { line = 26, file = "HMacro.ts" }, ["5775"] = { line = 38, file = "HMacro.ts" },
        ["5776"] = { line = 39, file = "HMacro.ts" }, ["5777"] = { line = 40, file = "HMacro.ts" }, ["5778"] = { line = 41, file = "HMacro.ts" },
        ["5779"] = { line = 42, file = "HMacro.ts" }, ["5780"] = { line = 43, file = "HMacro.ts" }, ["5782"] = { line = 45, file = "HMacro.ts" },
        ["5785"] = { line = 48, file = "HMacro.ts" }, ["5786"] = { line = 49, file = "HMacro.ts" }, ["5788"] = { line = 38, file = "HMacro.ts" },
        ["5789"] = { line = 53, file = "HMacro.ts" }, ["5790"] = { line = 54, file = "HMacro.ts" }, ["5791"] = { line = 55, file = "HMacro.ts" },
        ["5793"] = { line = 58, file = "HMacro.ts" }, ["5794"] = { line = 53, file = "HMacro.ts" }, ["5795"] = { line = 61, file = "HMacro.ts" },
        ["5796"] = { line = 62, file = "HMacro.ts" }, ["5797"] = { line = 63, file = "HMacro.ts" }, ["5798"] = { line = 61, file = "HMacro.ts" },
        ["5799"] = { line = 67, file = "HMacro.ts" }, ["5808"] = { line = 1, file = "HLayoutElement.ts" }, ["5809"] = { line = 1, file = "HLayoutElement.ts" },
        ["5810"] = { line = 3, file = "HLayoutElement.ts" }, ["5811"] = { line = 3, file = "HLayoutElement.ts" },
        ["5812"] = { line = 5, file = "HLayoutElement.ts" }, ["5813"] = { line = 5, file = "HLayoutElement.ts" },
        ["5814"] = { line = 5, file = "HLayoutElement.ts" }, ["5815"] = { line = 39, file = "HLayoutElement.ts" },
        ["5816"] = { line = 40, file = "HLayoutElement.ts" }, ["5817"] = { line = 41, file = "HLayoutElement.ts" },
        ["5818"] = { line = 42, file = "HLayoutElement.ts" }, ["5819"] = { line = 43, file = "HLayoutElement.ts" },
        ["5820"] = { line = 44, file = "HLayoutElement.ts" }, ["5821"] = { line = 45, file = "HLayoutElement.ts" },
        ["5822"] = { line = 46, file = "HLayoutElement.ts" }, ["5823"] = { line = 47, file = "HLayoutElement.ts" },
        ["5824"] = { line = 48, file = "HLayoutElement.ts" }, ["5825"] = { line = 49, file = "HLayoutElement.ts" },
        ["5826"] = { line = 50, file = "HLayoutElement.ts" }, ["5827"] = { line = 51, file = "HLayoutElement.ts" },
        ["5828"] = { line = 52, file = "HLayoutElement.ts" }, ["5829"] = { line = 53, file = "HLayoutElement.ts" },
        ["5830"] = { line = 54, file = "HLayoutElement.ts" }, ["5831"] = { line = 55, file = "HLayoutElement.ts" },
        ["5832"] = { line = 56, file = "HLayoutElement.ts" }, ["5833"] = { line = 57, file = "HLayoutElement.ts" },
        ["5834"] = { line = 58, file = "HLayoutElement.ts" }, ["5835"] = { line = 59, file = "HLayoutElement.ts" },
        ["5836"] = { line = 39, file = "HLayoutElement.ts" }, ["5837"] = { line = 62, file = "HLayoutElement.ts" },
        ["5838"] = { line = 62, file = "HLayoutElement.ts" }, ["5839"] = { line = 62, file = "HLayoutElement.ts" },
        ["5840"] = { line = 62, file = "HLayoutElement.ts" }, ["5841"] = { line = 64, file = "HLayoutElement.ts" },
        ["5842"] = { line = 62, file = "HLayoutElement.ts" }, ["5843"] = { line = 65, file = "HLayoutElement.ts" },
        ["5844"] = { line = 65, file = "HLayoutElement.ts" }, ["5845"] = { line = 65, file = "HLayoutElement.ts" },
        ["5846"] = { line = 65, file = "HLayoutElement.ts" }, ["5847"] = { line = 66, file = "HLayoutElement.ts" },
        ["5848"] = { line = 66, file = "HLayoutElement.ts" }, ["5849"] = { line = 66, file = "HLayoutElement.ts" },
        ["5850"] = { line = 66, file = "HLayoutElement.ts" }, ["5851"] = { line = 66, file = "HLayoutElement.ts" },
        ["5852"] = { line = 66, file = "HLayoutElement.ts" }, ["5853"] = { line = 65, file = "HLayoutElement.ts" },
        ["5854"] = { line = 65, file = "HLayoutElement.ts" }, ["5855"] = { line = 64, file = "HLayoutElement.ts" },
        ["5856"] = { line = 64, file = "HLayoutElement.ts" }, ["5857"] = { line = 68, file = "HLayoutElement.ts" },
        ["5858"] = { line = 64, file = "HLayoutElement.ts" }, ["5859"] = { line = 71, file = "HLayoutElement.ts" },
        ["5860"] = { line = 72, file = "HLayoutElement.ts" }, ["5861"] = { line = 73, file = "HLayoutElement.ts" },
        ["5862"] = { line = 71, file = "HLayoutElement.ts" }, ["5863"] = { line = 77, file = "HLayoutElement.ts" },
        ["5864"] = { line = 77, file = "HLayoutElement.ts" }, ["5865"] = { line = 77, file = "HLayoutElement.ts" },
        ["5866"] = { line = 79, file = "HLayoutElement.ts" }, ["5867"] = { line = 80, file = "HLayoutElement.ts" },
        ["5868"] = { line = 79, file = "HLayoutElement.ts" }, ["5869"] = { line = 83, file = "HLayoutElement.ts" },
        ["5870"] = { line = 84, file = "HLayoutElement.ts" }, ["5871"] = { line = 83, file = "HLayoutElement.ts" },
        ["5872"] = { line = 87, file = "HLayoutElement.ts" }, ["5873"] = { line = 88, file = "HLayoutElement.ts" },
        ["5874"] = { line = 89, file = "HLayoutElement.ts" }, ["5875"] = { line = 87, file = "HLayoutElement.ts" },
        ["5876"] = { line = 92, file = "HLayoutElement.ts" }, ["5877"] = { line = 93, file = "HLayoutElement.ts" },
        ["5878"] = { line = 92, file = "HLayoutElement.ts" }, ["5879"] = { line = 96, file = "HLayoutElement.ts" },
        ["5880"] = { line = 97, file = "HLayoutElement.ts" }, ["5881"] = { line = 96, file = "HLayoutElement.ts" },
        ["5882"] = { line = 100, file = "HLayoutElement.ts" }, ["5883"] = { line = 101, file = "HLayoutElement.ts" },
        ["5884"] = { line = 100, file = "HLayoutElement.ts" }, ["5885"] = { line = 104, file = "HLayoutElement.ts" },
        ["5886"] = { line = 105, file = "HLayoutElement.ts" }, ["5887"] = { line = 104, file = "HLayoutElement.ts" },
        ["5888"] = { line = 108, file = "HLayoutElement.ts" }, ["5889"] = { line = 109, file = "HLayoutElement.ts" },
        ["5890"] = { line = 108, file = "HLayoutElement.ts" }, ["5891"] = { line = 112, file = "HLayoutElement.ts" },
        ["5892"] = { line = 113, file = "HLayoutElement.ts" }, ["5893"] = { line = 112, file = "HLayoutElement.ts" },
        ["5894"] = { line = 116, file = "HLayoutElement.ts" }, ["5895"] = { line = 117, file = "HLayoutElement.ts" },
        ["5896"] = { line = 116, file = "HLayoutElement.ts" }, ["5897"] = { line = 120, file = "HLayoutElement.ts" },
        ["5898"] = { line = 121, file = "HLayoutElement.ts" }, ["5899"] = { line = 120, file = "HLayoutElement.ts" },
        ["5900"] = { line = 125, file = "HLayoutElement.ts" }, ["5901"] = { line = 126, file = "HLayoutElement.ts" },
        ["5902"] = { line = 125, file = "HLayoutElement.ts" }, ["5903"] = { line = 130, file = "HLayoutElement.ts" },
        ["5904"] = { line = 131, file = "HLayoutElement.ts" }, ["5905"] = { line = 130, file = "HLayoutElement.ts" },
        ["5906"] = { line = 134, file = "HLayoutElement.ts" }, ["5907"] = { line = 135, file = "HLayoutElement.ts" },
        ["5908"] = { line = 137, file = "HLayoutElement.ts" }, ["5910"] = { line = 139, file = "HLayoutElement.ts" },
        ["5912"] = { line = 141, file = "HLayoutElement.ts" }, ["5913"] = { line = 134, file = "HLayoutElement.ts" },
        ["5914"] = { line = 144, file = "HLayoutElement.ts" }, ["5916"] = { line = 145, file = "HLayoutElement.ts" },
        ["5917"] = { line = 146, file = "HLayoutElement.ts" }, ["5920"] = { line = 150, file = "HLayoutElement.ts" },
        ["5923"] = { line = 152, file = "HLayoutElement.ts" }, ["5926"] = { line = 153, file = "HLayoutElement.ts" },
        ["5931"] = { line = 156, file = "HLayoutElement.ts" }, ["5935"] = { line = 144, file = "HLayoutElement.ts" },
        ["5947"] = { line = 1, file = "HLayout.ts" }, ["5948"] = { line = 1, file = "HLayout.ts" }, ["5949"] = { line = 2, file = "HLayout.ts" },
        ["5950"] = { line = 2, file = "HLayout.ts" }, ["5951"] = { line = 3, file = "HLayout.ts" }, ["5952"] = { line = 3, file = "HLayout.ts" },
        ["5953"] = { line = 4, file = "HLayout.ts" }, ["5954"] = { line = 4, file = "HLayout.ts" }, ["5955"] = { line = 9, file = "HLayout.ts" },
        ["5956"] = { line = 9, file = "HLayout.ts" }, ["5957"] = { line = 9, file = "HLayout.ts" }, ["5958"] = { line = 12, file = "HLayout.ts" },
        ["5959"] = { line = 13, file = "HLayout.ts" }, ["5960"] = { line = 9, file = "HLayout.ts" }, ["5961"] = { line = 14, file = "HLayout.ts" },
        ["5962"] = { line = 14, file = "HLayout.ts" }, ["5963"] = { line = 14, file = "HLayout.ts" }, ["5964"] = { line = 14, file = "HLayout.ts" },
        ["5965"] = { line = 15, file = "HLayout.ts" }, ["5966"] = { line = 15, file = "HLayout.ts" }, ["5967"] = { line = 15, file = "HLayout.ts" },
        ["5968"] = { line = 15, file = "HLayout.ts" }, ["5969"] = { line = 15, file = "HLayout.ts" }, ["5970"] = { line = 15, file = "HLayout.ts" },
        ["5971"] = { line = 14, file = "HLayout.ts" }, ["5972"] = { line = 14, file = "HLayout.ts" }, ["5973"] = { line = 12, file = "HLayout.ts" },
        ["5974"] = { line = 20, file = "HLayout.ts" }, ["5975"] = { line = 21, file = "HLayout.ts" }, ["5976"] = { line = 20, file = "HLayout.ts" },
        ["5977"] = { line = 24, file = "HLayout.ts" }, ["5978"] = { line = 25, file = "HLayout.ts" }, ["5979"] = { line = 24, file = "HLayout.ts" },
        ["5980"] = { line = 28, file = "HLayout.ts" }, ["5981"] = { line = 29, file = "HLayout.ts" }, ["5982"] = { line = 29, file = "HLayout.ts" },
        ["5983"] = { line = 29, file = "HLayout.ts" }, ["5984"] = { line = 29, file = "HLayout.ts" }, ["5985"] = { line = 30, file = "HLayout.ts" },
        ["5986"] = { line = 29, file = "HLayout.ts" }, ["5987"] = { line = 29, file = "HLayout.ts" }, ["5988"] = { line = 31, file = "HLayout.ts" },
        ["5989"] = { line = 29, file = "HLayout.ts" }, ["5990"] = { line = 28, file = "HLayout.ts" }, ["5991"] = { line = 34, file = "HLayout.ts" },
        ["5992"] = { line = 36, file = "HLayout.ts" }, ["5993"] = { line = 37, file = "HLayout.ts" }, ["5994"] = { line = 37, file = "HLayout.ts" },
        ["5995"] = { line = 37, file = "HLayout.ts" }, ["5997"] = { line = 37, file = "HLayout.ts" }, ["5999"] = { line = 37, file = "HLayout.ts" },
        ["6000"] = { line = 34, file = "HLayout.ts" }, ["6001"] = { line = 40, file = "HLayout.ts" }, ["6002"] = { line = 41, file = "HLayout.ts" },
        ["6003"] = { line = 40, file = "HLayout.ts" }, ["6004"] = { line = 44, file = "HLayout.ts" }, ["6005"] = { line = 45, file = "HLayout.ts" },
        ["6006"] = { line = 46, file = "HLayout.ts" }, ["6007"] = { line = 47, file = "HLayout.ts" }, ["6008"] = { line = 48, file = "HLayout.ts" },
        ["6010"] = { line = 50, file = "HLayout.ts" }, ["6011"] = { line = 51, file = "HLayout.ts" }, ["6013"] = { line = 53, file = "HLayout.ts" },
        ["6014"] = { line = 54, file = "HLayout.ts" }, ["6015"] = { line = 44, file = "HLayout.ts" }, ["6016"] = { line = 57, file = "HLayout.ts" },
        ["6017"] = { line = 58, file = "HLayout.ts" }, ["6018"] = { line = 59, file = "HLayout.ts" }, ["6019"] = { line = 60, file = "HLayout.ts" },
        ["6021"] = { line = 62, file = "HLayout.ts" }, ["6022"] = { line = 63, file = "HLayout.ts" }, ["6024"] = { line = 66, file = "HLayout.ts" },
        ["6025"] = { line = 57, file = "HLayout.ts" }, ["6026"] = { line = 69, file = "HLayout.ts" }, ["6027"] = { line = 70, file = "HLayout.ts" },
        ["6028"] = { line = 71, file = "HLayout.ts" }, ["6029"] = { line = 72, file = "HLayout.ts" }, ["6031"] = { line = 74, file = "HLayout.ts" },
        ["6034"] = { line = 69, file = "HLayout.ts" }, ["6035"] = { line = 80, file = "HLayout.ts" }, ["6044"] = { line = 1, file = "HMasterGrand.ts" },
        ["6045"] = { line = 1, file = "HMasterGrand.ts" }, ["6046"] = { line = 23, file = "HMasterGrand.ts" }, ["6047"] = { line = 23, file = "HMasterGrand.ts" },
        ["6048"] = { line = 23, file = "HMasterGrand.ts" }, ["6049"] = { line = 23, file = "HMasterGrand.ts" }, ["6050"] = { line = 25, file = "HMasterGrand.ts" },
        ["6051"] = { line = 23, file = "HMasterGrand.ts" }, ["6052"] = { line = 26, file = "HMasterGrand.ts" }, ["6053"] = { line = 26, file = "HMasterGrand.ts" },
        ["6054"] = { line = 26, file = "HMasterGrand.ts" }, ["6055"] = { line = 26, file = "HMasterGrand.ts" }, ["6056"] = { line = 27, file = "HMasterGrand.ts" },
        ["6057"] = { line = 27, file = "HMasterGrand.ts" }, ["6058"] = { line = 28, file = "HMasterGrand.ts" }, ["6059"] = { line = 27, file = "HMasterGrand.ts" },
        ["6060"] = { line = 26, file = "HMasterGrand.ts" }, ["6061"] = { line = 26, file = "HMasterGrand.ts" }, ["6062"] = { line = 25, file = "HMasterGrand.ts" },
        ["6071"] = { line = 1, file = "HMidiRemote.ts" }, ["6072"] = { line = 1, file = "HMidiRemote.ts" }, ["6073"] = { line = 1, file = "HMidiRemote.ts" },
        ["6074"] = { line = 2, file = "HMidiRemote.ts" }, ["6075"] = { line = 2, file = "HMidiRemote.ts" }, ["6076"] = { line = 25, file = "HMidiRemote.ts" },
        ["6077"] = { line = 25, file = "HMidiRemote.ts" }, ["6078"] = { line = 25, file = "HMidiRemote.ts" }, ["6079"] = { line = 26, file = "HMidiRemote.ts" },
        ["6080"] = { line = 25, file = "HMidiRemote.ts" }, ["6081"] = { line = 27, file = "HMidiRemote.ts" }, ["6082"] = { line = 27, file = "HMidiRemote.ts" },
        ["6083"] = { line = 28, file = "HMidiRemote.ts" }, ["6084"] = { line = 29, file = "HMidiRemote.ts" }, ["6085"] = { line = 30, file = "HMidiRemote.ts" },
        ["6086"] = { line = 31, file = "HMidiRemote.ts" }, ["6087"] = { line = 32, file = "HMidiRemote.ts" }, ["6088"] = { line = 32, file = "HMidiRemote.ts" },
        ["6089"] = { line = 32, file = "HMidiRemote.ts" }, ["6090"] = { line = 32, file = "HMidiRemote.ts" }, ["6091"] = { line = 32, file = "HMidiRemote.ts" },
        ["6092"] = { line = 31, file = "HMidiRemote.ts" }, ["6093"] = { line = 29, file = "HMidiRemote.ts" }, ["6094"] = { line = 27, file = "HMidiRemote.ts" },
        ["6095"] = { line = 26, file = "HMidiRemote.ts" }, ["6096"] = { line = 26, file = "HMidiRemote.ts" }, ["6097"] = { line = 38, file = "HMidiRemote.ts" },
        ["6098"] = { line = 39, file = "HMidiRemote.ts" }, ["6099"] = { line = 40, file = "HMidiRemote.ts" }, ["6100"] = { line = 38, file = "HMidiRemote.ts" },
        ["6101"] = { line = 44, file = "HMidiRemote.ts" }, ["6111"] = { line = 1, file = "HMidiRemotes.ts" }, ["6112"] = { line = 1, file = "HMidiRemotes.ts" },
        ["6113"] = { line = 5, file = "HMidiRemotes.ts" }, ["6114"] = { line = 5, file = "HMidiRemotes.ts" }, ["6115"] = { line = 5, file = "HMidiRemotes.ts" },
        ["6116"] = { line = 6, file = "HMidiRemotes.ts" }, ["6117"] = { line = 5, file = "HMidiRemotes.ts" }, ["6118"] = { line = 7, file = "HMidiRemotes.ts" },
        ["6119"] = { line = 8, file = "HMidiRemotes.ts" }, ["6120"] = { line = 9, file = "HMidiRemotes.ts" }, ["6121"] = { line = 10, file = "HMidiRemotes.ts" },
        ["6122"] = { line = 8, file = "HMidiRemotes.ts" }, ["6123"] = { line = 7, file = "HMidiRemotes.ts" }, ["6124"] = { line = 6, file = "HMidiRemotes.ts" },
        ["6125"] = { line = 14, file = "HMidiRemotes.ts" }, ["6126"] = { line = 15, file = "HMidiRemotes.ts" }, ["6127"] = { line = 16, file = "HMidiRemotes.ts" },
        ["6128"] = { line = 14, file = "HMidiRemotes.ts" }, ["6129"] = { line = 19, file = "HMidiRemotes.ts" }, ["6130"] = { line = 20, file = "HMidiRemotes.ts" },
        ["6131"] = { line = 20, file = "HMidiRemotes.ts" }, ["6132"] = { line = 20, file = "HMidiRemotes.ts" }, ["6133"] = { line = 20, file = "HMidiRemotes.ts" },
        ["6134"] = { line = 19, file = "HMidiRemotes.ts" }, ["6135"] = { line = 24, file = "HMidiRemotes.ts" }, ["6144"] = { line = 1, file = "HPage.ts" },
        ["6145"] = { line = 1, file = "HPage.ts" }, ["6146"] = { line = 1, file = "HPage.ts" }, ["6147"] = { line = 2, file = "HPage.ts" },
        ["6148"] = { line = 2, file = "HPage.ts" }, ["6149"] = { line = 5, file = "HPage.ts" }, ["6150"] = { line = 5, file = "HPage.ts" },
        ["6151"] = { line = 5, file = "HPage.ts" }, ["6152"] = { line = 7, file = "HPage.ts" }, ["6153"] = { line = 8, file = "HPage.ts" },
        ["6154"] = { line = 5, file = "HPage.ts" }, ["6155"] = { line = 9, file = "HPage.ts" }, ["6156"] = { line = 9, file = "HPage.ts" },
        ["6157"] = { line = 9, file = "HPage.ts" }, ["6158"] = { line = 9, file = "HPage.ts" }, ["6159"] = { line = 9, file = "HPage.ts" },
        ["6160"] = { line = 9, file = "HPage.ts" }, ["6161"] = { line = 9, file = "HPage.ts" }, ["6162"] = { line = 9, file = "HPage.ts" },
        ["6163"] = { line = 7, file = "HPage.ts" }, ["6164"] = { line = 12, file = "HPage.ts" }, ["6165"] = { line = 13, file = "HPage.ts" },
        ["6166"] = { line = 12, file = "HPage.ts" }, ["6167"] = { line = 17, file = "HPage.ts" }, ["6176"] = { line = 1, file = "HPlugin.ts" },
        ["6177"] = { line = 1, file = "HPlugin.ts" }, ["6178"] = { line = 1, file = "HPlugin.ts" }, ["6179"] = { line = 2, file = "HPlugin.ts" },
        ["6180"] = { line = 2, file = "HPlugin.ts" }, ["6181"] = { line = 9, file = "HPlugin.ts" }, ["6182"] = { line = 13, file = "HPlugin.ts" },
        ["6183"] = { line = 13, file = "HPlugin.ts" }, ["6184"] = { line = 13, file = "HPlugin.ts" }, ["6185"] = { line = 13, file = "HPlugin.ts" },
        ["6186"] = { line = 14, file = "HPlugin.ts" }, ["6187"] = { line = 13, file = "HPlugin.ts" }, ["6188"] = { line = 15, file = "HPlugin.ts" },
        ["6189"] = { line = 15, file = "HPlugin.ts" }, ["6190"] = { line = 15, file = "HPlugin.ts" }, ["6191"] = { line = 15, file = "HPlugin.ts" },
        ["6192"] = { line = 16, file = "HPlugin.ts" }, ["6193"] = { line = 16, file = "HPlugin.ts" }, ["6194"] = { line = 17, file = "HPlugin.ts" },
        ["6195"] = { line = 17, file = "HPlugin.ts" }, ["6196"] = { line = 17, file = "HPlugin.ts" }, ["6197"] = { line = 17, file = "HPlugin.ts" },
        ["6198"] = { line = 17, file = "HPlugin.ts" }, ["6199"] = { line = 16, file = "HPlugin.ts" }, ["6200"] = { line = 15, file = "HPlugin.ts" },
        ["6201"] = { line = 15, file = "HPlugin.ts" }, ["6202"] = { line = 14, file = "HPlugin.ts" }, ["6203"] = { line = 23, file = "HPlugin.ts" },
        ["6204"] = { line = 23, file = "HPlugin.ts" }, ["6205"] = { line = 23, file = "HPlugin.ts" }, ["6212"] = { line = 3, file = "RangeUtils.ts" },
        ["6213"] = { line = 4, file = "RangeUtils.ts" }, ["6214"] = { line = 3, file = "RangeUtils.ts" }, ["6215"] = { line = 6, file = "RangeUtils.ts" },
        ["6216"] = { line = 7, file = "RangeUtils.ts" }, ["6217"] = { line = 8, file = "RangeUtils.ts" }, ["6218"] = { line = 9, file = "RangeUtils.ts" },
        ["6219"] = { line = 10, file = "RangeUtils.ts" }, ["6221"] = { line = 12, file = "RangeUtils.ts" }, ["6223"] = { line = 6, file = "RangeUtils.ts" },
        ["6228"] = { line = 21, file = "RangeUtils.ts" }, ["6229"] = { line = 22, file = "RangeUtils.ts" }, ["6230"] = { line = 23, file = "RangeUtils.ts" },
        ["6232"] = { line = 25, file = "RangeUtils.ts" }, ["6233"] = { line = 26, file = "RangeUtils.ts" }, ["6234"] = { line = 21, file = "RangeUtils.ts" },
        ["6236"] = { line = 41, file = "RangeUtils.ts" }, ["6237"] = { line = 42, file = "RangeUtils.ts" }, ["6238"] = { line = 43, file = "RangeUtils.ts" },
        ["6240"] = { line = 45, file = "RangeUtils.ts" }, ["6241"] = { line = 41, file = "RangeUtils.ts" }, ["6242"] = { line = 53, file = "RangeUtils.ts" },
        ["6243"] = { line = 54, file = "RangeUtils.ts" }, ["6244"] = { line = 53, file = "RangeUtils.ts" }, ["6245"] = { line = 57, file = "RangeUtils.ts" },
        ["6246"] = { line = 58, file = "RangeUtils.ts" }, ["6247"] = { line = 57, file = "RangeUtils.ts" }, ["6248"] = { line = 61, file = "RangeUtils.ts" },
        ["6249"] = { line = 62, file = "RangeUtils.ts" }, ["6250"] = { line = 63, file = "RangeUtils.ts" }, ["6251"] = { line = 64, file = "RangeUtils.ts" },
        ["6252"] = { line = 65, file = "RangeUtils.ts" }, ["6253"] = { line = 66, file = "RangeUtils.ts" }, ["6254"] = { line = 67, file = "RangeUtils.ts" },
        ["6255"] = { line = 61, file = "RangeUtils.ts" }, ["6266"] = { line = 104, file = "PoolUtils.ts" }, ["6267"] = { line = 1, file = "PoolUtils.ts" },
        ["6268"] = { line = 1, file = "PoolUtils.ts" }, ["6269"] = { line = 2, file = "PoolUtils.ts" }, ["6270"] = { line = 2, file = "PoolUtils.ts" },
        ["6271"] = { line = 4, file = "PoolUtils.ts" }, ["6272"] = { line = 4, file = "PoolUtils.ts" }, ["6273"] = { line = 5, file = "PoolUtils.ts" },
        ["6274"] = { line = 5, file = "PoolUtils.ts" }, ["6275"] = { line = 104, file = "PoolUtils.ts" }, ["6276"] = { line = 105, file = "PoolUtils.ts" },
        ["6277"] = { line = 106, file = "PoolUtils.ts" }, ["6278"] = { line = 107, file = "PoolUtils.ts" }, ["6281"] = { line = 110, file = "PoolUtils.ts" },
        ["6283"] = { line = 113, file = "PoolUtils.ts" }, ["6284"] = { line = 114, file = "PoolUtils.ts" }, ["6285"] = { line = 115, file = "PoolUtils.ts" },
        ["6287"] = { line = 116, file = "PoolUtils.ts" }, ["6288"] = { line = 116, file = "PoolUtils.ts" }, ["6289"] = { line = 117, file = "PoolUtils.ts" },
        ["6290"] = { line = 118, file = "PoolUtils.ts" }, ["6291"] = { line = 119, file = "PoolUtils.ts" }, ["6292"] = { line = 120, file = "PoolUtils.ts" },
        ["6293"] = { line = 121, file = "PoolUtils.ts" }, ["6294"] = { line = 122, file = "PoolUtils.ts" }, ["6296"] = { line = 124, file = "PoolUtils.ts" },
        ["6297"] = { line = 125, file = "PoolUtils.ts" }, ["6300"] = { line = 116, file = "PoolUtils.ts" }, ["6303"] = { line = 129, file = "PoolUtils.ts" },
        ["6304"] = { line = 130, file = "PoolUtils.ts" }, ["6306"] = { line = 7, file = "PoolUtils.ts" }, ["6307"] = { line = 8, file = "PoolUtils.ts" },
        ["6308"] = { line = 10, file = "PoolUtils.ts" }, ["6309"] = { line = 11, file = "PoolUtils.ts" }, ["6310"] = { line = 11, file = "PoolUtils.ts" },
        ["6311"] = { line = 11, file = "PoolUtils.ts" }, ["6312"] = { line = 11, file = "PoolUtils.ts" }, ["6313"] = { line = 12, file = "PoolUtils.ts" },
        ["6314"] = { line = 13, file = "PoolUtils.ts" }, ["6315"] = { line = 14, file = "PoolUtils.ts" }, ["6316"] = { line = 16, file = "PoolUtils.ts" },
        ["6317"] = { line = 17, file = "PoolUtils.ts" }, ["6318"] = { line = 19, file = "PoolUtils.ts" }, ["6321"] = { line = 22, file = "PoolUtils.ts" },
        ["6322"] = { line = 10, file = "PoolUtils.ts" }, ["6323"] = { line = 25, file = "PoolUtils.ts" }, ["6324"] = { line = 26, file = "PoolUtils.ts" },
        ["6325"] = { line = 26, file = "PoolUtils.ts" }, ["6326"] = { line = 26, file = "PoolUtils.ts" }, ["6327"] = { line = 26, file = "PoolUtils.ts" },
        ["6328"] = { line = 27, file = "PoolUtils.ts" }, ["6329"] = { line = 28, file = "PoolUtils.ts" }, ["6330"] = { line = 29, file = "PoolUtils.ts" },
        ["6333"] = { line = 32, file = "PoolUtils.ts" }, ["6334"] = { line = 25, file = "PoolUtils.ts" }, ["6335"] = { line = 35, file = "PoolUtils.ts" },
        ["6336"] = { line = 36, file = "PoolUtils.ts" }, ["6337"] = { line = 37, file = "PoolUtils.ts" }, ["6338"] = { line = 37, file = "PoolUtils.ts" },
        ["6339"] = { line = 37, file = "PoolUtils.ts" }, ["6340"] = { line = 37, file = "PoolUtils.ts" }, ["6341"] = { line = 35, file = "PoolUtils.ts" },
        ["6342"] = { line = 39, file = "PoolUtils.ts" }, ["6343"] = { line = 40, file = "PoolUtils.ts" }, ["6344"] = { line = 41, file = "PoolUtils.ts" },
        ["6345"] = { line = 42, file = "PoolUtils.ts" }, ["6346"] = { line = 43, file = "PoolUtils.ts" }, ["6347"] = { line = 44, file = "PoolUtils.ts" },
        ["6348"] = { line = 45, file = "PoolUtils.ts" }, ["6349"] = { line = 46, file = "PoolUtils.ts" }, ["6350"] = { line = 47, file = "PoolUtils.ts" },
        ["6352"] = { line = 49, file = "PoolUtils.ts" }, ["6353"] = { line = 50, file = "PoolUtils.ts" }, ["6355"] = { line = 52, file = "PoolUtils.ts" },
        ["6360"] = { line = 57, file = "PoolUtils.ts" }, ["6361"] = { line = 39, file = "PoolUtils.ts" }, ["6362"] = { line = 60, file = "PoolUtils.ts" },
        ["6363"] = { line = 61, file = "PoolUtils.ts" }, ["6364"] = { line = 62, file = "PoolUtils.ts" }, ["6365"] = { line = 62, file = "PoolUtils.ts" },
        ["6366"] = { line = 62, file = "PoolUtils.ts" }, ["6367"] = { line = 63, file = "PoolUtils.ts" }, ["6368"] = { line = 64, file = "PoolUtils.ts" },
        ["6369"] = { line = 65, file = "PoolUtils.ts" }, ["6370"] = { line = 66, file = "PoolUtils.ts" }, ["6371"] = { line = 67, file = "PoolUtils.ts" },
        ["6372"] = { line = 68, file = "PoolUtils.ts" }, ["6373"] = { line = 68, file = "PoolUtils.ts" }, ["6374"] = { line = 68, file = "PoolUtils.ts" },
        ["6375"] = { line = 68, file = "PoolUtils.ts" }, ["6376"] = { line = 68, file = "PoolUtils.ts" }, ["6377"] = { line = 68, file = "PoolUtils.ts" },
        ["6378"] = { line = 68, file = "PoolUtils.ts" }, ["6379"] = { line = 65, file = "PoolUtils.ts" }, ["6380"] = { line = 70, file = "PoolUtils.ts" },
        ["6381"] = { line = 62, file = "PoolUtils.ts" }, ["6382"] = { line = 71, file = "PoolUtils.ts" }, ["6383"] = { line = 62, file = "PoolUtils.ts" },
        ["6384"] = { line = 72, file = "PoolUtils.ts" }, ["6385"] = { line = 60, file = "PoolUtils.ts" }, ["6386"] = { line = 75, file = "PoolUtils.ts" },
        ["6387"] = { line = 76, file = "PoolUtils.ts" }, ["6388"] = { line = 78, file = "PoolUtils.ts" }, ["6389"] = { line = 79, file = "PoolUtils.ts" },
        ["6390"] = { line = 79, file = "PoolUtils.ts" }, ["6391"] = { line = 79, file = "PoolUtils.ts" }, ["6392"] = { line = 79, file = "PoolUtils.ts" },
        ["6393"] = { line = 79, file = "PoolUtils.ts" }, ["6394"] = { line = 79, file = "PoolUtils.ts" }, ["6395"] = { line = 79, file = "PoolUtils.ts" },
        ["6396"] = { line = 75, file = "PoolUtils.ts" }, ["6397"] = { line = 84, file = "PoolUtils.ts" }, ["6398"] = { line = 85, file = "PoolUtils.ts" },
        ["6399"] = { line = 86, file = "PoolUtils.ts" }, ["6400"] = { line = 87, file = "PoolUtils.ts" }, ["6401"] = { line = 89, file = "PoolUtils.ts" },
        ["6402"] = { line = 90, file = "PoolUtils.ts" }, ["6403"] = { line = 91, file = "PoolUtils.ts" }, ["6404"] = { line = 92, file = "PoolUtils.ts" },
        ["6406"] = { line = 94, file = "PoolUtils.ts" }, ["6408"] = { line = 96, file = "PoolUtils.ts" }, ["6409"] = { line = 84, file = "PoolUtils.ts" },
        ["6410"] = { line = 99, file = "PoolUtils.ts" }, ["6411"] = { line = 100, file = "PoolUtils.ts" }, ["6412"] = { line = 101, file = "PoolUtils.ts" },
        ["6413"] = { line = 99, file = "PoolUtils.ts" }, ["6417"] = { line = 137, file = "PoolUtils.ts" }, ["6418"] = { line = 138, file = "PoolUtils.ts" },
        ["6419"] = { line = 138, file = "PoolUtils.ts" }, ["6420"] = { line = 138, file = "PoolUtils.ts" }, ["6421"] = { line = 138, file = "PoolUtils.ts" },
        ["6422"] = { line = 139, file = "PoolUtils.ts" }, ["6423"] = { line = 137, file = "PoolUtils.ts" }, ["6424"] = { line = 144, file = "PoolUtils.ts" },
        ["6425"] = { line = 145, file = "PoolUtils.ts" }, ["6426"] = { line = 144, file = "PoolUtils.ts" }, ["6427"] = { line = 148, file = "PoolUtils.ts" },
        ["6428"] = { line = 149, file = "PoolUtils.ts" }, ["6429"] = { line = 150, file = "PoolUtils.ts" }, ["6430"] = { line = 151, file = "PoolUtils.ts" },
        ["6431"] = { line = 152, file = "PoolUtils.ts" }, ["6432"] = { line = 153, file = "PoolUtils.ts" }, ["6433"] = { line = 154, file = "PoolUtils.ts" },
        ["6434"] = { line = 155, file = "PoolUtils.ts" }, ["6435"] = { line = 156, file = "PoolUtils.ts" }, ["6436"] = { line = 157, file = "PoolUtils.ts" },
        ["6437"] = { line = 148, file = "PoolUtils.ts" }, ["6447"] = { line = 1, file = "HPool.ts" }, ["6448"] = { line = 1, file = "HPool.ts" },
        ["6449"] = { line = 3, file = "HPool.ts" }, ["6450"] = { line = 3, file = "HPool.ts" }, ["6451"] = { line = 4, file = "HPool.ts" },
        ["6452"] = { line = 4, file = "HPool.ts" }, ["6453"] = { line = 6, file = "HPool.ts" }, ["6454"] = { line = 6, file = "HPool.ts" },
        ["6455"] = { line = 12, file = "HPool.ts" }, ["6456"] = { line = 12, file = "HPool.ts" }, ["6457"] = { line = 12, file = "HPool.ts" },
        ["6458"] = { line = 12, file = "HPool.ts" }, ["6459"] = { line = 14, file = "HPool.ts" }, ["6460"] = { line = 14, file = "HPool.ts" },
        ["6461"] = { line = 14, file = "HPool.ts" }, ["6462"] = { line = 15, file = "HPool.ts" }, ["6463"] = { line = 12, file = "HPool.ts" },
        ["6464"] = { line = 16, file = "HPool.ts" }, ["6465"] = { line = 16, file = "HPool.ts" }, ["6466"] = { line = 17, file = "HPool.ts" },
        ["6467"] = { line = 18, file = "HPool.ts" }, ["6468"] = { line = 16, file = "HPool.ts" }, ["6469"] = { line = 16, file = "HPool.ts" },
        ["6470"] = { line = 14, file = "HPool.ts" }, ["6471"] = { line = 22, file = "HPool.ts" }, ["6472"] = { line = 23, file = "HPool.ts" },
        ["6473"] = { line = 24, file = "HPool.ts" }, ["6474"] = { line = 24, file = "HPool.ts" }, ["6475"] = { line = 24, file = "HPool.ts" },
        ["6476"] = { line = 24, file = "HPool.ts" }, ["6477"] = { line = 24, file = "HPool.ts" }, ["6478"] = { line = 24, file = "HPool.ts" },
        ["6480"] = { line = 24, file = "HPool.ts" }, ["6481"] = { line = 22, file = "HPool.ts" }, ["6482"] = { line = 27, file = "HPool.ts" },
        ["6483"] = { line = 28, file = "HPool.ts" }, ["6484"] = { line = 29, file = "HPool.ts" }, ["6485"] = { line = 27, file = "HPool.ts" },
        ["6486"] = { line = 32, file = "HPool.ts" }, ["6487"] = { line = 33, file = "HPool.ts" }, ["6488"] = { line = 34, file = "HPool.ts" },
        ["6489"] = { line = 32, file = "HPool.ts" }, ["6490"] = { line = 37, file = "HPool.ts" }, ["6491"] = { line = 38, file = "HPool.ts" },
        ["6492"] = { line = 38, file = "HPool.ts" }, ["6493"] = { line = 38, file = "HPool.ts" }, ["6494"] = { line = 38, file = "HPool.ts" },
        ["6495"] = { line = 37, file = "HPool.ts" }, ["6496"] = { line = 41, file = "HPool.ts" }, ["6497"] = { line = 42, file = "HPool.ts" },
        ["6498"] = { line = 42, file = "HPool.ts" }, ["6499"] = { line = 42, file = "HPool.ts" }, ["6500"] = { line = 42, file = "HPool.ts" },
        ["6501"] = { line = 43, file = "HPool.ts" }, ["6502"] = { line = 44, file = "HPool.ts" }, ["6503"] = { line = 45, file = "HPool.ts" },
        ["6504"] = { line = 46, file = "HPool.ts" }, ["6505"] = { line = 47, file = "HPool.ts" }, ["6506"] = { line = 48, file = "HPool.ts" },
        ["6510"] = { line = 52, file = "HPool.ts" }, ["6511"] = { line = 41, file = "HPool.ts" }, ["6518"] = { line = 3, file = "Utils.ts" },
        ["6519"] = { line = 4, file = "Utils.ts" }, ["6520"] = { line = 4, file = "Utils.ts" }, ["6521"] = { line = 4, file = "Utils.ts" },
        ["6522"] = { line = 4, file = "Utils.ts" }, ["6523"] = { line = 5, file = "Utils.ts" }, ["6524"] = { line = 5, file = "Utils.ts" },
        ["6525"] = { line = 5, file = "Utils.ts" }, ["6526"] = { line = 6, file = "Utils.ts" }, ["6527"] = { line = 6, file = "Utils.ts" },
        ["6528"] = { line = 6, file = "Utils.ts" }, ["6529"] = { line = 7, file = "Utils.ts" }, ["6530"] = { line = 7, file = "Utils.ts" },
        ["6531"] = { line = 7, file = "Utils.ts" }, ["6532"] = { line = 3, file = "Utils.ts" }, ["6533"] = { line = 10, file = "Utils.ts" },
        ["6534"] = { line = 11, file = "Utils.ts" }, ["6535"] = { line = 10, file = "Utils.ts" }, ["6549"] = { line = 205, file = "HWindow.ts" },
        ["6550"] = { line = 1, file = "HWindow.ts" }, ["6551"] = { line = 1, file = "HWindow.ts" }, ["6552"] = { line = 5, file = "HWindow.ts" },
        ["6553"] = { line = 5, file = "HWindow.ts" }, ["6554"] = { line = 6, file = "HWindow.ts" }, ["6555"] = { line = 6, file = "HWindow.ts" },
        ["6556"] = { line = 8, file = "HWindow.ts" }, ["6557"] = { line = 8, file = "HWindow.ts" }, ["6558"] = { line = 171, file = "HWindow.ts" },
        ["6559"] = { line = 172, file = "HWindow.ts" }, ["6560"] = { line = 173, file = "HWindow.ts" }, ["6561"] = { line = 174, file = "HWindow.ts" },
        ["6562"] = { line = 175, file = "HWindow.ts" }, ["6563"] = { line = 176, file = "HWindow.ts" }, ["6564"] = { line = 177, file = "HWindow.ts" },
        ["6565"] = { line = 172, file = "HWindow.ts" }, ["6566"] = { line = 171, file = "HWindow.ts" }, ["6567"] = { line = 195, file = "HWindow.ts" },
        ["6568"] = { line = 196, file = "HWindow.ts" }, ["6569"] = { line = 199, file = "HWindow.ts" }, ["6570"] = { line = 202, file = "HWindow.ts" },
        ["6571"] = { line = 195, file = "HWindow.ts" }, ["6572"] = { line = 205, file = "HWindow.ts" }, ["6573"] = { line = 208, file = "HWindow.ts" },
        ["6574"] = { line = 209, file = "HWindow.ts" }, ["6575"] = { line = 210, file = "HWindow.ts" }, ["6576"] = { line = 211, file = "HWindow.ts" },
        ["6578"] = { line = 214, file = "HWindow.ts" }, ["6581"] = { line = 43, file = "HWindow.ts" }, ["6582"] = { line = 44, file = "HWindow.ts" },
        ["6583"] = { line = 45, file = "HWindow.ts" }, ["6584"] = { line = 46, file = "HWindow.ts" }, ["6585"] = { line = 47, file = "HWindow.ts" },
        ["6586"] = { line = 48, file = "HWindow.ts" }, ["6587"] = { line = 49, file = "HWindow.ts" }, ["6588"] = { line = 50, file = "HWindow.ts" },
        ["6589"] = { line = 43, file = "HWindow.ts" }, ["6590"] = { line = 53, file = "HWindow.ts" }, ["6591"] = { line = 53, file = "HWindow.ts" },
        ["6592"] = { line = 53, file = "HWindow.ts" }, ["6593"] = { line = 61, file = "HWindow.ts" }, ["6594"] = { line = 61, file = "HWindow.ts" },
        ["6595"] = { line = 61, file = "HWindow.ts" }, ["6596"] = { line = 62, file = "HWindow.ts" }, ["6597"] = { line = 53, file = "HWindow.ts" },
        ["6598"] = { line = 63, file = "HWindow.ts" }, ["6599"] = { line = 63, file = "HWindow.ts" }, ["6600"] = { line = 63, file = "HWindow.ts" },
        ["6601"] = { line = 64, file = "HWindow.ts" }, ["6602"] = { line = 65, file = "HWindow.ts" }, ["6603"] = { line = 66, file = "HWindow.ts" },
        ["6604"] = { line = 67, file = "HWindow.ts" }, ["6605"] = { line = 68, file = "HWindow.ts" }, ["6606"] = { line = 66, file = "HWindow.ts" },
        ["6607"] = { line = 64, file = "HWindow.ts" }, ["6608"] = { line = 63, file = "HWindow.ts" }, ["6609"] = { line = 61, file = "HWindow.ts" },
        ["6614"] = { line = 74, file = "HWindow.ts" }, ["6618"] = { line = 78, file = "HWindow.ts" }, ["6619"] = { line = 78, file = "HWindow.ts" },
        ["6620"] = { line = 78, file = "HWindow.ts" }, ["6621"] = { line = 80, file = "HWindow.ts" }, ["6622"] = { line = 81, file = "HWindow.ts" },
        ["6623"] = { line = 80, file = "HWindow.ts" }, ["6624"] = { line = 84, file = "HWindow.ts" }, ["6625"] = { line = 85, file = "HWindow.ts" },
        ["6626"] = { line = 86, file = "HWindow.ts" }, ["6627"] = { line = 87, file = "HWindow.ts" }, ["6629"] = { line = 89, file = "HWindow.ts" },
        ["6631"] = { line = 91, file = "HWindow.ts" }, ["6632"] = { line = 84, file = "HWindow.ts" }, ["6633"] = { line = 94, file = "HWindow.ts" },
        ["6634"] = { line = 95, file = "HWindow.ts" }, ["6635"] = { line = 94, file = "HWindow.ts" }, ["6636"] = { line = 98, file = "HWindow.ts" },
        ["6637"] = { line = 99, file = "HWindow.ts" }, ["6638"] = { line = 100, file = "HWindow.ts" }, ["6639"] = { line = 101, file = "HWindow.ts" },
        ["6640"] = { line = 101, file = "HWindow.ts" }, ["6641"] = { line = 101, file = "HWindow.ts" }, ["6642"] = { line = 101, file = "HWindow.ts" },
        ["6643"] = { line = 101, file = "HWindow.ts" }, ["6644"] = { line = 102, file = "HWindow.ts" }, ["6648"] = { line = 106, file = "HWindow.ts" },
        ["6649"] = { line = 98, file = "HWindow.ts" }, ["6650"] = { line = 108, file = "HWindow.ts" }, ["6651"] = { line = 117, file = "HWindow.ts" },
        ["6652"] = { line = 118, file = "HWindow.ts" }, ["6654"] = { line = 120, file = "HWindow.ts" }, ["6655"] = { line = 121, file = "HWindow.ts" },
        ["6656"] = { line = 122, file = "HWindow.ts" }, ["6657"] = { line = 123, file = "HWindow.ts" }, ["6658"] = { line = 124, file = "HWindow.ts" },
        ["6659"] = { line = 120, file = "HWindow.ts" }, ["6660"] = { line = 126, file = "HWindow.ts" }, ["6661"] = { line = 127, file = "HWindow.ts" },
        ["6663"] = { line = 129, file = "HWindow.ts" }, ["6664"] = { line = 108, file = "HWindow.ts" }, ["6665"] = { line = 132, file = "HWindow.ts" },
        ["6666"] = { line = 133, file = "HWindow.ts" }, ["6667"] = { line = 134, file = "HWindow.ts" }, ["6668"] = { line = 135, file = "HWindow.ts" },
        ["6669"] = { line = 136, file = "HWindow.ts" }, ["6670"] = { line = 137, file = "HWindow.ts" }, ["6671"] = { line = 138, file = "HWindow.ts" },
        ["6672"] = { line = 139, file = "HWindow.ts" }, ["6673"] = { line = 134, file = "HWindow.ts" }, ["6674"] = { line = 132, file = "HWindow.ts" },
        ["6675"] = { line = 143, file = "HWindow.ts" }, ["6676"] = { line = 144, file = "HWindow.ts" }, ["6677"] = { line = 145, file = "HWindow.ts" },
        ["6678"] = { line = 146, file = "HWindow.ts" }, ["6679"] = { line = 147, file = "HWindow.ts" }, ["6680"] = { line = 148, file = "HWindow.ts" },
        ["6681"] = { line = 149, file = "HWindow.ts" }, ["6682"] = { line = 150, file = "HWindow.ts" }, ["6683"] = { line = 145, file = "HWindow.ts" },
        ["6684"] = { line = 143, file = "HWindow.ts" }, ["6685"] = { line = 154, file = "HWindow.ts" }, ["6686"] = { line = 155, file = "HWindow.ts" },
        ["6687"] = { line = 155, file = "HWindow.ts" }, ["6688"] = { line = 155, file = "HWindow.ts" }, ["6689"] = { line = 155, file = "HWindow.ts" },
        ["6690"] = { line = 154, file = "HWindow.ts" }, ["6691"] = { line = 158, file = "HWindow.ts" }, ["6692"] = { line = 159, file = "HWindow.ts" },
        ["6693"] = { line = 160, file = "HWindow.ts" }, ["6694"] = { line = 158, file = "HWindow.ts" }, ["6695"] = { line = 164, file = "HWindow.ts" },
        ["6696"] = { line = 181, file = "HWindow.ts" }, ["6697"] = { line = 182, file = "HWindow.ts" }, ["6698"] = { line = 181, file = "HWindow.ts" },
        ["6699"] = { line = 189, file = "HWindow.ts" }, ["6700"] = { line = 190, file = "HWindow.ts" }, ["6701"] = { line = 190, file = "HWindow.ts" },
        ["6702"] = { line = 190, file = "HWindow.ts" }, ["6703"] = { line = 190, file = "HWindow.ts" }, ["6704"] = { line = 191, file = "HWindow.ts" },
        ["6705"] = { line = 189, file = "HWindow.ts" }, ["6715"] = { line = 2, file = "HWindowLayoutView.ts" }, ["6716"] = { line = 2, file = "HWindowLayoutView.ts" },
        ["6717"] = { line = 19, file = "HWindowLayoutView.ts" }, ["6718"] = { line = 19, file = "HWindowLayoutView.ts" },
        ["6719"] = { line = 19, file = "HWindowLayoutView.ts" }, ["6720"] = { line = 21, file = "HWindowLayoutView.ts" },
        ["6721"] = { line = 19, file = "HWindowLayoutView.ts" }, ["6722"] = { line = 21, file = "HWindowLayoutView.ts" },
        ["6723"] = { line = 21, file = "HWindowLayoutView.ts" }, ["6724"] = { line = 23, file = "HWindowLayoutView.ts" },
        ["6725"] = { line = 21, file = "HWindowLayoutView.ts" }, ["6730"] = { line = 31, file = "HWindowLayoutView.ts" },
        ["6734"] = { line = 26, file = "HWindowLayoutView.ts" }, ["6735"] = { line = 27, file = "HWindowLayoutView.ts" },
        ["6736"] = { line = 26, file = "HWindowLayoutView.ts" }, ["6737"] = { line = 34, file = "HWindowLayoutView.ts" },
        ["6738"] = { line = 36, file = "HWindowLayoutView.ts" }, ["6739"] = { line = 35, file = "HWindowLayoutView.ts" },
        ["6740"] = { line = 35, file = "HWindowLayoutView.ts" }, ["6741"] = { line = 35, file = "HWindowLayoutView.ts" },
        ["6742"] = { line = 35, file = "HWindowLayoutView.ts" }, ["6743"] = { line = 35, file = "HWindowLayoutView.ts" },
        ["6744"] = { line = 36, file = "HWindowLayoutView.ts" }, ["6745"] = { line = 36, file = "HWindowLayoutView.ts" },
        ["6746"] = { line = 36, file = "HWindowLayoutView.ts" }, ["6747"] = { line = 36, file = "HWindowLayoutView.ts" },
        ["6748"] = { line = 36, file = "HWindowLayoutView.ts" }, ["6749"] = { line = 37, file = "HWindowLayoutView.ts" },
        ["6750"] = { line = 38, file = "HWindowLayoutView.ts" }, ["6751"] = { line = 39, file = "HWindowLayoutView.ts" },
        ["6752"] = { line = 39, file = "HWindowLayoutView.ts" }, ["6753"] = { line = 39, file = "HWindowLayoutView.ts" },
        ["6754"] = { line = 39, file = "HWindowLayoutView.ts" }, ["6756"] = { line = 41, file = "HWindowLayoutView.ts" },
        ["6757"] = { line = 42, file = "HWindowLayoutView.ts" }, ["6759"] = { line = 44, file = "HWindowLayoutView.ts" },
        ["6760"] = { line = 45, file = "HWindowLayoutView.ts" }, ["6762"] = { line = 47, file = "HWindowLayoutView.ts" },
        ["6763"] = { line = 48, file = "HWindowLayoutView.ts" }, ["6765"] = { line = 50, file = "HWindowLayoutView.ts" },
        ["6766"] = { line = 51, file = "HWindowLayoutView.ts" }, ["6768"] = { line = 53, file = "HWindowLayoutView.ts" },
        ["6769"] = { line = 54, file = "HWindowLayoutView.ts" }, ["6771"] = { line = 58, file = "HWindowLayoutView.ts" },
        ["6772"] = { line = 59, file = "HWindowLayoutView.ts" }, ["6774"] = { line = 61, file = "HWindowLayoutView.ts" },
        ["6775"] = { line = 62, file = "HWindowLayoutView.ts" }, ["6777"] = { line = 64, file = "HWindowLayoutView.ts" },
        ["6778"] = { line = 65, file = "HWindowLayoutView.ts" }, ["6780"] = { line = 67, file = "HWindowLayoutView.ts" },
        ["6781"] = { line = 68, file = "HWindowLayoutView.ts" }, ["6783"] = { line = 70, file = "HWindowLayoutView.ts" },
        ["6784"] = { line = 34, file = "HWindowLayoutView.ts" }, ["6785"] = { line = 73, file = "HWindowLayoutView.ts" },
        ["6786"] = { line = 74, file = "HWindowLayoutView.ts" }, ["6787"] = { line = 73, file = "HWindowLayoutView.ts" },
        ["6788"] = { line = 78, file = "HWindowLayoutView.ts" }, ["6800"] = { line = 1, file = "HScreenContent.ts" },
        ["6801"] = { line = 1, file = "HScreenContent.ts" }, ["6802"] = { line = 3, file = "HScreenContent.ts" },
        ["6803"] = { line = 3, file = "HScreenContent.ts" }, ["6804"] = { line = 4, file = "HScreenContent.ts" },
        ["6805"] = { line = 4, file = "HScreenContent.ts" }, ["6806"] = { line = 4, file = "HScreenContent.ts" },
        ["6807"] = { line = 6, file = "HScreenContent.ts" }, ["6808"] = { line = 6, file = "HScreenContent.ts" },
        ["6809"] = { line = 7, file = "HScreenContent.ts" }, ["6810"] = { line = 7, file = "HScreenContent.ts" },
        ["6811"] = { line = 17, file = "HScreenContent.ts" }, ["6812"] = { line = 19, file = "HScreenContent.ts" },
        ["6813"] = { line = 19, file = "HScreenContent.ts" }, ["6814"] = { line = 19, file = "HScreenContent.ts" },
        ["6815"] = { line = 22, file = "HScreenContent.ts" }, ["6816"] = { line = 19, file = "HScreenContent.ts" },
        ["6817"] = { line = 23, file = "HScreenContent.ts" }, ["6818"] = { line = 23, file = "HScreenContent.ts" },
        ["6819"] = { line = 23, file = "HScreenContent.ts" }, ["6820"] = { line = 24, file = "HScreenContent.ts" },
        ["6821"] = { line = 25, file = "HScreenContent.ts" }, ["6822"] = { line = 26, file = "HScreenContent.ts" },
        ["6823"] = { line = 27, file = "HScreenContent.ts" }, ["6824"] = { line = 26, file = "HScreenContent.ts" },
        ["6825"] = { line = 24, file = "HScreenContent.ts" }, ["6826"] = { line = 23, file = "HScreenContent.ts" },
        ["6827"] = { line = 22, file = "HScreenContent.ts" }, ["6828"] = { line = 22, file = "HScreenContent.ts" },
        ["6829"] = { line = 32, file = "HScreenContent.ts" }, ["6830"] = { line = 33, file = "HScreenContent.ts" },
        ["6831"] = { line = 34, file = "HScreenContent.ts" }, ["6832"] = { line = 34, file = "HScreenContent.ts" },
        ["6833"] = { line = 34, file = "HScreenContent.ts" }, ["6834"] = { line = 34, file = "HScreenContent.ts" },
        ["6835"] = { line = 32, file = "HScreenContent.ts" }, ["6836"] = { line = 37, file = "HScreenContent.ts" },
        ["6837"] = { line = 38, file = "HScreenContent.ts" }, ["6838"] = { line = 41, file = "HScreenContent.ts" },
        ["6839"] = { line = 41, file = "HScreenContent.ts" }, ["6840"] = { line = 42, file = "HScreenContent.ts" },
        ["6842"] = { line = 43, file = "HScreenContent.ts" }, ["6844"] = { line = 41, file = "HScreenContent.ts" },
        ["6845"] = { line = 37, file = "HScreenContent.ts" }, ["6846"] = { line = 46, file = "HScreenContent.ts" },
        ["6847"] = { line = 47, file = "HScreenContent.ts" }, ["6848"] = { line = 50, file = "HScreenContent.ts" },
        ["6849"] = { line = 46, file = "HScreenContent.ts" }, ["6850"] = { line = 53, file = "HScreenContent.ts" },
        ["6851"] = { line = 54, file = "HScreenContent.ts" }, ["6852"] = { line = 53, file = "HScreenContent.ts" },
        ["6853"] = { line = 57, file = "HScreenContent.ts" }, ["6854"] = { line = 58, file = "HScreenContent.ts" },
        ["6855"] = { line = 57, file = "HScreenContent.ts" }, ["6856"] = { line = 61, file = "HScreenContent.ts" },
        ["6857"] = { line = 62, file = "HScreenContent.ts" }, ["6858"] = { line = 63, file = "HScreenContent.ts" },
        ["6859"] = { line = 64, file = "HScreenContent.ts" }, ["6860"] = { line = 65, file = "HScreenContent.ts" },
        ["6861"] = { line = 66, file = "HScreenContent.ts" }, ["6862"] = { line = 67, file = "HScreenContent.ts" },
        ["6863"] = { line = 68, file = "HScreenContent.ts" }, ["6864"] = { line = 69, file = "HScreenContent.ts" },
        ["6865"] = { line = 70, file = "HScreenContent.ts" }, ["6867"] = { line = 72, file = "HScreenContent.ts" },
        ["6871"] = { line = 82, file = "HScreenContent.ts" }, ["6872"] = { line = 83, file = "HScreenContent.ts" },
        ["6873"] = { line = 84, file = "HScreenContent.ts" }, ["6874"] = { line = 85, file = "HScreenContent.ts" },
        ["6875"] = { line = 86, file = "HScreenContent.ts" }, ["6876"] = { line = 87, file = "HScreenContent.ts" },
        ["6877"] = { line = 88, file = "HScreenContent.ts" }, ["6878"] = { line = 89, file = "HScreenContent.ts" },
        ["6879"] = { line = 90, file = "HScreenContent.ts" }, ["6880"] = { line = 91, file = "HScreenContent.ts" },
        ["6881"] = { line = 92, file = "HScreenContent.ts" }, ["6882"] = { line = 93, file = "HScreenContent.ts" },
        ["6884"] = { line = 97, file = "HScreenContent.ts" }, ["6885"] = { line = 98, file = "HScreenContent.ts" },
        ["6886"] = { line = 99, file = "HScreenContent.ts" }, ["6887"] = { line = 100, file = "HScreenContent.ts" },
        ["6890"] = { line = 104, file = "HScreenContent.ts" }, ["6891"] = { line = 61, file = "HScreenContent.ts" },
        ["6892"] = { line = 112, file = "HScreenContent.ts" }, ["6893"] = { line = 113, file = "HScreenContent.ts" },
        ["6894"] = { line = 112, file = "HScreenContent.ts" }, ["6895"] = { line = 116, file = "HScreenContent.ts" },
        ["6896"] = { line = 117, file = "HScreenContent.ts" }, ["6897"] = { line = 116, file = "HScreenContent.ts" },
        ["6898"] = { line = 120, file = "HScreenContent.ts" }, ["6899"] = { line = 121, file = "HScreenContent.ts" },
        ["6900"] = { line = 120, file = "HScreenContent.ts" }, ["6901"] = { line = 124, file = "HScreenContent.ts" },
        ["6902"] = { line = 125, file = "HScreenContent.ts" }, ["6903"] = { line = 125, file = "HScreenContent.ts" },
        ["6904"] = { line = 126, file = "HScreenContent.ts" }, ["6905"] = { line = 125, file = "HScreenContent.ts" },
        ["6906"] = { line = 124, file = "HScreenContent.ts" }, ["6907"] = { line = 137, file = "HScreenContent.ts" },
        ["6908"] = { line = 138, file = "HScreenContent.ts" }, ["6909"] = { line = 139, file = "HScreenContent.ts" },
        ["6911"] = { line = 137, file = "HScreenContent.ts" }, ["6912"] = { line = 143, file = "HScreenContent.ts" },
        ["6913"] = { line = 144, file = "HScreenContent.ts" }, ["6914"] = { line = 145, file = "HScreenContent.ts" },
        ["6916"] = { line = 147, file = "HScreenContent.ts" }, ["6918"] = { line = 150, file = "HScreenContent.ts" },
        ["6919"] = { line = 143, file = "HScreenContent.ts" }, ["6920"] = { line = 154, file = "HScreenContent.ts" },
        ["6929"] = { line = 1, file = "HView.ts" }, ["6930"] = { line = 1, file = "HView.ts" }, ["6931"] = { line = 1, file = "HView.ts" },
        ["6932"] = { line = 2, file = "HView.ts" }, ["6933"] = { line = 2, file = "HView.ts" }, ["6934"] = { line = 5, file = "HView.ts" },
        ["6935"] = { line = 5, file = "HView.ts" }, ["6936"] = { line = 5, file = "HView.ts" }, ["6937"] = { line = 7, file = "HView.ts" },
        ["6938"] = { line = 8, file = "HView.ts" }, ["6939"] = { line = 5, file = "HView.ts" }, ["6940"] = { line = 9, file = "HView.ts" },
        ["6941"] = { line = 9, file = "HView.ts" }, ["6942"] = { line = 9, file = "HView.ts" }, ["6943"] = { line = 9, file = "HView.ts" },
        ["6944"] = { line = 9, file = "HView.ts" }, ["6945"] = { line = 9, file = "HView.ts" }, ["6946"] = { line = 9, file = "HView.ts" },
        ["6947"] = { line = 9, file = "HView.ts" }, ["6948"] = { line = 7, file = "HView.ts" }, ["6949"] = { line = 12, file = "HView.ts" },
        ["6950"] = { line = 13, file = "HView.ts" }, ["6951"] = { line = 14, file = "HView.ts" }, ["6952"] = { line = 12, file = "HView.ts" },
        ["6953"] = { line = 17, file = "HView.ts" }, ["6954"] = { line = 18, file = "HView.ts" }, ["6955"] = { line = 18, file = "HView.ts" },
        ["6956"] = { line = 18, file = "HView.ts" }, ["6957"] = { line = 19, file = "HView.ts" }, ["6958"] = { line = 20, file = "HView.ts" },
        ["6959"] = { line = 21, file = "HView.ts" }, ["6960"] = { line = 23, file = "HView.ts" }, ["6961"] = { line = 24, file = "HView.ts" },
        ["6963"] = { line = 26, file = "HView.ts" }, ["6964"] = { line = 17, file = "HView.ts" }, ["6965"] = { line = 29, file = "HView.ts" },
        ["6966"] = { line = 30, file = "HView.ts" }, ["6967"] = { line = 31, file = "HView.ts" }, ["6968"] = { line = 32, file = "HView.ts" },
        ["6970"] = { line = 34, file = "HView.ts" }, ["6971"] = { line = 29, file = "HView.ts" }, ["6972"] = { line = 38, file = "HView.ts" },
        ["6981"] = { line = 1, file = "HViewButton.ts" }, ["6982"] = { line = 1, file = "HViewButton.ts" }, ["6983"] = { line = 1, file = "HViewButton.ts" },
        ["6984"] = { line = 2, file = "HViewButton.ts" }, ["6985"] = { line = 2, file = "HViewButton.ts" }, ["6986"] = { line = 4, file = "HViewButton.ts" },
        ["6987"] = { line = 4, file = "HViewButton.ts" }, ["6988"] = { line = 11, file = "HViewButton.ts" }, ["6989"] = { line = 11, file = "HViewButton.ts" },
        ["6990"] = { line = 11, file = "HViewButton.ts" }, ["6991"] = { line = 13, file = "HViewButton.ts" }, ["6992"] = { line = 11, file = "HViewButton.ts" },
        ["6993"] = { line = 14, file = "HViewButton.ts" }, ["6994"] = { line = 14, file = "HViewButton.ts" }, ["6995"] = { line = 14, file = "HViewButton.ts" },
        ["6996"] = { line = 14, file = "HViewButton.ts" }, ["6997"] = { line = 15, file = "HViewButton.ts" }, ["6998"] = { line = 15, file = "HViewButton.ts" },
        ["6999"] = { line = 16, file = "HViewButton.ts" }, ["7000"] = { line = 17, file = "HViewButton.ts" }, ["7001"] = { line = 15, file = "HViewButton.ts" },
        ["7002"] = { line = 14, file = "HViewButton.ts" }, ["7003"] = { line = 14, file = "HViewButton.ts" }, ["7004"] = { line = 13, file = "HViewButton.ts" },
        ["7005"] = { line = 13, file = "HViewButton.ts" }, ["7006"] = { line = 22, file = "HViewButton.ts" }, ["7007"] = { line = 23, file = "HViewButton.ts" },
        ["7008"] = { line = 22, file = "HViewButton.ts" }, ["7009"] = { line = 27, file = "HViewButton.ts" }, ["7020"] = { line = 2, file = "HViewButtonScreen.ts" },
        ["7021"] = { line = 2, file = "HViewButtonScreen.ts" }, ["7022"] = { line = 3, file = "HViewButtonScreen.ts" },
        ["7023"] = { line = 3, file = "HViewButtonScreen.ts" }, ["7024"] = { line = 5, file = "HViewButtonScreen.ts" },
        ["7025"] = { line = 5, file = "HViewButtonScreen.ts" }, ["7026"] = { line = 7, file = "HViewButtonScreen.ts" },
        ["7027"] = { line = 7, file = "HViewButtonScreen.ts" }, ["7028"] = { line = 7, file = "HViewButtonScreen.ts" },
        ["7029"] = { line = 9, file = "HViewButtonScreen.ts" }, ["7030"] = { line = 7, file = "HViewButtonScreen.ts" },
        ["7031"] = { line = 10, file = "HViewButtonScreen.ts" }, ["7032"] = { line = 10, file = "HViewButtonScreen.ts" },
        ["7033"] = { line = 11, file = "HViewButtonScreen.ts" }, ["7034"] = { line = 12, file = "HViewButtonScreen.ts" },
        ["7035"] = { line = 13, file = "HViewButtonScreen.ts" }, ["7036"] = { line = 12, file = "HViewButtonScreen.ts" },
        ["7037"] = { line = 10, file = "HViewButtonScreen.ts" }, ["7038"] = { line = 10, file = "HViewButtonScreen.ts" },
        ["7039"] = { line = 9, file = "HViewButtonScreen.ts" }, ["7040"] = { line = 9, file = "HViewButtonScreen.ts" },
        ["7041"] = { line = 18, file = "HViewButtonScreen.ts" }, ["7042"] = { line = 19, file = "HViewButtonScreen.ts" },
        ["7043"] = { line = 19, file = "HViewButtonScreen.ts" }, ["7044"] = { line = 19, file = "HViewButtonScreen.ts" },
        ["7045"] = { line = 20, file = "HViewButtonScreen.ts" }, ["7046"] = { line = 19, file = "HViewButtonScreen.ts" },
        ["7047"] = { line = 19, file = "HViewButtonScreen.ts" }, ["7048"] = { line = 18, file = "HViewButtonScreen.ts" },
        ["7049"] = { line = 24, file = "HViewButtonScreen.ts" }, ["7050"] = { line = 25, file = "HViewButtonScreen.ts" },
        ["7051"] = { line = 25, file = "HViewButtonScreen.ts" }, ["7052"] = { line = 25, file = "HViewButtonScreen.ts" },
        ["7053"] = { line = 26, file = "HViewButtonScreen.ts" }, ["7054"] = { line = 25, file = "HViewButtonScreen.ts" },
        ["7055"] = { line = 25, file = "HViewButtonScreen.ts" }, ["7056"] = { line = 24, file = "HViewButtonScreen.ts" },
        ["7057"] = { line = 31, file = "HViewButtonScreen.ts" }, ["7065"] = { line = 1, file = "index.ts" }, ["7066"] = { line = 1, file = "index.ts" },
        ["7067"] = { line = 1, file = "index.ts" }, ["7070"] = { line = 2, file = "index.ts" }, ["7071"] = { line = 2, file = "index.ts" },
        ["7072"] = { line = 2, file = "index.ts" }, ["7075"] = { line = 3, file = "index.ts" }, ["7076"] = { line = 3, file = "index.ts" },
        ["7077"] = { line = 3, file = "index.ts" }, ["7080"] = { line = 4, file = "index.ts" }, ["7081"] = { line = 4, file = "index.ts" },
        ["7082"] = { line = 4, file = "index.ts" }, ["7083"] = { line = 4, file = "index.ts" }, ["7084"] = { line = 4, file = "index.ts" },
        ["7085"] = { line = 4, file = "index.ts" }, ["7086"] = { line = 4, file = "index.ts" }, ["7089"] = { line = 5, file = "index.ts" },
        ["7090"] = { line = 5, file = "index.ts" }, ["7091"] = { line = 5, file = "index.ts" }, ["7094"] = { line = 6, file = "index.ts" },
        ["7095"] = { line = 6, file = "index.ts" }, ["7096"] = { line = 6, file = "index.ts" }, ["7099"] = { line = 7, file = "index.ts" },
        ["7100"] = { line = 7, file = "index.ts" }, ["7101"] = { line = 7, file = "index.ts" }, ["7104"] = { line = 8, file = "index.ts" },
        ["7105"] = { line = 8, file = "index.ts" }, ["7106"] = { line = 8, file = "index.ts" }, ["7109"] = { line = 9, file = "index.ts" },
        ["7110"] = { line = 9, file = "index.ts" }, ["7111"] = { line = 9, file = "index.ts" }, ["7114"] = { line = 10, file = "index.ts" },
        ["7115"] = { line = 10, file = "index.ts" }, ["7116"] = { line = 10, file = "index.ts" }, ["7119"] = { line = 11, file = "index.ts" },
        ["7120"] = { line = 11, file = "index.ts" }, ["7121"] = { line = 11, file = "index.ts" }, ["7124"] = { line = 12, file = "index.ts" },
        ["7125"] = { line = 12, file = "index.ts" }, ["7126"] = { line = 12, file = "index.ts" }, ["7129"] = { line = 13, file = "index.ts" },
        ["7130"] = { line = 13, file = "index.ts" }, ["7131"] = { line = 13, file = "index.ts" }, ["7134"] = { line = 14, file = "index.ts" },
        ["7135"] = { line = 14, file = "index.ts" }, ["7136"] = { line = 14, file = "index.ts" }, ["7139"] = { line = 15, file = "index.ts" },
        ["7140"] = { line = 15, file = "index.ts" }, ["7141"] = { line = 15, file = "index.ts" }, ["7144"] = { line = 16, file = "index.ts" },
        ["7145"] = { line = 16, file = "index.ts" }, ["7146"] = { line = 16, file = "index.ts" }, ["7149"] = { line = 17, file = "index.ts" },
        ["7150"] = { line = 17, file = "index.ts" }, ["7151"] = { line = 17, file = "index.ts" }, ["7152"] = { line = 17, file = "index.ts" },
        ["7153"] = { line = 17, file = "index.ts" }, ["7156"] = { line = 18, file = "index.ts" }, ["7157"] = { line = 18, file = "index.ts" },
        ["7158"] = { line = 18, file = "index.ts" }, ["7161"] = { line = 19, file = "index.ts" }, ["7162"] = { line = 19, file = "index.ts" },
        ["7163"] = { line = 19, file = "index.ts" }, ["7166"] = { line = 20, file = "index.ts" }, ["7167"] = { line = 20, file = "index.ts" },
        ["7168"] = { line = 20, file = "index.ts" }, ["7171"] = { line = 21, file = "index.ts" }, ["7172"] = { line = 21, file = "index.ts" },
        ["7173"] = { line = 21, file = "index.ts" }, ["7176"] = { line = 22, file = "index.ts" }, ["7177"] = { line = 22, file = "index.ts" },
        ["7178"] = { line = 22, file = "index.ts" }, ["7181"] = { line = 23, file = "index.ts" }, ["7182"] = { line = 23, file = "index.ts" },
        ["7183"] = { line = 23, file = "index.ts" }, ["7186"] = { line = 24, file = "index.ts" }, ["7201"] = { line = 6, file = "ObjectFactory.ts" },
        ["7202"] = { line = 7, file = "ObjectFactory.ts" }, ["7203"] = { line = 8, file = "ObjectFactory.ts" }, ["7204"] = { line = 9, file = "ObjectFactory.ts" },
        ["7205"] = { line = 10, file = "ObjectFactory.ts" }, ["7206"] = { line = 11, file = "ObjectFactory.ts" },
        ["7207"] = { line = 11, file = "ObjectFactory.ts" }, ["7208"] = { line = 12, file = "ObjectFactory.ts" },
        ["7209"] = { line = 13, file = "ObjectFactory.ts" }, ["7210"] = { line = 14, file = "ObjectFactory.ts" },
        ["7211"] = { line = 15, file = "ObjectFactory.ts" }, ["7212"] = { line = 16, file = "ObjectFactory.ts" },
        ["7213"] = { line = 16, file = "ObjectFactory.ts" }, ["7214"] = { line = 17, file = "ObjectFactory.ts" },
        ["7215"] = { line = 18, file = "ObjectFactory.ts" }, ["7216"] = { line = 19, file = "ObjectFactory.ts" },
        ["7217"] = { line = 20, file = "ObjectFactory.ts" }, ["7218"] = { line = 21, file = "ObjectFactory.ts" },
        ["7219"] = { line = 22, file = "ObjectFactory.ts" }, ["7220"] = { line = 23, file = "ObjectFactory.ts" },
        ["7221"] = { line = 24, file = "ObjectFactory.ts" }, ["7222"] = { line = 25, file = "ObjectFactory.ts" },
        ["7223"] = { line = 30, file = "ObjectFactory.ts" }, ["7224"] = { line = 30, file = "ObjectFactory.ts" },
        ["7225"] = { line = 31, file = "ObjectFactory.ts" }, ["7226"] = { line = 31, file = "ObjectFactory.ts" },
        ["7227"] = { line = 33, file = "ObjectFactory.ts" }, ["7228"] = { line = 33, file = "ObjectFactory.ts" },
        ["7229"] = { line = 33, file = "ObjectFactory.ts" }, ["7230"] = { line = 35, file = "ObjectFactory.ts" },
        ["7231"] = { line = 37, file = "ObjectFactory.ts" }, ["7232"] = { line = 37, file = "ObjectFactory.ts" },
        ["7233"] = { line = 37, file = "ObjectFactory.ts" }, ["7235"] = { line = 38, file = "ObjectFactory.ts" },
        ["7236"] = { line = 38, file = "ObjectFactory.ts" }, ["7237"] = { line = 38, file = "ObjectFactory.ts" },
        ["7239"] = { line = 40, file = "ObjectFactory.ts" }, ["7240"] = { line = 40, file = "ObjectFactory.ts" },
        ["7241"] = { line = 40, file = "ObjectFactory.ts" }, ["7243"] = { line = 40, file = "ObjectFactory.ts" },
        ["7244"] = { line = 41, file = "ObjectFactory.ts" }, ["7245"] = { line = 41, file = "ObjectFactory.ts" },
        ["7246"] = { line = 41, file = "ObjectFactory.ts" }, ["7248"] = { line = 36, file = "ObjectFactory.ts" },
        ["7249"] = { line = 37, file = "ObjectFactory.ts" }, ["7250"] = { line = 38, file = "ObjectFactory.ts" },
        ["7251"] = { line = 39, file = "ObjectFactory.ts" }, ["7252"] = { line = 40, file = "ObjectFactory.ts" },
        ["7253"] = { line = 41, file = "ObjectFactory.ts" }, ["7254"] = { line = 36, file = "ObjectFactory.ts" },
        ["7255"] = { line = 35, file = "ObjectFactory.ts" }, ["7256"] = { line = 48, file = "ObjectFactory.ts" },
        ["7257"] = { line = 49, file = "ObjectFactory.ts" }, ["7258"] = { line = 48, file = "ObjectFactory.ts" },
        ["7259"] = { line = 52, file = "ObjectFactory.ts" }, ["7260"] = { line = 53, file = "ObjectFactory.ts" },
        ["7261"] = { line = 53, file = "ObjectFactory.ts" }, ["7262"] = { line = 53, file = "ObjectFactory.ts" },
        ["7263"] = { line = 53, file = "ObjectFactory.ts" }, ["7264"] = { line = 53, file = "ObjectFactory.ts" },
        ["7265"] = { line = 54, file = "ObjectFactory.ts" }, ["7266"] = { line = 52, file = "ObjectFactory.ts" },
        ["7267"] = { line = 57, file = "ObjectFactory.ts" }, ["7268"] = { line = 57, file = "ObjectFactory.ts" },
        ["7269"] = { line = 57, file = "ObjectFactory.ts" }, ["7270"] = { line = 58, file = "ObjectFactory.ts" },
        ["7271"] = { line = 58, file = "ObjectFactory.ts" }, ["7272"] = { line = 58, file = "ObjectFactory.ts" },
        ["7273"] = { line = 59, file = "ObjectFactory.ts" }, ["7274"] = { line = 59, file = "ObjectFactory.ts" },
        ["7275"] = { line = 59, file = "ObjectFactory.ts" }, ["7276"] = { line = 60, file = "ObjectFactory.ts" },
        ["7277"] = { line = 60, file = "ObjectFactory.ts" }, ["7278"] = { line = 60, file = "ObjectFactory.ts" },
        ["7279"] = { line = 61, file = "ObjectFactory.ts" }, ["7280"] = { line = 61, file = "ObjectFactory.ts" },
        ["7281"] = { line = 61, file = "ObjectFactory.ts" }, ["7282"] = { line = 63, file = "ObjectFactory.ts" },
        ["7283"] = { line = 63, file = "ObjectFactory.ts" }, ["7284"] = { line = 63, file = "ObjectFactory.ts" },
        ["7285"] = { line = 64, file = "ObjectFactory.ts" }, ["7286"] = { line = 64, file = "ObjectFactory.ts" },
        ["7287"] = { line = 64, file = "ObjectFactory.ts" }, ["7288"] = { line = 65, file = "ObjectFactory.ts" },
        ["7289"] = { line = 65, file = "ObjectFactory.ts" }, ["7290"] = { line = 65, file = "ObjectFactory.ts" },
        ["7291"] = { line = 66, file = "ObjectFactory.ts" }, ["7292"] = { line = 66, file = "ObjectFactory.ts" },
        ["7293"] = { line = 66, file = "ObjectFactory.ts" }, ["7294"] = { line = 67, file = "ObjectFactory.ts" },
        ["7295"] = { line = 67, file = "ObjectFactory.ts" }, ["7296"] = { line = 67, file = "ObjectFactory.ts" },
        ["7297"] = { line = 68, file = "ObjectFactory.ts" }, ["7298"] = { line = 68, file = "ObjectFactory.ts" },
        ["7299"] = { line = 68, file = "ObjectFactory.ts" }, ["7300"] = { line = 69, file = "ObjectFactory.ts" },
        ["7301"] = { line = 69, file = "ObjectFactory.ts" }, ["7302"] = { line = 69, file = "ObjectFactory.ts" },
        ["7303"] = { line = 70, file = "ObjectFactory.ts" }, ["7304"] = { line = 70, file = "ObjectFactory.ts" },
        ["7305"] = { line = 70, file = "ObjectFactory.ts" }, ["7306"] = { line = 71, file = "ObjectFactory.ts" },
        ["7307"] = { line = 71, file = "ObjectFactory.ts" }, ["7308"] = { line = 71, file = "ObjectFactory.ts" },
        ["7309"] = { line = 72, file = "ObjectFactory.ts" }, ["7310"] = { line = 72, file = "ObjectFactory.ts" },
        ["7311"] = { line = 72, file = "ObjectFactory.ts" }, ["7312"] = { line = 73, file = "ObjectFactory.ts" },
        ["7313"] = { line = 73, file = "ObjectFactory.ts" }, ["7314"] = { line = 73, file = "ObjectFactory.ts" },
        ["7315"] = { line = 74, file = "ObjectFactory.ts" }, ["7316"] = { line = 74, file = "ObjectFactory.ts" },
        ["7317"] = { line = 74, file = "ObjectFactory.ts" }, ["7318"] = { line = 75, file = "ObjectFactory.ts" },
        ["7319"] = { line = 75, file = "ObjectFactory.ts" }, ["7320"] = { line = 75, file = "ObjectFactory.ts" },
        ["7321"] = { line = 76, file = "ObjectFactory.ts" }, ["7322"] = { line = 76, file = "ObjectFactory.ts" },
        ["7323"] = { line = 76, file = "ObjectFactory.ts" }, ["7324"] = { line = 77, file = "ObjectFactory.ts" },
        ["7325"] = { line = 77, file = "ObjectFactory.ts" }, ["7326"] = { line = 77, file = "ObjectFactory.ts" },
        ["7327"] = { line = 78, file = "ObjectFactory.ts" }, ["7328"] = { line = 78, file = "ObjectFactory.ts" },
        ["7329"] = { line = 78, file = "ObjectFactory.ts" }, ["7330"] = { line = 79, file = "ObjectFactory.ts" },
        ["7331"] = { line = 79, file = "ObjectFactory.ts" }, ["7332"] = { line = 79, file = "ObjectFactory.ts" },
        ["7333"] = { line = 45, file = "ObjectFactory.ts" }, ["7342"] = { line = 1, file = "DebugUtils.ts" }, ["7343"] = { line = 1, file = "DebugUtils.ts" },
        ["7344"] = { line = 1, file = "DebugUtils.ts" }, ["7345"] = { line = 2, file = "DebugUtils.ts" }, ["7346"] = { line = 2, file = "DebugUtils.ts" },
        ["7347"] = { line = 5, file = "DebugUtils.ts" }, ["7348"] = { line = 6, file = "DebugUtils.ts" }, ["7349"] = { line = 7, file = "DebugUtils.ts" },
        ["7350"] = { line = 8, file = "DebugUtils.ts" }, ["7352"] = { line = 10, file = "DebugUtils.ts" }, ["7353"] = { line = 5, file = "DebugUtils.ts" },
        ["7354"] = { line = 13, file = "DebugUtils.ts" }, ["7355"] = { line = 14, file = "DebugUtils.ts" }, ["7356"] = { line = 14, file = "DebugUtils.ts" },
        ["7357"] = { line = 14, file = "DebugUtils.ts" }, ["7359"] = { line = 14, file = "DebugUtils.ts" }, ["7360"] = { line = 14, file = "DebugUtils.ts" },
        ["7362"] = { line = 15, file = "DebugUtils.ts" }, ["7363"] = { line = 16, file = "DebugUtils.ts" }, ["7364"] = { line = 17, file = "DebugUtils.ts" },
        ["7366"] = { line = 20, file = "DebugUtils.ts" }, ["7367"] = { line = 21, file = "DebugUtils.ts" }, ["7368"] = { line = 22, file = "DebugUtils.ts" },
        ["7370"] = { line = 24, file = "DebugUtils.ts" }, ["7371"] = { line = 25, file = "DebugUtils.ts" }, ["7372"] = { line = 27, file = "DebugUtils.ts" },
        ["7373"] = { line = 28, file = "DebugUtils.ts" }, ["7374"] = { line = 29, file = "DebugUtils.ts" }, ["7375"] = { line = 30, file = "DebugUtils.ts" },
        ["7376"] = { line = 31, file = "DebugUtils.ts" }, ["7378"] = { line = 33, file = "DebugUtils.ts" }, ["7381"] = { line = 37, file = "DebugUtils.ts" },
        ["7384"] = { line = 40, file = "DebugUtils.ts" }, ["7386"] = { line = 14, file = "DebugUtils.ts" }, ["7387"] = { line = 44, file = "DebugUtils.ts" },
        ["7389"] = { line = 51, file = "DebugUtils.ts" }, ["7390"] = { line = 52, file = "DebugUtils.ts" }, ["7397"] = { line = 1, file = "MAVariables.ts" },
        ["7398"] = { line = 1, file = "MAVariables.ts" }, ["7399"] = { line = 1, file = "MAVariables.ts" }, ["7400"] = { line = 2, file = "MAVariables.ts" },
        ["7401"] = { line = 2, file = "MAVariables.ts" }, ["7402"] = { line = 4, file = "MAVariables.ts" }, ["7403"] = { line = 7, file = "MAVariables.ts" },
        ["7404"] = { line = 11, file = "MAVariables.ts" }, ["7405"] = { line = 11, file = "MAVariables.ts" }, ["7406"] = { line = 11, file = "MAVariables.ts" },
        ["7407"] = { line = 13, file = "MAVariables.ts" }, ["7408"] = { line = 14, file = "MAVariables.ts" }, ["7409"] = { line = 15, file = "MAVariables.ts" },
        ["7410"] = { line = 16, file = "MAVariables.ts" }, ["7411"] = { line = 17, file = "MAVariables.ts" }, ["7413"] = { line = 19, file = "MAVariables.ts" },
        ["7415"] = { line = 21, file = "MAVariables.ts" }, ["7416"] = { line = 22, file = "MAVariables.ts" }, ["7418"] = { line = 24, file = "MAVariables.ts" },
        ["7420"] = { line = 13, file = "MAVariables.ts" }, ["7421"] = { line = 28, file = "MAVariables.ts" }, ["7422"] = { line = 29, file = "MAVariables.ts" },
        ["7423"] = { line = 30, file = "MAVariables.ts" }, ["7424"] = { line = 28, file = "MAVariables.ts" }, ["7425"] = { line = 33, file = "MAVariables.ts" },
        ["7426"] = { line = 34, file = "MAVariables.ts" }, ["7427"] = { line = 35, file = "MAVariables.ts" }, ["7428"] = { line = 33, file = "MAVariables.ts" },
        ["7429"] = { line = 38, file = "MAVariables.ts" }, ["7430"] = { line = 39, file = "MAVariables.ts" }, ["7431"] = { line = 40, file = "MAVariables.ts" },
        ["7432"] = { line = 41, file = "MAVariables.ts" }, ["7434"] = { line = 43, file = "MAVariables.ts" }, ["7435"] = { line = 38, file = "MAVariables.ts" },
        ["7436"] = { line = 46, file = "MAVariables.ts" }, ["7437"] = { line = 47, file = "MAVariables.ts" }, ["7438"] = { line = 47, file = "MAVariables.ts" },
        ["7439"] = { line = 47, file = "MAVariables.ts" }, ["7440"] = { line = 47, file = "MAVariables.ts" }, ["7441"] = { line = 50, file = "MAVariables.ts" },
        ["7442"] = { line = 51, file = "MAVariables.ts" }, ["7443"] = { line = 46, file = "MAVariables.ts" }, ["7444"] = { line = 54, file = "MAVariables.ts" },
        ["7447"] = { line = 58, file = "MAVariables.ts" }, ["7450"] = { line = 56, file = "MAVariables.ts" }, ["7451"] = { line = 56, file = "MAVariables.ts" },
        ["7452"] = { line = 56, file = "MAVariables.ts" }, ["7453"] = { line = 56, file = "MAVariables.ts" }, ["7454"] = { line = 56, file = "MAVariables.ts" },
        ["7460"] = { line = 54, file = "MAVariables.ts" }, ["7461"] = { line = 61, file = "MAVariables.ts" }, ["7462"] = { line = 62, file = "MAVariables.ts" },
        ["7463"] = { line = 63, file = "MAVariables.ts" }, ["7464"] = { line = 64, file = "MAVariables.ts" }, ["7465"] = { line = 65, file = "MAVariables.ts" },
        ["7466"] = { line = 66, file = "MAVariables.ts" }, ["7467"] = { line = 67, file = "MAVariables.ts" }, ["7468"] = { line = 61, file = "MAVariables.ts" },
        ["7469"] = { line = 7, file = "MAVariables.ts" }, ["7476"] = { line = 1, file = "PersistentDataAccess.ts" },
        ["7477"] = { line = 1, file = "PersistentDataAccess.ts" }, ["7478"] = { line = 1, file = "PersistentDataAccess.ts" },
        ["7479"] = { line = 10, file = "PersistentDataAccess.ts" }, ["7480"] = { line = 11, file = "PersistentDataAccess.ts" },
        ["7481"] = { line = 23, file = "PersistentDataAccess.ts" }, ["7482"] = { line = 24, file = "PersistentDataAccess.ts" },
        ["7483"] = { line = 25, file = "PersistentDataAccess.ts" }, ["7484"] = { line = 27, file = "PersistentDataAccess.ts" },
        ["7485"] = { line = 28, file = "PersistentDataAccess.ts" }, ["7486"] = { line = 29, file = "PersistentDataAccess.ts" },
        ["7487"] = { line = 30, file = "PersistentDataAccess.ts" }, ["7488"] = { line = 31, file = "PersistentDataAccess.ts" },
        ["7489"] = { line = 31, file = "PersistentDataAccess.ts" }, ["7490"] = { line = 31, file = "PersistentDataAccess.ts" },
        ["7491"] = { line = 31, file = "PersistentDataAccess.ts" }, ["7493"] = { line = 31, file = "PersistentDataAccess.ts" },
        ["7494"] = { line = 31, file = "PersistentDataAccess.ts" }, ["7496"] = { line = 31, file = "PersistentDataAccess.ts" },
        ["7497"] = { line = 31, file = "PersistentDataAccess.ts" }, ["7498"] = { line = 31, file = "PersistentDataAccess.ts" },
        ["7500"] = { line = 31, file = "PersistentDataAccess.ts" }, ["7502"] = { line = 31, file = "PersistentDataAccess.ts" },
        ["7503"] = { line = 32, file = "PersistentDataAccess.ts" }, ["7504"] = { line = 32, file = "PersistentDataAccess.ts" },
        ["7505"] = { line = 33, file = "PersistentDataAccess.ts" }, ["7507"] = { line = 34, file = "PersistentDataAccess.ts" },
        ["7509"] = { line = 32, file = "PersistentDataAccess.ts" }, ["7510"] = { line = 30, file = "PersistentDataAccess.ts" },
        ["7511"] = { line = 36, file = "PersistentDataAccess.ts" }, ["7512"] = { line = 37, file = "PersistentDataAccess.ts" },
        ["7513"] = { line = 36, file = "PersistentDataAccess.ts" }, ["7514"] = { line = 42, file = "PersistentDataAccess.ts" },
        ["7515"] = { line = 43, file = "PersistentDataAccess.ts" }, ["7516"] = { line = 44, file = "PersistentDataAccess.ts" },
        ["7517"] = { line = 46, file = "PersistentDataAccess.ts" }, ["7518"] = { line = 42, file = "PersistentDataAccess.ts" },
        ["7519"] = { line = 52, file = "PersistentDataAccess.ts" }, ["7520"] = { line = 53, file = "PersistentDataAccess.ts" },
        ["7521"] = { line = 54, file = "PersistentDataAccess.ts" }, ["7522"] = { line = 55, file = "PersistentDataAccess.ts" },
        ["7523"] = { line = 56, file = "PersistentDataAccess.ts" }, ["7525"] = { line = 58, file = "PersistentDataAccess.ts" },
        ["7526"] = { line = 59, file = "PersistentDataAccess.ts" }, ["7527"] = { line = 60, file = "PersistentDataAccess.ts" },
        ["7529"] = { line = 52, file = "PersistentDataAccess.ts" }, ["7530"] = { line = 63, file = "PersistentDataAccess.ts" },
        ["7531"] = { line = 64, file = "PersistentDataAccess.ts" }, ["7532"] = { line = 65, file = "PersistentDataAccess.ts" },
        ["7533"] = { line = 66, file = "PersistentDataAccess.ts" }, ["7535"] = { line = 63, file = "PersistentDataAccess.ts" },
        ["7536"] = { line = 69, file = "PersistentDataAccess.ts" }, ["7537"] = { line = 70, file = "PersistentDataAccess.ts" },
        ["7538"] = { line = 71, file = "PersistentDataAccess.ts" }, ["7539"] = { line = 72, file = "PersistentDataAccess.ts" },
        ["7541"] = { line = 74, file = "PersistentDataAccess.ts" }, ["7542"] = { line = 74, file = "PersistentDataAccess.ts" },
        ["7543"] = { line = 74, file = "PersistentDataAccess.ts" }, ["7544"] = { line = 74, file = "PersistentDataAccess.ts" },
        ["7545"] = { line = 75, file = "PersistentDataAccess.ts" }, ["7546"] = { line = 76, file = "PersistentDataAccess.ts" },
        ["7547"] = { line = 77, file = "PersistentDataAccess.ts" }, ["7548"] = { line = 69, file = "PersistentDataAccess.ts" },
        ["7549"] = { line = 80, file = "PersistentDataAccess.ts" }, ["7550"] = { line = 81, file = "PersistentDataAccess.ts" },
        ["7551"] = { line = 82, file = "PersistentDataAccess.ts" }, ["7552"] = { line = 80, file = "PersistentDataAccess.ts" },
        ["7553"] = { line = 88, file = "PersistentDataAccess.ts" }, ["7554"] = { line = 89, file = "PersistentDataAccess.ts" },
        ["7555"] = { line = 90, file = "PersistentDataAccess.ts" }, ["7556"] = { line = 91, file = "PersistentDataAccess.ts" },
        ["7558"] = { line = 93, file = "PersistentDataAccess.ts" }, ["7559"] = { line = 88, file = "PersistentDataAccess.ts" },
        ["7560"] = { line = 96, file = "PersistentDataAccess.ts" }, ["7561"] = { line = 97, file = "PersistentDataAccess.ts" },
        ["7562"] = { line = 98, file = "PersistentDataAccess.ts" }, ["7563"] = { line = 99, file = "PersistentDataAccess.ts" },
        ["7564"] = { line = 100, file = "PersistentDataAccess.ts" }, ["7565"] = { line = 96, file = "PersistentDataAccess.ts" },
        ["7566"] = { line = 27, file = "PersistentDataAccess.ts" }, ["7567"] = { line = 11, file = "PersistentDataAccess.ts" },
        ["7574"] = { line = 4, file = "CoroutineMutex.ts" }, ["7575"] = { line = 18, file = "CoroutineMutex.ts" },
        ["7576"] = { line = 18, file = "CoroutineMutex.ts" }, ["7577"] = { line = 19, file = "CoroutineMutex.ts" },
        ["7578"] = { line = 20, file = "CoroutineMutex.ts" }, ["7579"] = { line = 20, file = "CoroutineMutex.ts" },
        ["7580"] = { line = 20, file = "CoroutineMutex.ts" }, ["7582"] = { line = 21, file = "CoroutineMutex.ts" },
        ["7583"] = { line = 22, file = "CoroutineMutex.ts" }, ["7584"] = { line = 23, file = "CoroutineMutex.ts" },
        ["7587"] = { line = 27, file = "CoroutineMutex.ts" }, ["7588"] = { line = 28, file = "CoroutineMutex.ts" },
        ["7589"] = { line = 29, file = "CoroutineMutex.ts" }, ["7590"] = { line = 30, file = "CoroutineMutex.ts" },
        ["7593"] = { line = 34, file = "CoroutineMutex.ts" }, ["7594"] = { line = 35, file = "CoroutineMutex.ts" },
        ["7595"] = { line = 36, file = "CoroutineMutex.ts" }, ["7596"] = { line = 37, file = "CoroutineMutex.ts" },
        ["7597"] = { line = 38, file = "CoroutineMutex.ts" }, ["7598"] = { line = 38, file = "CoroutineMutex.ts" },
        ["7599"] = { line = 38, file = "CoroutineMutex.ts" }, ["7601"] = { line = 39, file = "CoroutineMutex.ts" },
        ["7603"] = { line = 41, file = "CoroutineMutex.ts" }, ["7605"] = { line = 44, file = "CoroutineMutex.ts" },
        ["7606"] = { line = 45, file = "CoroutineMutex.ts" }, ["7607"] = { line = 46, file = "CoroutineMutex.ts" },
        ["7608"] = { line = 47, file = "CoroutineMutex.ts" }, ["7609"] = { line = 48, file = "CoroutineMutex.ts" },
        ["7612"] = { line = 51, file = "CoroutineMutex.ts" }, ["7613"] = { line = 52, file = "CoroutineMutex.ts" },
        ["7614"] = { line = 52, file = "CoroutineMutex.ts" }, ["7615"] = { line = 52, file = "CoroutineMutex.ts" },
        ["7617"] = { line = 54, file = "CoroutineMutex.ts" }, ["7618"] = { line = 55, file = "CoroutineMutex.ts" },
        ["7620"] = { line = 57, file = "CoroutineMutex.ts" }, ["7622"] = { line = 59, file = "CoroutineMutex.ts" },
        ["7623"] = { line = 62, file = "CoroutineMutex.ts" }, ["7626"] = { line = 64, file = "CoroutineMutex.ts" },
        ["7628"] = { line = 66, file = "CoroutineMutex.ts" }, ["7630"] = { line = 69, file = "CoroutineMutex.ts" },
        ["7631"] = { line = 70, file = "CoroutineMutex.ts" }, ["7632"] = { line = 71, file = "CoroutineMutex.ts" },
        ["7633"] = { line = 72, file = "CoroutineMutex.ts" }, ["7634"] = { line = 73, file = "CoroutineMutex.ts" },
        ["7635"] = { line = 74, file = "CoroutineMutex.ts" }, ["7636"] = { line = 76, file = "CoroutineMutex.ts" },
        ["7637"] = { line = 77, file = "CoroutineMutex.ts" }, ["7638"] = { line = 76, file = "CoroutineMutex.ts" },
        ["7639"] = { line = 80, file = "CoroutineMutex.ts" }, ["7641"] = { line = 81, file = "CoroutineMutex.ts" },
        ["7642"] = { line = 82, file = "CoroutineMutex.ts" }, ["7645"] = { line = 83, file = "CoroutineMutex.ts" },
        ["7646"] = { line = 84, file = "CoroutineMutex.ts" }, ["7647"] = { line = 85, file = "CoroutineMutex.ts" },
        ["7651"] = { line = 88, file = "CoroutineMutex.ts" }, ["7654"] = { line = 89, file = "CoroutineMutex.ts" },
        ["7658"] = { line = 92, file = "CoroutineMutex.ts" }, ["7661"] = { line = 94, file = "CoroutineMutex.ts" },
        ["7662"] = { line = 95, file = "CoroutineMutex.ts" }, ["7663"] = { line = 96, file = "CoroutineMutex.ts" },
        ["7664"] = { line = 97, file = "CoroutineMutex.ts" }, ["7666"] = { line = 99, file = "CoroutineMutex.ts" },
        ["7667"] = { line = 100, file = "CoroutineMutex.ts" }, ["7668"] = { line = 101, file = "CoroutineMutex.ts" },
        ["7669"] = { line = 102, file = "CoroutineMutex.ts" }, ["7674"] = { line = 106, file = "CoroutineMutex.ts" },
        ["7677"] = { line = 108, file = "CoroutineMutex.ts" }, ["7678"] = { line = 110, file = "CoroutineMutex.ts" },
        ["7679"] = { line = 111, file = "CoroutineMutex.ts" }, ["7680"] = { line = 112, file = "CoroutineMutex.ts" },
        ["7686"] = { line = 117, file = "CoroutineMutex.ts" }, ["7687"] = { line = 117, file = "CoroutineMutex.ts" },
        ["7688"] = { line = 117, file = "CoroutineMutex.ts" }, ["7690"] = { line = 70, file = "CoroutineMutex.ts" },
        ["7692"] = { line = 6, file = "CoroutineMutex.ts" }, ["7693"] = { line = 7, file = "CoroutineMutex.ts" },
        ["7694"] = { line = 8, file = "CoroutineMutex.ts" }, ["7695"] = { line = 9, file = "CoroutineMutex.ts" },
        ["7696"] = { line = 10, file = "CoroutineMutex.ts" }, ["7697"] = { line = 11, file = "CoroutineMutex.ts" },
        ["7698"] = { line = 12, file = "CoroutineMutex.ts" }, ["7699"] = { line = 13, file = "CoroutineMutex.ts" },
        ["7700"] = { line = 14, file = "CoroutineMutex.ts" }, ["7701"] = { line = 15, file = "CoroutineMutex.ts" },
        ["7702"] = { line = 10, file = "CoroutineMutex.ts" }, ["7703"] = { line = 4, file = "CoroutineMutex.ts" },
        ["7711"] = { line = 1, file = "MutexFactory.ts" }, ["7712"] = { line = 1, file = "MutexFactory.ts" }, ["7713"] = { line = 3, file = "MutexFactory.ts" },
        ["7714"] = { line = 3, file = "MutexFactory.ts" }, ["7715"] = { line = 6, file = "MutexFactory.ts" }, ["7716"] = { line = 15, file = "MutexFactory.ts" },
        ["7717"] = { line = 15, file = "MutexFactory.ts" }, ["7718"] = { line = 16, file = "MutexFactory.ts" }, ["7719"] = { line = 16, file = "MutexFactory.ts" },
        ["7720"] = { line = 16, file = "MutexFactory.ts" }, ["7721"] = { line = 16, file = "MutexFactory.ts" }, ["7722"] = { line = 17, file = "MutexFactory.ts" },
        ["7723"] = { line = 18, file = "MutexFactory.ts" }, ["7724"] = { line = 16, file = "MutexFactory.ts" }, ["7725"] = { line = 16, file = "MutexFactory.ts" },
        ["7726"] = { line = 20, file = "MutexFactory.ts" }, ["7727"] = { line = 21, file = "MutexFactory.ts" }, ["7728"] = { line = 22, file = "MutexFactory.ts" },
        ["7730"] = { line = 25, file = "MutexFactory.ts" }, ["7731"] = { line = 26, file = "MutexFactory.ts" }, ["7732"] = { line = 27, file = "MutexFactory.ts" },
        ["7735"] = { line = 8, file = "MutexFactory.ts" }, ["7736"] = { line = 10, file = "MutexFactory.ts" }, ["7737"] = { line = 6, file = "MutexFactory.ts" },
        ["7745"] = { line = 1, file = "index.ts" }, ["7746"] = { line = 1, file = "index.ts" }, ["7747"] = { line = 1, file = "index.ts" },
        ["7757"] = { line = 1, file = "PluginEnv.ts" }, ["7758"] = { line = 1, file = "PluginEnv.ts" }, ["7759"] = { line = 1, file = "PluginEnv.ts" },
        ["7760"] = { line = 7, file = "PluginEnv.ts" }, ["7761"] = { line = 14, file = "PluginEnv.ts" }, ["7762"] = { line = 15, file = "PluginEnv.ts" },
        ["7763"] = { line = 16, file = "PluginEnv.ts" }, ["7764"] = { line = 17, file = "PluginEnv.ts" }, ["7765"] = { line = 18, file = "PluginEnv.ts" },
        ["7766"] = { line = 7, file = "PluginEnv.ts" }, ["7767"] = { line = 21, file = "PluginEnv.ts" }, ["7768"] = { line = 22, file = "PluginEnv.ts" },
        ["7769"] = { line = 21, file = "PluginEnv.ts" }, ["7782"] = { line = 24, file = "EventEmitter.ts" }, ["7783"] = { line = 24, file = "EventEmitter.ts" },
        ["7784"] = { line = 24, file = "EventEmitter.ts" }, ["7786"] = { line = 25, file = "EventEmitter.ts" }, ["7787"] = { line = 24, file = "EventEmitter.ts" },
        ["7788"] = { line = 33, file = "EventEmitter.ts" }, ["7789"] = { line = 34, file = "EventEmitter.ts" }, ["7790"] = { line = 35, file = "EventEmitter.ts" },
        ["7792"] = { line = 37, file = "EventEmitter.ts" }, ["7793"] = { line = 38, file = "EventEmitter.ts" }, ["7794"] = { line = 39, file = "EventEmitter.ts" },
        ["7796"] = { line = 41, file = "EventEmitter.ts" }, ["7797"] = { line = 33, file = "EventEmitter.ts" }, ["7798"] = { line = 44, file = "EventEmitter.ts" },
        ["7799"] = { line = 45, file = "EventEmitter.ts" }, ["7802"] = { line = 49, file = "EventEmitter.ts" }, ["7803"] = { line = 50, file = "EventEmitter.ts" },
        ["7804"] = { line = 51, file = "EventEmitter.ts" }, ["7806"] = { line = 44, file = "EventEmitter.ts" }, ["7807"] = { line = 55, file = "EventEmitter.ts" },
        ["7808"] = { line = 56, file = "EventEmitter.ts" }, ["7809"] = { line = 56, file = "EventEmitter.ts" }, ["7810"] = { line = 56, file = "EventEmitter.ts" },
        ["7811"] = { line = 56, file = "EventEmitter.ts" }, ["7812"] = { line = 55, file = "EventEmitter.ts" }, ["7813"] = { line = 61, file = "EventEmitter.ts" },
        ["7814"] = { line = 62, file = "EventEmitter.ts" }, ["7817"] = { line = 66, file = "EventEmitter.ts" }, ["7818"] = { line = 67, file = "EventEmitter.ts" },
        ["7819"] = { line = 67, file = "EventEmitter.ts" }, ["7820"] = { line = 67, file = "EventEmitter.ts" }, ["7823"] = { line = 71, file = "EventEmitter.ts" },
        ["7826"] = { line = 69, file = "EventEmitter.ts" }, ["7827"] = { line = 69, file = "EventEmitter.ts" }, ["7828"] = { line = 69, file = "EventEmitter.ts" },
        ["7829"] = { line = 69, file = "EventEmitter.ts" }, ["7835"] = { line = 67, file = "EventEmitter.ts" }, ["7836"] = { line = 67, file = "EventEmitter.ts" },
        ["7837"] = { line = 74, file = "EventEmitter.ts" }, ["7838"] = { line = 75, file = "EventEmitter.ts" }, ["7840"] = { line = 61, file = "EventEmitter.ts" },
        ["7841"] = { line = 79, file = "EventEmitter.ts" }, ["7842"] = { line = 80, file = "EventEmitter.ts" }, ["7843"] = { line = 80, file = "EventEmitter.ts" },
        ["7844"] = { line = 80, file = "EventEmitter.ts" }, ["7845"] = { line = 80, file = "EventEmitter.ts" }, ["7846"] = { line = 81, file = "EventEmitter.ts" },
        ["7847"] = { line = 82, file = "EventEmitter.ts" }, ["7848"] = { line = 82, file = "EventEmitter.ts" }, ["7849"] = { line = 82, file = "EventEmitter.ts" },
        ["7850"] = { line = 82, file = "EventEmitter.ts" }, ["7851"] = { line = 80, file = "EventEmitter.ts" }, ["7852"] = { line = 80, file = "EventEmitter.ts" },
        ["7853"] = { line = 85, file = "EventEmitter.ts" }, ["7854"] = { line = 79, file = "EventEmitter.ts" }, ["7861"] = { line = 1, file = "PluginInfo.ts" },
        ["7862"] = { line = 1, file = "PluginInfo.ts" }, ["7863"] = { line = 7, file = "PluginInfo.ts" }, ["7864"] = { line = 1, file = "PluginInfo.ts" },
        ["7871"] = { line = 1, file = "SingletonFactory.ts" }, ["7872"] = { line = 1, file = "SingletonFactory.ts" },
        ["7873"] = { line = 7, file = "SingletonFactory.ts" }, ["7874"] = { line = 8, file = "SingletonFactory.ts" },
        ["7875"] = { line = 10, file = "SingletonFactory.ts" }, ["7876"] = { line = 11, file = "SingletonFactory.ts" },
        ["7877"] = { line = 10, file = "SingletonFactory.ts" }, ["7878"] = { line = 14, file = "SingletonFactory.ts" },
        ["7879"] = { line = 15, file = "SingletonFactory.ts" }, ["7880"] = { line = 14, file = "SingletonFactory.ts" },
        ["7881"] = { line = 18, file = "SingletonFactory.ts" }, ["7882"] = { line = 19, file = "SingletonFactory.ts" },
        ["7883"] = { line = 20, file = "SingletonFactory.ts" }, ["7884"] = { line = 21, file = "SingletonFactory.ts" },
        ["7885"] = { line = 18, file = "SingletonFactory.ts" }, ["7886"] = { line = 24, file = "SingletonFactory.ts" },
        ["7887"] = { line = 25, file = "SingletonFactory.ts" }, ["7888"] = { line = 28, file = "SingletonFactory.ts" },
        ["7889"] = { line = 29, file = "SingletonFactory.ts" }, ["7890"] = { line = 30, file = "SingletonFactory.ts" },
        ["7891"] = { line = 32, file = "SingletonFactory.ts" }, ["7892"] = { line = 33, file = "SingletonFactory.ts" },
        ["7893"] = { line = 28, file = "SingletonFactory.ts" }, ["7894"] = { line = 36, file = "SingletonFactory.ts" },
        ["7895"] = { line = 37, file = "SingletonFactory.ts" }, ["7897"] = { line = 39, file = "SingletonFactory.ts" },
        ["7898"] = { line = 40, file = "SingletonFactory.ts" }, ["7899"] = { line = 42, file = "SingletonFactory.ts" },
        ["7900"] = { line = 43, file = "SingletonFactory.ts" }, ["7903"] = { line = 47, file = "SingletonFactory.ts" },
        ["7904"] = { line = 24, file = "SingletonFactory.ts" }, ["7913"] = { line = 2, file = "AssetManager.ts" },
        ["7914"] = { line = 2, file = "AssetManager.ts" }, ["7915"] = { line = 6, file = "AssetManager.ts" }, ["7916"] = { line = 6, file = "AssetManager.ts" },
        ["7917"] = { line = 7, file = "AssetManager.ts" }, ["7918"] = { line = 7, file = "AssetManager.ts" }, ["7919"] = { line = 7, file = "AssetManager.ts" },
        ["7920"] = { line = 17, file = "AssetManager.ts" }, ["7921"] = { line = 18, file = "AssetManager.ts" }, ["7922"] = { line = 18, file = "AssetManager.ts" },
        ["7923"] = { line = 18, file = "AssetManager.ts" }, ["7924"] = { line = 18, file = "AssetManager.ts" }, ["7925"] = { line = 18, file = "AssetManager.ts" },
        ["7930"] = { line = 25, file = "AssetManager.ts" }, ["7931"] = { line = 26, file = "AssetManager.ts" }, ["7932"] = { line = 27, file = "AssetManager.ts" },
        ["7933"] = { line = 28, file = "AssetManager.ts" }, ["7935"] = { line = 30, file = "AssetManager.ts" }, ["7936"] = { line = 31, file = "AssetManager.ts" },
        ["7937"] = { line = 32, file = "AssetManager.ts" }, ["7939"] = { line = 34, file = "AssetManager.ts" }, ["7940"] = { line = 35, file = "AssetManager.ts" },
        ["7942"] = { line = 37, file = "AssetManager.ts" }, ["7945"] = { line = 25, file = "AssetManager.ts" }, ["7946"] = { line = 42, file = "AssetManager.ts" },
        ["7947"] = { line = 43, file = "AssetManager.ts" }, ["7948"] = { line = 44, file = "AssetManager.ts" }, ["7949"] = { line = 45, file = "AssetManager.ts" },
        ["7950"] = { line = 46, file = "AssetManager.ts" }, ["7952"] = { line = 48, file = "AssetManager.ts" }, ["7953"] = { line = 48, file = "AssetManager.ts" },
        ["7954"] = { line = 48, file = "AssetManager.ts" }, ["7955"] = { line = 48, file = "AssetManager.ts" }, ["7956"] = { line = 49, file = "AssetManager.ts" },
        ["7958"] = { line = 52, file = "AssetManager.ts" }, ["7959"] = { line = 53, file = "AssetManager.ts" }, ["7960"] = { line = 54, file = "AssetManager.ts" },
        ["7962"] = { line = 56, file = "AssetManager.ts" }, ["7963"] = { line = 57, file = "AssetManager.ts" }, ["7965"] = { line = 42, file = "AssetManager.ts" },
        ["7966"] = { line = 61, file = "AssetManager.ts" }, ["7967"] = { line = 62, file = "AssetManager.ts" }, ["7968"] = { line = 63, file = "AssetManager.ts" },
        ["7969"] = { line = 64, file = "AssetManager.ts" }, ["7970"] = { line = 65, file = "AssetManager.ts" }, ["7972"] = { line = 67, file = "AssetManager.ts" },
        ["7973"] = { line = 67, file = "AssetManager.ts" }, ["7974"] = { line = 67, file = "AssetManager.ts" }, ["7975"] = { line = 67, file = "AssetManager.ts" },
        ["7976"] = { line = 68, file = "AssetManager.ts" }, ["7978"] = { line = 70, file = "AssetManager.ts" }, ["7979"] = { line = 71, file = "AssetManager.ts" },
        ["7980"] = { line = 72, file = "AssetManager.ts" }, ["7982"] = { line = 74, file = "AssetManager.ts" }, ["7983"] = { line = 75, file = "AssetManager.ts" },
        ["7985"] = { line = 61, file = "AssetManager.ts" }, ["7986"] = { line = 79, file = "AssetManager.ts" }, ["7987"] = { line = 80, file = "AssetManager.ts" },
        ["7988"] = { line = 81, file = "AssetManager.ts" }, ["7989"] = { line = 82, file = "AssetManager.ts" }, ["7991"] = { line = 84, file = "AssetManager.ts" },
        ["7992"] = { line = 85, file = "AssetManager.ts" }, ["7993"] = { line = 86, file = "AssetManager.ts" }, ["7995"] = { line = 88, file = "AssetManager.ts" },
        ["7996"] = { line = 89, file = "AssetManager.ts" }, ["7998"] = { line = 91, file = "AssetManager.ts" }, ["8001"] = { line = 79, file = "AssetManager.ts" },
        ["8002"] = { line = 96, file = "AssetManager.ts" }, ["8003"] = { line = 97, file = "AssetManager.ts" }, ["8004"] = { line = 98, file = "AssetManager.ts" },
        ["8006"] = { line = 100, file = "AssetManager.ts" }, ["8008"] = { line = 96, file = "AssetManager.ts" }, ["8009"] = { line = 104, file = "AssetManager.ts" },
        ["8010"] = { line = 105, file = "AssetManager.ts" }, ["8011"] = { line = 106, file = "AssetManager.ts" },
        ["8012"] = { line = 105, file = "AssetManager.ts" }, ["8013"] = { line = 108, file = "AssetManager.ts" },
        ["8014"] = { line = 109, file = "AssetManager.ts" }, ["8015"] = { line = 110, file = "AssetManager.ts" },
        ["8016"] = { line = 111, file = "AssetManager.ts" }, ["8017"] = { line = 112, file = "AssetManager.ts" },
        ["8019"] = { line = 114, file = "AssetManager.ts" }, ["8020"] = { line = 115, file = "AssetManager.ts" },
        ["8021"] = { line = 115, file = "AssetManager.ts" }, ["8022"] = { line = 115, file = "AssetManager.ts" },
        ["8023"] = { line = 115, file = "AssetManager.ts" }, ["8025"] = { line = 118, file = "AssetManager.ts" },
        ["8027"] = { line = 108, file = "AssetManager.ts" }, ["8028"] = { line = 121, file = "AssetManager.ts" },
        ["8029"] = { line = 122, file = "AssetManager.ts" }, ["8030"] = { line = 123, file = "AssetManager.ts" },
        ["8031"] = { line = 124, file = "AssetManager.ts" }, ["8032"] = { line = 125, file = "AssetManager.ts" },
        ["8033"] = { line = 126, file = "AssetManager.ts" }, ["8034"] = { line = 127, file = "AssetManager.ts" },
        ["8035"] = { line = 128, file = "AssetManager.ts" }, ["8036"] = { line = 129, file = "AssetManager.ts" },
        ["8037"] = { line = 130, file = "AssetManager.ts" }, ["8038"] = { line = 131, file = "AssetManager.ts" },
        ["8039"] = { line = 132, file = "AssetManager.ts" }, ["8040"] = { line = 133, file = "AssetManager.ts" },
        ["8041"] = { line = 134, file = "AssetManager.ts" }, ["8042"] = { line = 135, file = "AssetManager.ts" },
        ["8043"] = { line = 135, file = "AssetManager.ts" }, ["8044"] = { line = 136, file = "AssetManager.ts" },
        ["8046"] = { line = 138, file = "AssetManager.ts" }, ["8048"] = { line = 135, file = "AssetManager.ts" },
        ["8049"] = { line = 139, file = "AssetManager.ts" }, ["8050"] = { line = 140, file = "AssetManager.ts" },
        ["8054"] = { line = 144, file = "AssetManager.ts" }, ["8056"] = { line = 146, file = "AssetManager.ts" },
        ["8057"] = { line = 126, file = "AssetManager.ts" }, ["8058"] = { line = 148, file = "AssetManager.ts" },
        ["8059"] = { line = 149, file = "AssetManager.ts" }, ["8060"] = { line = 151, file = "AssetManager.ts" },
        ["8061"] = { line = 152, file = "AssetManager.ts" }, ["8062"] = { line = 153, file = "AssetManager.ts" },
        ["8063"] = { line = 154, file = "AssetManager.ts" }, ["8064"] = { line = 155, file = "AssetManager.ts" },
        ["8065"] = { line = 156, file = "AssetManager.ts" }, ["8066"] = { line = 158, file = "AssetManager.ts" },
        ["8067"] = { line = 158, file = "AssetManager.ts" }, ["8068"] = { line = 159, file = "AssetManager.ts" },
        ["8070"] = { line = 161, file = "AssetManager.ts" }, ["8072"] = { line = 158, file = "AssetManager.ts" },
        ["8073"] = { line = 162, file = "AssetManager.ts" }, ["8074"] = { line = 163, file = "AssetManager.ts" },
        ["8076"] = { line = 165, file = "AssetManager.ts" }, ["8080"] = { line = 148, file = "AssetManager.ts" },
        ["8081"] = { line = 171, file = "AssetManager.ts" }, ["8082"] = { line = 175, file = "AssetManager.ts" },
        ["8083"] = { line = 179, file = "AssetManager.ts" }, ["8084"] = { line = 179, file = "AssetManager.ts" },
        ["8085"] = { line = 179, file = "AssetManager.ts" }, ["8086"] = { line = 179, file = "AssetManager.ts" },
        ["8087"] = { line = 183, file = "AssetManager.ts" }, ["8088"] = { line = 187, file = "AssetManager.ts" },
        ["8089"] = { line = 191, file = "AssetManager.ts" }, ["8090"] = { line = 195, file = "AssetManager.ts" },
        ["8091"] = { line = 195, file = "AssetManager.ts" }, ["8092"] = { line = 195, file = "AssetManager.ts" },
        ["8093"] = { line = 195, file = "AssetManager.ts" }, ["8094"] = { line = 195, file = "AssetManager.ts" },
        ["8095"] = { line = 195, file = "AssetManager.ts" }, ["8096"] = { line = 195, file = "AssetManager.ts" },
        ["8097"] = { line = 195, file = "AssetManager.ts" }, ["8098"] = { line = 195, file = "AssetManager.ts" },
        ["8099"] = { line = 199, file = "AssetManager.ts" }, ["8100"] = { line = 203, file = "AssetManager.ts" },
        ["8101"] = { line = 171, file = "AssetManager.ts" }, ["8102"] = { line = 205, file = "AssetManager.ts" },
        ["8103"] = { line = 209, file = "AssetManager.ts" }, ["8104"] = { line = 213, file = "AssetManager.ts" },
        ["8105"] = { line = 213, file = "AssetManager.ts" }, ["8106"] = { line = 213, file = "AssetManager.ts" },
        ["8107"] = { line = 213, file = "AssetManager.ts" }, ["8108"] = { line = 217, file = "AssetManager.ts" },
        ["8109"] = { line = 221, file = "AssetManager.ts" }, ["8110"] = { line = 225, file = "AssetManager.ts" },
        ["8111"] = { line = 229, file = "AssetManager.ts" }, ["8112"] = { line = 229, file = "AssetManager.ts" },
        ["8113"] = { line = 229, file = "AssetManager.ts" }, ["8114"] = { line = 229, file = "AssetManager.ts" },
        ["8115"] = { line = 229, file = "AssetManager.ts" }, ["8116"] = { line = 229, file = "AssetManager.ts" },
        ["8117"] = { line = 229, file = "AssetManager.ts" }, ["8118"] = { line = 229, file = "AssetManager.ts" },
        ["8119"] = { line = 233, file = "AssetManager.ts" }, ["8120"] = { line = 237, file = "AssetManager.ts" },
        ["8121"] = { line = 205, file = "AssetManager.ts" }, ["8122"] = { line = 104, file = "AssetManager.ts" },
        ["8123"] = { line = 17, file = "AssetManager.ts" }, ["8130"] = { line = 1, file = "XmlUtils.ts" }, ["8131"] = { line = 1, file = "XmlUtils.ts" },
        ["8132"] = { line = 3, file = "XmlUtils.ts" }, ["8133"] = { line = 4, file = "XmlUtils.ts" }, ["8134"] = { line = 5, file = "XmlUtils.ts" },
        ["8135"] = { line = 6, file = "XmlUtils.ts" }, ["8136"] = { line = 7, file = "XmlUtils.ts" }, ["8137"] = { line = 8, file = "XmlUtils.ts" },
        ["8140"] = { line = 12, file = "XmlUtils.ts" }, ["8141"] = { line = 13, file = "XmlUtils.ts" }, ["8143"] = { line = 3, file = "XmlUtils.ts" },
        ["8144"] = { line = 16, file = "XmlUtils.ts" }, ["8210"] = { line = 1, file = "FileUtils.ts" }, ["8211"] = { line = 1, file = "FileUtils.ts" },
        ["8212"] = { line = 1, file = "FileUtils.ts" }, ["8213"] = { line = 1, file = "FileUtils.ts" }, ["8214"] = { line = 1, file = "FileUtils.ts" },
        ["8215"] = { line = 3, file = "FileUtils.ts" }, ["8216"] = { line = 5, file = "FileUtils.ts" }, ["8217"] = { line = 6, file = "FileUtils.ts" },
        ["8218"] = { line = 5, file = "FileUtils.ts" }, ["8219"] = { line = 9, file = "FileUtils.ts" }, ["8220"] = { line = 9, file = "FileUtils.ts" },
        ["8221"] = { line = 10, file = "FileUtils.ts" }, ["8222"] = { line = 9, file = "FileUtils.ts" }, ["8223"] = { line = 13, file = "FileUtils.ts" },
        ["8224"] = { line = 14, file = "FileUtils.ts" }, ["8225"] = { line = 15, file = "FileUtils.ts" }, ["8226"] = { line = 16, file = "FileUtils.ts" },
        ["8227"] = { line = 17, file = "FileUtils.ts" }, ["8228"] = { line = 18, file = "FileUtils.ts" }, ["8229"] = { line = 19, file = "FileUtils.ts" },
        ["8230"] = { line = 13, file = "FileUtils.ts" }, ["8231"] = { line = 22, file = "FileUtils.ts" }, ["8232"] = { line = 23, file = "FileUtils.ts" },
        ["8233"] = { line = 24, file = "FileUtils.ts" }, ["8234"] = { line = 25, file = "FileUtils.ts" }, ["8235"] = { line = 22, file = "FileUtils.ts" },
        ["8236"] = { line = 28, file = "FileUtils.ts" }, ["8237"] = { line = 29, file = "FileUtils.ts" }, ["8238"] = { line = 30, file = "FileUtils.ts" },
        ["8239"] = { line = 31, file = "FileUtils.ts" }, ["8241"] = { line = 33, file = "FileUtils.ts" }, ["8242"] = { line = 34, file = "FileUtils.ts" },
        ["8243"] = { line = 34, file = "FileUtils.ts" }, ["8244"] = { line = 34, file = "FileUtils.ts" }, ["8245"] = { line = 34, file = "FileUtils.ts" },
        ["8246"] = { line = 35, file = "FileUtils.ts" }, ["8248"] = { line = 28, file = "FileUtils.ts" }, ["8249"] = { line = 39, file = "FileUtils.ts" },
        ["8250"] = { line = 40, file = "FileUtils.ts" }, ["8251"] = { line = 41, file = "FileUtils.ts" }, ["8252"] = { line = 39, file = "FileUtils.ts" },
        ["8253"] = { line = 44, file = "FileUtils.ts" }, ["8254"] = { line = 45, file = "FileUtils.ts" }, ["8255"] = { line = 46, file = "FileUtils.ts" },
        ["8256"] = { line = 44, file = "FileUtils.ts" }, ["8257"] = { line = 49, file = "FileUtils.ts" }, ["8258"] = { line = 50, file = "FileUtils.ts" },
        ["8259"] = { line = 49, file = "FileUtils.ts" }, ["8260"] = { line = 53, file = "FileUtils.ts" }, ["8261"] = { line = 54, file = "FileUtils.ts" },
        ["8262"] = { line = 53, file = "FileUtils.ts" }, ["8263"] = { line = 63, file = "FileUtils.ts" }, ["8264"] = { line = 64, file = "FileUtils.ts" },
        ["8265"] = { line = 63, file = "FileUtils.ts" }, ["8266"] = { line = 67, file = "FileUtils.ts" }, ["8267"] = { line = 68, file = "FileUtils.ts" },
        ["8268"] = { line = 67, file = "FileUtils.ts" }, ["8271"] = { line = 74, file = "FileUtils.ts" }, ["8272"] = { line = 75, file = "FileUtils.ts" },
        ["8273"] = { line = 76, file = "FileUtils.ts" }, ["8274"] = { line = 77, file = "FileUtils.ts" }, ["8275"] = { line = 78, file = "FileUtils.ts" },
        ["8276"] = { line = 79, file = "FileUtils.ts" }, ["8277"] = { line = 80, file = "FileUtils.ts" }, ["8278"] = { line = 81, file = "FileUtils.ts" },
        ["8279"] = { line = 82, file = "FileUtils.ts" }, ["8281"] = { line = 84, file = "FileUtils.ts" }, ["8285"] = { line = 88, file = "FileUtils.ts" },
        ["8286"] = { line = 74, file = "FileUtils.ts" }, ["8287"] = { line = 91, file = "FileUtils.ts" }, ["8288"] = { line = 92, file = "FileUtils.ts" },
        ["8289"] = { line = 93, file = "FileUtils.ts" }, ["8290"] = { line = 94, file = "FileUtils.ts" }, ["8291"] = { line = 95, file = "FileUtils.ts" },
        ["8292"] = { line = 96, file = "FileUtils.ts" }, ["8293"] = { line = 97, file = "FileUtils.ts" }, ["8294"] = { line = 98, file = "FileUtils.ts" },
        ["8298"] = { line = 102, file = "FileUtils.ts" }, ["8299"] = { line = 91, file = "FileUtils.ts" }, ["8300"] = { line = 108, file = "FileUtils.ts" },
        ["8301"] = { line = 109, file = "FileUtils.ts" }, ["8302"] = { line = 110, file = "FileUtils.ts" }, ["8303"] = { line = 111, file = "FileUtils.ts" },
        ["8304"] = { line = 112, file = "FileUtils.ts" }, ["8305"] = { line = 113, file = "FileUtils.ts" }, ["8306"] = { line = 114, file = "FileUtils.ts" },
        ["8307"] = { line = 115, file = "FileUtils.ts" }, ["8308"] = { line = 116, file = "FileUtils.ts" }, ["8309"] = { line = 117, file = "FileUtils.ts" },
        ["8310"] = { line = 118, file = "FileUtils.ts" }, ["8311"] = { line = 119, file = "FileUtils.ts" }, ["8312"] = { line = 108, file = "FileUtils.ts" },
        ["8321"] = { line = 2, file = "ImageLibraryAccess.ts" }, ["8322"] = { line = 2, file = "ImageLibraryAccess.ts" },
        ["8323"] = { line = 3, file = "ImageLibraryAccess.ts" }, ["8324"] = { line = 3, file = "ImageLibraryAccess.ts" },
        ["8325"] = { line = 3, file = "ImageLibraryAccess.ts" }, ["8326"] = { line = 4, file = "ImageLibraryAccess.ts" },
        ["8327"] = { line = 4, file = "ImageLibraryAccess.ts" }, ["8333"] = { line = 19, file = "ImageLibraryAccess.ts" },
        ["8334"] = { line = 21, file = "ImageLibraryAccess.ts" }, ["8335"] = { line = 21, file = "ImageLibraryAccess.ts" },
        ["8336"] = { line = 21, file = "ImageLibraryAccess.ts" }, ["8337"] = { line = 21, file = "ImageLibraryAccess.ts" },
        ["8338"] = { line = 23, file = "ImageLibraryAccess.ts" }, ["8339"] = { line = 24, file = "ImageLibraryAccess.ts" },
        ["8340"] = { line = 23, file = "ImageLibraryAccess.ts" }, ["8341"] = { line = 27, file = "ImageLibraryAccess.ts" },
        ["8342"] = { line = 28, file = "ImageLibraryAccess.ts" }, ["8343"] = { line = 28, file = "ImageLibraryAccess.ts" },
        ["8344"] = { line = 28, file = "ImageLibraryAccess.ts" }, ["8345"] = { line = 29, file = "ImageLibraryAccess.ts" },
        ["8346"] = { line = 29, file = "ImageLibraryAccess.ts" }, ["8347"] = { line = 29, file = "ImageLibraryAccess.ts" },
        ["8348"] = { line = 29, file = "ImageLibraryAccess.ts" }, ["8349"] = { line = 30, file = "ImageLibraryAccess.ts" },
        ["8350"] = { line = 30, file = "ImageLibraryAccess.ts" }, ["8351"] = { line = 30, file = "ImageLibraryAccess.ts" },
        ["8352"] = { line = 30, file = "ImageLibraryAccess.ts" }, ["8353"] = { line = 28, file = "ImageLibraryAccess.ts" },
        ["8354"] = { line = 28, file = "ImageLibraryAccess.ts" }, ["8355"] = { line = 32, file = "ImageLibraryAccess.ts" },
        ["8356"] = { line = 27, file = "ImageLibraryAccess.ts" }, ["8357"] = { line = 35, file = "ImageLibraryAccess.ts" },
        ["8358"] = { line = 36, file = "ImageLibraryAccess.ts" }, ["8359"] = { line = 37, file = "ImageLibraryAccess.ts" },
        ["8360"] = { line = 38, file = "ImageLibraryAccess.ts" }, ["8361"] = { line = 38, file = "ImageLibraryAccess.ts" },
        ["8362"] = { line = 38, file = "ImageLibraryAccess.ts" }, ["8363"] = { line = 39, file = "ImageLibraryAccess.ts" },
        ["8364"] = { line = 43, file = "ImageLibraryAccess.ts" }, ["8365"] = { line = 44, file = "ImageLibraryAccess.ts" },
        ["8366"] = { line = 45, file = "ImageLibraryAccess.ts" }, ["8367"] = { line = 46, file = "ImageLibraryAccess.ts" },
        ["8368"] = { line = 47, file = "ImageLibraryAccess.ts" }, ["8369"] = { line = 48, file = "ImageLibraryAccess.ts" },
        ["8371"] = { line = 38, file = "ImageLibraryAccess.ts" }, ["8372"] = { line = 38, file = "ImageLibraryAccess.ts" },
        ["8373"] = { line = 52, file = "ImageLibraryAccess.ts" }, ["8374"] = { line = 35, file = "ImageLibraryAccess.ts" },
        ["8375"] = { line = 55, file = "ImageLibraryAccess.ts" }, ["8376"] = { line = 56, file = "ImageLibraryAccess.ts" },
        ["8377"] = { line = 57, file = "ImageLibraryAccess.ts" }, ["8379"] = { line = 59, file = "ImageLibraryAccess.ts" },
        ["8381"] = { line = 55, file = "ImageLibraryAccess.ts" }, ["8382"] = { line = 63, file = "ImageLibraryAccess.ts" },
        ["8383"] = { line = 64, file = "ImageLibraryAccess.ts" }, ["8384"] = { line = 65, file = "ImageLibraryAccess.ts" },
        ["8385"] = { line = 66, file = "ImageLibraryAccess.ts" }, ["8386"] = { line = 67, file = "ImageLibraryAccess.ts" },
        ["8387"] = { line = 68, file = "ImageLibraryAccess.ts" }, ["8388"] = { line = 69, file = "ImageLibraryAccess.ts" },
        ["8389"] = { line = 70, file = "ImageLibraryAccess.ts" }, ["8390"] = { line = 71, file = "ImageLibraryAccess.ts" },
        ["8391"] = { line = 72, file = "ImageLibraryAccess.ts" }, ["8393"] = { line = 74, file = "ImageLibraryAccess.ts" },
        ["8395"] = { line = 67, file = "ImageLibraryAccess.ts" }, ["8396"] = { line = 63, file = "ImageLibraryAccess.ts" },
        ["8397"] = { line = 19, file = "ImageLibraryAccess.ts" }, ["8673"] = { line = 2, file = "ExternalActionCommandFactory.ts" },
        ["8674"] = { line = 2, file = "ExternalActionCommandFactory.ts" }, ["8675"] = { line = 5, file = "ExternalActionCommandFactory.ts" },
        ["8676"] = { line = 7, file = "ExternalActionCommandFactory.ts" }, ["8677"] = { line = 8, file = "ExternalActionCommandFactory.ts" },
        ["8678"] = { line = 9, file = "ExternalActionCommandFactory.ts" }, ["8679"] = { line = 7, file = "ExternalActionCommandFactory.ts" },
        ["8680"] = { line = 12, file = "ExternalActionCommandFactory.ts" }, ["8681"] = { line = 5, file = "ExternalActionCommandFactory.ts" },
        ["8691"] = { line = 1, file = "ExternalCommandCodec.ts" }, ["8692"] = { line = 3, file = "ExternalCommandCodec.ts" },
        ["8693"] = { line = 4, file = "ExternalCommandCodec.ts" }, ["8694"] = { line = 5, file = "ExternalCommandCodec.ts" },
        ["8695"] = { line = 6, file = "ExternalCommandCodec.ts" }, ["8696"] = { line = 7, file = "ExternalCommandCodec.ts" },
        ["8697"] = { line = 8, file = "ExternalCommandCodec.ts" }, ["8698"] = { line = 9, file = "ExternalCommandCodec.ts" },
        ["8700"] = { line = 11, file = "ExternalCommandCodec.ts" }, ["8702"] = { line = 3, file = "ExternalCommandCodec.ts" },
        ["8703"] = { line = 15, file = "ExternalCommandCodec.ts" }, ["8704"] = { line = 16, file = "ExternalCommandCodec.ts" },
        ["8705"] = { line = 17, file = "ExternalCommandCodec.ts" }, ["8706"] = { line = 18, file = "ExternalCommandCodec.ts" },
        ["8707"] = { line = 19, file = "ExternalCommandCodec.ts" }, ["8709"] = { line = 21, file = "ExternalCommandCodec.ts" },
        ["8710"] = { line = 15, file = "ExternalCommandCodec.ts" }, ["8711"] = { line = 24, file = "ExternalCommandCodec.ts" },
        ["8712"] = { line = 25, file = "ExternalCommandCodec.ts" }, ["8713"] = { line = 26, file = "ExternalCommandCodec.ts" },
        ["8714"] = { line = 27, file = "ExternalCommandCodec.ts" }, ["8716"] = { line = 29, file = "ExternalCommandCodec.ts" },
        ["8717"] = { line = 30, file = "ExternalCommandCodec.ts" }, ["8718"] = { line = 31, file = "ExternalCommandCodec.ts" },
        ["8719"] = { line = 32, file = "ExternalCommandCodec.ts" }, ["8721"] = { line = 34, file = "ExternalCommandCodec.ts" },
        ["8724"] = { line = 24, file = "ExternalCommandCodec.ts" }, ["8729"] = { line = 43, file = "ExternalCommandCodec.ts" },
        ["8730"] = { line = 44, file = "ExternalCommandCodec.ts" }, ["8731"] = { line = 45, file = "ExternalCommandCodec.ts" },
        ["8732"] = { line = 45, file = "ExternalCommandCodec.ts" }, ["8733"] = { line = 45, file = "ExternalCommandCodec.ts" },
        ["8734"] = { line = 45, file = "ExternalCommandCodec.ts" }, ["8735"] = { line = 43, file = "ExternalCommandCodec.ts" },
        ["8739"] = { line = 54, file = "ExternalCommandCodec.ts" }, ["8740"] = { line = 55, file = "ExternalCommandCodec.ts" },
        ["8741"] = { line = 54, file = "ExternalCommandCodec.ts" }, ["8749"] = { line = 1, file = "PluginUtils.ts" },
        ["8750"] = { line = 1, file = "PluginUtils.ts" }, ["8751"] = { line = 4, file = "PluginUtils.ts" }, ["8752"] = { line = 4, file = "PluginUtils.ts" },
        ["8753"] = { line = 4, file = "PluginUtils.ts" }, ["8754"] = { line = 4, file = "PluginUtils.ts" }, ["8760"] = { line = 14, file = "PluginUtils.ts" },
        ["8761"] = { line = 15, file = "PluginUtils.ts" }, ["8762"] = { line = 15, file = "PluginUtils.ts" }, ["8763"] = { line = 16, file = "PluginUtils.ts" },
        ["8764"] = { line = 16, file = "PluginUtils.ts" }, ["8765"] = { line = 17, file = "PluginUtils.ts" }, ["8766"] = { line = 18, file = "PluginUtils.ts" },
        ["8767"] = { line = 20, file = "PluginUtils.ts" }, ["8768"] = { line = 21, file = "PluginUtils.ts" }, ["8769"] = { line = 22, file = "PluginUtils.ts" },
        ["8770"] = { line = 23, file = "PluginUtils.ts" }, ["8771"] = { line = 20, file = "PluginUtils.ts" }, ["8772"] = { line = 26, file = "PluginUtils.ts" },
        ["8773"] = { line = 27, file = "PluginUtils.ts" }, ["8774"] = { line = 28, file = "PluginUtils.ts" }, ["8775"] = { line = 26, file = "PluginUtils.ts" },
        ["8776"] = { line = 31, file = "PluginUtils.ts" }, ["8777"] = { line = 32, file = "PluginUtils.ts" }, ["8778"] = { line = 31, file = "PluginUtils.ts" },
        ["8779"] = { line = 35, file = "PluginUtils.ts" }, ["8780"] = { line = 36, file = "PluginUtils.ts" }, ["8781"] = { line = 35, file = "PluginUtils.ts" },
        ["8782"] = { line = 39, file = "PluginUtils.ts" }, ["8783"] = { line = 40, file = "PluginUtils.ts" }, ["8784"] = { line = 39, file = "PluginUtils.ts" },
        ["8785"] = { line = 43, file = "PluginUtils.ts" }, ["8786"] = { line = 44, file = "PluginUtils.ts" }, ["8787"] = { line = 45, file = "PluginUtils.ts" },
        ["8788"] = { line = 43, file = "PluginUtils.ts" }, ["8789"] = { line = 48, file = "PluginUtils.ts" }, ["8790"] = { line = 49, file = "PluginUtils.ts" },
        ["8791"] = { line = 49, file = "PluginUtils.ts" }, ["8792"] = { line = 49, file = "PluginUtils.ts" }, ["8793"] = { line = 49, file = "PluginUtils.ts" },
        ["8794"] = { line = 48, file = "PluginUtils.ts" }, ["8795"] = { line = 52, file = "PluginUtils.ts" }, ["8796"] = { line = 54, file = "PluginUtils.ts" },
        ["8797"] = { line = 55, file = "PluginUtils.ts" }, ["8798"] = { line = 56, file = "PluginUtils.ts" }, ["8799"] = { line = 57, file = "PluginUtils.ts" },
        ["8800"] = { line = 58, file = "PluginUtils.ts" }, ["8801"] = { line = 59, file = "PluginUtils.ts" }, ["8802"] = { line = 60, file = "PluginUtils.ts" },
        ["8803"] = { line = 61, file = "PluginUtils.ts" }, ["8804"] = { line = 62, file = "PluginUtils.ts" }, ["8805"] = { line = 63, file = "PluginUtils.ts" },
        ["8806"] = { line = 64, file = "PluginUtils.ts" }, ["8807"] = { line = 65, file = "PluginUtils.ts" }, ["8808"] = { line = 66, file = "PluginUtils.ts" },
        ["8809"] = { line = 67, file = "PluginUtils.ts" }, ["8810"] = { line = 68, file = "PluginUtils.ts" }, ["8811"] = { line = 69, file = "PluginUtils.ts" },
        ["8812"] = { line = 70, file = "PluginUtils.ts" }, ["8813"] = { line = 71, file = "PluginUtils.ts" }, ["8814"] = { line = 72, file = "PluginUtils.ts" },
        ["8815"] = { line = 52, file = "PluginUtils.ts" }, ["8816"] = { line = 14, file = "PluginUtils.ts" }, ["8825"] = { line = 8, file = "PluginAssetManager.ts" },
        ["8826"] = { line = 8, file = "PluginAssetManager.ts" }, ["8827"] = { line = 8, file = "PluginAssetManager.ts" },
        ["8828"] = { line = 9, file = "PluginAssetManager.ts" }, ["8829"] = { line = 9, file = "PluginAssetManager.ts" },
        ["8830"] = { line = 23, file = "PluginAssetManager.ts" }, ["8831"] = { line = 24, file = "PluginAssetManager.ts" },
        ["8832"] = { line = 24, file = "PluginAssetManager.ts" }, ["8833"] = { line = 24, file = "PluginAssetManager.ts" },
        ["8834"] = { line = 24, file = "PluginAssetManager.ts" }, ["8835"] = { line = 24, file = "PluginAssetManager.ts" },
        ["8836"] = { line = 24, file = "PluginAssetManager.ts" }, ["8837"] = { line = 25, file = "PluginAssetManager.ts" },
        ["8838"] = { line = 26, file = "PluginAssetManager.ts" }, ["8839"] = { line = 27, file = "PluginAssetManager.ts" },
        ["8840"] = { line = 28, file = "PluginAssetManager.ts" }, ["8841"] = { line = 29, file = "PluginAssetManager.ts" },
        ["8842"] = { line = 29, file = "PluginAssetManager.ts" }, ["8843"] = { line = 29, file = "PluginAssetManager.ts" },
        ["8844"] = { line = 30, file = "PluginAssetManager.ts" }, ["8845"] = { line = 31, file = "PluginAssetManager.ts" },
        ["8847"] = { line = 29, file = "PluginAssetManager.ts" }, ["8848"] = { line = 29, file = "PluginAssetManager.ts" },
        ["8850"] = { line = 35, file = "PluginAssetManager.ts" }, ["8851"] = { line = 26, file = "PluginAssetManager.ts" },
        ["8852"] = { line = 38, file = "PluginAssetManager.ts" }, ["8853"] = { line = 39, file = "PluginAssetManager.ts" },
        ["8854"] = { line = 41, file = "PluginAssetManager.ts" }, ["8855"] = { line = 42, file = "PluginAssetManager.ts" },
        ["8856"] = { line = 43, file = "PluginAssetManager.ts" }, ["8857"] = { line = 43, file = "PluginAssetManager.ts" },
        ["8858"] = { line = 43, file = "PluginAssetManager.ts" }, ["8859"] = { line = 44, file = "PluginAssetManager.ts" },
        ["8861"] = { line = 45, file = "PluginAssetManager.ts" }, ["8862"] = { line = 45, file = "PluginAssetManager.ts" },
        ["8863"] = { line = 46, file = "PluginAssetManager.ts" }, ["8864"] = { line = 45, file = "PluginAssetManager.ts" },
        ["8868"] = { line = 43, file = "PluginAssetManager.ts" }, ["8869"] = { line = 43, file = "PluginAssetManager.ts" },
        ["8871"] = { line = 51, file = "PluginAssetManager.ts" }, ["8872"] = { line = 52, file = "PluginAssetManager.ts" },
        ["8873"] = { line = 53, file = "PluginAssetManager.ts" }, ["8874"] = { line = 54, file = "PluginAssetManager.ts" },
        ["8875"] = { line = 54, file = "PluginAssetManager.ts" }, ["8876"] = { line = 54, file = "PluginAssetManager.ts" },
        ["8877"] = { line = 55, file = "PluginAssetManager.ts" }, ["8879"] = { line = 56, file = "PluginAssetManager.ts" },
        ["8880"] = { line = 56, file = "PluginAssetManager.ts" }, ["8881"] = { line = 57, file = "PluginAssetManager.ts" },
        ["8882"] = { line = 56, file = "PluginAssetManager.ts" }, ["8886"] = { line = 54, file = "PluginAssetManager.ts" },
        ["8887"] = { line = 54, file = "PluginAssetManager.ts" }, ["8890"] = { line = 63, file = "PluginAssetManager.ts" },
        ["8891"] = { line = 38, file = "PluginAssetManager.ts" }, ["8892"] = { line = 66, file = "PluginAssetManager.ts" },
        ["8893"] = { line = 68, file = "PluginAssetManager.ts" }, ["8894"] = { line = 70, file = "PluginAssetManager.ts" },
        ["8895"] = { line = 71, file = "PluginAssetManager.ts" }, ["8896"] = { line = 72, file = "PluginAssetManager.ts" },
        ["8897"] = { line = 73, file = "PluginAssetManager.ts" }, ["8899"] = { line = 75, file = "PluginAssetManager.ts" },
        ["8900"] = { line = 76, file = "PluginAssetManager.ts" }, ["8901"] = { line = 77, file = "PluginAssetManager.ts" },
        ["8902"] = { line = 78, file = "PluginAssetManager.ts" }, ["8903"] = { line = 79, file = "PluginAssetManager.ts" },
        ["8904"] = { line = 80, file = "PluginAssetManager.ts" }, ["8906"] = { line = 82, file = "PluginAssetManager.ts" },
        ["8907"] = { line = 83, file = "PluginAssetManager.ts" }, ["8910"] = { line = 87, file = "PluginAssetManager.ts" },
        ["8912"] = { line = 89, file = "PluginAssetManager.ts" }, ["8913"] = { line = 90, file = "PluginAssetManager.ts" },
        ["8915"] = { line = 93, file = "PluginAssetManager.ts" }, ["8916"] = { line = 66, file = "PluginAssetManager.ts" },
        ["8917"] = { line = 96, file = "PluginAssetManager.ts" }, ["8918"] = { line = 97, file = "PluginAssetManager.ts" },
        ["8919"] = { line = 98, file = "PluginAssetManager.ts" }, ["8920"] = { line = 99, file = "PluginAssetManager.ts" },
        ["8922"] = { line = 101, file = "PluginAssetManager.ts" }, ["8923"] = { line = 101, file = "PluginAssetManager.ts" },
        ["8924"] = { line = 101, file = "PluginAssetManager.ts" }, ["8925"] = { line = 102, file = "PluginAssetManager.ts" },
        ["8926"] = { line = 103, file = "PluginAssetManager.ts" }, ["8927"] = { line = 104, file = "PluginAssetManager.ts" },
        ["8928"] = { line = 105, file = "PluginAssetManager.ts" }, ["8929"] = { line = 101, file = "PluginAssetManager.ts" },
        ["8930"] = { line = 101, file = "PluginAssetManager.ts" }, ["8931"] = { line = 96, file = "PluginAssetManager.ts" },
        ["8932"] = { line = 109, file = "PluginAssetManager.ts" }, ["8933"] = { line = 110, file = "PluginAssetManager.ts" },
        ["8934"] = { line = 111, file = "PluginAssetManager.ts" }, ["8935"] = { line = 111, file = "PluginAssetManager.ts" },
        ["8936"] = { line = 111, file = "PluginAssetManager.ts" }, ["8937"] = { line = 112, file = "PluginAssetManager.ts" },
        ["8938"] = { line = 113, file = "PluginAssetManager.ts" }, ["8939"] = { line = 114, file = "PluginAssetManager.ts" },
        ["8940"] = { line = 115, file = "PluginAssetManager.ts" }, ["8941"] = { line = 111, file = "PluginAssetManager.ts" },
        ["8942"] = { line = 111, file = "PluginAssetManager.ts" }, ["8943"] = { line = 109, file = "PluginAssetManager.ts" },
        ["8944"] = { line = 119, file = "PluginAssetManager.ts" }, ["8945"] = { line = 120, file = "PluginAssetManager.ts" },
        ["8946"] = { line = 121, file = "PluginAssetManager.ts" }, ["8947"] = { line = 122, file = "PluginAssetManager.ts" },
        ["8949"] = { line = 119, file = "PluginAssetManager.ts" }, ["8950"] = { line = 127, file = "PluginAssetManager.ts" },
        ["8951"] = { line = 23, file = "PluginAssetManager.ts" }, ["8958"] = { line = 5, file = "PluginEventHooks.ts" },
        ["8959"] = { line = 15, file = "PluginEventHooks.ts" }, ["8960"] = { line = 15, file = "PluginEventHooks.ts" },
        ["8961"] = { line = 15, file = "PluginEventHooks.ts" }, ["8962"] = { line = 17, file = "PluginEventHooks.ts" },
        ["8963"] = { line = 18, file = "PluginEventHooks.ts" }, ["8964"] = { line = 24, file = "PluginEventHooks.ts" },
        ["8965"] = { line = 25, file = "PluginEventHooks.ts" }, ["8966"] = { line = 26, file = "PluginEventHooks.ts" },
        ["8967"] = { line = 27, file = "PluginEventHooks.ts" }, ["8968"] = { line = 28, file = "PluginEventHooks.ts" },
        ["8969"] = { line = 29, file = "PluginEventHooks.ts" }, ["8970"] = { line = 29, file = "PluginEventHooks.ts" },
        ["8971"] = { line = 29, file = "PluginEventHooks.ts" }, ["8972"] = { line = 30, file = "PluginEventHooks.ts" },
        ["8973"] = { line = 29, file = "PluginEventHooks.ts" }, ["8974"] = { line = 29, file = "PluginEventHooks.ts" },
        ["8976"] = { line = 27, file = "PluginEventHooks.ts" }, ["8977"] = { line = 24, file = "PluginEventHooks.ts" },
        ["8978"] = { line = 18, file = "PluginEventHooks.ts" }, ["8979"] = { line = 36, file = "PluginEventHooks.ts" },
        ["8980"] = { line = 43, file = "PluginEventHooks.ts" }, ["8981"] = { line = 44, file = "PluginEventHooks.ts" },
        ["8982"] = { line = 45, file = "PluginEventHooks.ts" }, ["8983"] = { line = 46, file = "PluginEventHooks.ts" },
        ["8984"] = { line = 47, file = "PluginEventHooks.ts" }, ["8985"] = { line = 48, file = "PluginEventHooks.ts" },
        ["8986"] = { line = 48, file = "PluginEventHooks.ts" }, ["8987"] = { line = 48, file = "PluginEventHooks.ts" },
        ["8988"] = { line = 48, file = "PluginEventHooks.ts" }, ["8989"] = { line = 49, file = "PluginEventHooks.ts" },
        ["8990"] = { line = 48, file = "PluginEventHooks.ts" }, ["8991"] = { line = 48, file = "PluginEventHooks.ts" },
        ["8993"] = { line = 46, file = "PluginEventHooks.ts" }, ["8994"] = { line = 43, file = "PluginEventHooks.ts" },
        ["8995"] = { line = 36, file = "PluginEventHooks.ts" }, ["8996"] = { line = 17, file = "PluginEventHooks.ts" },
        ["8997"] = { line = 5, file = "PluginEventHooks.ts" }, ["9005"] = { line = 1, file = "PluginImageManager.ts" },
        ["9006"] = { line = 1, file = "PluginImageManager.ts" }, ["9007"] = { line = 2, file = "PluginImageManager.ts" },
        ["9008"] = { line = 2, file = "PluginImageManager.ts" }, ["9009"] = { line = 5, file = "PluginImageManager.ts" },
        ["9010"] = { line = 5, file = "PluginImageManager.ts" }, ["9011"] = { line = 11, file = "PluginImageManager.ts" },
        ["9012"] = { line = 13, file = "PluginImageManager.ts" }, ["9013"] = { line = 24, file = "PluginImageManager.ts" },
        ["9014"] = { line = 25, file = "PluginImageManager.ts" }, ["9015"] = { line = 27, file = "PluginImageManager.ts" },
        ["9016"] = { line = 28, file = "PluginImageManager.ts" }, ["9017"] = { line = 27, file = "PluginImageManager.ts" },
        ["9018"] = { line = 31, file = "PluginImageManager.ts" }, ["9019"] = { line = 32, file = "PluginImageManager.ts" },
        ["9020"] = { line = 32, file = "PluginImageManager.ts" }, ["9021"] = { line = 32, file = "PluginImageManager.ts" },
        ["9022"] = { line = 32, file = "PluginImageManager.ts" }, ["9023"] = { line = 34, file = "PluginImageManager.ts" },
        ["9024"] = { line = 35, file = "PluginImageManager.ts" }, ["9025"] = { line = 37, file = "PluginImageManager.ts" },
        ["9026"] = { line = 37, file = "PluginImageManager.ts" }, ["9027"] = { line = 37, file = "PluginImageManager.ts" },
        ["9028"] = { line = 38, file = "PluginImageManager.ts" }, ["9029"] = { line = 39, file = "PluginImageManager.ts" },
        ["9030"] = { line = 37, file = "PluginImageManager.ts" }, ["9031"] = { line = 37, file = "PluginImageManager.ts" },
        ["9032"] = { line = 41, file = "PluginImageManager.ts" }, ["9034"] = { line = 31, file = "PluginImageManager.ts" },
        ["9035"] = { line = 45, file = "PluginImageManager.ts" }, ["9036"] = { line = 46, file = "PluginImageManager.ts" },
        ["9037"] = { line = 46, file = "PluginImageManager.ts" }, ["9038"] = { line = 46, file = "PluginImageManager.ts" },
        ["9039"] = { line = 47, file = "PluginImageManager.ts" }, ["9040"] = { line = 48, file = "PluginImageManager.ts" },
        ["9041"] = { line = 49, file = "PluginImageManager.ts" }, ["9044"] = { line = 45, file = "PluginImageManager.ts" },
        ["9045"] = { line = 54, file = "PluginImageManager.ts" }, ["9046"] = { line = 55, file = "PluginImageManager.ts" },
        ["9047"] = { line = 55, file = "PluginImageManager.ts" }, ["9048"] = { line = 55, file = "PluginImageManager.ts" },
        ["9049"] = { line = 56, file = "PluginImageManager.ts" }, ["9050"] = { line = 58, file = "PluginImageManager.ts" },
        ["9051"] = { line = 58, file = "PluginImageManager.ts" }, ["9052"] = { line = 58, file = "PluginImageManager.ts" },
        ["9053"] = { line = 59, file = "PluginImageManager.ts" }, ["9054"] = { line = 59, file = "PluginImageManager.ts" },
        ["9055"] = { line = 59, file = "PluginImageManager.ts" }, ["9056"] = { line = 59, file = "PluginImageManager.ts" },
        ["9057"] = { line = 60, file = "PluginImageManager.ts" }, ["9058"] = { line = 61, file = "PluginImageManager.ts" },
        ["9059"] = { line = 58, file = "PluginImageManager.ts" }, ["9060"] = { line = 58, file = "PluginImageManager.ts" },
        ["9061"] = { line = 54, file = "PluginImageManager.ts" }, ["9062"] = { line = 68, file = "PluginImageManager.ts" },
        ["9063"] = { line = 69, file = "PluginImageManager.ts" }, ["9064"] = { line = 69, file = "PluginImageManager.ts" },
        ["9065"] = { line = 70, file = "PluginImageManager.ts" }, ["9066"] = { line = 72, file = "PluginImageManager.ts" },
        ["9067"] = { line = 73, file = "PluginImageManager.ts" }, ["9068"] = { line = 68, file = "PluginImageManager.ts" },
        ["9069"] = { line = 76, file = "PluginImageManager.ts" }, ["9070"] = { line = 77, file = "PluginImageManager.ts" },
        ["9071"] = { line = 77, file = "PluginImageManager.ts" }, ["9072"] = { line = 78, file = "PluginImageManager.ts" },
        ["9073"] = { line = 78, file = "PluginImageManager.ts" }, ["9074"] = { line = 78, file = "PluginImageManager.ts" },
        ["9075"] = { line = 78, file = "PluginImageManager.ts" }, ["9076"] = { line = 76, file = "PluginImageManager.ts" },
        ["9077"] = { line = 81, file = "PluginImageManager.ts" }, ["9078"] = { line = 82, file = "PluginImageManager.ts" },
        ["9079"] = { line = 81, file = "PluginImageManager.ts" }, ["9080"] = { line = 85, file = "PluginImageManager.ts" },
        ["9081"] = { line = 86, file = "PluginImageManager.ts" }, ["9082"] = { line = 87, file = "PluginImageManager.ts" },
        ["9083"] = { line = 88, file = "PluginImageManager.ts" }, ["9084"] = { line = 89, file = "PluginImageManager.ts" },
        ["9085"] = { line = 90, file = "PluginImageManager.ts" }, ["9086"] = { line = 91, file = "PluginImageManager.ts" },
        ["9087"] = { line = 85, file = "PluginImageManager.ts" }, ["9088"] = { line = 13, file = "PluginImageManager.ts" },
        ["9099"] = { line = 1, file = "PluginInstanceManager.ts" }, ["9100"] = { line = 1, file = "PluginInstanceManager.ts" },
        ["9101"] = { line = 1, file = "PluginInstanceManager.ts" }, ["9102"] = { line = 1, file = "PluginInstanceManager.ts" },
        ["9103"] = { line = 5, file = "PluginInstanceManager.ts" }, ["9104"] = { line = 12, file = "PluginInstanceManager.ts" },
        ["9105"] = { line = 13, file = "PluginInstanceManager.ts" }, ["9106"] = { line = 12, file = "PluginInstanceManager.ts" },
        ["9109"] = { line = 19, file = "PluginInstanceManager.ts" }, ["9110"] = { line = 20, file = "PluginInstanceManager.ts" },
        ["9111"] = { line = 20, file = "PluginInstanceManager.ts" }, ["9112"] = { line = 20, file = "PluginInstanceManager.ts" },
        ["9113"] = { line = 20, file = "PluginInstanceManager.ts" }, ["9114"] = { line = 20, file = "PluginInstanceManager.ts" },
        ["9115"] = { line = 20, file = "PluginInstanceManager.ts" }, ["9116"] = { line = 20, file = "PluginInstanceManager.ts" },
        ["9117"] = { line = 21, file = "PluginInstanceManager.ts" }, ["9118"] = { line = 22, file = "PluginInstanceManager.ts" },
        ["9119"] = { line = 23, file = "PluginInstanceManager.ts" }, ["9120"] = { line = 24, file = "PluginInstanceManager.ts" },
        ["9121"] = { line = 19, file = "PluginInstanceManager.ts" }, ["9124"] = { line = 30, file = "PluginInstanceManager.ts" },
        ["9125"] = { line = 31, file = "PluginInstanceManager.ts" }, ["9126"] = { line = 32, file = "PluginInstanceManager.ts" },
        ["9127"] = { line = 33, file = "PluginInstanceManager.ts" }, ["9128"] = { line = 30, file = "PluginInstanceManager.ts" },
        ["9129"] = { line = 36, file = "PluginInstanceManager.ts" }, ["9130"] = { line = 37, file = "PluginInstanceManager.ts" },
        ["9131"] = { line = 38, file = "PluginInstanceManager.ts" }, ["9132"] = { line = 39, file = "PluginInstanceManager.ts" },
        ["9133"] = { line = 39, file = "PluginInstanceManager.ts" }, ["9134"] = { line = 39, file = "PluginInstanceManager.ts" },
        ["9135"] = { line = 40, file = "PluginInstanceManager.ts" }, ["9136"] = { line = 40, file = "PluginInstanceManager.ts" },
        ["9137"] = { line = 40, file = "PluginInstanceManager.ts" }, ["9138"] = { line = 40, file = "PluginInstanceManager.ts" },
        ["9139"] = { line = 40, file = "PluginInstanceManager.ts" }, ["9140"] = { line = 40, file = "PluginInstanceManager.ts" },
        ["9141"] = { line = 41, file = "PluginInstanceManager.ts" }, ["9142"] = { line = 41, file = "PluginInstanceManager.ts" },
        ["9143"] = { line = 41, file = "PluginInstanceManager.ts" }, ["9144"] = { line = 42, file = "PluginInstanceManager.ts" },
        ["9145"] = { line = 43, file = "PluginInstanceManager.ts" }, ["9146"] = { line = 44, file = "PluginInstanceManager.ts" },
        ["9147"] = { line = 45, file = "PluginInstanceManager.ts" }, ["9149"] = { line = 47, file = "PluginInstanceManager.ts" },
        ["9150"] = { line = 48, file = "PluginInstanceManager.ts" }, ["9152"] = { line = 43, file = "PluginInstanceManager.ts" },
        ["9153"] = { line = 51, file = "PluginInstanceManager.ts" }, ["9154"] = { line = 52, file = "PluginInstanceManager.ts" },
        ["9155"] = { line = 53, file = "PluginInstanceManager.ts" }, ["9156"] = { line = 54, file = "PluginInstanceManager.ts" },
        ["9159"] = { line = 57, file = "PluginInstanceManager.ts" }, ["9160"] = { line = 58, file = "PluginInstanceManager.ts" },
        ["9161"] = { line = 59, file = "PluginInstanceManager.ts" }, ["9164"] = { line = 51, file = "PluginInstanceManager.ts" },
        ["9165"] = { line = 36, file = "PluginInstanceManager.ts" }, ["9166"] = { line = 5, file = "PluginInstanceManager.ts" },
        ["9176"] = { line = 2, file = "PluginMidiRemotes.ts" }, ["9177"] = { line = 2, file = "PluginMidiRemotes.ts" },
        ["9178"] = { line = 6, file = "PluginMidiRemotes.ts" }, ["9179"] = { line = 6, file = "PluginMidiRemotes.ts" },
        ["9180"] = { line = 6, file = "PluginMidiRemotes.ts" }, ["9181"] = { line = 9, file = "PluginMidiRemotes.ts" },
        ["9182"] = { line = 9, file = "PluginMidiRemotes.ts" }, ["9183"] = { line = 9, file = "PluginMidiRemotes.ts" },
        ["9184"] = { line = 10, file = "PluginMidiRemotes.ts" }, ["9185"] = { line = 9, file = "PluginMidiRemotes.ts" },
        ["9186"] = { line = 12, file = "PluginMidiRemotes.ts" }, ["9187"] = { line = 13, file = "PluginMidiRemotes.ts" },
        ["9188"] = { line = 14, file = "PluginMidiRemotes.ts" }, ["9189"] = { line = 15, file = "PluginMidiRemotes.ts" },
        ["9192"] = { line = 18, file = "PluginMidiRemotes.ts" }, ["9193"] = { line = 12, file = "PluginMidiRemotes.ts" },
        ["9194"] = { line = 24, file = "PluginMidiRemotes.ts" }, ["9195"] = { line = 24, file = "PluginMidiRemotes.ts" },
        ["9196"] = { line = 24, file = "PluginMidiRemotes.ts" }, ["9197"] = { line = 24, file = "PluginMidiRemotes.ts" },
        ["9198"] = { line = 26, file = "PluginMidiRemotes.ts" }, ["9199"] = { line = 24, file = "PluginMidiRemotes.ts" },
        ["9200"] = { line = 26, file = "PluginMidiRemotes.ts" }, ["9201"] = { line = 26, file = "PluginMidiRemotes.ts" },
        ["9202"] = { line = 26, file = "PluginMidiRemotes.ts" }, ["9203"] = { line = 30, file = "PluginMidiRemotes.ts" },
        ["9204"] = { line = 31, file = "PluginMidiRemotes.ts" }, ["9205"] = { line = 30, file = "PluginMidiRemotes.ts" },
        ["9216"] = { line = 5, file = "ContextBuilderBase.ts" }, ["9217"] = { line = 5, file = "ContextBuilderBase.ts" },
        ["9218"] = { line = 7, file = "ContextBuilderBase.ts" }, ["9219"] = { line = 7, file = "ContextBuilderBase.ts" },
        ["9220"] = { line = 7, file = "ContextBuilderBase.ts" }, ["9221"] = { line = 10, file = "ContextBuilderBase.ts" },
        ["9222"] = { line = 10, file = "ContextBuilderBase.ts" }, ["9223"] = { line = 11, file = "ContextBuilderBase.ts" },
        ["9224"] = { line = 11, file = "ContextBuilderBase.ts" }, ["9225"] = { line = 12, file = "ContextBuilderBase.ts" },
        ["9226"] = { line = 12, file = "ContextBuilderBase.ts" }, ["9227"] = { line = 13, file = "ContextBuilderBase.ts" },
        ["9228"] = { line = 13, file = "ContextBuilderBase.ts" }, ["9229"] = { line = 14, file = "ContextBuilderBase.ts" },
        ["9230"] = { line = 14, file = "ContextBuilderBase.ts" }, ["9231"] = { line = 15, file = "ContextBuilderBase.ts" },
        ["9232"] = { line = 15, file = "ContextBuilderBase.ts" }, ["9233"] = { line = 16, file = "ContextBuilderBase.ts" },
        ["9234"] = { line = 16, file = "ContextBuilderBase.ts" }, ["9235"] = { line = 16, file = "ContextBuilderBase.ts" },
        ["9236"] = { line = 21, file = "ContextBuilderBase.ts" }, ["9237"] = { line = 21, file = "ContextBuilderBase.ts" },
        ["9238"] = { line = 21, file = "ContextBuilderBase.ts" }, ["9239"] = { line = 35, file = "ContextBuilderBase.ts" },
        ["9240"] = { line = 35, file = "ContextBuilderBase.ts" }, ["9241"] = { line = 35, file = "ContextBuilderBase.ts" },
        ["9242"] = { line = 47, file = "ContextBuilderBase.ts" }, ["9243"] = { line = 48, file = "ContextBuilderBase.ts" },
        ["9244"] = { line = 47, file = "ContextBuilderBase.ts" }, ["9245"] = { line = 51, file = "ContextBuilderBase.ts" },
        ["9246"] = { line = 52, file = "ContextBuilderBase.ts" }, ["9247"] = { line = 52, file = "ContextBuilderBase.ts" },
        ["9248"] = { line = 52, file = "ContextBuilderBase.ts" }, ["9249"] = { line = 52, file = "ContextBuilderBase.ts" },
        ["9250"] = { line = 53, file = "ContextBuilderBase.ts" }, ["9251"] = { line = 53, file = "ContextBuilderBase.ts" },
        ["9252"] = { line = 53, file = "ContextBuilderBase.ts" }, ["9253"] = { line = 54, file = "ContextBuilderBase.ts" },
        ["9254"] = { line = 54, file = "ContextBuilderBase.ts" }, ["9255"] = { line = 54, file = "ContextBuilderBase.ts" },
        ["9256"] = { line = 56, file = "ContextBuilderBase.ts" }, ["9257"] = { line = 56, file = "ContextBuilderBase.ts" },
        ["9258"] = { line = 56, file = "ContextBuilderBase.ts" }, ["9259"] = { line = 56, file = "ContextBuilderBase.ts" },
        ["9260"] = { line = 56, file = "ContextBuilderBase.ts" }, ["9261"] = { line = 56, file = "ContextBuilderBase.ts" },
        ["9262"] = { line = 56, file = "ContextBuilderBase.ts" }, ["9263"] = { line = 56, file = "ContextBuilderBase.ts" },
        ["9264"] = { line = 57, file = "ContextBuilderBase.ts" }, ["9265"] = { line = 58, file = "ContextBuilderBase.ts" },
        ["9266"] = { line = 59, file = "ContextBuilderBase.ts" }, ["9267"] = { line = 60, file = "ContextBuilderBase.ts" },
        ["9268"] = { line = 61, file = "ContextBuilderBase.ts" }, ["9269"] = { line = 62, file = "ContextBuilderBase.ts" },
        ["9270"] = { line = 57, file = "ContextBuilderBase.ts" }, ["9271"] = { line = 64, file = "ContextBuilderBase.ts" },
        ["9272"] = { line = 64, file = "ContextBuilderBase.ts" }, ["9273"] = { line = 64, file = "ContextBuilderBase.ts" },
        ["9274"] = { line = 64, file = "ContextBuilderBase.ts" }, ["9275"] = { line = 64, file = "ContextBuilderBase.ts" },
        ["9276"] = { line = 64, file = "ContextBuilderBase.ts" }, ["9277"] = { line = 64, file = "ContextBuilderBase.ts" },
        ["9278"] = { line = 66, file = "ContextBuilderBase.ts" }, ["9279"] = { line = 66, file = "ContextBuilderBase.ts" },
        ["9280"] = { line = 66, file = "ContextBuilderBase.ts" }, ["9281"] = { line = 67, file = "ContextBuilderBase.ts" },
        ["9282"] = { line = 68, file = "ContextBuilderBase.ts" }, ["9283"] = { line = 69, file = "ContextBuilderBase.ts" },
        ["9284"] = { line = 70, file = "ContextBuilderBase.ts" }, ["9285"] = { line = 71, file = "ContextBuilderBase.ts" },
        ["9286"] = { line = 72, file = "ContextBuilderBase.ts" }, ["9287"] = { line = 66, file = "ContextBuilderBase.ts" },
        ["9288"] = { line = 66, file = "ContextBuilderBase.ts" }, ["9289"] = { line = 74, file = "ContextBuilderBase.ts" },
        ["9290"] = { line = 76, file = "ContextBuilderBase.ts" }, ["9291"] = { line = 77, file = "ContextBuilderBase.ts" },
        ["9292"] = { line = 77, file = "ContextBuilderBase.ts" }, ["9293"] = { line = 78, file = "ContextBuilderBase.ts" },
        ["9294"] = { line = 79, file = "ContextBuilderBase.ts" }, ["9295"] = { line = 80, file = "ContextBuilderBase.ts" },
        ["9296"] = { line = 81, file = "ContextBuilderBase.ts" }, ["9297"] = { line = 82, file = "ContextBuilderBase.ts" },
        ["9298"] = { line = 83, file = "ContextBuilderBase.ts" }, ["9299"] = { line = 84, file = "ContextBuilderBase.ts" },
        ["9300"] = { line = 85, file = "ContextBuilderBase.ts" }, ["9301"] = { line = 86, file = "ContextBuilderBase.ts" },
        ["9302"] = { line = 87, file = "ContextBuilderBase.ts" }, ["9303"] = { line = 88, file = "ContextBuilderBase.ts" },
        ["9304"] = { line = 77, file = "ContextBuilderBase.ts" }, ["9305"] = { line = 77, file = "ContextBuilderBase.ts" },
        ["9306"] = { line = 91, file = "ContextBuilderBase.ts" }, ["9307"] = { line = 91, file = "ContextBuilderBase.ts" },
        ["9308"] = { line = 92, file = "ContextBuilderBase.ts" }, ["9309"] = { line = 91, file = "ContextBuilderBase.ts" },
        ["9310"] = { line = 94, file = "ContextBuilderBase.ts" }, ["9311"] = { line = 94, file = "ContextBuilderBase.ts" },
        ["9312"] = { line = 95, file = "ContextBuilderBase.ts" }, ["9313"] = { line = 94, file = "ContextBuilderBase.ts" },
        ["9314"] = { line = 96, file = "ContextBuilderBase.ts" }, ["9315"] = { line = 97, file = "ContextBuilderBase.ts" },
        ["9316"] = { line = 94, file = "ContextBuilderBase.ts" }, ["9317"] = { line = 94, file = "ContextBuilderBase.ts" },
        ["9318"] = { line = 93, file = "ContextBuilderBase.ts" }, ["9319"] = { line = 91, file = "ContextBuilderBase.ts" },
        ["9320"] = { line = 51, file = "ContextBuilderBase.ts" }, ["9321"] = { line = 103, file = "ContextBuilderBase.ts" },
        ["9322"] = { line = 104, file = "ContextBuilderBase.ts" }, ["9323"] = { line = 104, file = "ContextBuilderBase.ts" },
        ["9324"] = { line = 105, file = "ContextBuilderBase.ts" }, ["9325"] = { line = 105, file = "ContextBuilderBase.ts" },
        ["9326"] = { line = 106, file = "ContextBuilderBase.ts" }, ["9328"] = { line = 107, file = "ContextBuilderBase.ts" },
        ["9330"] = { line = 105, file = "ContextBuilderBase.ts" }, ["9331"] = { line = 103, file = "ContextBuilderBase.ts" },
        ["9332"] = { line = 110, file = "ContextBuilderBase.ts" }, ["9333"] = { line = 116, file = "ContextBuilderBase.ts" },
        ["9334"] = { line = 117, file = "ContextBuilderBase.ts" }, ["9335"] = { line = 117, file = "ContextBuilderBase.ts" },
        ["9336"] = { line = 117, file = "ContextBuilderBase.ts" }, ["9337"] = { line = 118, file = "ContextBuilderBase.ts" },
        ["9338"] = { line = 118, file = "ContextBuilderBase.ts" }, ["9339"] = { line = 119, file = "ContextBuilderBase.ts" },
        ["9340"] = { line = 118, file = "ContextBuilderBase.ts" }, ["9341"] = { line = 120, file = "ContextBuilderBase.ts" },
        ["9342"] = { line = 121, file = "ContextBuilderBase.ts" }, ["9343"] = { line = 118, file = "ContextBuilderBase.ts" },
        ["9344"] = { line = 118, file = "ContextBuilderBase.ts" }, ["9345"] = { line = 110, file = "ContextBuilderBase.ts" },
        ["9346"] = { line = 125, file = "ContextBuilderBase.ts" }, ["9347"] = { line = 126, file = "ContextBuilderBase.ts" },
        ["9348"] = { line = 126, file = "ContextBuilderBase.ts" }, ["9349"] = { line = 127, file = "ContextBuilderBase.ts" },
        ["9350"] = { line = 127, file = "ContextBuilderBase.ts" }, ["9351"] = { line = 128, file = "ContextBuilderBase.ts" },
        ["9353"] = { line = 129, file = "ContextBuilderBase.ts" }, ["9355"] = { line = 127, file = "ContextBuilderBase.ts" },
        ["9356"] = { line = 125, file = "ContextBuilderBase.ts" }, ["9357"] = { line = 132, file = "ContextBuilderBase.ts" },
        ["9358"] = { line = 136, file = "ContextBuilderBase.ts" }, ["9359"] = { line = 136, file = "ContextBuilderBase.ts" },
        ["9360"] = { line = 136, file = "ContextBuilderBase.ts" }, ["9361"] = { line = 136, file = "ContextBuilderBase.ts" },
        ["9362"] = { line = 136, file = "ContextBuilderBase.ts" }, ["9363"] = { line = 136, file = "ContextBuilderBase.ts" },
        ["9364"] = { line = 137, file = "ContextBuilderBase.ts" }, ["9365"] = { line = 137, file = "ContextBuilderBase.ts" },
        ["9366"] = { line = 137, file = "ContextBuilderBase.ts" }, ["9367"] = { line = 138, file = "ContextBuilderBase.ts" },
        ["9368"] = { line = 139, file = "ContextBuilderBase.ts" }, ["9369"] = { line = 140, file = "ContextBuilderBase.ts" },
        ["9371"] = { line = 143, file = "ContextBuilderBase.ts" }, ["9372"] = { line = 143, file = "ContextBuilderBase.ts" },
        ["9373"] = { line = 143, file = "ContextBuilderBase.ts" }, ["9374"] = { line = 143, file = "ContextBuilderBase.ts" },
        ["9375"] = { line = 143, file = "ContextBuilderBase.ts" }, ["9376"] = { line = 143, file = "ContextBuilderBase.ts" },
        ["9377"] = { line = 143, file = "ContextBuilderBase.ts" }, ["9378"] = { line = 143, file = "ContextBuilderBase.ts" },
        ["9379"] = { line = 144, file = "ContextBuilderBase.ts" }, ["9380"] = { line = 145, file = "ContextBuilderBase.ts" },
        ["9381"] = { line = 146, file = "ContextBuilderBase.ts" }, ["9382"] = { line = 147, file = "ContextBuilderBase.ts" },
        ["9383"] = { line = 148, file = "ContextBuilderBase.ts" }, ["9384"] = { line = 149, file = "ContextBuilderBase.ts" },
        ["9385"] = { line = 144, file = "ContextBuilderBase.ts" }, ["9386"] = { line = 151, file = "ContextBuilderBase.ts" },
        ["9387"] = { line = 151, file = "ContextBuilderBase.ts" }, ["9388"] = { line = 151, file = "ContextBuilderBase.ts" },
        ["9389"] = { line = 151, file = "ContextBuilderBase.ts" }, ["9390"] = { line = 151, file = "ContextBuilderBase.ts" },
        ["9391"] = { line = 151, file = "ContextBuilderBase.ts" }, ["9392"] = { line = 151, file = "ContextBuilderBase.ts" },
        ["9393"] = { line = 152, file = "ContextBuilderBase.ts" }, ["9394"] = { line = 152, file = "ContextBuilderBase.ts" },
        ["9395"] = { line = 152, file = "ContextBuilderBase.ts" }, ["9396"] = { line = 153, file = "ContextBuilderBase.ts" },
        ["9397"] = { line = 154, file = "ContextBuilderBase.ts" }, ["9398"] = { line = 155, file = "ContextBuilderBase.ts" },
        ["9399"] = { line = 156, file = "ContextBuilderBase.ts" }, ["9400"] = { line = 157, file = "ContextBuilderBase.ts" },
        ["9401"] = { line = 158, file = "ContextBuilderBase.ts" }, ["9402"] = { line = 152, file = "ContextBuilderBase.ts" },
        ["9403"] = { line = 152, file = "ContextBuilderBase.ts" }, ["9404"] = { line = 160, file = "ContextBuilderBase.ts" },
        ["9405"] = { line = 160, file = "ContextBuilderBase.ts" }, ["9406"] = { line = 166, file = "ContextBuilderBase.ts" },
        ["9407"] = { line = 167, file = "ContextBuilderBase.ts" }, ["9408"] = { line = 168, file = "ContextBuilderBase.ts" },
        ["9409"] = { line = 166, file = "ContextBuilderBase.ts" }, ["9410"] = { line = 160, file = "ContextBuilderBase.ts" },
        ["9411"] = { line = 170, file = "ContextBuilderBase.ts" }, ["9412"] = { line = 171, file = "ContextBuilderBase.ts" },
        ["9413"] = { line = 172, file = "ContextBuilderBase.ts" }, ["9414"] = { line = 172, file = "ContextBuilderBase.ts" },
        ["9415"] = { line = 172, file = "ContextBuilderBase.ts" }, ["9416"] = { line = 172, file = "ContextBuilderBase.ts" },
        ["9417"] = { line = 172, file = "ContextBuilderBase.ts" }, ["9418"] = { line = 172, file = "ContextBuilderBase.ts" },
        ["9419"] = { line = 172, file = "ContextBuilderBase.ts" }, ["9420"] = { line = 171, file = "ContextBuilderBase.ts" },
        ["9421"] = { line = 174, file = "ContextBuilderBase.ts" }, ["9422"] = { line = 175, file = "ContextBuilderBase.ts" },
        ["9423"] = { line = 176, file = "ContextBuilderBase.ts" }, ["9424"] = { line = 176, file = "ContextBuilderBase.ts" },
        ["9425"] = { line = 176, file = "ContextBuilderBase.ts" }, ["9426"] = { line = 176, file = "ContextBuilderBase.ts" },
        ["9427"] = { line = 176, file = "ContextBuilderBase.ts" }, ["9428"] = { line = 176, file = "ContextBuilderBase.ts" },
        ["9429"] = { line = 176, file = "ContextBuilderBase.ts" }, ["9430"] = { line = 175, file = "ContextBuilderBase.ts" },
        ["9431"] = { line = 178, file = "ContextBuilderBase.ts" }, ["9432"] = { line = 179, file = "ContextBuilderBase.ts" },
        ["9433"] = { line = 180, file = "ContextBuilderBase.ts" }, ["9434"] = { line = 182, file = "ContextBuilderBase.ts" },
        ["9435"] = { line = 183, file = "ContextBuilderBase.ts" }, ["9436"] = { line = 184, file = "ContextBuilderBase.ts" },
        ["9437"] = { line = 185, file = "ContextBuilderBase.ts" }, ["9438"] = { line = 186, file = "ContextBuilderBase.ts" },
        ["9439"] = { line = 187, file = "ContextBuilderBase.ts" }, ["9440"] = { line = 188, file = "ContextBuilderBase.ts" },
        ["9441"] = { line = 189, file = "ContextBuilderBase.ts" }, ["9442"] = { line = 190, file = "ContextBuilderBase.ts" },
        ["9443"] = { line = 191, file = "ContextBuilderBase.ts" }, ["9444"] = { line = 180, file = "ContextBuilderBase.ts" },
        ["9445"] = { line = 193, file = "ContextBuilderBase.ts" }, ["9446"] = { line = 193, file = "ContextBuilderBase.ts" },
        ["9447"] = { line = 194, file = "ContextBuilderBase.ts" }, ["9448"] = { line = 193, file = "ContextBuilderBase.ts" },
        ["9449"] = { line = 196, file = "ContextBuilderBase.ts" }, ["9450"] = { line = 196, file = "ContextBuilderBase.ts" },
        ["9451"] = { line = 197, file = "ContextBuilderBase.ts" }, ["9452"] = { line = 196, file = "ContextBuilderBase.ts" },
        ["9453"] = { line = 198, file = "ContextBuilderBase.ts" }, ["9454"] = { line = 199, file = "ContextBuilderBase.ts" },
        ["9455"] = { line = 196, file = "ContextBuilderBase.ts" }, ["9456"] = { line = 196, file = "ContextBuilderBase.ts" },
        ["9457"] = { line = 195, file = "ContextBuilderBase.ts" }, ["9458"] = { line = 193, file = "ContextBuilderBase.ts" },
        ["9459"] = { line = 179, file = "ContextBuilderBase.ts" }, ["9460"] = { line = 204, file = "ContextBuilderBase.ts" },
        ["9461"] = { line = 205, file = "ContextBuilderBase.ts" }, ["9462"] = { line = 206, file = "ContextBuilderBase.ts" },
        ["9463"] = { line = 207, file = "ContextBuilderBase.ts" }, ["9464"] = { line = 208, file = "ContextBuilderBase.ts" },
        ["9465"] = { line = 209, file = "ContextBuilderBase.ts" }, ["9466"] = { line = 210, file = "ContextBuilderBase.ts" },
        ["9467"] = { line = 211, file = "ContextBuilderBase.ts" }, ["9468"] = { line = 212, file = "ContextBuilderBase.ts" },
        ["9469"] = { line = 213, file = "ContextBuilderBase.ts" }, ["9470"] = { line = 214, file = "ContextBuilderBase.ts" },
        ["9471"] = { line = 215, file = "ContextBuilderBase.ts" }, ["9472"] = { line = 210, file = "ContextBuilderBase.ts" },
        ["9473"] = { line = 217, file = "ContextBuilderBase.ts" }, ["9474"] = { line = 218, file = "ContextBuilderBase.ts" },
        ["9475"] = { line = 219, file = "ContextBuilderBase.ts" }, ["9476"] = { line = 220, file = "ContextBuilderBase.ts" },
        ["9477"] = { line = 221, file = "ContextBuilderBase.ts" }, ["9478"] = { line = 222, file = "ContextBuilderBase.ts" },
        ["9479"] = { line = 174, file = "ContextBuilderBase.ts" }, ["9480"] = { line = 225, file = "ContextBuilderBase.ts" },
        ["9481"] = { line = 225, file = "ContextBuilderBase.ts" }, ["9482"] = { line = 225, file = "ContextBuilderBase.ts" },
        ["9484"] = { line = 225, file = "ContextBuilderBase.ts" }, ["9486"] = { line = 225, file = "ContextBuilderBase.ts" },
        ["9487"] = { line = 132, file = "ContextBuilderBase.ts" }, ["9488"] = { line = 229, file = "ContextBuilderBase.ts" },
        ["9489"] = { line = 235, file = "ContextBuilderBase.ts" }, ["9490"] = { line = 235, file = "ContextBuilderBase.ts" },
        ["9491"] = { line = 236, file = "ContextBuilderBase.ts" }, ["9492"] = { line = 238, file = "ContextBuilderBase.ts" },
        ["9493"] = { line = 247, file = "ContextBuilderBase.ts" }, ["9494"] = { line = 248, file = "ContextBuilderBase.ts" },
        ["9495"] = { line = 247, file = "ContextBuilderBase.ts" }, ["9496"] = { line = 249, file = "ContextBuilderBase.ts" },
        ["9497"] = { line = 250, file = "ContextBuilderBase.ts" }, ["9498"] = { line = 250, file = "ContextBuilderBase.ts" },
        ["9499"] = { line = 251, file = "ContextBuilderBase.ts" }, ["9500"] = { line = 250, file = "ContextBuilderBase.ts" },
        ["9501"] = { line = 252, file = "ContextBuilderBase.ts" }, ["9502"] = { line = 253, file = "ContextBuilderBase.ts" },
        ["9503"] = { line = 250, file = "ContextBuilderBase.ts" }, ["9504"] = { line = 250, file = "ContextBuilderBase.ts" },
        ["9505"] = { line = 249, file = "ContextBuilderBase.ts" }, ["9506"] = { line = 256, file = "ContextBuilderBase.ts" },
        ["9507"] = { line = 257, file = "ContextBuilderBase.ts" }, ["9508"] = { line = 258, file = "ContextBuilderBase.ts" },
        ["9509"] = { line = 259, file = "ContextBuilderBase.ts" }, ["9510"] = { line = 260, file = "ContextBuilderBase.ts" },
        ["9511"] = { line = 247, file = "ContextBuilderBase.ts" }, ["9512"] = { line = 247, file = "ContextBuilderBase.ts" },
        ["9513"] = { line = 263, file = "ContextBuilderBase.ts" }, ["9514"] = { line = 229, file = "ContextBuilderBase.ts" },
        ["9526"] = { line = 1, file = "EventProviders.ts" }, ["9527"] = { line = 1, file = "EventProviders.ts" },
        ["9528"] = { line = 3, file = "EventProviders.ts" }, ["9529"] = { line = 3, file = "EventProviders.ts" },
        ["9530"] = { line = 3, file = "EventProviders.ts" }, ["9532"] = { line = 12, file = "EventProviders.ts" },
        ["9533"] = { line = 32, file = "EventProviders.ts" }, ["9534"] = { line = 32, file = "EventProviders.ts" },
        ["9535"] = { line = 32, file = "EventProviders.ts" }, ["9536"] = { line = 35, file = "EventProviders.ts" },
        ["9537"] = { line = 35, file = "EventProviders.ts" }, ["9538"] = { line = 36, file = "EventProviders.ts" },
        ["9539"] = { line = 37, file = "EventProviders.ts" }, ["9540"] = { line = 38, file = "EventProviders.ts" },
        ["9541"] = { line = 34, file = "EventProviders.ts" }, ["9542"] = { line = 41, file = "EventProviders.ts" },
        ["9543"] = { line = 42, file = "EventProviders.ts" }, ["9544"] = { line = 43, file = "EventProviders.ts" },
        ["9545"] = { line = 44, file = "EventProviders.ts" }, ["9547"] = { line = 41, file = "EventProviders.ts" },
        ["9548"] = { line = 48, file = "EventProviders.ts" }, ["9549"] = { line = 49, file = "EventProviders.ts" },
        ["9550"] = { line = 48, file = "EventProviders.ts" }, ["9551"] = { line = 52, file = "EventProviders.ts" },
        ["9552"] = { line = 53, file = "EventProviders.ts" }, ["9553"] = { line = 54, file = "EventProviders.ts" },
        ["9554"] = { line = 55, file = "EventProviders.ts" }, ["9556"] = { line = 57, file = "EventProviders.ts" },
        ["9557"] = { line = 59, file = "EventProviders.ts" }, ["9558"] = { line = 59, file = "EventProviders.ts" },
        ["9559"] = { line = 59, file = "EventProviders.ts" }, ["9561"] = { line = 59, file = "EventProviders.ts" },
        ["9562"] = { line = 60, file = "EventProviders.ts" }, ["9563"] = { line = 61, file = "EventProviders.ts" },
        ["9565"] = { line = 64, file = "EventProviders.ts" }, ["9566"] = { line = 65, file = "EventProviders.ts" },
        ["9568"] = { line = 52, file = "EventProviders.ts" }, ["9569"] = { line = 74, file = "EventProviders.ts" },
        ["9570"] = { line = 74, file = "EventProviders.ts" }, ["9571"] = { line = 74, file = "EventProviders.ts" },
        ["9572"] = { line = 77, file = "EventProviders.ts" }, ["9573"] = { line = 77, file = "EventProviders.ts" },
        ["9574"] = { line = 78, file = "EventProviders.ts" }, ["9575"] = { line = 76, file = "EventProviders.ts" },
        ["9576"] = { line = 81, file = "EventProviders.ts" }, ["9577"] = { line = 82, file = "EventProviders.ts" },
        ["9578"] = { line = 82, file = "EventProviders.ts" }, ["9579"] = { line = 82, file = "EventProviders.ts" },
        ["9580"] = { line = 82, file = "EventProviders.ts" }, ["9581"] = { line = 82, file = "EventProviders.ts" },
        ["9583"] = { line = 82, file = "EventProviders.ts" }, ["9584"] = { line = 82, file = "EventProviders.ts" },
        ["9585"] = { line = 82, file = "EventProviders.ts" }, ["9587"] = { line = 82, file = "EventProviders.ts" },
        ["9588"] = { line = 81, file = "EventProviders.ts" }, ["9589"] = { line = 85, file = "EventProviders.ts" },
        ["9590"] = { line = 86, file = "EventProviders.ts" }, ["9591"] = { line = 85, file = "EventProviders.ts" },
        ["9592"] = { line = 89, file = "EventProviders.ts" }, ["9593"] = { line = 90, file = "EventProviders.ts" },
        ["9594"] = { line = 90, file = "EventProviders.ts" }, ["9595"] = { line = 90, file = "EventProviders.ts" },
        ["9597"] = { line = 89, file = "EventProviders.ts" }, ["9598"] = { line = 94, file = "EventProviders.ts" },
        ["9599"] = { line = 95, file = "EventProviders.ts" }, ["9600"] = { line = 96, file = "EventProviders.ts" },
        ["9601"] = { line = 97, file = "EventProviders.ts" }, ["9602"] = { line = 97, file = "EventProviders.ts" },
        ["9603"] = { line = 97, file = "EventProviders.ts" }, ["9604"] = { line = 98, file = "EventProviders.ts" },
        ["9605"] = { line = 99, file = "EventProviders.ts" }, ["9606"] = { line = 100, file = "EventProviders.ts" },
        ["9607"] = { line = 97, file = "EventProviders.ts" }, ["9608"] = { line = 97, file = "EventProviders.ts" },
        ["9609"] = { line = 96, file = "EventProviders.ts" }, ["9610"] = { line = 103, file = "EventProviders.ts" },
        ["9611"] = { line = 104, file = "EventProviders.ts" }, ["9612"] = { line = 104, file = "EventProviders.ts" },
        ["9613"] = { line = 104, file = "EventProviders.ts" }, ["9614"] = { line = 105, file = "EventProviders.ts" },
        ["9615"] = { line = 105, file = "EventProviders.ts" }, ["9616"] = { line = 106, file = "EventProviders.ts" },
        ["9617"] = { line = 107, file = "EventProviders.ts" }, ["9618"] = { line = 105, file = "EventProviders.ts" },
        ["9619"] = { line = 109, file = "EventProviders.ts" }, ["9620"] = { line = 104, file = "EventProviders.ts" },
        ["9621"] = { line = 110, file = "EventProviders.ts" }, ["9622"] = { line = 104, file = "EventProviders.ts" },
        ["9623"] = { line = 103, file = "EventProviders.ts" }, ["9624"] = { line = 118, file = "EventProviders.ts" },
        ["9625"] = { line = 119, file = "EventProviders.ts" }, ["9626"] = { line = 119, file = "EventProviders.ts" },
        ["9627"] = { line = 119, file = "EventProviders.ts" }, ["9628"] = { line = 119, file = "EventProviders.ts" },
        ["9629"] = { line = 118, file = "EventProviders.ts" }, ["9630"] = { line = 95, file = "EventProviders.ts" },
        ["9631"] = { line = 94, file = "EventProviders.ts" }, ["9632"] = { line = 124, file = "EventProviders.ts" },
        ["9633"] = { line = 130, file = "EventProviders.ts" }, ["9634"] = { line = 131, file = "EventProviders.ts" },
        ["9635"] = { line = 132, file = "EventProviders.ts" }, ["9636"] = { line = 133, file = "EventProviders.ts" },
        ["9637"] = { line = 134, file = "EventProviders.ts" }, ["9638"] = { line = 135, file = "EventProviders.ts" },
        ["9639"] = { line = 135, file = "EventProviders.ts" }, ["9640"] = { line = 136, file = "EventProviders.ts" },
        ["9641"] = { line = 137, file = "EventProviders.ts" }, ["9642"] = { line = 138, file = "EventProviders.ts" },
        ["9643"] = { line = 135, file = "EventProviders.ts" }, ["9644"] = { line = 139, file = "EventProviders.ts" },
        ["9645"] = { line = 133, file = "EventProviders.ts" }, ["9646"] = { line = 141, file = "EventProviders.ts" },
        ["9647"] = { line = 142, file = "EventProviders.ts" }, ["9648"] = { line = 143, file = "EventProviders.ts" },
        ["9649"] = { line = 141, file = "EventProviders.ts" }, ["9650"] = { line = 145, file = "EventProviders.ts" },
        ["9651"] = { line = 146, file = "EventProviders.ts" }, ["9652"] = { line = 147, file = "EventProviders.ts" },
        ["9653"] = { line = 147, file = "EventProviders.ts" }, ["9654"] = { line = 148, file = "EventProviders.ts" },
        ["9655"] = { line = 149, file = "EventProviders.ts" }, ["9656"] = { line = 150, file = "EventProviders.ts" },
        ["9657"] = { line = 151, file = "EventProviders.ts" }, ["9658"] = { line = 152, file = "EventProviders.ts" },
        ["9659"] = { line = 153, file = "EventProviders.ts" }, ["9660"] = { line = 154, file = "EventProviders.ts" },
        ["9662"] = { line = 151, file = "EventProviders.ts" }, ["9663"] = { line = 147, file = "EventProviders.ts" },
        ["9664"] = { line = 157, file = "EventProviders.ts" }, ["9665"] = { line = 145, file = "EventProviders.ts" },
        ["9666"] = { line = 159, file = "EventProviders.ts" }, ["9667"] = { line = 160, file = "EventProviders.ts" },
        ["9668"] = { line = 159, file = "EventProviders.ts" }, ["9669"] = { line = 132, file = "EventProviders.ts" },
        ["9670"] = { line = 168, file = "EventProviders.ts" }, ["9671"] = { line = 124, file = "EventProviders.ts" },
        ["9679"] = { line = 1, file = "InstanceRuntimeBase.ts" }, ["9680"] = { line = 1, file = "InstanceRuntimeBase.ts" },
        ["9681"] = { line = 6, file = "InstanceRuntimeBase.ts" }, ["9682"] = { line = 6, file = "InstanceRuntimeBase.ts" },
        ["9683"] = { line = 6, file = "InstanceRuntimeBase.ts" }, ["9684"] = { line = 11, file = "InstanceRuntimeBase.ts" },
        ["9685"] = { line = 16, file = "InstanceRuntimeBase.ts" }, ["9686"] = { line = 17, file = "InstanceRuntimeBase.ts" },
        ["9687"] = { line = 17, file = "InstanceRuntimeBase.ts" }, ["9688"] = { line = 17, file = "InstanceRuntimeBase.ts" },
        ["9689"] = { line = 18, file = "InstanceRuntimeBase.ts" }, ["9690"] = { line = 19, file = "InstanceRuntimeBase.ts" },
        ["9691"] = { line = 20, file = "InstanceRuntimeBase.ts" }, ["9692"] = { line = 21, file = "InstanceRuntimeBase.ts" },
        ["9693"] = { line = 17, file = "InstanceRuntimeBase.ts" }, ["9694"] = { line = 17, file = "InstanceRuntimeBase.ts" },
        ["9695"] = { line = 10, file = "InstanceRuntimeBase.ts" }, ["9696"] = { line = 25, file = "InstanceRuntimeBase.ts" },
        ["9697"] = { line = 26, file = "InstanceRuntimeBase.ts" }, ["9698"] = { line = 25, file = "InstanceRuntimeBase.ts" },
        ["9699"] = { line = 29, file = "InstanceRuntimeBase.ts" }, ["9700"] = { line = 30, file = "InstanceRuntimeBase.ts" },
        ["9701"] = { line = 29, file = "InstanceRuntimeBase.ts" }, ["9708"] = { line = 1, file = "AssertUtils.ts" },
        ["9709"] = { line = 3, file = "AssertUtils.ts" }, ["9710"] = { line = 2, file = "AssertUtils.ts" }, ["9725"] = { line = 1, file = "InputFieldValidators.ts" },
        ["9726"] = { line = 1, file = "InputFieldValidators.ts" }, ["9727"] = { line = 5, file = "InputFieldValidators.ts" },
        ["9728"] = { line = 6, file = "InputFieldValidators.ts" }, ["9729"] = { line = 7, file = "InputFieldValidators.ts" },
        ["9730"] = { line = 7, file = "InputFieldValidators.ts" }, ["9732"] = { line = 8, file = "InputFieldValidators.ts" },
        ["9733"] = { line = 9, file = "InputFieldValidators.ts" }, ["9735"] = { line = 11, file = "InputFieldValidators.ts" },
        ["9736"] = { line = 5, file = "InputFieldValidators.ts" }, ["9737"] = { line = 14, file = "InputFieldValidators.ts" },
        ["9738"] = { line = 15, file = "InputFieldValidators.ts" }, ["9739"] = { line = 16, file = "InputFieldValidators.ts" },
        ["9741"] = { line = 18, file = "InputFieldValidators.ts" }, ["9742"] = { line = 14, file = "InputFieldValidators.ts" },
        ["9743"] = { line = 21, file = "InputFieldValidators.ts" }, ["9744"] = { line = 22, file = "InputFieldValidators.ts" },
        ["9745"] = { line = 23, file = "InputFieldValidators.ts" }, ["9746"] = { line = 23, file = "InputFieldValidators.ts" },
        ["9747"] = { line = 23, file = "InputFieldValidators.ts" }, ["9748"] = { line = 23, file = "InputFieldValidators.ts" },
        ["9750"] = { line = 25, file = "InputFieldValidators.ts" }, ["9751"] = { line = 21, file = "InputFieldValidators.ts" },
        ["9752"] = { line = 28, file = "InputFieldValidators.ts" }, ["9753"] = { line = 29, file = "InputFieldValidators.ts" },
        ["9754"] = { line = 30, file = "InputFieldValidators.ts" }, ["9756"] = { line = 32, file = "InputFieldValidators.ts" },
        ["9757"] = { line = 28, file = "InputFieldValidators.ts" }, ["9758"] = { line = 35, file = "InputFieldValidators.ts" },
        ["9775"] = { line = 1, file = "MessageBoxHelperV2.ts" }, ["9776"] = { line = 1, file = "MessageBoxHelperV2.ts" },
        ["9778"] = { line = 4, file = "MessageBoxHelperV2.ts" }, ["9779"] = { line = 4, file = "MessageBoxHelperV2.ts" },
        ["9780"] = { line = 4, file = "MessageBoxHelperV2.ts" }, ["9782"] = { line = 107, file = "MessageBoxHelperV2.ts" },
        ["9783"] = { line = 113, file = "MessageBoxHelperV2.ts" }, ["9784"] = { line = 114, file = "MessageBoxHelperV2.ts" },
        ["9785"] = { line = 115, file = "MessageBoxHelperV2.ts" }, ["9786"] = { line = 115, file = "MessageBoxHelperV2.ts" },
        ["9787"] = { line = 115, file = "MessageBoxHelperV2.ts" }, ["9788"] = { line = 116, file = "MessageBoxHelperV2.ts" },
        ["9789"] = { line = 117, file = "MessageBoxHelperV2.ts" }, ["9791"] = { line = 122, file = "MessageBoxHelperV2.ts" },
        ["9792"] = { line = 115, file = "MessageBoxHelperV2.ts" }, ["9793"] = { line = 115, file = "MessageBoxHelperV2.ts" },
        ["9795"] = { line = 125, file = "MessageBoxHelperV2.ts" }, ["9796"] = { line = 107, file = "MessageBoxHelperV2.ts" },
        ["9797"] = { line = 131, file = "MessageBoxHelperV2.ts" }, ["9798"] = { line = 132, file = "MessageBoxHelperV2.ts" },
        ["9799"] = { line = 133, file = "MessageBoxHelperV2.ts" }, ["9801"] = { line = 134, file = "MessageBoxHelperV2.ts" },
        ["9802"] = { line = 135, file = "MessageBoxHelperV2.ts" }, ["9805"] = { line = 136, file = "MessageBoxHelperV2.ts" },
        ["9810"] = { line = 142, file = "MessageBoxHelperV2.ts" }, ["9811"] = { line = 145, file = "MessageBoxHelperV2.ts" },
        ["9812"] = { line = 145, file = "MessageBoxHelperV2.ts" }, ["9813"] = { line = 145, file = "MessageBoxHelperV2.ts" },
        ["9814"] = { line = 147, file = "MessageBoxHelperV2.ts" }, ["9815"] = { line = 148, file = "MessageBoxHelperV2.ts" },
        ["9816"] = { line = 149, file = "MessageBoxHelperV2.ts" }, ["9817"] = { line = 150, file = "MessageBoxHelperV2.ts" },
        ["9818"] = { line = 150, file = "MessageBoxHelperV2.ts" }, ["9819"] = { line = 150, file = "MessageBoxHelperV2.ts" },
        ["9820"] = { line = 150, file = "MessageBoxHelperV2.ts" }, ["9823"] = { line = 155, file = "MessageBoxHelperV2.ts" },
        ["9824"] = { line = 156, file = "MessageBoxHelperV2.ts" }, ["9825"] = { line = 157, file = "MessageBoxHelperV2.ts" },
        ["9826"] = { line = 158, file = "MessageBoxHelperV2.ts" }, ["9827"] = { line = 158, file = "MessageBoxHelperV2.ts" },
        ["9828"] = { line = 158, file = "MessageBoxHelperV2.ts" }, ["9829"] = { line = 158, file = "MessageBoxHelperV2.ts" },
        ["9833"] = { line = 162, file = "MessageBoxHelperV2.ts" }, ["9834"] = { line = 131, file = "MessageBoxHelperV2.ts" },
        ["9835"] = { line = 165, file = "MessageBoxHelperV2.ts" }, ["9836"] = { line = 166, file = "MessageBoxHelperV2.ts" },
        ["9837"] = { line = 167, file = "MessageBoxHelperV2.ts" }, ["9838"] = { line = 169, file = "MessageBoxHelperV2.ts" },
        ["9840"] = { line = 171, file = "MessageBoxHelperV2.ts" }, ["9841"] = { line = 172, file = "MessageBoxHelperV2.ts" },
        ["9844"] = { line = 173, file = "MessageBoxHelperV2.ts" }, ["9850"] = { line = 177, file = "MessageBoxHelperV2.ts" },
        ["9855"] = { line = 181, file = "MessageBoxHelperV2.ts" }, ["9856"] = { line = 165, file = "MessageBoxHelperV2.ts" },
        ["9857"] = { line = 185, file = "MessageBoxHelperV2.ts" }, ["9858"] = { line = 186, file = "MessageBoxHelperV2.ts" },
        ["9859"] = { line = 187, file = "MessageBoxHelperV2.ts" }, ["9860"] = { line = 189, file = "MessageBoxHelperV2.ts" },
        ["9861"] = { line = 190, file = "MessageBoxHelperV2.ts" }, ["9863"] = { line = 192, file = "MessageBoxHelperV2.ts" },
        ["9864"] = { line = 185, file = "MessageBoxHelperV2.ts" }, ["9865"] = { line = 196, file = "MessageBoxHelperV2.ts" },
        ["9866"] = { line = 197, file = "MessageBoxHelperV2.ts" }, ["9867"] = { line = 198, file = "MessageBoxHelperV2.ts" },
        ["9868"] = { line = 200, file = "MessageBoxHelperV2.ts" }, ["9869"] = { line = 201, file = "MessageBoxHelperV2.ts" },
        ["9870"] = { line = 202, file = "MessageBoxHelperV2.ts" }, ["9872"] = { line = 204, file = "MessageBoxHelperV2.ts" },
        ["9873"] = { line = 196, file = "MessageBoxHelperV2.ts" }, ["9874"] = { line = 207, file = "MessageBoxHelperV2.ts" },
        ["9875"] = { line = 208, file = "MessageBoxHelperV2.ts" }, ["9876"] = { line = 208, file = "MessageBoxHelperV2.ts" },
        ["9877"] = { line = 208, file = "MessageBoxHelperV2.ts" }, ["9878"] = { line = 209, file = "MessageBoxHelperV2.ts" },
        ["9879"] = { line = 209, file = "MessageBoxHelperV2.ts" }, ["9880"] = { line = 209, file = "MessageBoxHelperV2.ts" },
        ["9881"] = { line = 209, file = "MessageBoxHelperV2.ts" }, ["9882"] = { line = 209, file = "MessageBoxHelperV2.ts" },
        ["9883"] = { line = 209, file = "MessageBoxHelperV2.ts" }, ["9884"] = { line = 210, file = "MessageBoxHelperV2.ts" },
        ["9885"] = { line = 215, file = "MessageBoxHelperV2.ts" }, ["9886"] = { line = 208, file = "MessageBoxHelperV2.ts" },
        ["9887"] = { line = 208, file = "MessageBoxHelperV2.ts" }, ["9888"] = { line = 207, file = "MessageBoxHelperV2.ts" },
        ["9889"] = { line = 219, file = "MessageBoxHelperV2.ts" }, ["9890"] = { line = 220, file = "MessageBoxHelperV2.ts" },
        ["9891"] = { line = 220, file = "MessageBoxHelperV2.ts" }, ["9892"] = { line = 220, file = "MessageBoxHelperV2.ts" },
        ["9893"] = { line = 221, file = "MessageBoxHelperV2.ts" }, ["9894"] = { line = 221, file = "MessageBoxHelperV2.ts" },
        ["9895"] = { line = 221, file = "MessageBoxHelperV2.ts" }, ["9896"] = { line = 221, file = "MessageBoxHelperV2.ts" },
        ["9897"] = { line = 222, file = "MessageBoxHelperV2.ts" }, ["9898"] = { line = 226, file = "MessageBoxHelperV2.ts" },
        ["9899"] = { line = 220, file = "MessageBoxHelperV2.ts" }, ["9900"] = { line = 220, file = "MessageBoxHelperV2.ts" },
        ["9901"] = { line = 219, file = "MessageBoxHelperV2.ts" }, ["9902"] = { line = 230, file = "MessageBoxHelperV2.ts" },
        ["9903"] = { line = 231, file = "MessageBoxHelperV2.ts" }, ["9904"] = { line = 231, file = "MessageBoxHelperV2.ts" },
        ["9905"] = { line = 231, file = "MessageBoxHelperV2.ts" }, ["9906"] = { line = 232, file = "MessageBoxHelperV2.ts" },
        ["9907"] = { line = 232, file = "MessageBoxHelperV2.ts" }, ["9908"] = { line = 232, file = "MessageBoxHelperV2.ts" },
        ["9909"] = { line = 232, file = "MessageBoxHelperV2.ts" }, ["9910"] = { line = 232, file = "MessageBoxHelperV2.ts" },
        ["9911"] = { line = 232, file = "MessageBoxHelperV2.ts" }, ["9912"] = { line = 233, file = "MessageBoxHelperV2.ts" },
        ["9913"] = { line = 233, file = "MessageBoxHelperV2.ts" }, ["9914"] = { line = 233, file = "MessageBoxHelperV2.ts" },
        ["9915"] = { line = 234, file = "MessageBoxHelperV2.ts" }, ["9916"] = { line = 235, file = "MessageBoxHelperV2.ts" },
        ["9917"] = { line = 233, file = "MessageBoxHelperV2.ts" }, ["9918"] = { line = 236, file = "MessageBoxHelperV2.ts" },
        ["9919"] = { line = 233, file = "MessageBoxHelperV2.ts" }, ["9920"] = { line = 237, file = "MessageBoxHelperV2.ts" },
        ["9921"] = { line = 237, file = "MessageBoxHelperV2.ts" }, ["9922"] = { line = 237, file = "MessageBoxHelperV2.ts" },
        ["9923"] = { line = 237, file = "MessageBoxHelperV2.ts" }, ["9924"] = { line = 238, file = "MessageBoxHelperV2.ts" },
        ["9925"] = { line = 244, file = "MessageBoxHelperV2.ts" }, ["9926"] = { line = 231, file = "MessageBoxHelperV2.ts" },
        ["9927"] = { line = 231, file = "MessageBoxHelperV2.ts" }, ["9928"] = { line = 230, file = "MessageBoxHelperV2.ts" },
        ["9929"] = { line = 248, file = "MessageBoxHelperV2.ts" }, ["9930"] = { line = 253, file = "MessageBoxHelperV2.ts" },
        ["9931"] = { line = 254, file = "MessageBoxHelperV2.ts" }, ["9932"] = { line = 254, file = "MessageBoxHelperV2.ts" },
        ["9933"] = { line = 255, file = "MessageBoxHelperV2.ts" }, ["9935"] = { line = 256, file = "MessageBoxHelperV2.ts" },
        ["9936"] = { line = 256, file = "MessageBoxHelperV2.ts" }, ["9937"] = { line = 257, file = "MessageBoxHelperV2.ts" },
        ["9938"] = { line = 258, file = "MessageBoxHelperV2.ts" }, ["9939"] = { line = 258, file = "MessageBoxHelperV2.ts" },
        ["9940"] = { line = 258, file = "MessageBoxHelperV2.ts" }, ["9941"] = { line = 258, file = "MessageBoxHelperV2.ts" },
        ["9942"] = { line = 258, file = "MessageBoxHelperV2.ts" }, ["9943"] = { line = 258, file = "MessageBoxHelperV2.ts" },
        ["9944"] = { line = 259, file = "MessageBoxHelperV2.ts" }, ["9945"] = { line = 260, file = "MessageBoxHelperV2.ts" },
        ["9946"] = { line = 260, file = "MessageBoxHelperV2.ts" }, ["9947"] = { line = 261, file = "MessageBoxHelperV2.ts" },
        ["9948"] = { line = 262, file = "MessageBoxHelperV2.ts" }, ["9949"] = { line = 260, file = "MessageBoxHelperV2.ts" },
        ["9950"] = { line = 263, file = "MessageBoxHelperV2.ts" }, ["9951"] = { line = 264, file = "MessageBoxHelperV2.ts" },
        ["9952"] = { line = 260, file = "MessageBoxHelperV2.ts" }, ["9953"] = { line = 260, file = "MessageBoxHelperV2.ts" },
        ["9954"] = { line = 269, file = "MessageBoxHelperV2.ts" }, ["9955"] = { line = 257, file = "MessageBoxHelperV2.ts" },
        ["9956"] = { line = 256, file = "MessageBoxHelperV2.ts" }, ["9958"] = { line = 254, file = "MessageBoxHelperV2.ts" },
        ["9959"] = { line = 272, file = "MessageBoxHelperV2.ts" }, ["9960"] = { line = 273, file = "MessageBoxHelperV2.ts" },
        ["9961"] = { line = 273, file = "MessageBoxHelperV2.ts" }, ["9962"] = { line = 274, file = "MessageBoxHelperV2.ts" },
        ["9964"] = { line = 275, file = "MessageBoxHelperV2.ts" }, ["9965"] = { line = 275, file = "MessageBoxHelperV2.ts" },
        ["9966"] = { line = 276, file = "MessageBoxHelperV2.ts" }, ["9967"] = { line = 277, file = "MessageBoxHelperV2.ts" },
        ["9968"] = { line = 277, file = "MessageBoxHelperV2.ts" }, ["9969"] = { line = 277, file = "MessageBoxHelperV2.ts" },
        ["9970"] = { line = 277, file = "MessageBoxHelperV2.ts" }, ["9971"] = { line = 278, file = "MessageBoxHelperV2.ts" },
        ["9972"] = { line = 279, file = "MessageBoxHelperV2.ts" }, ["9973"] = { line = 284, file = "MessageBoxHelperV2.ts" },
        ["9974"] = { line = 276, file = "MessageBoxHelperV2.ts" }, ["9975"] = { line = 275, file = "MessageBoxHelperV2.ts" },
        ["9977"] = { line = 273, file = "MessageBoxHelperV2.ts" }, ["9978"] = { line = 300, file = "MessageBoxHelperV2.ts" },
        ["9979"] = { line = 301, file = "MessageBoxHelperV2.ts" }, ["9980"] = { line = 302, file = "MessageBoxHelperV2.ts" },
        ["9981"] = { line = 303, file = "MessageBoxHelperV2.ts" }, ["9982"] = { line = 304, file = "MessageBoxHelperV2.ts" },
        ["9983"] = { line = 304, file = "MessageBoxHelperV2.ts" }, ["9984"] = { line = 304, file = "MessageBoxHelperV2.ts" },
        ["9985"] = { line = 305, file = "MessageBoxHelperV2.ts" }, ["9986"] = { line = 306, file = "MessageBoxHelperV2.ts" },
        ["9987"] = { line = 306, file = "MessageBoxHelperV2.ts" }, ["9988"] = { line = 306, file = "MessageBoxHelperV2.ts" },
        ["9989"] = { line = 306, file = "MessageBoxHelperV2.ts" }, ["9990"] = { line = 304, file = "MessageBoxHelperV2.ts" },
        ["9991"] = { line = 304, file = "MessageBoxHelperV2.ts" }, ["9993"] = { line = 309, file = "MessageBoxHelperV2.ts" },
        ["9994"] = { line = 311, file = "MessageBoxHelperV2.ts" }, ["9995"] = { line = 312, file = "MessageBoxHelperV2.ts" },
        ["9996"] = { line = 313, file = "MessageBoxHelperV2.ts" }, ["9997"] = { line = 314, file = "MessageBoxHelperV2.ts" },
        ["9998"] = { line = 315, file = "MessageBoxHelperV2.ts" }, ["9999"] = { line = 309, file = "MessageBoxHelperV2.ts" },
        ["10000"] = { line = 248, file = "MessageBoxHelperV2.ts" }, ["10001"] = { line = 319, file = "MessageBoxHelperV2.ts" },
        ["10002"] = { line = 330, file = "MessageBoxHelperV2.ts" }, ["10003"] = { line = 326, file = "MessageBoxHelperV2.ts" },
        ["10004"] = { line = 327, file = "MessageBoxHelperV2.ts" }, ["10005"] = { line = 328, file = "MessageBoxHelperV2.ts" },
        ["10006"] = { line = 329, file = "MessageBoxHelperV2.ts" }, ["10007"] = { line = 330, file = "MessageBoxHelperV2.ts" },
        ["10008"] = { line = 330, file = "MessageBoxHelperV2.ts" }, ["10009"] = { line = 330, file = "MessageBoxHelperV2.ts" },
        ["10017"] = { line = 332, file = "MessageBoxHelperV2.ts" }, ["10018"] = { line = 332, file = "MessageBoxHelperV2.ts" },
        ["10019"] = { line = 332, file = "MessageBoxHelperV2.ts" }, ["10020"] = { line = 333, file = "MessageBoxHelperV2.ts" },
        ["10021"] = { line = 334, file = "MessageBoxHelperV2.ts" }, ["10023"] = { line = 337, file = "MessageBoxHelperV2.ts" },
        ["10024"] = { line = 337, file = "MessageBoxHelperV2.ts" }, ["10025"] = { line = 337, file = "MessageBoxHelperV2.ts" },
        ["10026"] = { line = 338, file = "MessageBoxHelperV2.ts" }, ["10027"] = { line = 337, file = "MessageBoxHelperV2.ts" },
        ["10028"] = { line = 337, file = "MessageBoxHelperV2.ts" }, ["10029"] = { line = 343, file = "MessageBoxHelperV2.ts" },
        ["10030"] = { line = 343, file = "MessageBoxHelperV2.ts" }, ["10031"] = { line = 343, file = "MessageBoxHelperV2.ts" },
        ["10033"] = { line = 343, file = "MessageBoxHelperV2.ts" }, ["10035"] = { line = 343, file = "MessageBoxHelperV2.ts" },
        ["10036"] = { line = 344, file = "MessageBoxHelperV2.ts" }, ["10037"] = { line = 344, file = "MessageBoxHelperV2.ts" },
        ["10038"] = { line = 344, file = "MessageBoxHelperV2.ts" }, ["10040"] = { line = 344, file = "MessageBoxHelperV2.ts" },
        ["10042"] = { line = 344, file = "MessageBoxHelperV2.ts" }, ["10043"] = { line = 345, file = "MessageBoxHelperV2.ts" },
        ["10044"] = { line = 345, file = "MessageBoxHelperV2.ts" }, ["10045"] = { line = 345, file = "MessageBoxHelperV2.ts" },
        ["10047"] = { line = 345, file = "MessageBoxHelperV2.ts" }, ["10049"] = { line = 345, file = "MessageBoxHelperV2.ts" },
        ["10050"] = { line = 347, file = "MessageBoxHelperV2.ts" }, ["10051"] = { line = 347, file = "MessageBoxHelperV2.ts" },
        ["10052"] = { line = 348, file = "MessageBoxHelperV2.ts" }, ["10053"] = { line = 349, file = "MessageBoxHelperV2.ts" },
        ["10054"] = { line = 350, file = "MessageBoxHelperV2.ts" }, ["10055"] = { line = 351, file = "MessageBoxHelperV2.ts" },
        ["10056"] = { line = 352, file = "MessageBoxHelperV2.ts" }, ["10057"] = { line = 347, file = "MessageBoxHelperV2.ts" },
        ["10058"] = { line = 355, file = "MessageBoxHelperV2.ts" }, ["10061"] = { line = 358, file = "MessageBoxHelperV2.ts" },
        ["10062"] = { line = 361, file = "MessageBoxHelperV2.ts" }, ["10063"] = { line = 362, file = "MessageBoxHelperV2.ts" },
        ["10064"] = { line = 363, file = "MessageBoxHelperV2.ts" }, ["10065"] = { line = 364, file = "MessageBoxHelperV2.ts" },
        ["10066"] = { line = 365, file = "MessageBoxHelperV2.ts" }, ["10067"] = { line = 368, file = "MessageBoxHelperV2.ts" },
        ["10068"] = { line = 369, file = "MessageBoxHelperV2.ts" }, ["10069"] = { line = 369, file = "MessageBoxHelperV2.ts" },
        ["10070"] = { line = 369, file = "MessageBoxHelperV2.ts" }, ["10072"] = { line = 369, file = "MessageBoxHelperV2.ts" },
        ["10074"] = { line = 369, file = "MessageBoxHelperV2.ts" }, ["10076"] = { line = 375, file = "MessageBoxHelperV2.ts" },
        ["10077"] = { line = 376, file = "MessageBoxHelperV2.ts" }, ["10078"] = { line = 377, file = "MessageBoxHelperV2.ts" },
        ["10080"] = { line = 379, file = "MessageBoxHelperV2.ts" }, ["10081"] = { line = 380, file = "MessageBoxHelperV2.ts" },
        ["10082"] = { line = 381, file = "MessageBoxHelperV2.ts" }, ["10083"] = { line = 382, file = "MessageBoxHelperV2.ts" },
        ["10084"] = { line = 379, file = "MessageBoxHelperV2.ts" }, ["10085"] = { line = 384, file = "MessageBoxHelperV2.ts" },
        ["10086"] = { line = 385, file = "MessageBoxHelperV2.ts" }, ["10087"] = { line = 386, file = "MessageBoxHelperV2.ts" },
        ["10088"] = { line = 386, file = "MessageBoxHelperV2.ts" }, ["10089"] = { line = 386, file = "MessageBoxHelperV2.ts" },
        ["10090"] = { line = 387, file = "MessageBoxHelperV2.ts" }, ["10091"] = { line = 388, file = "MessageBoxHelperV2.ts" },
        ["10093"] = { line = 390, file = "MessageBoxHelperV2.ts" }, ["10094"] = { line = 391, file = "MessageBoxHelperV2.ts" },
        ["10095"] = { line = 392, file = "MessageBoxHelperV2.ts" }, ["10096"] = { line = 393, file = "MessageBoxHelperV2.ts" },
        ["10098"] = { line = 396, file = "MessageBoxHelperV2.ts" }, ["10099"] = { line = 397, file = "MessageBoxHelperV2.ts" },
        ["10101"] = { line = 399, file = "MessageBoxHelperV2.ts" }, ["10102"] = { line = 399, file = "MessageBoxHelperV2.ts" },
        ["10103"] = { line = 399, file = "MessageBoxHelperV2.ts" }, ["10104"] = { line = 399, file = "MessageBoxHelperV2.ts" },
        ["10105"] = { line = 399, file = "MessageBoxHelperV2.ts" }, ["10106"] = { line = 399, file = "MessageBoxHelperV2.ts" },
        ["10107"] = { line = 399, file = "MessageBoxHelperV2.ts" }, ["10112"] = { line = 403, file = "MessageBoxHelperV2.ts" },
        ["10113"] = { line = 319, file = "MessageBoxHelperV2.ts" }, ["10120"] = { line = 1, file = "Alert.ts" },
        ["10121"] = { line = 1, file = "Alert.ts" }, ["10122"] = { line = 3, file = "Alert.ts" }, ["10123"] = { line = 4, file = "Alert.ts" },
        ["10124"] = { line = 5, file = "Alert.ts" }, ["10125"] = { line = 6, file = "Alert.ts" }, ["10126"] = { line = 7, file = "Alert.ts" },
        ["10127"] = { line = 8, file = "Alert.ts" }, ["10128"] = { line = 10, file = "Alert.ts" }, ["10129"] = { line = 11, file = "Alert.ts" },
        ["10130"] = { line = 11, file = "Alert.ts" }, ["10131"] = { line = 9, file = "Alert.ts" }, ["10132"] = { line = 4, file = "Alert.ts" },
        ["10133"] = { line = 15, file = "Alert.ts" }, ["10134"] = { line = 3, file = "Alert.ts" }, ["10141"] = { line = 1, file = "OldStartUI.ts" },
        ["10142"] = { line = 1, file = "OldStartUI.ts" }, ["10143"] = { line = 4, file = "OldStartUI.ts" }, ["10144"] = { line = 6, file = "OldStartUI.ts" },
        ["10145"] = { line = 7, file = "OldStartUI.ts" }, ["10146"] = { line = 8, file = "OldStartUI.ts" }, ["10148"] = { line = 9, file = "OldStartUI.ts" },
        ["10149"] = { line = 10, file = "OldStartUI.ts" }, ["10152"] = { line = 11, file = "OldStartUI.ts" }, ["10153"] = { line = 12, file = "OldStartUI.ts" },
        ["10156"] = { line = 14, file = "OldStartUI.ts" }, ["10159"] = { line = 15, file = "OldStartUI.ts" }, ["10163"] = { line = 18, file = "OldStartUI.ts" },
        ["10166"] = { line = 19, file = "OldStartUI.ts" }, ["10167"] = { line = 19, file = "OldStartUI.ts" }, ["10168"] = { line = 19, file = "OldStartUI.ts" },
        ["10169"] = { line = 19, file = "OldStartUI.ts" }, ["10170"] = { line = 20, file = "OldStartUI.ts" }, ["10171"] = { line = 19, file = "OldStartUI.ts" },
        ["10172"] = { line = 19, file = "OldStartUI.ts" }, ["10173"] = { line = 22, file = "OldStartUI.ts" }, ["10174"] = { line = 23, file = "OldStartUI.ts" },
        ["10179"] = { line = 27, file = "OldStartUI.ts" }, ["10182"] = { line = 28, file = "OldStartUI.ts" }, ["10183"] = { line = 29, file = "OldStartUI.ts" },
        ["10187"] = { line = 32, file = "OldStartUI.ts" }, ["10195"] = { line = 37, file = "OldStartUI.ts" }, ["10196"] = { line = 4, file = "OldStartUI.ts" },
        ["10206"] = { line = 22, file = "PopupInputHelper.ts" }, ["10207"] = { line = 23, file = "PopupInputHelper.ts" },
        ["10208"] = { line = 23, file = "PopupInputHelper.ts" }, ["10209"] = { line = 23, file = "PopupInputHelper.ts" },
        ["10210"] = { line = 23, file = "PopupInputHelper.ts" }, ["10211"] = { line = 24, file = "PopupInputHelper.ts" },
        ["10212"] = { line = 24, file = "PopupInputHelper.ts" }, ["10213"] = { line = 24, file = "PopupInputHelper.ts" },
        ["10214"] = { line = 24, file = "PopupInputHelper.ts" }, ["10215"] = { line = 25, file = "PopupInputHelper.ts" },
        ["10216"] = { line = 26, file = "PopupInputHelper.ts" }, ["10217"] = { line = 31, file = "PopupInputHelper.ts" },
        ["10218"] = { line = 32, file = "PopupInputHelper.ts" }, ["10220"] = { line = 22, file = "PopupInputHelper.ts" },
        ["10227"] = { line = 1, file = "UIColors.ts" }, ["10228"] = { line = 2, file = "UIColors.ts" }, ["10229"] = { line = 3, file = "UIColors.ts" },
        ["10230"] = { line = 4, file = "UIColors.ts" }, ["10231"] = { line = 5, file = "UIColors.ts" }, ["10232"] = { line = 8, file = "UIColors.ts" },
        ["10233"] = { line = 9, file = "UIColors.ts" }, ["10234"] = { line = 10, file = "UIColors.ts" }, ["10235"] = { line = 11, file = "UIColors.ts" },
        ["10236"] = { line = 14, file = "UIColors.ts" }, ["10237"] = { line = 15, file = "UIColors.ts" }, ["10238"] = { line = 16, file = "UIColors.ts" },
        ["10239"] = { line = 17, file = "UIColors.ts" }, ["10240"] = { line = 18, file = "UIColors.ts" }, ["10241"] = { line = 19, file = "UIColors.ts" },
        ["10242"] = { line = 20, file = "UIColors.ts" }, ["10243"] = { line = 21, file = "UIColors.ts" }, ["10244"] = { line = 22, file = "UIColors.ts" },
        ["10245"] = { line = 23, file = "UIColors.ts" }, ["10246"] = { line = 24, file = "UIColors.ts" }, ["10247"] = { line = 25, file = "UIColors.ts" },
        ["10248"] = { line = 26, file = "UIColors.ts" }, ["10249"] = { line = 27, file = "UIColors.ts" }, ["10250"] = { line = 28, file = "UIColors.ts" },
        ["10251"] = { line = 29, file = "UIColors.ts" }, ["10252"] = { line = 4, file = "UIColors.ts" }, ["10259"] = { line = 36, file = "UIDebugUtils.ts" },
        ["10260"] = { line = 1, file = "UIDebugUtils.ts" }, ["10261"] = { line = 1, file = "UIDebugUtils.ts" }, ["10262"] = { line = 36, file = "UIDebugUtils.ts" },
        ["10263"] = { line = 37, file = "UIDebugUtils.ts" }, ["10265"] = { line = 40, file = "UIDebugUtils.ts" },
        ["10266"] = { line = 41, file = "UIDebugUtils.ts" }, ["10267"] = { line = 42, file = "UIDebugUtils.ts" },
        ["10268"] = { line = 43, file = "UIDebugUtils.ts" }, ["10269"] = { line = 44, file = "UIDebugUtils.ts" },
        ["10270"] = { line = 42, file = "UIDebugUtils.ts" }, ["10272"] = { line = 50, file = "UIDebugUtils.ts" },
        ["10273"] = { line = 51, file = "UIDebugUtils.ts" }, ["10276"] = { line = 52, file = "UIDebugUtils.ts" },
        ["10280"] = { line = 55, file = "UIDebugUtils.ts" }, ["10283"] = { line = 56, file = "UIDebugUtils.ts" },
        ["10284"] = { line = 57, file = "UIDebugUtils.ts" }, ["10288"] = { line = 60, file = "UIDebugUtils.ts" },
        ["10291"] = { line = 61, file = "UIDebugUtils.ts" }, ["10292"] = { line = 62, file = "UIDebugUtils.ts" },
        ["10296"] = { line = 65, file = "UIDebugUtils.ts" }, ["10299"] = { line = 66, file = "UIDebugUtils.ts" },
        ["10300"] = { line = 67, file = "UIDebugUtils.ts" }, ["10301"] = { line = 68, file = "UIDebugUtils.ts" },
        ["10305"] = { line = 71, file = "UIDebugUtils.ts" }, ["10308"] = { line = 72, file = "UIDebugUtils.ts" },
        ["10309"] = { line = 73, file = "UIDebugUtils.ts" }, ["10310"] = { line = 74, file = "UIDebugUtils.ts" },
        ["10314"] = { line = 79, file = "UIDebugUtils.ts" }, ["10317"] = { line = 80, file = "UIDebugUtils.ts" },
        ["10318"] = { line = 81, file = "UIDebugUtils.ts" }, ["10324"] = { line = 86, file = "UIDebugUtils.ts" },
        ["10328"] = { line = 89, file = "UIDebugUtils.ts" }, ["10330"] = { line = 3, file = "UIDebugUtils.ts" },
        ["10331"] = { line = 4, file = "UIDebugUtils.ts" }, ["10332"] = { line = 4, file = "UIDebugUtils.ts" }, ["10333"] = { line = 4, file = "UIDebugUtils.ts" },
        ["10335"] = { line = 4, file = "UIDebugUtils.ts" }, ["10336"] = { line = 4, file = "UIDebugUtils.ts" }, ["10338"] = { line = 6, file = "UIDebugUtils.ts" },
        ["10339"] = { line = 7, file = "UIDebugUtils.ts" }, ["10340"] = { line = 9, file = "UIDebugUtils.ts" }, ["10341"] = { line = 10, file = "UIDebugUtils.ts" },
        ["10342"] = { line = 11, file = "UIDebugUtils.ts" }, ["10343"] = { line = 10, file = "UIDebugUtils.ts" },
        ["10344"] = { line = 13, file = "UIDebugUtils.ts" }, ["10345"] = { line = 14, file = "UIDebugUtils.ts" },
        ["10346"] = { line = 15, file = "UIDebugUtils.ts" }, ["10348"] = { line = 13, file = "UIDebugUtils.ts" },
        ["10349"] = { line = 18, file = "UIDebugUtils.ts" }, ["10350"] = { line = 19, file = "UIDebugUtils.ts" },
        ["10351"] = { line = 20, file = "UIDebugUtils.ts" }, ["10353"] = { line = 23, file = "UIDebugUtils.ts" },
        ["10354"] = { line = 24, file = "UIDebugUtils.ts" }, ["10355"] = { line = 25, file = "UIDebugUtils.ts" },
        ["10357"] = { line = 26, file = "UIDebugUtils.ts" }, ["10358"] = { line = 26, file = "UIDebugUtils.ts" },
        ["10359"] = { line = 27, file = "UIDebugUtils.ts" }, ["10360"] = { line = 28, file = "UIDebugUtils.ts" },
        ["10361"] = { line = 26, file = "UIDebugUtils.ts" }, ["10365"] = { line = 33, file = "UIDebugUtils.ts" },
        ["10366"] = { line = 4, file = "UIDebugUtils.ts" }, ["10367"] = { line = 92, file = "UIDebugUtils.ts" },
        ["10375"] = { line = 2, file = "index.ts" }, ["10376"] = { line = 2, file = "index.ts" }, ["10377"] = { line = 2, file = "index.ts" },
        ["10380"] = { line = 3, file = "index.ts" }, ["10381"] = { line = 3, file = "index.ts" }, ["10382"] = { line = 3, file = "index.ts" },
        ["10385"] = { line = 4, file = "index.ts" }, ["10386"] = { line = 4, file = "index.ts" }, ["10387"] = { line = 4, file = "index.ts" },
        ["10390"] = { line = 5, file = "index.ts" }, ["10391"] = { line = 5, file = "index.ts" }, ["10392"] = { line = 5, file = "index.ts" },
        ["10395"] = { line = 7, file = "index.ts" }, ["10396"] = { line = 7, file = "index.ts" }, ["10397"] = { line = 7, file = "index.ts" },
        ["10398"] = { line = 7, file = "index.ts" }, ["10399"] = { line = 7, file = "index.ts" }, ["10402"] = { line = 8, file = "index.ts" },
        ["10403"] = { line = 8, file = "index.ts" }, ["10404"] = { line = 8, file = "index.ts" }, ["10414"] = { line = 5, file = "PluginSignals.ts" },
        ["10415"] = { line = 5, file = "PluginSignals.ts" }, ["10416"] = { line = 5, file = "PluginSignals.ts" },
        ["10417"] = { line = 8, file = "PluginSignals.ts" }, ["10418"] = { line = 8, file = "PluginSignals.ts" },
        ["10419"] = { line = 8, file = "PluginSignals.ts" }, ["10420"] = { line = 9, file = "PluginSignals.ts" },
        ["10421"] = { line = 8, file = "PluginSignals.ts" }, ["10422"] = { line = 11, file = "PluginSignals.ts" },
        ["10423"] = { line = 12, file = "PluginSignals.ts" }, ["10424"] = { line = 14, file = "PluginSignals.ts" },
        ["10425"] = { line = 11, file = "PluginSignals.ts" }, ["10426"] = { line = 16, file = "PluginSignals.ts" },
        ["10427"] = { line = 17, file = "PluginSignals.ts" }, ["10428"] = { line = 18, file = "PluginSignals.ts" },
        ["10429"] = { line = 16, file = "PluginSignals.ts" }, ["10445"] = { line = 2, file = "HActionList.ts" },
        ["10446"] = { line = 2, file = "HActionList.ts" }, ["10447"] = { line = 16, file = "HActionList.ts" }, ["10448"] = { line = 17, file = "HActionList.ts" },
        ["10449"] = { line = 19, file = "HActionList.ts" }, ["10450"] = { line = 19, file = "HActionList.ts" }, ["10451"] = { line = 19, file = "HActionList.ts" },
        ["10452"] = { line = 22, file = "HActionList.ts" }, ["10453"] = { line = 22, file = "HActionList.ts" }, ["10454"] = { line = 23, file = "HActionList.ts" },
        ["10455"] = { line = 21, file = "HActionList.ts" }, ["10456"] = { line = 27, file = "HActionList.ts" }, ["10457"] = { line = 28, file = "HActionList.ts" },
        ["10458"] = { line = 28, file = "HActionList.ts" }, ["10459"] = { line = 28, file = "HActionList.ts" }, ["10460"] = { line = 28, file = "HActionList.ts" },
        ["10461"] = { line = 28, file = "HActionList.ts" }, ["10462"] = { line = 28, file = "HActionList.ts" }, ["10463"] = { line = 29, file = "HActionList.ts" },
        ["10464"] = { line = 31, file = "HActionList.ts" }, ["10465"] = { line = 32, file = "HActionList.ts" }, ["10466"] = { line = 33, file = "HActionList.ts" },
        ["10467"] = { line = 34, file = "HActionList.ts" }, ["10468"] = { line = 33, file = "HActionList.ts" }, ["10469"] = { line = 35, file = "HActionList.ts" },
        ["10470"] = { line = 36, file = "HActionList.ts" }, ["10471"] = { line = 36, file = "HActionList.ts" }, ["10472"] = { line = 36, file = "HActionList.ts" },
        ["10473"] = { line = 37, file = "HActionList.ts" }, ["10474"] = { line = 38, file = "HActionList.ts" }, ["10475"] = { line = 39, file = "HActionList.ts" },
        ["10476"] = { line = 40, file = "HActionList.ts" }, ["10477"] = { line = 41, file = "HActionList.ts" }, ["10478"] = { line = 43, file = "HActionList.ts" },
        ["10479"] = { line = 42, file = "HActionList.ts" }, ["10480"] = { line = 38, file = "HActionList.ts" }, ["10481"] = { line = 47, file = "HActionList.ts" },
        ["10482"] = { line = 37, file = "HActionList.ts" }, ["10483"] = { line = 36, file = "HActionList.ts" }, ["10484"] = { line = 36, file = "HActionList.ts" },
        ["10485"] = { line = 53, file = "HActionList.ts" }, ["10486"] = { line = 55, file = "HActionList.ts" }, ["10487"] = { line = 56, file = "HActionList.ts" },
        ["10488"] = { line = 53, file = "HActionList.ts" }, ["10489"] = { line = 33, file = "HActionList.ts" }, ["10490"] = { line = 33, file = "HActionList.ts" },
        ["10491"] = { line = 63, file = "HActionList.ts" }, ["10492"] = { line = 27, file = "HActionList.ts" }, ["10502"] = { line = 1, file = "HHorizontalGrid.ts" },
        ["10503"] = { line = 1, file = "HHorizontalGrid.ts" }, ["10504"] = { line = 8, file = "HHorizontalGrid.ts" },
        ["10505"] = { line = 8, file = "HHorizontalGrid.ts" }, ["10506"] = { line = 8, file = "HHorizontalGrid.ts" },
        ["10507"] = { line = 11, file = "HHorizontalGrid.ts" }, ["10508"] = { line = 11, file = "HHorizontalGrid.ts" },
        ["10509"] = { line = 12, file = "HHorizontalGrid.ts" }, ["10510"] = { line = 10, file = "HHorizontalGrid.ts" },
        ["10511"] = { line = 15, file = "HHorizontalGrid.ts" }, ["10512"] = { line = 17, file = "HHorizontalGrid.ts" },
        ["10513"] = { line = 17, file = "HHorizontalGrid.ts" }, ["10514"] = { line = 17, file = "HHorizontalGrid.ts" },
        ["10515"] = { line = 17, file = "HHorizontalGrid.ts" }, ["10516"] = { line = 17, file = "HHorizontalGrid.ts" },
        ["10517"] = { line = 15, file = "HHorizontalGrid.ts" }, ["10524"] = { line = 1, file = "common.ts" }, ["10525"] = { line = 1, file = "common.ts" },
        ["10526"] = { line = 5, file = "common.ts" }, ["10527"] = { line = 6, file = "common.ts" }, ["10528"] = { line = 7, file = "common.ts" },
        ["10530"] = { line = 9, file = "common.ts" }, ["10531"] = { line = 10, file = "common.ts" }, ["10533"] = { line = 12, file = "common.ts" },
        ["10534"] = { line = 13, file = "common.ts" }, ["10536"] = { line = 5, file = "common.ts" }, ["10537"] = { line = 17, file = "common.ts" },
        ["10538"] = { line = 23, file = "common.ts" }, ["10539"] = { line = 24, file = "common.ts" }, ["10540"] = { line = 25, file = "common.ts" },
        ["10541"] = { line = 26, file = "common.ts" }, ["10542"] = { line = 27, file = "common.ts" }, ["10543"] = { line = 28, file = "common.ts" },
        ["10544"] = { line = 29, file = "common.ts" }, ["10545"] = { line = 28, file = "common.ts" }, ["10546"] = { line = 26, file = "common.ts" },
        ["10547"] = { line = 32, file = "common.ts" }, ["10549"] = { line = 17, file = "common.ts" }, ["10558"] = { line = 1, file = "MAButton.ts" },
        ["10559"] = { line = 1, file = "MAButton.ts" }, ["10560"] = { line = 1, file = "MAButton.ts" }, ["10561"] = { line = 4, file = "MAButton.ts" },
        ["10562"] = { line = 4, file = "MAButton.ts" }, ["10563"] = { line = 21, file = "MAButton.ts" }, ["10564"] = { line = 22, file = "MAButton.ts" },
        ["10565"] = { line = 23, file = "MAButton.ts" }, ["10566"] = { line = 29, file = "MAButton.ts" }, ["10567"] = { line = 30, file = "MAButton.ts" },
        ["10568"] = { line = 31, file = "MAButton.ts" }, ["10569"] = { line = 32, file = "MAButton.ts" }, ["10570"] = { line = 21, file = "MAButton.ts" },
        ["10571"] = { line = 35, file = "MAButton.ts" }, ["10572"] = { line = 35, file = "MAButton.ts" }, ["10573"] = { line = 35, file = "MAButton.ts" },
        ["10574"] = { line = 40, file = "MAButton.ts" }, ["10575"] = { line = 40, file = "MAButton.ts" }, ["10576"] = { line = 41, file = "MAButton.ts" },
        ["10577"] = { line = 40, file = "MAButton.ts" }, ["10578"] = { line = 44, file = "MAButton.ts" }, ["10579"] = { line = 45, file = "MAButton.ts" },
        ["10580"] = { line = 44, file = "MAButton.ts" }, ["10581"] = { line = 48, file = "MAButton.ts" }, ["10582"] = { line = 50, file = "MAButton.ts" },
        ["10583"] = { line = 50, file = "MAButton.ts" }, ["10584"] = { line = 52, file = "MAButton.ts" }, ["10585"] = { line = 53, file = "MAButton.ts" },
        ["10586"] = { line = 54, file = "MAButton.ts" }, ["10587"] = { line = 55, file = "MAButton.ts" }, ["10588"] = { line = 48, file = "MAButton.ts" },
        ["10589"] = { line = 58, file = "MAButton.ts" }, ["10590"] = { line = 59, file = "MAButton.ts" }, ["10591"] = { line = 60, file = "MAButton.ts" },
        ["10593"] = { line = 62, file = "MAButton.ts" }, ["10594"] = { line = 63, file = "MAButton.ts" }, ["10595"] = { line = 58, file = "MAButton.ts" },
        ["10596"] = { line = 66, file = "MAButton.ts" }, ["10597"] = { line = 67, file = "MAButton.ts" }, ["10598"] = { line = 67, file = "MAButton.ts" },
        ["10599"] = { line = 67, file = "MAButton.ts" }, ["10600"] = { line = 67, file = "MAButton.ts" }, ["10601"] = { line = 67, file = "MAButton.ts" },
        ["10602"] = { line = 67, file = "MAButton.ts" }, ["10603"] = { line = 68, file = "MAButton.ts" }, ["10604"] = { line = 68, file = "MAButton.ts" },
        ["10605"] = { line = 68, file = "MAButton.ts" }, ["10606"] = { line = 68, file = "MAButton.ts" }, ["10607"] = { line = 68, file = "MAButton.ts" },
        ["10608"] = { line = 68, file = "MAButton.ts" }, ["10609"] = { line = 68, file = "MAButton.ts" }, ["10610"] = { line = 69, file = "MAButton.ts" },
        ["10611"] = { line = 69, file = "MAButton.ts" }, ["10612"] = { line = 69, file = "MAButton.ts" }, ["10613"] = { line = 70, file = "MAButton.ts" },
        ["10614"] = { line = 71, file = "MAButton.ts" }, ["10615"] = { line = 71, file = "MAButton.ts" }, ["10616"] = { line = 72, file = "MAButton.ts" },
        ["10617"] = { line = 73, file = "MAButton.ts" }, ["10618"] = { line = 74, file = "MAButton.ts" }, ["10619"] = { line = 75, file = "MAButton.ts" },
        ["10620"] = { line = 71, file = "MAButton.ts" }, ["10621"] = { line = 69, file = "MAButton.ts" }, ["10622"] = { line = 66, file = "MAButton.ts" },
        ["10623"] = { line = 79, file = "MAButton.ts" }, ["10624"] = { line = 79, file = "MAButton.ts" }, ["10637"] = { line = 4, file = "HInputFieldGridTypes.ts" },
        ["10651"] = { line = 2, file = "HInputFieldGrid.ts" }, ["10652"] = { line = 2, file = "HInputFieldGrid.ts" },
        ["10653"] = { line = 2, file = "HInputFieldGrid.ts" }, ["10654"] = { line = 3, file = "HInputFieldGrid.ts" },
        ["10655"] = { line = 3, file = "HInputFieldGrid.ts" }, ["10656"] = { line = 8, file = "HInputFieldGrid.ts" },
        ["10657"] = { line = 10, file = "HInputFieldGrid.ts" }, ["10658"] = { line = 10, file = "HInputFieldGrid.ts" },
        ["10659"] = { line = 10, file = "HInputFieldGrid.ts" }, ["10660"] = { line = 13, file = "HInputFieldGrid.ts" },
        ["10661"] = { line = 13, file = "HInputFieldGrid.ts" }, ["10662"] = { line = 14, file = "HInputFieldGrid.ts" },
        ["10663"] = { line = 15, file = "HInputFieldGrid.ts" }, ["10664"] = { line = 12, file = "HInputFieldGrid.ts" },
        ["10665"] = { line = 19, file = "HInputFieldGrid.ts" }, ["10666"] = { line = 20, file = "HInputFieldGrid.ts" },
        ["10667"] = { line = 21, file = "HInputFieldGrid.ts" }, ["10668"] = { line = 21, file = "HInputFieldGrid.ts" },
        ["10669"] = { line = 21, file = "HInputFieldGrid.ts" }, ["10670"] = { line = 21, file = "HInputFieldGrid.ts" },
        ["10671"] = { line = 21, file = "HInputFieldGrid.ts" }, ["10672"] = { line = 21, file = "HInputFieldGrid.ts" },
        ["10673"] = { line = 21, file = "HInputFieldGrid.ts" }, ["10674"] = { line = 21, file = "HInputFieldGrid.ts" },
        ["10682"] = { line = 22, file = "HInputFieldGrid.ts" }, ["10683"] = { line = 24, file = "HInputFieldGrid.ts" },
        ["10684"] = { line = 24, file = "HInputFieldGrid.ts" }, ["10685"] = { line = 24, file = "HInputFieldGrid.ts" },
        ["10686"] = { line = 25, file = "HInputFieldGrid.ts" }, ["10687"] = { line = 25, file = "HInputFieldGrid.ts" },
        ["10688"] = { line = 25, file = "HInputFieldGrid.ts" }, ["10689"] = { line = 26, file = "HInputFieldGrid.ts" },
        ["10690"] = { line = 31, file = "HInputFieldGrid.ts" }, ["10692"] = { line = 33, file = "HInputFieldGrid.ts" },
        ["10693"] = { line = 40, file = "HInputFieldGrid.ts" }, ["10694"] = { line = 42, file = "HInputFieldGrid.ts" },
        ["10695"] = { line = 46, file = "HInputFieldGrid.ts" }, ["10696"] = { line = 47, file = "HInputFieldGrid.ts" },
        ["10697"] = { line = 48, file = "HInputFieldGrid.ts" }, ["10698"] = { line = 49, file = "HInputFieldGrid.ts" },
        ["10699"] = { line = 50, file = "HInputFieldGrid.ts" }, ["10700"] = { line = 51, file = "HInputFieldGrid.ts" },
        ["10701"] = { line = 56, file = "HInputFieldGrid.ts" }, ["10702"] = { line = 58, file = "HInputFieldGrid.ts" },
        ["10703"] = { line = 57, file = "HInputFieldGrid.ts" }, ["10704"] = { line = 47, file = "HInputFieldGrid.ts" },
        ["10705"] = { line = 62, file = "HInputFieldGrid.ts" }, ["10706"] = { line = 46, file = "HInputFieldGrid.ts" },
        ["10707"] = { line = 41, file = "HInputFieldGrid.ts" }, ["10708"] = { line = 66, file = "HInputFieldGrid.ts" },
        ["10709"] = { line = 39, file = "HInputFieldGrid.ts" }, ["10712"] = { line = 69, file = "HInputFieldGrid.ts" },
        ["10713"] = { line = 70, file = "HInputFieldGrid.ts" }, ["10714"] = { line = 75, file = "HInputFieldGrid.ts" },
        ["10715"] = { line = 69, file = "HInputFieldGrid.ts" }, ["10717"] = { line = 31, file = "HInputFieldGrid.ts" },
        ["10719"] = { line = 31, file = "HInputFieldGrid.ts" }, ["10721"] = { line = 80, file = "HInputFieldGrid.ts" },
        ["10722"] = { line = 24, file = "HInputFieldGrid.ts" }, ["10723"] = { line = 24, file = "HInputFieldGrid.ts" },
        ["10724"] = { line = 83, file = "HInputFieldGrid.ts" }, ["10725"] = { line = 88, file = "HInputFieldGrid.ts" },
        ["10726"] = { line = 19, file = "HInputFieldGrid.ts" }, ["10727"] = { line = 91, file = "HInputFieldGrid.ts" },
        ["10728"] = { line = 92, file = "HInputFieldGrid.ts" }, ["10729"] = { line = 95, file = "HInputFieldGrid.ts" },
        ["10730"] = { line = 96, file = "HInputFieldGrid.ts" }, ["10731"] = { line = 98, file = "HInputFieldGrid.ts" },
        ["10732"] = { line = 95, file = "HInputFieldGrid.ts" }, ["10733"] = { line = 99, file = "HInputFieldGrid.ts" },
        ["10734"] = { line = 100, file = "HInputFieldGrid.ts" }, ["10735"] = { line = 101, file = "HInputFieldGrid.ts" },
        ["10736"] = { line = 102, file = "HInputFieldGrid.ts" }, ["10737"] = { line = 103, file = "HInputFieldGrid.ts" },
        ["10738"] = { line = 104, file = "HInputFieldGrid.ts" }, ["10740"] = { line = 102, file = "HInputFieldGrid.ts" },
        ["10741"] = { line = 95, file = "HInputFieldGrid.ts" }, ["10742"] = { line = 95, file = "HInputFieldGrid.ts" },
        ["10743"] = { line = 91, file = "HInputFieldGrid.ts" }, ["10744"] = { line = 110, file = "HInputFieldGrid.ts" },
        ["10745"] = { line = 111, file = "HInputFieldGrid.ts" }, ["10746"] = { line = 111, file = "HInputFieldGrid.ts" },
        ["10747"] = { line = 113, file = "HInputFieldGrid.ts" }, ["10748"] = { line = 114, file = "HInputFieldGrid.ts" },
        ["10749"] = { line = 115, file = "HInputFieldGrid.ts" }, ["10750"] = { line = 116, file = "HInputFieldGrid.ts" },
        ["10751"] = { line = 117, file = "HInputFieldGrid.ts" }, ["10752"] = { line = 118, file = "HInputFieldGrid.ts" },
        ["10753"] = { line = 119, file = "HInputFieldGrid.ts" }, ["10754"] = { line = 120, file = "HInputFieldGrid.ts" },
        ["10755"] = { line = 121, file = "HInputFieldGrid.ts" }, ["10757"] = { line = 118, file = "HInputFieldGrid.ts" },
        ["10758"] = { line = 113, file = "HInputFieldGrid.ts" }, ["10759"] = { line = 110, file = "HInputFieldGrid.ts" },
        ["10760"] = { line = 127, file = "HInputFieldGrid.ts" }, ["10761"] = { line = 129, file = "HInputFieldGrid.ts" },
        ["10762"] = { line = 129, file = "HInputFieldGrid.ts" }, ["10763"] = { line = 130, file = "HInputFieldGrid.ts" },
        ["10764"] = { line = 131, file = "HInputFieldGrid.ts" }, ["10765"] = { line = 132, file = "HInputFieldGrid.ts" },
        ["10766"] = { line = 133, file = "HInputFieldGrid.ts" }, ["10767"] = { line = 142, file = "HInputFieldGrid.ts" },
        ["10768"] = { line = 143, file = "HInputFieldGrid.ts" }, ["10769"] = { line = 144, file = "HInputFieldGrid.ts" },
        ["10770"] = { line = 145, file = "HInputFieldGrid.ts" }, ["10771"] = { line = 146, file = "HInputFieldGrid.ts" },
        ["10772"] = { line = 147, file = "HInputFieldGrid.ts" }, ["10774"] = { line = 143, file = "HInputFieldGrid.ts" },
        ["10775"] = { line = 130, file = "HInputFieldGrid.ts" }, ["10776"] = { line = 127, file = "HInputFieldGrid.ts" },
        ["10784"] = { line = 3, file = "MAUILayoutGrid.ts" }, ["10785"] = { line = 3, file = "MAUILayoutGrid.ts" },
        ["10786"] = { line = 13, file = "MAUILayoutGrid.ts" }, ["10787"] = { line = 13, file = "MAUILayoutGrid.ts" },
        ["10788"] = { line = 13, file = "MAUILayoutGrid.ts" }, ["10789"] = { line = 17, file = "MAUILayoutGrid.ts" },
        ["10790"] = { line = 17, file = "MAUILayoutGrid.ts" }, ["10791"] = { line = 18, file = "MAUILayoutGrid.ts" },
        ["10792"] = { line = 14, file = "MAUILayoutGrid.ts" }, ["10793"] = { line = 16, file = "MAUILayoutGrid.ts" },
        ["10794"] = { line = 21, file = "MAUILayoutGrid.ts" }, ["10795"] = { line = 22, file = "MAUILayoutGrid.ts" },
        ["10796"] = { line = 23, file = "MAUILayoutGrid.ts" }, ["10797"] = { line = 21, file = "MAUILayoutGrid.ts" },
        ["10798"] = { line = 26, file = "MAUILayoutGrid.ts" }, ["10799"] = { line = 27, file = "MAUILayoutGrid.ts" },
        ["10800"] = { line = 27, file = "MAUILayoutGrid.ts" }, ["10801"] = { line = 29, file = "MAUILayoutGrid.ts" },
        ["10802"] = { line = 30, file = "MAUILayoutGrid.ts" }, ["10803"] = { line = 31, file = "MAUILayoutGrid.ts" },
        ["10805"] = { line = 34, file = "MAUILayoutGrid.ts" }, ["10806"] = { line = 34, file = "MAUILayoutGrid.ts" },
        ["10807"] = { line = 35, file = "MAUILayoutGrid.ts" }, ["10808"] = { line = 36, file = "MAUILayoutGrid.ts" },
        ["10809"] = { line = 39, file = "MAUILayoutGrid.ts" }, ["10810"] = { line = 40, file = "MAUILayoutGrid.ts" },
        ["10812"] = { line = 34, file = "MAUILayoutGrid.ts" }, ["10815"] = { line = 44, file = "MAUILayoutGrid.ts" },
        ["10816"] = { line = 26, file = "MAUILayoutGrid.ts" }, ["10817"] = { line = 47, file = "MAUILayoutGrid.ts" },
        ["10818"] = { line = 48, file = "MAUILayoutGrid.ts" }, ["10819"] = { line = 48, file = "MAUILayoutGrid.ts" },
        ["10820"] = { line = 48, file = "MAUILayoutGrid.ts" }, ["10821"] = { line = 49, file = "MAUILayoutGrid.ts" },
        ["10822"] = { line = 50, file = "MAUILayoutGrid.ts" }, ["10823"] = { line = 51, file = "MAUILayoutGrid.ts" },
        ["10824"] = { line = 53, file = "MAUILayoutGrid.ts" }, ["10826"] = { line = 54, file = "MAUILayoutGrid.ts" },
        ["10827"] = { line = 54, file = "MAUILayoutGrid.ts" }, ["10828"] = { line = 55, file = "MAUILayoutGrid.ts" },
        ["10829"] = { line = 57, file = "MAUILayoutGrid.ts" }, ["10830"] = { line = 58, file = "MAUILayoutGrid.ts" },
        ["10831"] = { line = 59, file = "MAUILayoutGrid.ts" }, ["10832"] = { line = 60, file = "MAUILayoutGrid.ts" },
        ["10834"] = { line = 54, file = "MAUILayoutGrid.ts" }, ["10838"] = { line = 63, file = "MAUILayoutGrid.ts" },
        ["10839"] = { line = 63, file = "MAUILayoutGrid.ts" }, ["10840"] = { line = 64, file = "MAUILayoutGrid.ts" },
        ["10841"] = { line = 65, file = "MAUILayoutGrid.ts" }, ["10842"] = { line = 66, file = "MAUILayoutGrid.ts" },
        ["10843"] = { line = 67, file = "MAUILayoutGrid.ts" }, ["10844"] = { line = 68, file = "MAUILayoutGrid.ts" },
        ["10846"] = { line = 63, file = "MAUILayoutGrid.ts" }, ["10849"] = { line = 71, file = "MAUILayoutGrid.ts" },
        ["10850"] = { line = 47, file = "MAUILayoutGrid.ts" }, ["10859"] = { line = 1, file = "MADialogFrame.ts" },
        ["10860"] = { line = 1, file = "MADialogFrame.ts" }, ["10861"] = { line = 4, file = "MADialogFrame.ts" },
        ["10862"] = { line = 4, file = "MADialogFrame.ts" }, ["10863"] = { line = 10, file = "MADialogFrame.ts" },
        ["10864"] = { line = 10, file = "MADialogFrame.ts" }, ["10865"] = { line = 10, file = "MADialogFrame.ts" },
        ["10866"] = { line = 13, file = "MADialogFrame.ts" }, ["10867"] = { line = 13, file = "MADialogFrame.ts" },
        ["10868"] = { line = 13, file = "MADialogFrame.ts" }, ["10869"] = { line = 13, file = "MADialogFrame.ts" },
        ["10870"] = { line = 17, file = "MADialogFrame.ts" }, ["10871"] = { line = 18, file = "MADialogFrame.ts" },
        ["10872"] = { line = 17, file = "MADialogFrame.ts" }, ["10873"] = { line = 21, file = "MADialogFrame.ts" },
        ["10874"] = { line = 22, file = "MADialogFrame.ts" }, ["10875"] = { line = 23, file = "MADialogFrame.ts" },
        ["10876"] = { line = 23, file = "MADialogFrame.ts" }, ["10877"] = { line = 23, file = "MADialogFrame.ts" },
        ["10878"] = { line = 24, file = "MADialogFrame.ts" }, ["10879"] = { line = 25, file = "MADialogFrame.ts" },
        ["10880"] = { line = 26, file = "MADialogFrame.ts" }, ["10881"] = { line = 27, file = "MADialogFrame.ts" },
        ["10882"] = { line = 28, file = "MADialogFrame.ts" }, ["10883"] = { line = 28, file = "MADialogFrame.ts" },
        ["10884"] = { line = 28, file = "MADialogFrame.ts" }, ["10885"] = { line = 23, file = "MADialogFrame.ts" },
        ["10886"] = { line = 29, file = "MADialogFrame.ts" }, ["10887"] = { line = 23, file = "MADialogFrame.ts" },
        ["10888"] = { line = 30, file = "MADialogFrame.ts" }, ["10889"] = { line = 31, file = "MADialogFrame.ts" },
        ["10891"] = { line = 33, file = "MADialogFrame.ts" }, ["10892"] = { line = 34, file = "MADialogFrame.ts" },
        ["10893"] = { line = 35, file = "MADialogFrame.ts" }, ["10894"] = { line = 21, file = "MADialogFrame.ts" },
        ["10895"] = { line = 38, file = "MADialogFrame.ts" }, ["10896"] = { line = 39, file = "MADialogFrame.ts" },
        ["10897"] = { line = 38, file = "MADialogFrame.ts" }, ["10906"] = { line = 1, file = "MALineEdit.ts" }, ["10907"] = { line = 1, file = "MALineEdit.ts" },
        ["10908"] = { line = 4, file = "MALineEdit.ts" }, ["10909"] = { line = 4, file = "MALineEdit.ts" }, ["10910"] = { line = 14, file = "MALineEdit.ts" },
        ["10911"] = { line = 15, file = "MALineEdit.ts" }, ["10912"] = { line = 16, file = "MALineEdit.ts" }, ["10913"] = { line = 22, file = "MALineEdit.ts" },
        ["10914"] = { line = 23, file = "MALineEdit.ts" }, ["10915"] = { line = 24, file = "MALineEdit.ts" }, ["10916"] = { line = 14, file = "MALineEdit.ts" },
        ["10917"] = { line = 26, file = "MALineEdit.ts" }, ["10918"] = { line = 26, file = "MALineEdit.ts" }, ["10919"] = { line = 26, file = "MALineEdit.ts" },
        ["10920"] = { line = 27, file = "MALineEdit.ts" }, ["10921"] = { line = 27, file = "MALineEdit.ts" }, ["10922"] = { line = 27, file = "MALineEdit.ts" },
        ["10923"] = { line = 27, file = "MALineEdit.ts" }, ["10924"] = { line = 30, file = "MALineEdit.ts" }, ["10925"] = { line = 32, file = "MALineEdit.ts" },
        ["10926"] = { line = 32, file = "MALineEdit.ts" }, ["10927"] = { line = 33, file = "MALineEdit.ts" }, ["10928"] = { line = 33, file = "MALineEdit.ts" },
        ["10929"] = { line = 33, file = "MALineEdit.ts" }, ["10930"] = { line = 35, file = "MALineEdit.ts" }, ["10931"] = { line = 36, file = "MALineEdit.ts" },
        ["10932"] = { line = 38, file = "MALineEdit.ts" }, ["10933"] = { line = 38, file = "MALineEdit.ts" }, ["10934"] = { line = 38, file = "MALineEdit.ts" },
        ["10935"] = { line = 38, file = "MALineEdit.ts" }, ["10936"] = { line = 38, file = "MALineEdit.ts" }, ["10937"] = { line = 38, file = "MALineEdit.ts" },
        ["10938"] = { line = 38, file = "MALineEdit.ts" }, ["10939"] = { line = 39, file = "MALineEdit.ts" }, ["10940"] = { line = 30, file = "MALineEdit.ts" },
        ["10941"] = { line = 42, file = "MALineEdit.ts" }, ["10942"] = { line = 42, file = "MALineEdit.ts" }, ["10943"] = { line = 45, file = "MALineEdit.ts" },
        ["10944"] = { line = 46, file = "MALineEdit.ts" }, ["10945"] = { line = 46, file = "MALineEdit.ts" }, ["10946"] = { line = 46, file = "MALineEdit.ts" },
        ["10947"] = { line = 47, file = "MALineEdit.ts" }, ["10948"] = { line = 47, file = "MALineEdit.ts" }, ["10949"] = { line = 46, file = "MALineEdit.ts" },
        ["10950"] = { line = 45, file = "MALineEdit.ts" }, ["10958"] = { line = 1, file = "MAText.ts" }, ["10959"] = { line = 1, file = "MAText.ts" },
        ["10960"] = { line = 8, file = "MAText.ts" }, ["10961"] = { line = 9, file = "MAText.ts" }, ["10962"] = { line = 10, file = "MAText.ts" },
        ["10963"] = { line = 11, file = "MAText.ts" }, ["10964"] = { line = 12, file = "MAText.ts" }, ["10965"] = { line = 18, file = "MAText.ts" },
        ["10966"] = { line = 24, file = "MAText.ts" }, ["10967"] = { line = 25, file = "MAText.ts" }, ["10968"] = { line = 8, file = "MAText.ts" },
        ["10969"] = { line = 27, file = "MAText.ts" }, ["10970"] = { line = 27, file = "MAText.ts" }, ["10971"] = { line = 27, file = "MAText.ts" },
        ["10972"] = { line = 28, file = "MAText.ts" }, ["10973"] = { line = 28, file = "MAText.ts" }, ["10974"] = { line = 28, file = "MAText.ts" },
        ["10975"] = { line = 32, file = "MAText.ts" }, ["10976"] = { line = 33, file = "MAText.ts" }, ["10977"] = { line = 33, file = "MAText.ts" },
        ["10978"] = { line = 34, file = "MAText.ts" }, ["10979"] = { line = 35, file = "MAText.ts" }, ["10980"] = { line = 36, file = "MAText.ts" },
        ["10981"] = { line = 32, file = "MAText.ts" }, ["10982"] = { line = 39, file = "MAText.ts" }, ["10983"] = { line = 39, file = "MAText.ts" },
        ["10984"] = { line = 43, file = "MAText.ts" }, ["10985"] = { line = 44, file = "MAText.ts" }, ["10986"] = { line = 43, file = "MAText.ts" },
        ["10994"] = { line = 1, file = "index.ts" }, ["10995"] = { line = 1, file = "index.ts" }, ["10996"] = { line = 1, file = "index.ts" },
        ["10999"] = { line = 2, file = "index.ts" }, ["11000"] = { line = 2, file = "index.ts" }, ["11001"] = { line = 2, file = "index.ts" },
        ["11004"] = { line = 3, file = "index.ts" }, ["11005"] = { line = 3, file = "index.ts" }, ["11006"] = { line = 3, file = "index.ts" },
        ["11009"] = { line = 4, file = "index.ts" }, ["11010"] = { line = 4, file = "index.ts" }, ["11011"] = { line = 4, file = "index.ts" },
        ["11014"] = { line = 5, file = "index.ts" }, ["11015"] = { line = 5, file = "index.ts" }, ["11016"] = { line = 5, file = "index.ts" },
        ["11029"] = { line = 1, file = "HSelectionGrid.ts" }, ["11030"] = { line = 1, file = "HSelectionGrid.ts" },
        ["11031"] = { line = 4, file = "HSelectionGrid.ts" }, ["11032"] = { line = 4, file = "HSelectionGrid.ts" },
        ["11033"] = { line = 16, file = "HSelectionGrid.ts" }, ["11034"] = { line = 16, file = "HSelectionGrid.ts" },
        ["11035"] = { line = 16, file = "HSelectionGrid.ts" }, ["11036"] = { line = 21, file = "HSelectionGrid.ts" },
        ["11037"] = { line = 21, file = "HSelectionGrid.ts" }, ["11038"] = { line = 22, file = "HSelectionGrid.ts" },
        ["11039"] = { line = 19, file = "HSelectionGrid.ts" }, ["11040"] = { line = 23, file = "HSelectionGrid.ts" },
        ["11041"] = { line = 20, file = "HSelectionGrid.ts" }, ["11042"] = { line = 26, file = "HSelectionGrid.ts" },
        ["11043"] = { line = 28, file = "HSelectionGrid.ts" }, ["11044"] = { line = 28, file = "HSelectionGrid.ts" },
        ["11045"] = { line = 28, file = "HSelectionGrid.ts" }, ["11046"] = { line = 28, file = "HSelectionGrid.ts" },
        ["11047"] = { line = 28, file = "HSelectionGrid.ts" }, ["11048"] = { line = 28, file = "HSelectionGrid.ts" },
        ["11049"] = { line = 29, file = "HSelectionGrid.ts" }, ["11050"] = { line = 29, file = "HSelectionGrid.ts" },
        ["11051"] = { line = 30, file = "HSelectionGrid.ts" }, ["11052"] = { line = 30, file = "HSelectionGrid.ts" },
        ["11053"] = { line = 31, file = "HSelectionGrid.ts" }, ["11054"] = { line = 30, file = "HSelectionGrid.ts" },
        ["11055"] = { line = 32, file = "HSelectionGrid.ts" }, ["11056"] = { line = 32, file = "HSelectionGrid.ts" },
        ["11057"] = { line = 33, file = "HSelectionGrid.ts" }, ["11058"] = { line = 34, file = "HSelectionGrid.ts" },
        ["11059"] = { line = 35, file = "HSelectionGrid.ts" }, ["11060"] = { line = 36, file = "HSelectionGrid.ts" },
        ["11061"] = { line = 37, file = "HSelectionGrid.ts" }, ["11062"] = { line = 38, file = "HSelectionGrid.ts" },
        ["11063"] = { line = 42, file = "HSelectionGrid.ts" }, ["11064"] = { line = 44, file = "HSelectionGrid.ts" },
        ["11065"] = { line = 45, file = "HSelectionGrid.ts" }, ["11067"] = { line = 46, file = "HSelectionGrid.ts" },
        ["11068"] = { line = 46, file = "HSelectionGrid.ts" }, ["11069"] = { line = 47, file = "HSelectionGrid.ts" },
        ["11070"] = { line = 48, file = "HSelectionGrid.ts" }, ["11071"] = { line = 50, file = "HSelectionGrid.ts" },
        ["11072"] = { line = 46, file = "HSelectionGrid.ts" }, ["11075"] = { line = 43, file = "HSelectionGrid.ts" },
        ["11076"] = { line = 35, file = "HSelectionGrid.ts" }, ["11077"] = { line = 58, file = "HSelectionGrid.ts" },
        ["11078"] = { line = 34, file = "HSelectionGrid.ts" }, ["11079"] = { line = 60, file = "HSelectionGrid.ts" },
        ["11080"] = { line = 60, file = "HSelectionGrid.ts" }, ["11081"] = { line = 61, file = "HSelectionGrid.ts" },
        ["11082"] = { line = 32, file = "HSelectionGrid.ts" }, ["11083"] = { line = 32, file = "HSelectionGrid.ts" },
        ["11084"] = { line = 30, file = "HSelectionGrid.ts" }, ["11085"] = { line = 64, file = "HSelectionGrid.ts" },
        ["11086"] = { line = 29, file = "HSelectionGrid.ts" }, ["11087"] = { line = 26, file = "HSelectionGrid.ts" },
        ["11098"] = { line = 2, file = "HTableGrid.ts" }, ["11099"] = { line = 2, file = "HTableGrid.ts" }, ["11100"] = { line = 13, file = "HTableGrid.ts" },
        ["11101"] = { line = 14, file = "HTableGrid.ts" }, ["11102"] = { line = 13, file = "HTableGrid.ts" }, ["11103"] = { line = 18, file = "HTableGrid.ts" },
        ["11104"] = { line = 23, file = "HTableGrid.ts" }, ["11105"] = { line = 24, file = "HTableGrid.ts" }, ["11106"] = { line = 26, file = "HTableGrid.ts" },
        ["11107"] = { line = 26, file = "HTableGrid.ts" }, ["11108"] = { line = 26, file = "HTableGrid.ts" }, ["11109"] = { line = 29, file = "HTableGrid.ts" },
        ["11110"] = { line = 29, file = "HTableGrid.ts" }, ["11111"] = { line = 30, file = "HTableGrid.ts" }, ["11112"] = { line = 31, file = "HTableGrid.ts" },
        ["11113"] = { line = 28, file = "HTableGrid.ts" }, ["11114"] = { line = 35, file = "HTableGrid.ts" }, ["11115"] = { line = 36, file = "HTableGrid.ts" },
        ["11116"] = { line = 37, file = "HTableGrid.ts" }, ["11117"] = { line = 37, file = "HTableGrid.ts" }, ["11118"] = { line = 37, file = "HTableGrid.ts" },
        ["11119"] = { line = 37, file = "HTableGrid.ts" }, ["11120"] = { line = 37, file = "HTableGrid.ts" }, ["11121"] = { line = 38, file = "HTableGrid.ts" },
        ["11122"] = { line = 39, file = "HTableGrid.ts" }, ["11123"] = { line = 40, file = "HTableGrid.ts" }, ["11124"] = { line = 41, file = "HTableGrid.ts" },
        ["11125"] = { line = 41, file = "HTableGrid.ts" }, ["11126"] = { line = 42, file = "HTableGrid.ts" }, ["11127"] = { line = 43, file = "HTableGrid.ts" },
        ["11128"] = { line = 47, file = "HTableGrid.ts" }, ["11129"] = { line = 42, file = "HTableGrid.ts" }, ["11130"] = { line = 41, file = "HTableGrid.ts" },
        ["11131"] = { line = 41, file = "HTableGrid.ts" }, ["11132"] = { line = 52, file = "HTableGrid.ts" }, ["11133"] = { line = 39, file = "HTableGrid.ts" },
        ["11134"] = { line = 54, file = "HTableGrid.ts" }, ["11135"] = { line = 54, file = "HTableGrid.ts" }, ["11136"] = { line = 54, file = "HTableGrid.ts" },
        ["11137"] = { line = 55, file = "HTableGrid.ts" }, ["11138"] = { line = 56, file = "HTableGrid.ts" }, ["11139"] = { line = 57, file = "HTableGrid.ts" },
        ["11140"] = { line = 58, file = "HTableGrid.ts" }, ["11141"] = { line = 56, file = "HTableGrid.ts" }, ["11143"] = { line = 61, file = "HTableGrid.ts" },
        ["11144"] = { line = 62, file = "HTableGrid.ts" }, ["11145"] = { line = 63, file = "HTableGrid.ts" }, ["11146"] = { line = 63, file = "HTableGrid.ts" },
        ["11147"] = { line = 64, file = "HTableGrid.ts" }, ["11148"] = { line = 63, file = "HTableGrid.ts" }, ["11149"] = { line = 63, file = "HTableGrid.ts" },
        ["11150"] = { line = 70, file = "HTableGrid.ts" }, ["11152"] = { line = 54, file = "HTableGrid.ts" }, ["11153"] = { line = 54, file = "HTableGrid.ts" },
        ["11154"] = { line = 77, file = "HTableGrid.ts" }, ["11155"] = { line = 78, file = "HTableGrid.ts" }, ["11156"] = { line = 79, file = "HTableGrid.ts" },
        ["11157"] = { line = 78, file = "HTableGrid.ts" }, ["11158"] = { line = 80, file = "HTableGrid.ts" }, ["11159"] = { line = 80, file = "HTableGrid.ts" },
        ["11160"] = { line = 80, file = "HTableGrid.ts" }, ["11161"] = { line = 78, file = "HTableGrid.ts" }, ["11162"] = { line = 83, file = "HTableGrid.ts" },
        ["11163"] = { line = 35, file = "HTableGrid.ts" }, ["11173"] = { line = 16, file = "HToggle.ts" }, ["11174"] = { line = 16, file = "HToggle.ts" },
        ["11175"] = { line = 16, file = "HToggle.ts" }, ["11176"] = { line = 21, file = "HToggle.ts" }, ["11177"] = { line = 21, file = "HToggle.ts" },
        ["11178"] = { line = 22, file = "HToggle.ts" }, ["11179"] = { line = 23, file = "HToggle.ts" }, ["11180"] = { line = 20, file = "HToggle.ts" },
        ["11181"] = { line = 26, file = "HToggle.ts" }, ["11182"] = { line = 27, file = "HToggle.ts" }, ["11183"] = { line = 29, file = "HToggle.ts" },
        ["11184"] = { line = 30, file = "HToggle.ts" }, ["11185"] = { line = 30, file = "HToggle.ts" }, ["11186"] = { line = 30, file = "HToggle.ts" },
        ["11187"] = { line = 30, file = "HToggle.ts" }, ["11188"] = { line = 30, file = "HToggle.ts" }, ["11189"] = { line = 30, file = "HToggle.ts" },
        ["11190"] = { line = 32, file = "HToggle.ts" }, ["11191"] = { line = 33, file = "HToggle.ts" }, ["11192"] = { line = 32, file = "HToggle.ts" },
        ["11193"] = { line = 38, file = "HToggle.ts" }, ["11194"] = { line = 39, file = "HToggle.ts" }, ["11195"] = { line = 40, file = "HToggle.ts" },
        ["11196"] = { line = 38, file = "HToggle.ts" }, ["11197"] = { line = 41, file = "HToggle.ts" }, ["11198"] = { line = 41, file = "HToggle.ts" },
        ["11199"] = { line = 42, file = "HToggle.ts" }, ["11200"] = { line = 41, file = "HToggle.ts" }, ["11201"] = { line = 45, file = "HToggle.ts" },
        ["11202"] = { line = 46, file = "HToggle.ts" }, ["11203"] = { line = 48, file = "HToggle.ts" }, ["11204"] = { line = 49, file = "HToggle.ts" },
        ["11205"] = { line = 43, file = "HToggle.ts" }, ["11206"] = { line = 41, file = "HToggle.ts" }, ["11207"] = { line = 52, file = "HToggle.ts" },
        ["11208"] = { line = 38, file = "HToggle.ts" }, ["11209"] = { line = 38, file = "HToggle.ts" }, ["11210"] = { line = 55, file = "HToggle.ts" },
        ["11211"] = { line = 57, file = "HToggle.ts" }, ["11212"] = { line = 26, file = "HToggle.ts" }, ["11224"] = { line = 1, file = "UIInputBox.ts" },
        ["11225"] = { line = 1, file = "UIInputBox.ts" }, ["11226"] = { line = 2, file = "UIInputBox.ts" }, ["11227"] = { line = 2, file = "UIInputBox.ts" },
        ["11228"] = { line = 2, file = "UIInputBox.ts" }, ["11229"] = { line = 3, file = "UIInputBox.ts" }, ["11230"] = { line = 3, file = "UIInputBox.ts" },
        ["11231"] = { line = 34, file = "UIInputBox.ts" }, ["11232"] = { line = 34, file = "UIInputBox.ts" }, ["11233"] = { line = 34, file = "UIInputBox.ts" },
        ["11234"] = { line = 39, file = "UIInputBox.ts" }, ["11235"] = { line = 39, file = "UIInputBox.ts" }, ["11236"] = { line = 40, file = "UIInputBox.ts" },
        ["11237"] = { line = 41, file = "UIInputBox.ts" }, ["11238"] = { line = 38, file = "UIInputBox.ts" }, ["11239"] = { line = 44, file = "UIInputBox.ts" },
        ["11240"] = { line = 45, file = "UIInputBox.ts" }, ["11241"] = { line = 46, file = "UIInputBox.ts" }, ["11242"] = { line = 47, file = "UIInputBox.ts" },
        ["11244"] = { line = 44, file = "UIInputBox.ts" }, ["11245"] = { line = 50, file = "UIInputBox.ts" }, ["11246"] = { line = 53, file = "UIInputBox.ts" },
        ["11247"] = { line = 53, file = "UIInputBox.ts" }, ["11248"] = { line = 53, file = "UIInputBox.ts" }, ["11249"] = { line = 53, file = "UIInputBox.ts" },
        ["11250"] = { line = 53, file = "UIInputBox.ts" }, ["11251"] = { line = 53, file = "UIInputBox.ts" }, ["11252"] = { line = 53, file = "UIInputBox.ts" },
        ["11253"] = { line = 53, file = "UIInputBox.ts" }, ["11254"] = { line = 53, file = "UIInputBox.ts" }, ["11263"] = { line = 54, file = "UIInputBox.ts" },
        ["11264"] = { line = 55, file = "UIInputBox.ts" }, ["11265"] = { line = 57, file = "UIInputBox.ts" }, ["11266"] = { line = 58, file = "UIInputBox.ts" },
        ["11267"] = { line = 58, file = "UIInputBox.ts" }, ["11268"] = { line = 59, file = "UIInputBox.ts" }, ["11269"] = { line = 60, file = "UIInputBox.ts" },
        ["11270"] = { line = 61, file = "UIInputBox.ts" }, ["11271"] = { line = 62, file = "UIInputBox.ts" }, ["11272"] = { line = 63, file = "UIInputBox.ts" },
        ["11274"] = { line = 65, file = "UIInputBox.ts" }, ["11275"] = { line = 66, file = "UIInputBox.ts" }, ["11277"] = { line = 68, file = "UIInputBox.ts" },
        ["11278"] = { line = 69, file = "UIInputBox.ts" }, ["11280"] = { line = 71, file = "UIInputBox.ts" }, ["11281"] = { line = 72, file = "UIInputBox.ts" },
        ["11283"] = { line = 74, file = "UIInputBox.ts" }, ["11284"] = { line = 55, file = "UIInputBox.ts" }, ["11285"] = { line = 77, file = "UIInputBox.ts" },
        ["11286"] = { line = 81, file = "UIInputBox.ts" }, ["11287"] = { line = 83, file = "UIInputBox.ts" }, ["11288"] = { line = 84, file = "UIInputBox.ts" },
        ["11289"] = { line = 85, file = "UIInputBox.ts" }, ["11290"] = { line = 86, file = "UIInputBox.ts" }, ["11293"] = { line = 89, file = "UIInputBox.ts" },
        ["11295"] = { line = 54, file = "UIInputBox.ts" }, ["11296"] = { line = 93, file = "UIInputBox.ts" }, ["11297"] = { line = 93, file = "UIInputBox.ts" },
        ["11298"] = { line = 94, file = "UIInputBox.ts" }, ["11299"] = { line = 95, file = "UIInputBox.ts" }, ["11300"] = { line = 96, file = "UIInputBox.ts" },
        ["11301"] = { line = 97, file = "UIInputBox.ts" }, ["11302"] = { line = 95, file = "UIInputBox.ts" }, ["11303"] = { line = 99, file = "UIInputBox.ts" },
        ["11304"] = { line = 100, file = "UIInputBox.ts" }, ["11305"] = { line = 101, file = "UIInputBox.ts" }, ["11306"] = { line = 102, file = "UIInputBox.ts" },
        ["11307"] = { line = 99, file = "UIInputBox.ts" }, ["11308"] = { line = 104, file = "UIInputBox.ts" }, ["11309"] = { line = 105, file = "UIInputBox.ts" },
        ["11310"] = { line = 104, file = "UIInputBox.ts" }, ["11311"] = { line = 94, file = "UIInputBox.ts" }, ["11312"] = { line = 109, file = "UIInputBox.ts" },
        ["11313"] = { line = 93, file = "UIInputBox.ts" }, ["11314"] = { line = 111, file = "UIInputBox.ts" }, ["11315"] = { line = 111, file = "UIInputBox.ts" },
        ["11316"] = { line = 112, file = "UIInputBox.ts" }, ["11317"] = { line = 116, file = "UIInputBox.ts" }, ["11318"] = { line = 117, file = "UIInputBox.ts" },
        ["11319"] = { line = 117, file = "UIInputBox.ts" }, ["11320"] = { line = 118, file = "UIInputBox.ts" }, ["11321"] = { line = 117, file = "UIInputBox.ts" },
        ["11322"] = { line = 117, file = "UIInputBox.ts" }, ["11323"] = { line = 111, file = "UIInputBox.ts" }, ["11324"] = { line = 127, file = "UIInputBox.ts" },
        ["11325"] = { line = 127, file = "UIInputBox.ts" }, ["11326"] = { line = 128, file = "UIInputBox.ts" }, ["11327"] = { line = 134, file = "UIInputBox.ts" },
        ["11328"] = { line = 127, file = "UIInputBox.ts" }, ["11329"] = { line = 136, file = "UIInputBox.ts" }, ["11330"] = { line = 50, file = "UIInputBox.ts" },
        ["11331"] = { line = 139, file = "UIInputBox.ts" }, ["11332"] = { line = 139, file = "UIInputBox.ts" }, ["11342"] = { line = 4, file = "UIFactory.ts" },
        ["11343"] = { line = 4, file = "UIFactory.ts" }, ["11344"] = { line = 5, file = "UIFactory.ts" }, ["11345"] = { line = 5, file = "UIFactory.ts" },
        ["11346"] = { line = 6, file = "UIFactory.ts" }, ["11347"] = { line = 6, file = "UIFactory.ts" }, ["11348"] = { line = 8, file = "UIFactory.ts" },
        ["11349"] = { line = 8, file = "UIFactory.ts" }, ["11350"] = { line = 9, file = "UIFactory.ts" }, ["11351"] = { line = 9, file = "UIFactory.ts" },
        ["11352"] = { line = 10, file = "UIFactory.ts" }, ["11353"] = { line = 10, file = "UIFactory.ts" }, ["11354"] = { line = 11, file = "UIFactory.ts" },
        ["11355"] = { line = 11, file = "UIFactory.ts" }, ["11356"] = { line = 12, file = "UIFactory.ts" }, ["11357"] = { line = 12, file = "UIFactory.ts" },
        ["11358"] = { line = 13, file = "UIFactory.ts" }, ["11359"] = { line = 14, file = "UIFactory.ts" }, ["11360"] = { line = 16, file = "UIFactory.ts" },
        ["11361"] = { line = 18, file = "UIFactory.ts" }, ["11362"] = { line = 20, file = "UIFactory.ts" }, ["11363"] = { line = 22, file = "UIFactory.ts" },
        ["11364"] = { line = 26, file = "UIFactory.ts" }, ["11365"] = { line = 26, file = "UIFactory.ts" }, ["11366"] = { line = 34, file = "UIFactory.ts" },
        ["11367"] = { line = 34, file = "UIFactory.ts" }, ["11368"] = { line = 34, file = "UIFactory.ts" }, ["11369"] = { line = 37, file = "UIFactory.ts" },
        ["11370"] = { line = 38, file = "UIFactory.ts" }, ["11371"] = { line = 37, file = "UIFactory.ts" }, ["11372"] = { line = 41, file = "UIFactory.ts" },
        ["11373"] = { line = 41, file = "UIFactory.ts" }, ["11374"] = { line = 41, file = "UIFactory.ts" }, ["11375"] = { line = 42, file = "UIFactory.ts" },
        ["11376"] = { line = 42, file = "UIFactory.ts" }, ["11377"] = { line = 42, file = "UIFactory.ts" }, ["11378"] = { line = 43, file = "UIFactory.ts" },
        ["11379"] = { line = 43, file = "UIFactory.ts" }, ["11380"] = { line = 43, file = "UIFactory.ts" }, ["11381"] = { line = 44, file = "UIFactory.ts" },
        ["11382"] = { line = 44, file = "UIFactory.ts" }, ["11383"] = { line = 44, file = "UIFactory.ts" }, ["11384"] = { line = 45, file = "UIFactory.ts" },
        ["11385"] = { line = 45, file = "UIFactory.ts" }, ["11386"] = { line = 45, file = "UIFactory.ts" }, ["11387"] = { line = 46, file = "UIFactory.ts" },
        ["11388"] = { line = 46, file = "UIFactory.ts" }, ["11389"] = { line = 46, file = "UIFactory.ts" }, ["11390"] = { line = 47, file = "UIFactory.ts" },
        ["11391"] = { line = 47, file = "UIFactory.ts" }, ["11392"] = { line = 47, file = "UIFactory.ts" }, ["11393"] = { line = 48, file = "UIFactory.ts" },
        ["11394"] = { line = 48, file = "UIFactory.ts" }, ["11395"] = { line = 48, file = "UIFactory.ts" }, ["11396"] = { line = 49, file = "UIFactory.ts" },
        ["11397"] = { line = 49, file = "UIFactory.ts" }, ["11398"] = { line = 49, file = "UIFactory.ts" }, ["11399"] = { line = 50, file = "UIFactory.ts" },
        ["11400"] = { line = 50, file = "UIFactory.ts" }, ["11401"] = { line = 50, file = "UIFactory.ts" }, ["11402"] = { line = 51, file = "UIFactory.ts" },
        ["11403"] = { line = 51, file = "UIFactory.ts" }, ["11404"] = { line = 51, file = "UIFactory.ts" }, ["11405"] = { line = 52, file = "UIFactory.ts" },
        ["11406"] = { line = 52, file = "UIFactory.ts" }, ["11407"] = { line = 52, file = "UIFactory.ts" }, ["11408"] = { line = 53, file = "UIFactory.ts" },
        ["11409"] = { line = 53, file = "UIFactory.ts" }, ["11410"] = { line = 53, file = "UIFactory.ts" }, ["11411"] = { line = 54, file = "UIFactory.ts" },
        ["11412"] = { line = 54, file = "UIFactory.ts" }, ["11413"] = { line = 54, file = "UIFactory.ts" }, ["11430"] = { line = 12, file = "HUnidirectionalGrid.ts" },
        ["11431"] = { line = 16, file = "HUnidirectionalGrid.ts" }, ["11432"] = { line = 16, file = "HUnidirectionalGrid.ts" },
        ["11433"] = { line = 16, file = "HUnidirectionalGrid.ts" }, ["11434"] = { line = 19, file = "HUnidirectionalGrid.ts" },
        ["11435"] = { line = 19, file = "HUnidirectionalGrid.ts" }, ["11436"] = { line = 20, file = "HUnidirectionalGrid.ts" },
        ["11437"] = { line = 21, file = "HUnidirectionalGrid.ts" }, ["11438"] = { line = 18, file = "HUnidirectionalGrid.ts" },
        ["11439"] = { line = 24, file = "HUnidirectionalGrid.ts" }, ["11440"] = { line = 25, file = "HUnidirectionalGrid.ts" },
        ["11441"] = { line = 25, file = "HUnidirectionalGrid.ts" }, ["11442"] = { line = 25, file = "HUnidirectionalGrid.ts" },
        ["11443"] = { line = 25, file = "HUnidirectionalGrid.ts" }, ["11444"] = { line = 25, file = "HUnidirectionalGrid.ts" },
        ["11445"] = { line = 27, file = "HUnidirectionalGrid.ts" }, ["11446"] = { line = 28, file = "HUnidirectionalGrid.ts" },
        ["11447"] = { line = 29, file = "HUnidirectionalGrid.ts" }, ["11448"] = { line = 30, file = "HUnidirectionalGrid.ts" },
        ["11449"] = { line = 29, file = "HUnidirectionalGrid.ts" }, ["11450"] = { line = 31, file = "HUnidirectionalGrid.ts" },
        ["11451"] = { line = 33, file = "HUnidirectionalGrid.ts" }, ["11452"] = { line = 33, file = "HUnidirectionalGrid.ts" },
        ["11453"] = { line = 33, file = "HUnidirectionalGrid.ts" }, ["11454"] = { line = 34, file = "HUnidirectionalGrid.ts" },
        ["11455"] = { line = 35, file = "HUnidirectionalGrid.ts" }, ["11456"] = { line = 35, file = "HUnidirectionalGrid.ts" },
        ["11457"] = { line = 35, file = "HUnidirectionalGrid.ts" }, ["11458"] = { line = 37, file = "HUnidirectionalGrid.ts" },
        ["11459"] = { line = 40, file = "HUnidirectionalGrid.ts" }, ["11460"] = { line = 41, file = "HUnidirectionalGrid.ts" },
        ["11461"] = { line = 52, file = "HUnidirectionalGrid.ts" }, ["11462"] = { line = 53, file = "HUnidirectionalGrid.ts" },
        ["11464"] = { line = 40, file = "HUnidirectionalGrid.ts" }, ["11465"] = { line = 29, file = "HUnidirectionalGrid.ts" },
        ["11466"] = { line = 29, file = "HUnidirectionalGrid.ts" }, ["11467"] = { line = 57, file = "HUnidirectionalGrid.ts" },
        ["11468"] = { line = 57, file = "HUnidirectionalGrid.ts" }, ["11469"] = { line = 57, file = "HUnidirectionalGrid.ts" },
        ["11470"] = { line = 59, file = "HUnidirectionalGrid.ts" }, ["11471"] = { line = 24, file = "HUnidirectionalGrid.ts" },
        ["11472"] = { line = 64, file = "HUnidirectionalGrid.ts" }, ["11473"] = { line = 65, file = "HUnidirectionalGrid.ts" },
        ["11474"] = { line = 64, file = "HUnidirectionalGrid.ts" }, ["11484"] = { line = 1, file = "HVerticalGrid.ts" },
        ["11485"] = { line = 1, file = "HVerticalGrid.ts" }, ["11486"] = { line = 8, file = "HVerticalGrid.ts" },
        ["11487"] = { line = 8, file = "HVerticalGrid.ts" }, ["11488"] = { line = 8, file = "HVerticalGrid.ts" },
        ["11489"] = { line = 10, file = "HVerticalGrid.ts" }, ["11490"] = { line = 10, file = "HVerticalGrid.ts" },
        ["11491"] = { line = 11, file = "HVerticalGrid.ts" }, ["11492"] = { line = 9, file = "HVerticalGrid.ts" },
        ["11493"] = { line = 14, file = "HVerticalGrid.ts" }, ["11494"] = { line = 15, file = "HVerticalGrid.ts" },
        ["11495"] = { line = 16, file = "HVerticalGrid.ts" }, ["11496"] = { line = 16, file = "HVerticalGrid.ts" },
        ["11497"] = { line = 16, file = "HVerticalGrid.ts" }, ["11498"] = { line = 19, file = "HVerticalGrid.ts" },
        ["11499"] = { line = 16, file = "HVerticalGrid.ts" }, ["11500"] = { line = 14, file = "HVerticalGrid.ts" },
        ["11509"] = { line = 1, file = "CustomDialog.ts" }, ["11510"] = { line = 1, file = "CustomDialog.ts" }, ["11511"] = { line = 1, file = "CustomDialog.ts" },
        ["11512"] = { line = 5, file = "CustomDialog.ts" }, ["11513"] = { line = 5, file = "CustomDialog.ts" }, ["11514"] = { line = 8, file = "CustomDialog.ts" },
        ["11515"] = { line = 8, file = "CustomDialog.ts" }, ["11516"] = { line = 10, file = "CustomDialog.ts" },
        ["11517"] = { line = 10, file = "CustomDialog.ts" }, ["11518"] = { line = 10, file = "CustomDialog.ts" },
        ["11519"] = { line = 15, file = "CustomDialog.ts" }, ["11520"] = { line = 15, file = "CustomDialog.ts" },
        ["11521"] = { line = 26, file = "CustomDialog.ts" }, ["11522"] = { line = 26, file = "CustomDialog.ts" },
        ["11523"] = { line = 26, file = "CustomDialog.ts" }, ["11524"] = { line = 26, file = "CustomDialog.ts" },
        ["11525"] = { line = 27, file = "CustomDialog.ts" }, ["11526"] = { line = 28, file = "CustomDialog.ts" },
        ["11527"] = { line = 15, file = "CustomDialog.ts" }, ["11528"] = { line = 31, file = "CustomDialog.ts" },
        ["11529"] = { line = 32, file = "CustomDialog.ts" }, ["11530"] = { line = 31, file = "CustomDialog.ts" },
        ["11531"] = { line = 35, file = "CustomDialog.ts" }, ["11532"] = { line = 36, file = "CustomDialog.ts" },
        ["11533"] = { line = 36, file = "CustomDialog.ts" }, ["11534"] = { line = 37, file = "CustomDialog.ts" },
        ["11535"] = { line = 40, file = "CustomDialog.ts" }, ["11536"] = { line = 42, file = "CustomDialog.ts" },
        ["11537"] = { line = 44, file = "CustomDialog.ts" }, ["11538"] = { line = 45, file = "CustomDialog.ts" },
        ["11539"] = { line = 49, file = "CustomDialog.ts" }, ["11540"] = { line = 52, file = "CustomDialog.ts" },
        ["11541"] = { line = 54, file = "CustomDialog.ts" }, ["11542"] = { line = 55, file = "CustomDialog.ts" },
        ["11543"] = { line = 53, file = "CustomDialog.ts" }, ["11544"] = { line = 59, file = "CustomDialog.ts" },
        ["11546"] = { line = 61, file = "CustomDialog.ts" }, ["11547"] = { line = 62, file = "CustomDialog.ts" },
        ["11550"] = { line = 67, file = "CustomDialog.ts" }, ["11551"] = { line = 35, file = "CustomDialog.ts" },
        ["11552"] = { line = 78, file = "CustomDialog.ts" }, ["11553"] = { line = 79, file = "CustomDialog.ts" },
        ["11554"] = { line = 80, file = "CustomDialog.ts" }, ["11555"] = { line = 83, file = "CustomDialog.ts" },
        ["11556"] = { line = 84, file = "CustomDialog.ts" }, ["11557"] = { line = 85, file = "CustomDialog.ts" },
        ["11558"] = { line = 85, file = "CustomDialog.ts" }, ["11559"] = { line = 85, file = "CustomDialog.ts" },
        ["11560"] = { line = 85, file = "CustomDialog.ts" }, ["11561"] = { line = 86, file = "CustomDialog.ts" },
        ["11562"] = { line = 87, file = "CustomDialog.ts" }, ["11563"] = { line = 88, file = "CustomDialog.ts" },
        ["11564"] = { line = 89, file = "CustomDialog.ts" }, ["11565"] = { line = 90, file = "CustomDialog.ts" },
        ["11566"] = { line = 91, file = "CustomDialog.ts" }, ["11567"] = { line = 92, file = "CustomDialog.ts" },
        ["11568"] = { line = 93, file = "CustomDialog.ts" }, ["11569"] = { line = 94, file = "CustomDialog.ts" },
        ["11570"] = { line = 85, file = "CustomDialog.ts" }, ["11571"] = { line = 85, file = "CustomDialog.ts" },
        ["11572"] = { line = 98, file = "CustomDialog.ts" }, ["11573"] = { line = 99, file = "CustomDialog.ts" },
        ["11574"] = { line = 105, file = "CustomDialog.ts" }, ["11575"] = { line = 106, file = "CustomDialog.ts" },
        ["11576"] = { line = 108, file = "CustomDialog.ts" }, ["11577"] = { line = 109, file = "CustomDialog.ts" },
        ["11578"] = { line = 118, file = "CustomDialog.ts" }, ["11579"] = { line = 119, file = "CustomDialog.ts" },
        ["11580"] = { line = 120, file = "CustomDialog.ts" }, ["11581"] = { line = 142, file = "CustomDialog.ts" },
        ["11582"] = { line = 78, file = "CustomDialog.ts" }, ["11591"] = { line = 1, file = "ModalDialog.ts" }, ["11592"] = { line = 1, file = "ModalDialog.ts" },
        ["11593"] = { line = 1, file = "ModalDialog.ts" }, ["11594"] = { line = 6, file = "ModalDialog.ts" }, ["11595"] = { line = 6, file = "ModalDialog.ts" },
        ["11596"] = { line = 15, file = "ModalDialog.ts" }, ["11597"] = { line = 15, file = "ModalDialog.ts" }, ["11598"] = { line = 15, file = "ModalDialog.ts" },
        ["11599"] = { line = 23, file = "ModalDialog.ts" }, ["11600"] = { line = 23, file = "ModalDialog.ts" }, ["11601"] = { line = 29, file = "ModalDialog.ts" },
        ["11602"] = { line = 29, file = "ModalDialog.ts" }, ["11603"] = { line = 29, file = "ModalDialog.ts" }, ["11604"] = { line = 29, file = "ModalDialog.ts" },
        ["11605"] = { line = 30, file = "ModalDialog.ts" }, ["11606"] = { line = 31, file = "ModalDialog.ts" }, ["11607"] = { line = 23, file = "ModalDialog.ts" },
        ["11608"] = { line = 34, file = "ModalDialog.ts" }, ["11609"] = { line = 35, file = "ModalDialog.ts" }, ["11610"] = { line = 34, file = "ModalDialog.ts" },
        ["11611"] = { line = 38, file = "ModalDialog.ts" }, ["11612"] = { line = 39, file = "ModalDialog.ts" }, ["11613"] = { line = 40, file = "ModalDialog.ts" },
        ["11614"] = { line = 41, file = "ModalDialog.ts" }, ["11616"] = { line = 38, file = "ModalDialog.ts" }, ["11617"] = { line = 45, file = "ModalDialog.ts" },
        ["11618"] = { line = 47, file = "ModalDialog.ts" }, ["11619"] = { line = 47, file = "ModalDialog.ts" }, ["11620"] = { line = 48, file = "ModalDialog.ts" },
        ["11621"] = { line = 48, file = "ModalDialog.ts" }, ["11622"] = { line = 52, file = "ModalDialog.ts" }, ["11623"] = { line = 54, file = "ModalDialog.ts" },
        ["11624"] = { line = 55, file = "ModalDialog.ts" }, ["11625"] = { line = 56, file = "ModalDialog.ts" }, ["11626"] = { line = 57, file = "ModalDialog.ts" },
        ["11628"] = { line = 60, file = "ModalDialog.ts" }, ["11629"] = { line = 72, file = "ModalDialog.ts" }, ["11630"] = { line = 73, file = "ModalDialog.ts" },
        ["11632"] = { line = 77, file = "ModalDialog.ts" }, ["11633"] = { line = 78, file = "ModalDialog.ts" }, ["11634"] = { line = 45, file = "ModalDialog.ts" },
        ["11635"] = { line = 82, file = "ModalDialog.ts" }, ["11636"] = { line = 83, file = "ModalDialog.ts" }, ["11637"] = { line = 83, file = "ModalDialog.ts" },
        ["11638"] = { line = 83, file = "ModalDialog.ts" }, ["11639"] = { line = 83, file = "ModalDialog.ts" }, ["11640"] = { line = 83, file = "ModalDialog.ts" },
        ["11641"] = { line = 84, file = "ModalDialog.ts" }, ["11642"] = { line = 85, file = "ModalDialog.ts" }, ["11643"] = { line = 86, file = "ModalDialog.ts" },
        ["11644"] = { line = 87, file = "ModalDialog.ts" }, ["11645"] = { line = 89, file = "ModalDialog.ts" }, ["11646"] = { line = 90, file = "ModalDialog.ts" },
        ["11647"] = { line = 91, file = "ModalDialog.ts" }, ["11648"] = { line = 92, file = "ModalDialog.ts" }, ["11649"] = { line = 93, file = "ModalDialog.ts" },
        ["11650"] = { line = 91, file = "ModalDialog.ts" }, ["11651"] = { line = 95, file = "ModalDialog.ts" }, ["11652"] = { line = 96, file = "ModalDialog.ts" },
        ["11653"] = { line = 97, file = "ModalDialog.ts" }, ["11654"] = { line = 98, file = "ModalDialog.ts" }, ["11655"] = { line = 109, file = "ModalDialog.ts" },
        ["11656"] = { line = 110, file = "ModalDialog.ts" }, ["11657"] = { line = 116, file = "ModalDialog.ts" },
        ["11658"] = { line = 117, file = "ModalDialog.ts" }, ["11659"] = { line = 119, file = "ModalDialog.ts" },
        ["11660"] = { line = 120, file = "ModalDialog.ts" }, ["11661"] = { line = 121, file = "ModalDialog.ts" },
        ["11662"] = { line = 122, file = "ModalDialog.ts" }, ["11663"] = { line = 123, file = "ModalDialog.ts" },
        ["11664"] = { line = 124, file = "ModalDialog.ts" }, ["11665"] = { line = 125, file = "ModalDialog.ts" },
        ["11666"] = { line = 126, file = "ModalDialog.ts" }, ["11667"] = { line = 120, file = "ModalDialog.ts" },
        ["11668"] = { line = 130, file = "ModalDialog.ts" }, ["11669"] = { line = 131, file = "ModalDialog.ts" },
        ["11670"] = { line = 132, file = "ModalDialog.ts" }, ["11671"] = { line = 135, file = "ModalDialog.ts" },
        ["11672"] = { line = 82, file = "ModalDialog.ts" }, ["11680"] = { line = 1, file = "index.ts" }, ["11688"] = { line = 2, file = "index.ts" },
        ["11696"] = { line = 3, file = "index.ts" }, ["11704"] = { line = 4, file = "index.ts" }, ["11712"] = { line = 5, file = "index.ts" },
        ["11720"] = { line = 6, file = "index.ts" }, ["11728"] = { line = 7, file = "index.ts" }, ["11736"] = { line = 8, file = "index.ts" },
        ["11744"] = { line = 9, file = "index.ts" }, ["11752"] = { line = 10, file = "index.ts" }, ["11760"] = { line = 11, file = "index.ts" },
        ["11768"] = { line = 13, file = "index.ts" }, ["11776"] = { line = 14, file = "index.ts" }, ["11790"] = { line = 6, file = "UserDialogBase.ts" },
        ["11791"] = { line = 6, file = "UserDialogBase.ts" }, ["11792"] = { line = 6, file = "UserDialogBase.ts" },
        ["11793"] = { line = 12, file = "UserDialogBase.ts" }, ["11794"] = { line = 12, file = "UserDialogBase.ts" },
        ["11795"] = { line = 12, file = "UserDialogBase.ts" }, ["11796"] = { line = 13, file = "UserDialogBase.ts" },
        ["11797"] = { line = 14, file = "UserDialogBase.ts" }, ["11798"] = { line = 15, file = "UserDialogBase.ts" },
        ["11799"] = { line = 12, file = "UserDialogBase.ts" }, ["11800"] = { line = 23, file = "UserDialogBase.ts" },
        ["11801"] = { line = 24, file = "UserDialogBase.ts" }, ["11802"] = { line = 25, file = "UserDialogBase.ts" },
        ["11803"] = { line = 23, file = "UserDialogBase.ts" }, ["11804"] = { line = 28, file = "UserDialogBase.ts" },
        ["11805"] = { line = 29, file = "UserDialogBase.ts" }, ["11806"] = { line = 30, file = "UserDialogBase.ts" },
        ["11808"] = { line = 28, file = "UserDialogBase.ts" }, ["11822"] = { line = 2, file = "ActionDialogV2.ts" },
        ["11823"] = { line = 2, file = "ActionDialogV2.ts" }, ["11824"] = { line = 3, file = "ActionDialogV2.ts" },
        ["11825"] = { line = 3, file = "ActionDialogV2.ts" }, ["11826"] = { line = 5, file = "ActionDialogV2.ts" },
        ["11827"] = { line = 5, file = "ActionDialogV2.ts" }, ["11828"] = { line = 6, file = "ActionDialogV2.ts" },
        ["11829"] = { line = 6, file = "ActionDialogV2.ts" }, ["11830"] = { line = 18, file = "ActionDialogV2.ts" },
        ["11831"] = { line = 18, file = "ActionDialogV2.ts" }, ["11832"] = { line = 18, file = "ActionDialogV2.ts" },
        ["11833"] = { line = 18, file = "ActionDialogV2.ts" }, ["11834"] = { line = 20, file = "ActionDialogV2.ts" },
        ["11835"] = { line = 21, file = "ActionDialogV2.ts" }, ["11836"] = { line = 22, file = "ActionDialogV2.ts" },
        ["11837"] = { line = 22, file = "ActionDialogV2.ts" }, ["11838"] = { line = 22, file = "ActionDialogV2.ts" },
        ["11839"] = { line = 22, file = "ActionDialogV2.ts" }, ["11840"] = { line = 22, file = "ActionDialogV2.ts" },
        ["11841"] = { line = 18, file = "ActionDialogV2.ts" }, ["11842"] = { line = 19, file = "ActionDialogV2.ts" },
        ["11843"] = { line = 30, file = "ActionDialogV2.ts" }, ["11844"] = { line = 37, file = "ActionDialogV2.ts" },
        ["11845"] = { line = 32, file = "ActionDialogV2.ts" }, ["11846"] = { line = 33, file = "ActionDialogV2.ts" },
        ["11847"] = { line = 34, file = "ActionDialogV2.ts" }, ["11848"] = { line = 35, file = "ActionDialogV2.ts" },
        ["11849"] = { line = 36, file = "ActionDialogV2.ts" }, ["11850"] = { line = 42, file = "ActionDialogV2.ts" },
        ["11851"] = { line = 40, file = "ActionDialogV2.ts" }, ["11852"] = { line = 41, file = "ActionDialogV2.ts" },
        ["11853"] = { line = 42, file = "ActionDialogV2.ts" }, ["11854"] = { line = 44, file = "ActionDialogV2.ts" },
        ["11855"] = { line = 45, file = "ActionDialogV2.ts" }, ["11856"] = { line = 46, file = "ActionDialogV2.ts" },
        ["11857"] = { line = 47, file = "ActionDialogV2.ts" }, ["11858"] = { line = 52, file = "ActionDialogV2.ts" },
        ["11859"] = { line = 46, file = "ActionDialogV2.ts" }, ["11860"] = { line = 54, file = "ActionDialogV2.ts" },
        ["11861"] = { line = 55, file = "ActionDialogV2.ts" }, ["11862"] = { line = 57, file = "ActionDialogV2.ts" },
        ["11863"] = { line = 58, file = "ActionDialogV2.ts" }, ["11864"] = { line = 60, file = "ActionDialogV2.ts" },
        ["11865"] = { line = 61, file = "ActionDialogV2.ts" }, ["11866"] = { line = 56, file = "ActionDialogV2.ts" },
        ["11867"] = { line = 64, file = "ActionDialogV2.ts" }, ["11868"] = { line = 54, file = "ActionDialogV2.ts" },
        ["11869"] = { line = 67, file = "ActionDialogV2.ts" }, ["11870"] = { line = 68, file = "ActionDialogV2.ts" },
        ["11871"] = { line = 68, file = "ActionDialogV2.ts" }, ["11872"] = { line = 68, file = "ActionDialogV2.ts" },
        ["11873"] = { line = 68, file = "ActionDialogV2.ts" }, ["11875"] = { line = 68, file = "ActionDialogV2.ts" },
        ["11879"] = { line = 68, file = "ActionDialogV2.ts" }, ["11881"] = { line = 69, file = "ActionDialogV2.ts" },
        ["11882"] = { line = 66, file = "ActionDialogV2.ts" }, ["11883"] = { line = 71, file = "ActionDialogV2.ts" },
        ["11884"] = { line = 30, file = "ActionDialogV2.ts" }, ["11891"] = { line = 2, file = "AlertDialog.ts" },
        ["11892"] = { line = 2, file = "AlertDialog.ts" }, ["11893"] = { line = 9, file = "AlertDialog.ts" }, ["11894"] = { line = 10, file = "AlertDialog.ts" },
        ["11895"] = { line = 10, file = "AlertDialog.ts" }, ["11896"] = { line = 10, file = "AlertDialog.ts" }, ["11897"] = { line = 12, file = "AlertDialog.ts" },
        ["11898"] = { line = 13, file = "AlertDialog.ts" }, ["11899"] = { line = 13, file = "AlertDialog.ts" }, ["11900"] = { line = 13, file = "AlertDialog.ts" },
        ["11901"] = { line = 14, file = "AlertDialog.ts" }, ["11902"] = { line = 15, file = "AlertDialog.ts" }, ["11903"] = { line = 16, file = "AlertDialog.ts" },
        ["11904"] = { line = 17, file = "AlertDialog.ts" }, ["11905"] = { line = 18, file = "AlertDialog.ts" }, ["11906"] = { line = 19, file = "AlertDialog.ts" },
        ["11907"] = { line = 20, file = "AlertDialog.ts" }, ["11908"] = { line = 19, file = "AlertDialog.ts" }, ["11909"] = { line = 17, file = "AlertDialog.ts" },
        ["11910"] = { line = 13, file = "AlertDialog.ts" }, ["11911"] = { line = 13, file = "AlertDialog.ts" }, ["11912"] = { line = 25, file = "AlertDialog.ts" },
        ["11913"] = { line = 12, file = "AlertDialog.ts" }, ["11914"] = { line = 28, file = "AlertDialog.ts" }, ["11915"] = { line = 9, file = "AlertDialog.ts" },
        ["11924"] = { line = 2, file = "AlertDialogV2.ts" }, ["11925"] = { line = 2, file = "AlertDialogV2.ts" },
        ["11926"] = { line = 3, file = "AlertDialogV2.ts" }, ["11927"] = { line = 3, file = "AlertDialogV2.ts" },
        ["11928"] = { line = 17, file = "AlertDialogV2.ts" }, ["11929"] = { line = 17, file = "AlertDialogV2.ts" },
        ["11930"] = { line = 17, file = "AlertDialogV2.ts" }, ["11931"] = { line = 17, file = "AlertDialogV2.ts" },
        ["11932"] = { line = 19, file = "AlertDialogV2.ts" }, ["11933"] = { line = 20, file = "AlertDialogV2.ts" },
        ["11934"] = { line = 21, file = "AlertDialogV2.ts" }, ["11935"] = { line = 21, file = "AlertDialogV2.ts" },
        ["11936"] = { line = 21, file = "AlertDialogV2.ts" }, ["11937"] = { line = 21, file = "AlertDialogV2.ts" },
        ["11938"] = { line = 21, file = "AlertDialogV2.ts" }, ["11939"] = { line = 21, file = "AlertDialogV2.ts" },
        ["11940"] = { line = 21, file = "AlertDialogV2.ts" }, ["11941"] = { line = 21, file = "AlertDialogV2.ts" },
        ["11942"] = { line = 21, file = "AlertDialogV2.ts" }, ["11943"] = { line = 17, file = "AlertDialogV2.ts" },
        ["11944"] = { line = 18, file = "AlertDialogV2.ts" }, ["11945"] = { line = 29, file = "AlertDialogV2.ts" },
        ["11946"] = { line = 30, file = "AlertDialogV2.ts" }, ["11947"] = { line = 30, file = "AlertDialogV2.ts" },
        ["11948"] = { line = 30, file = "AlertDialogV2.ts" }, ["11949"] = { line = 30, file = "AlertDialogV2.ts" },
        ["11950"] = { line = 30, file = "AlertDialogV2.ts" }, ["11951"] = { line = 30, file = "AlertDialogV2.ts" },
        ["11952"] = { line = 30, file = "AlertDialogV2.ts" }, ["11953"] = { line = 30, file = "AlertDialogV2.ts" },
        ["11954"] = { line = 30, file = "AlertDialogV2.ts" }, ["11955"] = { line = 31, file = "AlertDialogV2.ts" },
        ["11956"] = { line = 33, file = "AlertDialogV2.ts" }, ["11957"] = { line = 34, file = "AlertDialogV2.ts" },
        ["11958"] = { line = 41, file = "AlertDialogV2.ts" }, ["11959"] = { line = 33, file = "AlertDialogV2.ts" },
        ["11960"] = { line = 43, file = "AlertDialogV2.ts" }, ["11961"] = { line = 44, file = "AlertDialogV2.ts" },
        ["11962"] = { line = 45, file = "AlertDialogV2.ts" }, ["11963"] = { line = 46, file = "AlertDialogV2.ts" },
        ["11964"] = { line = 47, file = "AlertDialogV2.ts" }, ["11965"] = { line = 49, file = "AlertDialogV2.ts" },
        ["11966"] = { line = 48, file = "AlertDialogV2.ts" }, ["11967"] = { line = 44, file = "AlertDialogV2.ts" },
        ["11968"] = { line = 52, file = "AlertDialogV2.ts" }, ["11969"] = { line = 43, file = "AlertDialogV2.ts" },
        ["11970"] = { line = 32, file = "AlertDialogV2.ts" }, ["11971"] = { line = 29, file = "AlertDialogV2.ts" },
        ["11978"] = { line = 2, file = "ConfirmDialog.ts" }, ["11979"] = { line = 2, file = "ConfirmDialog.ts" },
        ["11980"] = { line = 11, file = "ConfirmDialog.ts" }, ["11981"] = { line = 12, file = "ConfirmDialog.ts" },
        ["11982"] = { line = 12, file = "ConfirmDialog.ts" }, ["11983"] = { line = 12, file = "ConfirmDialog.ts" },
        ["11984"] = { line = 12, file = "ConfirmDialog.ts" }, ["11985"] = { line = 12, file = "ConfirmDialog.ts" },
        ["11986"] = { line = 14, file = "ConfirmDialog.ts" }, ["11987"] = { line = 15, file = "ConfirmDialog.ts" },
        ["11988"] = { line = 15, file = "ConfirmDialog.ts" }, ["11989"] = { line = 15, file = "ConfirmDialog.ts" },
        ["11990"] = { line = 16, file = "ConfirmDialog.ts" }, ["11991"] = { line = 17, file = "ConfirmDialog.ts" },
        ["11992"] = { line = 18, file = "ConfirmDialog.ts" }, ["11993"] = { line = 19, file = "ConfirmDialog.ts" },
        ["11994"] = { line = 19, file = "ConfirmDialog.ts" }, ["11995"] = { line = 20, file = "ConfirmDialog.ts" },
        ["11996"] = { line = 21, file = "ConfirmDialog.ts" }, ["11997"] = { line = 22, file = "ConfirmDialog.ts" },
        ["11998"] = { line = 21, file = "ConfirmDialog.ts" }, ["11999"] = { line = 19, file = "ConfirmDialog.ts" },
        ["12000"] = { line = 25, file = "ConfirmDialog.ts" }, ["12001"] = { line = 26, file = "ConfirmDialog.ts" },
        ["12002"] = { line = 27, file = "ConfirmDialog.ts" }, ["12003"] = { line = 28, file = "ConfirmDialog.ts" },
        ["12004"] = { line = 29, file = "ConfirmDialog.ts" }, ["12005"] = { line = 28, file = "ConfirmDialog.ts" },
        ["12006"] = { line = 25, file = "ConfirmDialog.ts" }, ["12007"] = { line = 19, file = "ConfirmDialog.ts" },
        ["12008"] = { line = 15, file = "ConfirmDialog.ts" }, ["12009"] = { line = 15, file = "ConfirmDialog.ts" },
        ["12010"] = { line = 35, file = "ConfirmDialog.ts" }, ["12011"] = { line = 14, file = "ConfirmDialog.ts" },
        ["12012"] = { line = 38, file = "ConfirmDialog.ts" }, ["12013"] = { line = 11, file = "ConfirmDialog.ts" },
        ["12028"] = { line = 2, file = "FormDialog.ts" }, ["12029"] = { line = 2, file = "FormDialog.ts" }, ["12030"] = { line = 3, file = "FormDialog.ts" },
        ["12031"] = { line = 3, file = "FormDialog.ts" }, ["12032"] = { line = 3, file = "FormDialog.ts" }, ["12033"] = { line = 4, file = "FormDialog.ts" },
        ["12034"] = { line = 4, file = "FormDialog.ts" }, ["12035"] = { line = 24, file = "FormDialog.ts" }, ["12036"] = { line = 24, file = "FormDialog.ts" },
        ["12037"] = { line = 24, file = "FormDialog.ts" }, ["12038"] = { line = 24, file = "FormDialog.ts" }, ["12039"] = { line = 27, file = "FormDialog.ts" },
        ["12040"] = { line = 28, file = "FormDialog.ts" }, ["12041"] = { line = 30, file = "FormDialog.ts" }, ["12042"] = { line = 30, file = "FormDialog.ts" },
        ["12043"] = { line = 30, file = "FormDialog.ts" }, ["12044"] = { line = 30, file = "FormDialog.ts" }, ["12045"] = { line = 24, file = "FormDialog.ts" },
        ["12046"] = { line = 26, file = "FormDialog.ts" }, ["12047"] = { line = 38, file = "FormDialog.ts" }, ["12048"] = { line = 50, file = "FormDialog.ts" },
        ["12049"] = { line = 40, file = "FormDialog.ts" }, ["12050"] = { line = 41, file = "FormDialog.ts" }, ["12051"] = { line = 42, file = "FormDialog.ts" },
        ["12052"] = { line = 43, file = "FormDialog.ts" }, ["12053"] = { line = 44, file = "FormDialog.ts" }, ["12054"] = { line = 45, file = "FormDialog.ts" },
        ["12055"] = { line = 46, file = "FormDialog.ts" }, ["12056"] = { line = 47, file = "FormDialog.ts" }, ["12057"] = { line = 48, file = "FormDialog.ts" },
        ["12058"] = { line = 49, file = "FormDialog.ts" }, ["12059"] = { line = 53, file = "FormDialog.ts" }, ["12060"] = { line = 54, file = "FormDialog.ts" },
        ["12061"] = { line = 54, file = "FormDialog.ts" }, ["12062"] = { line = 54, file = "FormDialog.ts" }, ["12064"] = { line = 54, file = "FormDialog.ts" },
        ["12066"] = { line = 54, file = "FormDialog.ts" }, ["12067"] = { line = 55, file = "FormDialog.ts" }, ["12068"] = { line = 55, file = "FormDialog.ts" },
        ["12069"] = { line = 55, file = "FormDialog.ts" }, ["12071"] = { line = 56, file = "FormDialog.ts" }, ["12072"] = { line = 58, file = "FormDialog.ts" },
        ["12073"] = { line = 59, file = "FormDialog.ts" }, ["12074"] = { line = 60, file = "FormDialog.ts" }, ["12075"] = { line = 60, file = "FormDialog.ts" },
        ["12076"] = { line = 60, file = "FormDialog.ts" }, ["12078"] = { line = 60, file = "FormDialog.ts" }, ["12080"] = { line = 56, file = "FormDialog.ts" },
        ["12081"] = { line = 58, file = "FormDialog.ts" }, ["12082"] = { line = 59, file = "FormDialog.ts" }, ["12083"] = { line = 60, file = "FormDialog.ts" },
        ["12084"] = { line = 62, file = "FormDialog.ts" }, ["12085"] = { line = 63, file = "FormDialog.ts" }, ["12086"] = { line = 57, file = "FormDialog.ts" },
        ["12088"] = { line = 55, file = "FormDialog.ts" }, ["12089"] = { line = 68, file = "FormDialog.ts" }, ["12090"] = { line = 69, file = "FormDialog.ts" },
        ["12091"] = { line = 70, file = "FormDialog.ts" }, ["12092"] = { line = 71, file = "FormDialog.ts" }, ["12093"] = { line = 72, file = "FormDialog.ts" },
        ["12094"] = { line = 73, file = "FormDialog.ts" }, ["12095"] = { line = 74, file = "FormDialog.ts" }, ["12096"] = { line = 75, file = "FormDialog.ts" },
        ["12097"] = { line = 76, file = "FormDialog.ts" }, ["12098"] = { line = 77, file = "FormDialog.ts" }, ["12099"] = { line = 78, file = "FormDialog.ts" },
        ["12100"] = { line = 79, file = "FormDialog.ts" }, ["12101"] = { line = 80, file = "FormDialog.ts" }, ["12102"] = { line = 81, file = "FormDialog.ts" },
        ["12103"] = { line = 83, file = "FormDialog.ts" }, ["12104"] = { line = 84, file = "FormDialog.ts" }, ["12105"] = { line = 85, file = "FormDialog.ts" },
        ["12108"] = { line = 89, file = "FormDialog.ts" }, ["12109"] = { line = 90, file = "FormDialog.ts" }, ["12111"] = { line = 92, file = "FormDialog.ts" },
        ["12112"] = { line = 92, file = "FormDialog.ts" }, ["12113"] = { line = 92, file = "FormDialog.ts" }, ["12114"] = { line = 92, file = "FormDialog.ts" },
        ["12115"] = { line = 92, file = "FormDialog.ts" }, ["12116"] = { line = 92, file = "FormDialog.ts" }, ["12117"] = { line = 92, file = "FormDialog.ts" },
        ["12118"] = { line = 92, file = "FormDialog.ts" }, ["12120"] = { line = 77, file = "FormDialog.ts" }, ["12121"] = { line = 75, file = "FormDialog.ts" },
        ["12122"] = { line = 96, file = "FormDialog.ts" }, ["12123"] = { line = 97, file = "FormDialog.ts" }, ["12124"] = { line = 98, file = "FormDialog.ts" },
        ["12125"] = { line = 99, file = "FormDialog.ts" }, ["12126"] = { line = 98, file = "FormDialog.ts" }, ["12127"] = { line = 96, file = "FormDialog.ts" },
        ["12128"] = { line = 74, file = "FormDialog.ts" }, ["12129"] = { line = 70, file = "FormDialog.ts" }, ["12130"] = { line = 104, file = "FormDialog.ts" },
        ["12131"] = { line = 69, file = "FormDialog.ts" }, ["12132"] = { line = 107, file = "FormDialog.ts" }, ["12133"] = { line = 109, file = "FormDialog.ts" },
        ["12136"] = { line = 110, file = "FormDialog.ts" }, ["12137"] = { line = 111, file = "FormDialog.ts" }, ["12138"] = { line = 112, file = "FormDialog.ts" },
        ["12139"] = { line = 113, file = "FormDialog.ts" }, ["12140"] = { line = 114, file = "FormDialog.ts" }, ["12141"] = { line = 115, file = "FormDialog.ts" },
        ["12142"] = { line = 116, file = "FormDialog.ts" }, ["12143"] = { line = 116, file = "FormDialog.ts" }, ["12144"] = { line = 116, file = "FormDialog.ts" },
        ["12145"] = { line = 117, file = "FormDialog.ts" }, ["12146"] = { line = 118, file = "FormDialog.ts" }, ["12147"] = { line = 119, file = "FormDialog.ts" },
        ["12148"] = { line = 118, file = "FormDialog.ts" }, ["12150"] = { line = 122, file = "FormDialog.ts" }, ["12151"] = { line = 116, file = "FormDialog.ts" },
        ["12152"] = { line = 116, file = "FormDialog.ts" }, ["12153"] = { line = 111, file = "FormDialog.ts" }, ["12154"] = { line = 125, file = "FormDialog.ts" },
        ["12155"] = { line = 110, file = "FormDialog.ts" }, ["12156"] = { line = 128, file = "FormDialog.ts" }, ["12158"] = { line = 107, file = "FormDialog.ts" },
        ["12159"] = { line = 107, file = "FormDialog.ts" }, ["12160"] = { line = 107, file = "FormDialog.ts" }, ["12161"] = { line = 107, file = "FormDialog.ts" },
        ["12162"] = { line = 38, file = "FormDialog.ts" }, ["12169"] = { line = 1, file = "InputFieldDialog.ts" },
        ["12170"] = { line = 1, file = "InputFieldDialog.ts" }, ["12171"] = { line = 13, file = "InputFieldDialog.ts" },
        ["12172"] = { line = 15, file = "InputFieldDialog.ts" }, ["12173"] = { line = 15, file = "InputFieldDialog.ts" },
        ["12174"] = { line = 15, file = "InputFieldDialog.ts" }, ["12175"] = { line = 15, file = "InputFieldDialog.ts" },
        ["12176"] = { line = 15, file = "InputFieldDialog.ts" }, ["12177"] = { line = 15, file = "InputFieldDialog.ts" },
        ["12178"] = { line = 15, file = "InputFieldDialog.ts" }, ["12179"] = { line = 17, file = "InputFieldDialog.ts" },
        ["12180"] = { line = 18, file = "InputFieldDialog.ts" }, ["12181"] = { line = 18, file = "InputFieldDialog.ts" },
        ["12182"] = { line = 18, file = "InputFieldDialog.ts" }, ["12183"] = { line = 19, file = "InputFieldDialog.ts" },
        ["12184"] = { line = 20, file = "InputFieldDialog.ts" }, ["12185"] = { line = 21, file = "InputFieldDialog.ts" },
        ["12186"] = { line = 21, file = "InputFieldDialog.ts" }, ["12187"] = { line = 22, file = "InputFieldDialog.ts" },
        ["12188"] = { line = 23, file = "InputFieldDialog.ts" }, ["12189"] = { line = 24, file = "InputFieldDialog.ts" },
        ["12190"] = { line = 25, file = "InputFieldDialog.ts" }, ["12191"] = { line = 23, file = "InputFieldDialog.ts" },
        ["12192"] = { line = 21, file = "InputFieldDialog.ts" }, ["12193"] = { line = 28, file = "InputFieldDialog.ts" },
        ["12194"] = { line = 29, file = "InputFieldDialog.ts" }, ["12195"] = { line = 30, file = "InputFieldDialog.ts" },
        ["12196"] = { line = 31, file = "InputFieldDialog.ts" }, ["12197"] = { line = 32, file = "InputFieldDialog.ts" },
        ["12198"] = { line = 31, file = "InputFieldDialog.ts" }, ["12199"] = { line = 28, file = "InputFieldDialog.ts" },
        ["12200"] = { line = 21, file = "InputFieldDialog.ts" }, ["12201"] = { line = 35, file = "InputFieldDialog.ts" },
        ["12202"] = { line = 37, file = "InputFieldDialog.ts" }, ["12203"] = { line = 38, file = "InputFieldDialog.ts" },
        ["12204"] = { line = 39, file = "InputFieldDialog.ts" }, ["12205"] = { line = 40, file = "InputFieldDialog.ts" },
        ["12206"] = { line = 41, file = "InputFieldDialog.ts" }, ["12207"] = { line = 36, file = "InputFieldDialog.ts" },
        ["12208"] = { line = 18, file = "InputFieldDialog.ts" }, ["12209"] = { line = 18, file = "InputFieldDialog.ts" },
        ["12210"] = { line = 46, file = "InputFieldDialog.ts" }, ["12211"] = { line = 17, file = "InputFieldDialog.ts" },
        ["12212"] = { line = 49, file = "InputFieldDialog.ts" }, ["12213"] = { line = 13, file = "InputFieldDialog.ts" },
        ["12221"] = { line = 2, file = "MultiActionDialog.ts" }, ["12222"] = { line = 2, file = "MultiActionDialog.ts" },
        ["12223"] = { line = 10, file = "MultiActionDialog.ts" }, ["12224"] = { line = 11, file = "MultiActionDialog.ts" },
        ["12225"] = { line = 11, file = "MultiActionDialog.ts" }, ["12226"] = { line = 11, file = "MultiActionDialog.ts" },
        ["12227"] = { line = 11, file = "MultiActionDialog.ts" }, ["12228"] = { line = 13, file = "MultiActionDialog.ts" },
        ["12229"] = { line = 14, file = "MultiActionDialog.ts" }, ["12230"] = { line = 14, file = "MultiActionDialog.ts" },
        ["12231"] = { line = 14, file = "MultiActionDialog.ts" }, ["12232"] = { line = 15, file = "MultiActionDialog.ts" },
        ["12233"] = { line = 16, file = "MultiActionDialog.ts" }, ["12234"] = { line = 17, file = "MultiActionDialog.ts" },
        ["12235"] = { line = 18, file = "MultiActionDialog.ts" }, ["12236"] = { line = 18, file = "MultiActionDialog.ts" },
        ["12237"] = { line = 18, file = "MultiActionDialog.ts" }, ["12238"] = { line = 19, file = "MultiActionDialog.ts" },
        ["12239"] = { line = 20, file = "MultiActionDialog.ts" }, ["12240"] = { line = 21, file = "MultiActionDialog.ts" },
        ["12241"] = { line = 19, file = "MultiActionDialog.ts" }, ["12242"] = { line = 18, file = "MultiActionDialog.ts" },
        ["12243"] = { line = 18, file = "MultiActionDialog.ts" }, ["12244"] = { line = 14, file = "MultiActionDialog.ts" },
        ["12245"] = { line = 14, file = "MultiActionDialog.ts" }, ["12246"] = { line = 27, file = "MultiActionDialog.ts" },
        ["12247"] = { line = 13, file = "MultiActionDialog.ts" }, ["12248"] = { line = 30, file = "MultiActionDialog.ts" },
        ["12249"] = { line = 10, file = "MultiActionDialog.ts" }, ["12260"] = { line = 5, file = "SimpleInstanceDialog.ts" },
        ["12261"] = { line = 5, file = "SimpleInstanceDialog.ts" }, ["12262"] = { line = 10, file = "SimpleInstanceDialog.ts" },
        ["12263"] = { line = 16, file = "SimpleInstanceDialog.ts" }, ["12264"] = { line = 16, file = "SimpleInstanceDialog.ts" },
        ["12265"] = { line = 17, file = "SimpleInstanceDialog.ts" }, ["12266"] = { line = 19, file = "SimpleInstanceDialog.ts" },
        ["12267"] = { line = 21, file = "SimpleInstanceDialog.ts" }, ["12268"] = { line = 24, file = "SimpleInstanceDialog.ts" },
        ["12269"] = { line = 25, file = "SimpleInstanceDialog.ts" }, ["12270"] = { line = 26, file = "SimpleInstanceDialog.ts" },
        ["12271"] = { line = 27, file = "SimpleInstanceDialog.ts" }, ["12272"] = { line = 27, file = "SimpleInstanceDialog.ts" },
        ["12273"] = { line = 27, file = "SimpleInstanceDialog.ts" }, ["12274"] = { line = 27, file = "SimpleInstanceDialog.ts" },
        ["12275"] = { line = 26, file = "SimpleInstanceDialog.ts" }, ["12276"] = { line = 24, file = "SimpleInstanceDialog.ts" },
        ["12279"] = { line = 30, file = "SimpleInstanceDialog.ts" }, ["12280"] = { line = 31, file = "SimpleInstanceDialog.ts" },
        ["12281"] = { line = 32, file = "SimpleInstanceDialog.ts" }, ["12282"] = { line = 33, file = "SimpleInstanceDialog.ts" },
        ["12283"] = { line = 33, file = "SimpleInstanceDialog.ts" }, ["12284"] = { line = 33, file = "SimpleInstanceDialog.ts" },
        ["12285"] = { line = 34, file = "SimpleInstanceDialog.ts" }, ["12286"] = { line = 33, file = "SimpleInstanceDialog.ts" },
        ["12287"] = { line = 33, file = "SimpleInstanceDialog.ts" }, ["12288"] = { line = 36, file = "SimpleInstanceDialog.ts" },
        ["12289"] = { line = 32, file = "SimpleInstanceDialog.ts" }, ["12290"] = { line = 30, file = "SimpleInstanceDialog.ts" },
        ["12292"] = { line = 16, file = "SimpleInstanceDialog.ts" }, ["12293"] = { line = 16, file = "SimpleInstanceDialog.ts" },
        ["12294"] = { line = 16, file = "SimpleInstanceDialog.ts" }, ["12295"] = { line = 16, file = "SimpleInstanceDialog.ts" },
        ["12296"] = { line = 17, file = "SimpleInstanceDialog.ts" }, ["12297"] = { line = 18, file = "SimpleInstanceDialog.ts" },
        ["12298"] = { line = 19, file = "SimpleInstanceDialog.ts" }, ["12299"] = { line = 20, file = "SimpleInstanceDialog.ts" },
        ["12300"] = { line = 21, file = "SimpleInstanceDialog.ts" }, ["12301"] = { line = 22, file = "SimpleInstanceDialog.ts" },
        ["12302"] = { line = 23, file = "SimpleInstanceDialog.ts" }, ["12303"] = { line = 20, file = "SimpleInstanceDialog.ts" },
        ["12304"] = { line = 16, file = "SimpleInstanceDialog.ts" }, ["12305"] = { line = 16, file = "SimpleInstanceDialog.ts" },
        ["12306"] = { line = 10, file = "SimpleInstanceDialog.ts" }, ["12315"] = { line = 2, file = "UninstallDialogV2.ts" },
        ["12316"] = { line = 2, file = "UninstallDialogV2.ts" }, ["12317"] = { line = 4, file = "UninstallDialogV2.ts" },
        ["12318"] = { line = 4, file = "UninstallDialogV2.ts" }, ["12319"] = { line = 5, file = "UninstallDialogV2.ts" },
        ["12320"] = { line = 5, file = "UninstallDialogV2.ts" }, ["12321"] = { line = 8, file = "UninstallDialogV2.ts" },
        ["12322"] = { line = 52, file = "UninstallDialogV2.ts" }, ["12323"] = { line = 52, file = "UninstallDialogV2.ts" },
        ["12324"] = { line = 53, file = "UninstallDialogV2.ts" }, ["12325"] = { line = 53, file = "UninstallDialogV2.ts" },
        ["12326"] = { line = 53, file = "UninstallDialogV2.ts" }, ["12327"] = { line = 54, file = "UninstallDialogV2.ts" },
        ["12328"] = { line = 54, file = "UninstallDialogV2.ts" }, ["12329"] = { line = 54, file = "UninstallDialogV2.ts" },
        ["12330"] = { line = 56, file = "UninstallDialogV2.ts" }, ["12331"] = { line = 58, file = "UninstallDialogV2.ts" },
        ["12332"] = { line = 63, file = "UninstallDialogV2.ts" }, ["12333"] = { line = 63, file = "UninstallDialogV2.ts" },
        ["12334"] = { line = 65, file = "UninstallDialogV2.ts" }, ["12335"] = { line = 63, file = "UninstallDialogV2.ts" },
        ["12336"] = { line = 68, file = "UninstallDialogV2.ts" }, ["12337"] = { line = 63, file = "UninstallDialogV2.ts" },
        ["12338"] = { line = 54, file = "UninstallDialogV2.ts" }, ["12339"] = { line = 54, file = "UninstallDialogV2.ts" },
        ["12341"] = { line = 10, file = "UninstallDialogV2.ts" }, ["12342"] = { line = 10, file = "UninstallDialogV2.ts" },
        ["12343"] = { line = 10, file = "UninstallDialogV2.ts" }, ["12344"] = { line = 11, file = "UninstallDialogV2.ts" },
        ["12345"] = { line = 11, file = "UninstallDialogV2.ts" }, ["12346"] = { line = 11, file = "UninstallDialogV2.ts" },
        ["12347"] = { line = 11, file = "UninstallDialogV2.ts" }, ["12348"] = { line = 12, file = "UninstallDialogV2.ts" },
        ["12349"] = { line = 13, file = "UninstallDialogV2.ts" }, ["12350"] = { line = 14, file = "UninstallDialogV2.ts" },
        ["12351"] = { line = 15, file = "UninstallDialogV2.ts" }, ["12352"] = { line = 17, file = "UninstallDialogV2.ts" },
        ["12353"] = { line = 18, file = "UninstallDialogV2.ts" }, ["12354"] = { line = 19, file = "UninstallDialogV2.ts" },
        ["12355"] = { line = 20, file = "UninstallDialogV2.ts" }, ["12356"] = { line = 21, file = "UninstallDialogV2.ts" },
        ["12357"] = { line = 22, file = "UninstallDialogV2.ts" }, ["12358"] = { line = 23, file = "UninstallDialogV2.ts" },
        ["12359"] = { line = 24, file = "UninstallDialogV2.ts" }, ["12360"] = { line = 25, file = "UninstallDialogV2.ts" },
        ["12361"] = { line = 26, file = "UninstallDialogV2.ts" }, ["12362"] = { line = 27, file = "UninstallDialogV2.ts" },
        ["12363"] = { line = 28, file = "UninstallDialogV2.ts" }, ["12364"] = { line = 28, file = "UninstallDialogV2.ts" },
        ["12365"] = { line = 28, file = "UninstallDialogV2.ts" }, ["12366"] = { line = 29, file = "UninstallDialogV2.ts" },
        ["12367"] = { line = 30, file = "UninstallDialogV2.ts" }, ["12368"] = { line = 31, file = "UninstallDialogV2.ts" },
        ["12369"] = { line = 32, file = "UninstallDialogV2.ts" }, ["12370"] = { line = 33, file = "UninstallDialogV2.ts" },
        ["12371"] = { line = 34, file = "UninstallDialogV2.ts" }, ["12372"] = { line = 35, file = "UninstallDialogV2.ts" },
        ["12373"] = { line = 34, file = "UninstallDialogV2.ts" }, ["12374"] = { line = 28, file = "UninstallDialogV2.ts" },
        ["12375"] = { line = 28, file = "UninstallDialogV2.ts" }, ["12376"] = { line = 25, file = "UninstallDialogV2.ts" },
        ["12377"] = { line = 23, file = "UninstallDialogV2.ts" }, ["12378"] = { line = 21, file = "UninstallDialogV2.ts" },
        ["12379"] = { line = 41, file = "UninstallDialogV2.ts" }, ["12380"] = { line = 42, file = "UninstallDialogV2.ts" },
        ["12381"] = { line = 43, file = "UninstallDialogV2.ts" }, ["12382"] = { line = 44, file = "UninstallDialogV2.ts" },
        ["12383"] = { line = 43, file = "UninstallDialogV2.ts" }, ["12384"] = { line = 41, file = "UninstallDialogV2.ts" },
        ["12385"] = { line = 20, file = "UninstallDialogV2.ts" }, ["12386"] = { line = 17, file = "UninstallDialogV2.ts" },
        ["12387"] = { line = 11, file = "UninstallDialogV2.ts" }, ["12388"] = { line = 11, file = "UninstallDialogV2.ts" },
        ["12389"] = { line = 8, file = "UninstallDialogV2.ts" }, ["12397"] = { line = 2, file = "ViewButtonInputDialog.ts" },
        ["12398"] = { line = 2, file = "ViewButtonInputDialog.ts" }, ["12399"] = { line = 3, file = "ViewButtonInputDialog.ts" },
        ["12400"] = { line = 3, file = "ViewButtonInputDialog.ts" }, ["12401"] = { line = 4, file = "ViewButtonInputDialog.ts" },
        ["12402"] = { line = 4, file = "ViewButtonInputDialog.ts" }, ["12403"] = { line = 5, file = "ViewButtonInputDialog.ts" },
        ["12404"] = { line = 5, file = "ViewButtonInputDialog.ts" }, ["12405"] = { line = 12, file = "ViewButtonInputDialog.ts" },
        ["12406"] = { line = 20, file = "ViewButtonInputDialog.ts" }, ["12407"] = { line = 21, file = "ViewButtonInputDialog.ts" },
        ["12408"] = { line = 21, file = "ViewButtonInputDialog.ts" }, ["12409"] = { line = 21, file = "ViewButtonInputDialog.ts" },
        ["12410"] = { line = 21, file = "ViewButtonInputDialog.ts" }, ["12411"] = { line = 21, file = "ViewButtonInputDialog.ts" },
        ["12412"] = { line = 22, file = "ViewButtonInputDialog.ts" }, ["12413"] = { line = 23, file = "ViewButtonInputDialog.ts" },
        ["12414"] = { line = 24, file = "ViewButtonInputDialog.ts" }, ["12415"] = { line = 25, file = "ViewButtonInputDialog.ts" },
        ["12416"] = { line = 25, file = "ViewButtonInputDialog.ts" }, ["12417"] = { line = 25, file = "ViewButtonInputDialog.ts" },
        ["12418"] = { line = 25, file = "ViewButtonInputDialog.ts" }, ["12419"] = { line = 26, file = "ViewButtonInputDialog.ts" },
        ["12420"] = { line = 27, file = "ViewButtonInputDialog.ts" }, ["12421"] = { line = 28, file = "ViewButtonInputDialog.ts" },
        ["12422"] = { line = 29, file = "ViewButtonInputDialog.ts" }, ["12423"] = { line = 30, file = "ViewButtonInputDialog.ts" },
        ["12424"] = { line = 31, file = "ViewButtonInputDialog.ts" }, ["12425"] = { line = 32, file = "ViewButtonInputDialog.ts" },
        ["12426"] = { line = 33, file = "ViewButtonInputDialog.ts" }, ["12427"] = { line = 34, file = "ViewButtonInputDialog.ts" },
        ["12428"] = { line = 38, file = "ViewButtonInputDialog.ts" }, ["12429"] = { line = 39, file = "ViewButtonInputDialog.ts" },
        ["12430"] = { line = 40, file = "ViewButtonInputDialog.ts" }, ["12431"] = { line = 41, file = "ViewButtonInputDialog.ts" },
        ["12432"] = { line = 41, file = "ViewButtonInputDialog.ts" }, ["12433"] = { line = 41, file = "ViewButtonInputDialog.ts" },
        ["12434"] = { line = 42, file = "ViewButtonInputDialog.ts" }, ["12435"] = { line = 43, file = "ViewButtonInputDialog.ts" },
        ["12436"] = { line = 44, file = "ViewButtonInputDialog.ts" }, ["12437"] = { line = 45, file = "ViewButtonInputDialog.ts" },
        ["12438"] = { line = 46, file = "ViewButtonInputDialog.ts" }, ["12439"] = { line = 46, file = "ViewButtonInputDialog.ts" },
        ["12440"] = { line = 46, file = "ViewButtonInputDialog.ts" }, ["12442"] = { line = 46, file = "ViewButtonInputDialog.ts" },
        ["12443"] = { line = 44, file = "ViewButtonInputDialog.ts" }, ["12444"] = { line = 41, file = "ViewButtonInputDialog.ts" },
        ["12445"] = { line = 41, file = "ViewButtonInputDialog.ts" }, ["12446"] = { line = 39, file = "ViewButtonInputDialog.ts" },
        ["12448"] = { line = 51, file = "ViewButtonInputDialog.ts" }, ["12449"] = { line = 52, file = "ViewButtonInputDialog.ts" },
        ["12450"] = { line = 52, file = "ViewButtonInputDialog.ts" }, ["12451"] = { line = 52, file = "ViewButtonInputDialog.ts" },
        ["12453"] = { line = 52, file = "ViewButtonInputDialog.ts" }, ["12455"] = { line = 33, file = "ViewButtonInputDialog.ts" },
        ["12456"] = { line = 31, file = "ViewButtonInputDialog.ts" }, ["12457"] = { line = 56, file = "ViewButtonInputDialog.ts" },
        ["12458"] = { line = 57, file = "ViewButtonInputDialog.ts" }, ["12459"] = { line = 58, file = "ViewButtonInputDialog.ts" },
        ["12460"] = { line = 59, file = "ViewButtonInputDialog.ts" }, ["12461"] = { line = 56, file = "ViewButtonInputDialog.ts" },
        ["12462"] = { line = 30, file = "ViewButtonInputDialog.ts" }, ["12463"] = { line = 62, file = "ViewButtonInputDialog.ts" },
        ["12464"] = { line = 63, file = "ViewButtonInputDialog.ts" }, ["12465"] = { line = 63, file = "ViewButtonInputDialog.ts" },
        ["12466"] = { line = 63, file = "ViewButtonInputDialog.ts" }, ["12467"] = { line = 63, file = "ViewButtonInputDialog.ts" },
        ["12468"] = { line = 63, file = "ViewButtonInputDialog.ts" }, ["12469"] = { line = 63, file = "ViewButtonInputDialog.ts" },
        ["12470"] = { line = 64, file = "ViewButtonInputDialog.ts" }, ["12471"] = { line = 64, file = "ViewButtonInputDialog.ts" },
        ["12472"] = { line = 64, file = "ViewButtonInputDialog.ts" }, ["12473"] = { line = 64, file = "ViewButtonInputDialog.ts" },
        ["12474"] = { line = 64, file = "ViewButtonInputDialog.ts" }, ["12475"] = { line = 64, file = "ViewButtonInputDialog.ts" },
        ["12476"] = { line = 62, file = "ViewButtonInputDialog.ts" }, ["12477"] = { line = 26, file = "ViewButtonInputDialog.ts" },
        ["12478"] = { line = 67, file = "ViewButtonInputDialog.ts" }, ["12479"] = { line = 20, file = "ViewButtonInputDialog.ts" },
        ["12480"] = { line = 70, file = "ViewButtonInputDialog.ts" }, ["12481"] = { line = 12, file = "ViewButtonInputDialog.ts" },
        ["12489"] = { line = 1, file = "index.ts" }, ["12490"] = { line = 1, file = "index.ts" }, ["12491"] = { line = 1, file = "index.ts" },
        ["12494"] = { line = 2, file = "index.ts" }, ["12495"] = { line = 2, file = "index.ts" }, ["12496"] = { line = 2, file = "index.ts" },
        ["12499"] = { line = 3, file = "index.ts" }, ["12500"] = { line = 3, file = "index.ts" }, ["12501"] = { line = 3, file = "index.ts" },
        ["12504"] = { line = 4, file = "index.ts" }, ["12505"] = { line = 4, file = "index.ts" }, ["12506"] = { line = 4, file = "index.ts" },
        ["12509"] = { line = 5, file = "index.ts" }, ["12510"] = { line = 5, file = "index.ts" }, ["12511"] = { line = 5, file = "index.ts" },
        ["12514"] = { line = 7, file = "index.ts" }, ["12515"] = { line = 7, file = "index.ts" }, ["12516"] = { line = 7, file = "index.ts" },
        ["12519"] = { line = 8, file = "index.ts" }, ["12520"] = { line = 8, file = "index.ts" }, ["12521"] = { line = 8, file = "index.ts" },
        ["12524"] = { line = 10, file = "index.ts" }, ["12525"] = { line = 10, file = "index.ts" }, ["12526"] = { line = 10, file = "index.ts" },
        ["12529"] = { line = 12, file = "index.ts" }, ["12530"] = { line = 12, file = "index.ts" }, ["12531"] = { line = 12, file = "index.ts" },
        ["12534"] = { line = 13, file = "index.ts" }, ["12535"] = { line = 13, file = "index.ts" }, ["12536"] = { line = 13, file = "index.ts" },
        ["12539"] = { line = 14, file = "index.ts" }, ["12540"] = { line = 14, file = "index.ts" }, ["12541"] = { line = 14, file = "index.ts" },
        ["12554"] = { line = 1, file = "PluginInstaller.ts" }, ["12555"] = { line = 1, file = "PluginInstaller.ts" },
        ["12556"] = { line = 4, file = "PluginInstaller.ts" }, ["12557"] = { line = 4, file = "PluginInstaller.ts" },
        ["12558"] = { line = 6, file = "PluginInstaller.ts" }, ["12559"] = { line = 6, file = "PluginInstaller.ts" },
        ["12560"] = { line = 6, file = "PluginInstaller.ts" }, ["12561"] = { line = 7, file = "PluginInstaller.ts" },
        ["12562"] = { line = 7, file = "PluginInstaller.ts" }, ["12563"] = { line = 8, file = "PluginInstaller.ts" },
        ["12564"] = { line = 8, file = "PluginInstaller.ts" }, ["12565"] = { line = 9, file = "PluginInstaller.ts" },
        ["12566"] = { line = 9, file = "PluginInstaller.ts" }, ["12567"] = { line = 10, file = "PluginInstaller.ts" },
        ["12568"] = { line = 10, file = "PluginInstaller.ts" }, ["12569"] = { line = 12, file = "PluginInstaller.ts" },
        ["12570"] = { line = 12, file = "PluginInstaller.ts" }, ["12571"] = { line = 12, file = "PluginInstaller.ts" },
        ["12572"] = { line = 13, file = "PluginInstaller.ts" }, ["12573"] = { line = 13, file = "PluginInstaller.ts" },
        ["12574"] = { line = 16, file = "PluginInstaller.ts" }, ["12575"] = { line = 16, file = "PluginInstaller.ts" },
        ["12576"] = { line = 17, file = "PluginInstaller.ts" }, ["12577"] = { line = 17, file = "PluginInstaller.ts" },
        ["12578"] = { line = 20, file = "PluginInstaller.ts" }, ["12579"] = { line = 20, file = "PluginInstaller.ts" },
        ["12580"] = { line = 23, file = "PluginInstaller.ts" }, ["12581"] = { line = 25, file = "PluginInstaller.ts" },
        ["12582"] = { line = 25, file = "PluginInstaller.ts" }, ["12583"] = { line = 25, file = "PluginInstaller.ts" },
        ["12584"] = { line = 29, file = "PluginInstaller.ts" }, ["12585"] = { line = 29, file = "PluginInstaller.ts" },
        ["12586"] = { line = 48, file = "PluginInstaller.ts" }, ["12587"] = { line = 48, file = "PluginInstaller.ts" },
        ["12588"] = { line = 48, file = "PluginInstaller.ts" }, ["12589"] = { line = 48, file = "PluginInstaller.ts" },
        ["12590"] = { line = 48, file = "PluginInstaller.ts" }, ["12591"] = { line = 49, file = "PluginInstaller.ts" },
        ["12592"] = { line = 50, file = "PluginInstaller.ts" }, ["12593"] = { line = 51, file = "PluginInstaller.ts" },
        ["12594"] = { line = 52, file = "PluginInstaller.ts" }, ["12595"] = { line = 29, file = "PluginInstaller.ts" },
        ["12596"] = { line = 56, file = "PluginInstaller.ts" }, ["12597"] = { line = 57, file = "PluginInstaller.ts" },
        ["12598"] = { line = 56, file = "PluginInstaller.ts" }, ["12599"] = { line = 60, file = "PluginInstaller.ts" },
        ["12600"] = { line = 61, file = "PluginInstaller.ts" }, ["12601"] = { line = 60, file = "PluginInstaller.ts" },
        ["12602"] = { line = 64, file = "PluginInstaller.ts" }, ["12603"] = { line = 66, file = "PluginInstaller.ts" },
        ["12604"] = { line = 67, file = "PluginInstaller.ts" }, ["12605"] = { line = 68, file = "PluginInstaller.ts" },
        ["12607"] = { line = 70, file = "PluginInstaller.ts" }, ["12608"] = { line = 71, file = "PluginInstaller.ts" },
        ["12609"] = { line = 75, file = "PluginInstaller.ts" }, ["12610"] = { line = 83, file = "PluginInstaller.ts" },
        ["12611"] = { line = 83, file = "PluginInstaller.ts" }, ["12612"] = { line = 83, file = "PluginInstaller.ts" },
        ["12613"] = { line = 83, file = "PluginInstaller.ts" }, ["12614"] = { line = 83, file = "PluginInstaller.ts" },
        ["12615"] = { line = 83, file = "PluginInstaller.ts" }, ["12616"] = { line = 83, file = "PluginInstaller.ts" },
        ["12617"] = { line = 83, file = "PluginInstaller.ts" }, ["12618"] = { line = 86, file = "PluginInstaller.ts" },
        ["12619"] = { line = 90, file = "PluginInstaller.ts" }, ["12620"] = { line = 90, file = "PluginInstaller.ts" },
        ["12621"] = { line = 90, file = "PluginInstaller.ts" }, ["12622"] = { line = 90, file = "PluginInstaller.ts" },
        ["12623"] = { line = 90, file = "PluginInstaller.ts" }, ["12624"] = { line = 91, file = "PluginInstaller.ts" },
        ["12625"] = { line = 92, file = "PluginInstaller.ts" }, ["12626"] = { line = 93, file = "PluginInstaller.ts" },
        ["12627"] = { line = 94, file = "PluginInstaller.ts" }, ["12628"] = { line = 97, file = "PluginInstaller.ts" },
        ["12629"] = { line = 98, file = "PluginInstaller.ts" }, ["12630"] = { line = 99, file = "PluginInstaller.ts" },
        ["12631"] = { line = 100, file = "PluginInstaller.ts" }, ["12632"] = { line = 101, file = "PluginInstaller.ts" },
        ["12635"] = { line = 110, file = "PluginInstaller.ts" }, ["12636"] = { line = 111, file = "PluginInstaller.ts" },
        ["12637"] = { line = 111, file = "PluginInstaller.ts" }, ["12638"] = { line = 111, file = "PluginInstaller.ts" },
        ["12639"] = { line = 111, file = "PluginInstaller.ts" }, ["12640"] = { line = 114, file = "PluginInstaller.ts" },
        ["12641"] = { line = 115, file = "PluginInstaller.ts" }, ["12642"] = { line = 116, file = "PluginInstaller.ts" },
        ["12643"] = { line = 117, file = "PluginInstaller.ts" }, ["12644"] = { line = 118, file = "PluginInstaller.ts" },
        ["12645"] = { line = 119, file = "PluginInstaller.ts" }, ["12646"] = { line = 120, file = "PluginInstaller.ts" },
        ["12648"] = { line = 118, file = "PluginInstaller.ts" }, ["12649"] = { line = 115, file = "PluginInstaller.ts" },
        ["12650"] = { line = 128, file = "PluginInstaller.ts" }, ["12651"] = { line = 128, file = "PluginInstaller.ts" },
        ["12652"] = { line = 128, file = "PluginInstaller.ts" }, ["12653"] = { line = 128, file = "PluginInstaller.ts" },
        ["12654"] = { line = 128, file = "PluginInstaller.ts" }, ["12655"] = { line = 128, file = "PluginInstaller.ts" },
        ["12656"] = { line = 128, file = "PluginInstaller.ts" }, ["12657"] = { line = 128, file = "PluginInstaller.ts" },
        ["12658"] = { line = 128, file = "PluginInstaller.ts" }, ["12659"] = { line = 128, file = "PluginInstaller.ts" },
        ["12660"] = { line = 129, file = "PluginInstaller.ts" }, ["12661"] = { line = 130, file = "PluginInstaller.ts" },
        ["12662"] = { line = 131, file = "PluginInstaller.ts" }, ["12663"] = { line = 131, file = "PluginInstaller.ts" },
        ["12664"] = { line = 131, file = "PluginInstaller.ts" }, ["12665"] = { line = 132, file = "PluginInstaller.ts" },
        ["12666"] = { line = 133, file = "PluginInstaller.ts" }, ["12667"] = { line = 134, file = "PluginInstaller.ts" },
        ["12668"] = { line = 135, file = "PluginInstaller.ts" }, ["12669"] = { line = 136, file = "PluginInstaller.ts" },
        ["12670"] = { line = 137, file = "PluginInstaller.ts" }, ["12671"] = { line = 131, file = "PluginInstaller.ts" },
        ["12672"] = { line = 131, file = "PluginInstaller.ts" }, ["12673"] = { line = 139, file = "PluginInstaller.ts" },
        ["12675"] = { line = 143, file = "PluginInstaller.ts" }, ["12676"] = { line = 145, file = "PluginInstaller.ts" },
        ["12677"] = { line = 146, file = "PluginInstaller.ts" }, ["12678"] = { line = 64, file = "PluginInstaller.ts" },
        ["12679"] = { line = 149, file = "PluginInstaller.ts" }, ["12680"] = { line = 150, file = "PluginInstaller.ts" },
        ["12681"] = { line = 150, file = "PluginInstaller.ts" }, ["12682"] = { line = 151, file = "PluginInstaller.ts" },
        ["12683"] = { line = 151, file = "PluginInstaller.ts" }, ["12684"] = { line = 151, file = "PluginInstaller.ts" },
        ["12685"] = { line = 151, file = "PluginInstaller.ts" }, ["12686"] = { line = 151, file = "PluginInstaller.ts" },
        ["12687"] = { line = 151, file = "PluginInstaller.ts" }, ["12688"] = { line = 151, file = "PluginInstaller.ts" },
        ["12689"] = { line = 151, file = "PluginInstaller.ts" }, ["12690"] = { line = 153, file = "PluginInstaller.ts" },
        ["12691"] = { line = 154, file = "PluginInstaller.ts" }, ["12692"] = { line = 156, file = "PluginInstaller.ts" },
        ["12693"] = { line = 156, file = "PluginInstaller.ts" }, ["12694"] = { line = 156, file = "PluginInstaller.ts" },
        ["12695"] = { line = 156, file = "PluginInstaller.ts" }, ["12696"] = { line = 157, file = "PluginInstaller.ts" },
        ["12697"] = { line = 158, file = "PluginInstaller.ts" }, ["12698"] = { line = 156, file = "PluginInstaller.ts" },
        ["12699"] = { line = 156, file = "PluginInstaller.ts" }, ["12700"] = { line = 159, file = "PluginInstaller.ts" },
        ["12701"] = { line = 160, file = "PluginInstaller.ts" }, ["12702"] = { line = 161, file = "PluginInstaller.ts" },
        ["12703"] = { line = 162, file = "PluginInstaller.ts" }, ["12704"] = { line = 159, file = "PluginInstaller.ts" },
        ["12705"] = { line = 156, file = "PluginInstaller.ts" }, ["12706"] = { line = 166, file = "PluginInstaller.ts" },
        ["12707"] = { line = 167, file = "PluginInstaller.ts" }, ["12708"] = { line = 168, file = "PluginInstaller.ts" },
        ["12710"] = { line = 149, file = "PluginInstaller.ts" }, ["12711"] = { line = 172, file = "PluginInstaller.ts" },
        ["12712"] = { line = 173, file = "PluginInstaller.ts" }, ["12713"] = { line = 175, file = "PluginInstaller.ts" },
        ["12714"] = { line = 176, file = "PluginInstaller.ts" }, ["12716"] = { line = 178, file = "PluginInstaller.ts" },
        ["12717"] = { line = 179, file = "PluginInstaller.ts" }, ["12718"] = { line = 180, file = "PluginInstaller.ts" },
        ["12719"] = { line = 181, file = "PluginInstaller.ts" }, ["12720"] = { line = 182, file = "PluginInstaller.ts" },
        ["12721"] = { line = 183, file = "PluginInstaller.ts" }, ["12722"] = { line = 184, file = "PluginInstaller.ts" },
        ["12723"] = { line = 185, file = "PluginInstaller.ts" }, ["12724"] = { line = 182, file = "PluginInstaller.ts" },
        ["12726"] = { line = 172, file = "PluginInstaller.ts" }, ["12727"] = { line = 190, file = "PluginInstaller.ts" },
        ["12728"] = { line = 191, file = "PluginInstaller.ts" }, ["12729"] = { line = 193, file = "PluginInstaller.ts" },
        ["12730"] = { line = 195, file = "PluginInstaller.ts" }, ["12731"] = { line = 196, file = "PluginInstaller.ts" },
        ["12732"] = { line = 197, file = "PluginInstaller.ts" }, ["12733"] = { line = 198, file = "PluginInstaller.ts" },
        ["12734"] = { line = 199, file = "PluginInstaller.ts" }, ["12735"] = { line = 200, file = "PluginInstaller.ts" },
        ["12736"] = { line = 200, file = "PluginInstaller.ts" }, ["12737"] = { line = 200, file = "PluginInstaller.ts" },
        ["12738"] = { line = 200, file = "PluginInstaller.ts" }, ["12739"] = { line = 200, file = "PluginInstaller.ts" },
        ["12740"] = { line = 200, file = "PluginInstaller.ts" }, ["12741"] = { line = 201, file = "PluginInstaller.ts" },
        ["12742"] = { line = 202, file = "PluginInstaller.ts" }, ["12743"] = { line = 203, file = "PluginInstaller.ts" },
        ["12744"] = { line = 204, file = "PluginInstaller.ts" }, ["12745"] = { line = 205, file = "PluginInstaller.ts" },
        ["12746"] = { line = 206, file = "PluginInstaller.ts" }, ["12747"] = { line = 207, file = "PluginInstaller.ts" },
        ["12748"] = { line = 208, file = "PluginInstaller.ts" }, ["12749"] = { line = 209, file = "PluginInstaller.ts" },
        ["12750"] = { line = 210, file = "PluginInstaller.ts" }, ["12751"] = { line = 211, file = "PluginInstaller.ts" },
        ["12752"] = { line = 212, file = "PluginInstaller.ts" }, ["12753"] = { line = 209, file = "PluginInstaller.ts" },
        ["12754"] = { line = 207, file = "PluginInstaller.ts" }, ["12755"] = { line = 206, file = "PluginInstaller.ts" },
        ["12756"] = { line = 204, file = "PluginInstaller.ts" }, ["12757"] = { line = 217, file = "PluginInstaller.ts" },
        ["12758"] = { line = 218, file = "PluginInstaller.ts" }, ["12759"] = { line = 219, file = "PluginInstaller.ts" },
        ["12760"] = { line = 220, file = "PluginInstaller.ts" }, ["12761"] = { line = 219, file = "PluginInstaller.ts" },
        ["12762"] = { line = 217, file = "PluginInstaller.ts" }, ["12763"] = { line = 203, file = "PluginInstaller.ts" },
        ["12764"] = { line = 200, file = "PluginInstaller.ts" }, ["12765"] = { line = 200, file = "PluginInstaller.ts" },
        ["12766"] = { line = 200, file = "PluginInstaller.ts" }, ["12768"] = { line = 229, file = "PluginInstaller.ts" },
        ["12769"] = { line = 190, file = "PluginInstaller.ts" }, ["12770"] = { line = 232, file = "PluginInstaller.ts" },
        ["12771"] = { line = 233, file = "PluginInstaller.ts" }, ["12772"] = { line = 234, file = "PluginInstaller.ts" },
        ["12773"] = { line = 235, file = "PluginInstaller.ts" }, ["12776"] = { line = 238, file = "PluginInstaller.ts" },
        ["12777"] = { line = 239, file = "PluginInstaller.ts" }, ["12778"] = { line = 240, file = "PluginInstaller.ts" },
        ["12779"] = { line = 241, file = "PluginInstaller.ts" }, ["12782"] = { line = 245, file = "PluginInstaller.ts" },
        ["12783"] = { line = 246, file = "PluginInstaller.ts" }, ["12786"] = { line = 249, file = "PluginInstaller.ts" },
        ["12787"] = { line = 249, file = "PluginInstaller.ts" }, ["12788"] = { line = 250, file = "PluginInstaller.ts" },
        ["12789"] = { line = 251, file = "PluginInstaller.ts" }, ["12790"] = { line = 253, file = "PluginInstaller.ts" },
        ["12791"] = { line = 254, file = "PluginInstaller.ts" }, ["12793"] = { line = 249, file = "PluginInstaller.ts" },
        ["12796"] = { line = 232, file = "PluginInstaller.ts" }, ["12797"] = { line = 259, file = "PluginInstaller.ts" },
        ["12798"] = { line = 260, file = "PluginInstaller.ts" }, ["12799"] = { line = 262, file = "PluginInstaller.ts" },
        ["12800"] = { line = 263, file = "PluginInstaller.ts" }, ["12801"] = { line = 265, file = "PluginInstaller.ts" },
        ["12802"] = { line = 266, file = "PluginInstaller.ts" }, ["12803"] = { line = 267, file = "PluginInstaller.ts" },
        ["12806"] = { line = 269, file = "PluginInstaller.ts" }, ["12807"] = { line = 270, file = "PluginInstaller.ts" },
        ["12809"] = { line = 271, file = "PluginInstaller.ts" }, ["12810"] = { line = 272, file = "PluginInstaller.ts" },
        ["12811"] = { line = 259, file = "PluginInstaller.ts" }, ["12812"] = { line = 276, file = "PluginInstaller.ts" },
        ["12813"] = { line = 277, file = "PluginInstaller.ts" }, ["12814"] = { line = 276, file = "PluginInstaller.ts" },
        ["12815"] = { line = 284, file = "PluginInstaller.ts" }, ["12816"] = { line = 285, file = "PluginInstaller.ts" },
        ["12817"] = { line = 286, file = "PluginInstaller.ts" }, ["12818"] = { line = 286, file = "PluginInstaller.ts" },
        ["12819"] = { line = 287, file = "PluginInstaller.ts" }, ["12820"] = { line = 289, file = "PluginInstaller.ts" },
        ["12821"] = { line = 290, file = "PluginInstaller.ts" }, ["12822"] = { line = 291, file = "PluginInstaller.ts" },
        ["12823"] = { line = 292, file = "PluginInstaller.ts" }, ["12824"] = { line = 294, file = "PluginInstaller.ts" },
        ["12825"] = { line = 296, file = "PluginInstaller.ts" }, ["12826"] = { line = 297, file = "PluginInstaller.ts" },
        ["12827"] = { line = 298, file = "PluginInstaller.ts" }, ["12833"] = { line = 310, file = "PluginInstaller.ts" },
        ["12836"] = { line = 305, file = "PluginInstaller.ts" }, ["12837"] = { line = 306, file = "PluginInstaller.ts" },
        ["12838"] = { line = 307, file = "PluginInstaller.ts" }, ["12844"] = { line = 313, file = "PluginInstaller.ts" },
        ["12845"] = { line = 314, file = "PluginInstaller.ts" }, ["12846"] = { line = 314, file = "PluginInstaller.ts" },
        ["12847"] = { line = 314, file = "PluginInstaller.ts" }, ["12848"] = { line = 314, file = "PluginInstaller.ts" },
        ["12849"] = { line = 314, file = "PluginInstaller.ts" }, ["12850"] = { line = 314, file = "PluginInstaller.ts" },
        ["12851"] = { line = 315, file = "PluginInstaller.ts" }, ["12854"] = { line = 325, file = "PluginInstaller.ts" },
        ["12857"] = { line = 317, file = "PluginInstaller.ts" }, ["12858"] = { line = 318, file = "PluginInstaller.ts" },
        ["12859"] = { line = 318, file = "PluginInstaller.ts" }, ["12860"] = { line = 318, file = "PluginInstaller.ts" },
        ["12861"] = { line = 319, file = "PluginInstaller.ts" }, ["12862"] = { line = 318, file = "PluginInstaller.ts" },
        ["12863"] = { line = 318, file = "PluginInstaller.ts" }, ["12864"] = { line = 321, file = "PluginInstaller.ts" },
        ["12865"] = { line = 321, file = "PluginInstaller.ts" }, ["12866"] = { line = 321, file = "PluginInstaller.ts" },
        ["12867"] = { line = 321, file = "PluginInstaller.ts" }, ["12868"] = { line = 321, file = "PluginInstaller.ts" },
        ["12869"] = { line = 321, file = "PluginInstaller.ts" }, ["12870"] = { line = 321, file = "PluginInstaller.ts" },
        ["12871"] = { line = 322, file = "PluginInstaller.ts" }, ["12872"] = { line = 323, file = "PluginInstaller.ts" },
        ["12881"] = { line = 347, file = "PluginInstaller.ts" }, ["12884"] = { line = 331, file = "PluginInstaller.ts" },
        ["12885"] = { line = 332, file = "PluginInstaller.ts" }, ["12886"] = { line = 333, file = "PluginInstaller.ts" },
        ["12887"] = { line = 333, file = "PluginInstaller.ts" }, ["12888"] = { line = 333, file = "PluginInstaller.ts" },
        ["12889"] = { line = 334, file = "PluginInstaller.ts" }, ["12890"] = { line = 335, file = "PluginInstaller.ts" },
        ["12891"] = { line = 336, file = "PluginInstaller.ts" }, ["12892"] = { line = 337, file = "PluginInstaller.ts" },
        ["12893"] = { line = 338, file = "PluginInstaller.ts" }, ["12894"] = { line = 339, file = "PluginInstaller.ts" },
        ["12895"] = { line = 340, file = "PluginInstaller.ts" }, ["12896"] = { line = 341, file = "PluginInstaller.ts" },
        ["12897"] = { line = 342, file = "PluginInstaller.ts" }, ["12898"] = { line = 337, file = "PluginInstaller.ts" },
        ["12899"] = { line = 343, file = "PluginInstaller.ts" }, ["12900"] = { line = 333, file = "PluginInstaller.ts" },
        ["12901"] = { line = 333, file = "PluginInstaller.ts" }, ["12907"] = { line = 351, file = "PluginInstaller.ts" },
        ["12910"] = { line = 358, file = "PluginInstaller.ts" }, ["12913"] = { line = 353, file = "PluginInstaller.ts" },
        ["12914"] = { line = 353, file = "PluginInstaller.ts" }, ["12915"] = { line = 353, file = "PluginInstaller.ts" },
        ["12916"] = { line = 353, file = "PluginInstaller.ts" }, ["12917"] = { line = 353, file = "PluginInstaller.ts" },
        ["12918"] = { line = 353, file = "PluginInstaller.ts" }, ["12919"] = { line = 354, file = "PluginInstaller.ts" },
        ["12920"] = { line = 355, file = "PluginInstaller.ts" }, ["12921"] = { line = 356, file = "PluginInstaller.ts" },
        ["12930"] = { line = 368, file = "PluginInstaller.ts" }, ["12933"] = { line = 364, file = "PluginInstaller.ts" },
        ["12934"] = { line = 365, file = "PluginInstaller.ts" }, ["12935"] = { line = 366, file = "PluginInstaller.ts" },
        ["12943"] = { line = 400, file = "PluginInstaller.ts" }, ["12946"] = { line = 373, file = "PluginInstaller.ts" },
        ["12947"] = { line = 374, file = "PluginInstaller.ts" }, ["12948"] = { line = 375, file = "PluginInstaller.ts" },
        ["12949"] = { line = 376, file = "PluginInstaller.ts" }, ["12950"] = { line = 377, file = "PluginInstaller.ts" },
        ["12951"] = { line = 378, file = "PluginInstaller.ts" }, ["12952"] = { line = 379, file = "PluginInstaller.ts" },
        ["12953"] = { line = 374, file = "PluginInstaller.ts" }, ["12954"] = { line = 381, file = "PluginInstaller.ts" },
        ["12955"] = { line = 383, file = "PluginInstaller.ts" }, ["12956"] = { line = 383, file = "PluginInstaller.ts" },
        ["12957"] = { line = 383, file = "PluginInstaller.ts" }, ["12958"] = { line = 384, file = "PluginInstaller.ts" },
        ["12959"] = { line = 384, file = "PluginInstaller.ts" }, ["12960"] = { line = 384, file = "PluginInstaller.ts" },
        ["12961"] = { line = 385, file = "PluginInstaller.ts" }, ["12962"] = { line = 386, file = "PluginInstaller.ts" },
        ["12963"] = { line = 387, file = "PluginInstaller.ts" }, ["12965"] = { line = 383, file = "PluginInstaller.ts" },
        ["12966"] = { line = 383, file = "PluginInstaller.ts" }, ["12967"] = { line = 391, file = "PluginInstaller.ts" },
        ["12968"] = { line = 394, file = "PluginInstaller.ts" }, ["12969"] = { line = 395, file = "PluginInstaller.ts" },
        ["12971"] = { line = 397, file = "PluginInstaller.ts" }, ["12978"] = { line = 404, file = "PluginInstaller.ts" },
        ["12979"] = { line = 407, file = "PluginInstaller.ts" }, ["12980"] = { line = 408, file = "PluginInstaller.ts" },
        ["12981"] = { line = 409, file = "PluginInstaller.ts" }, ["12982"] = { line = 410, file = "PluginInstaller.ts" },
        ["12983"] = { line = 411, file = "PluginInstaller.ts" }, ["12987"] = { line = 419, file = "PluginInstaller.ts" },
        ["12990"] = { line = 416, file = "PluginInstaller.ts" }, ["12991"] = { line = 417, file = "PluginInstaller.ts" },
        ["12997"] = { line = 423, file = "PluginInstaller.ts" }, ["12998"] = { line = 424, file = "PluginInstaller.ts" },
        ["12999"] = { line = 284, file = "PluginInstaller.ts" }, ["13007"] = { line = 1, file = "index.ts" }, ["13021"] = { line = 2, file = "DialogStack.ts" },
        ["13022"] = { line = 2, file = "DialogStack.ts" }, ["13023"] = { line = 6, file = "DialogStack.ts" }, ["13024"] = { line = 6, file = "DialogStack.ts" },
        ["13025"] = { line = 6, file = "DialogStack.ts" }, ["13026"] = { line = 11, file = "DialogStack.ts" }, ["13027"] = { line = 8, file = "DialogStack.ts" },
        ["13028"] = { line = 12, file = "DialogStack.ts" }, ["13029"] = { line = 11, file = "DialogStack.ts" }, ["13030"] = { line = 15, file = "DialogStack.ts" },
        ["13031"] = { line = 16, file = "DialogStack.ts" }, ["13032"] = { line = 17, file = "DialogStack.ts" }, ["13033"] = { line = 18, file = "DialogStack.ts" },
        ["13034"] = { line = 15, file = "DialogStack.ts" }, ["13035"] = { line = 21, file = "DialogStack.ts" }, ["13036"] = { line = 22, file = "DialogStack.ts" },
        ["13037"] = { line = 23, file = "DialogStack.ts" }, ["13039"] = { line = 27, file = "DialogStack.ts" }, ["13040"] = { line = 28, file = "DialogStack.ts" },
        ["13041"] = { line = 31, file = "DialogStack.ts" }, ["13042"] = { line = 32, file = "DialogStack.ts" }, ["13043"] = { line = 21, file = "DialogStack.ts" },
        ["13044"] = { line = 35, file = "DialogStack.ts" }, ["13045"] = { line = 36, file = "DialogStack.ts" }, ["13046"] = { line = 37, file = "DialogStack.ts" },
        ["13048"] = { line = 39, file = "DialogStack.ts" }, ["13049"] = { line = 40, file = "DialogStack.ts" }, ["13050"] = { line = 41, file = "DialogStack.ts" },
        ["13051"] = { line = 43, file = "DialogStack.ts" }, ["13053"] = { line = 45, file = "DialogStack.ts" }, ["13054"] = { line = 46, file = "DialogStack.ts" },
        ["13056"] = { line = 35, file = "DialogStack.ts" }, ["13057"] = { line = 50, file = "DialogStack.ts" }, ["13058"] = { line = 51, file = "DialogStack.ts" },
        ["13060"] = { line = 53, file = "DialogStack.ts" }, ["13061"] = { line = 54, file = "DialogStack.ts" }, ["13064"] = { line = 55, file = "DialogStack.ts" },
        ["13065"] = { line = 56, file = "DialogStack.ts" }, ["13069"] = { line = 59, file = "DialogStack.ts" }, ["13072"] = { line = 60, file = "DialogStack.ts" },
        ["13073"] = { line = 61, file = "DialogStack.ts" }, ["13074"] = { line = 61, file = "DialogStack.ts" }, ["13079"] = { line = 65, file = "DialogStack.ts" },
        ["13082"] = { line = 66, file = "DialogStack.ts" }, ["13083"] = { line = 66, file = "DialogStack.ts" }, ["13084"] = { line = 66, file = "DialogStack.ts" },
        ["13085"] = { line = 66, file = "DialogStack.ts" }, ["13086"] = { line = 67, file = "DialogStack.ts" }, ["13087"] = { line = 66, file = "DialogStack.ts" },
        ["13088"] = { line = 66, file = "DialogStack.ts" }, ["13092"] = { line = 71, file = "DialogStack.ts" }, ["13095"] = { line = 72, file = "DialogStack.ts" },
        ["13096"] = { line = 73, file = "DialogStack.ts" }, ["13097"] = { line = 73, file = "DialogStack.ts" }, ["13101"] = { line = 76, file = "DialogStack.ts" },
        ["13108"] = { line = 50, file = "DialogStack.ts" }, ["13116"] = { line = 5, file = "PluginExternalActionRegistry.ts" },
        ["13117"] = { line = 5, file = "PluginExternalActionRegistry.ts" }, ["13118"] = { line = 5, file = "PluginExternalActionRegistry.ts" },
        ["13119"] = { line = 7, file = "PluginExternalActionRegistry.ts" }, ["13120"] = { line = 7, file = "PluginExternalActionRegistry.ts" },
        ["13121"] = { line = 6, file = "PluginExternalActionRegistry.ts" }, ["13122"] = { line = 7, file = "PluginExternalActionRegistry.ts" },
        ["13123"] = { line = 11, file = "PluginExternalActionRegistry.ts" }, ["13124"] = { line = 12, file = "PluginExternalActionRegistry.ts" },
        ["13125"] = { line = 11, file = "PluginExternalActionRegistry.ts" }, ["13126"] = { line = 15, file = "PluginExternalActionRegistry.ts" },
        ["13127"] = { line = 16, file = "PluginExternalActionRegistry.ts" }, ["13128"] = { line = 15, file = "PluginExternalActionRegistry.ts" },
        ["13137"] = { line = 1, file = "PluginStatelessComponents.ts" }, ["13138"] = { line = 1, file = "PluginStatelessComponents.ts" },
        ["13139"] = { line = 2, file = "PluginStatelessComponents.ts" }, ["13140"] = { line = 2, file = "PluginStatelessComponents.ts" },
        ["13141"] = { line = 3, file = "PluginStatelessComponents.ts" }, ["13142"] = { line = 3, file = "PluginStatelessComponents.ts" },
        ["13147"] = { line = 12, file = "PluginStatelessComponents.ts" }, ["13148"] = { line = 12, file = "PluginStatelessComponents.ts" },
        ["13149"] = { line = 12, file = "PluginStatelessComponents.ts" }, ["13150"] = { line = 15, file = "PluginStatelessComponents.ts" },
        ["13151"] = { line = 15, file = "PluginStatelessComponents.ts" }, ["13152"] = { line = 16, file = "PluginStatelessComponents.ts" },
        ["13153"] = { line = 15, file = "PluginStatelessComponents.ts" }, ["13154"] = { line = 20, file = "PluginStatelessComponents.ts" },
        ["13155"] = { line = 21, file = "PluginStatelessComponents.ts" }, ["13156"] = { line = 23, file = "PluginStatelessComponents.ts" },
        ["13157"] = { line = 24, file = "PluginStatelessComponents.ts" }, ["13158"] = { line = 24, file = "PluginStatelessComponents.ts" },
        ["13159"] = { line = 24, file = "PluginStatelessComponents.ts" }, ["13160"] = { line = 24, file = "PluginStatelessComponents.ts" },
        ["13162"] = { line = 26, file = "PluginStatelessComponents.ts" }, ["13163"] = { line = 20, file = "PluginStatelessComponents.ts" },
        ["13173"] = { line = 1, file = "PluginRuntime.ts" }, ["13174"] = { line = 1, file = "PluginRuntime.ts" },
        ["13175"] = { line = 2, file = "PluginRuntime.ts" }, ["13176"] = { line = 2, file = "PluginRuntime.ts" },
        ["13177"] = { line = 2, file = "PluginRuntime.ts" }, ["13178"] = { line = 3, file = "PluginRuntime.ts" },
        ["13179"] = { line = 3, file = "PluginRuntime.ts" }, ["13180"] = { line = 5, file = "PluginRuntime.ts" },
        ["13181"] = { line = 5, file = "PluginRuntime.ts" }, ["13182"] = { line = 7, file = "PluginRuntime.ts" },
        ["13183"] = { line = 7, file = "PluginRuntime.ts" }, ["13184"] = { line = 8, file = "PluginRuntime.ts" },
        ["13185"] = { line = 8, file = "PluginRuntime.ts" }, ["13186"] = { line = 8, file = "PluginRuntime.ts" },
        ["13187"] = { line = 9, file = "PluginRuntime.ts" }, ["13188"] = { line = 9, file = "PluginRuntime.ts" },
        ["13189"] = { line = 10, file = "PluginRuntime.ts" }, ["13190"] = { line = 10, file = "PluginRuntime.ts" },
        ["13191"] = { line = 13, file = "PluginRuntime.ts" }, ["13192"] = { line = 13, file = "PluginRuntime.ts" },
        ["13193"] = { line = 15, file = "PluginRuntime.ts" }, ["13194"] = { line = 15, file = "PluginRuntime.ts" },
        ["13201"] = { line = 26, file = "PluginRuntime.ts" }, ["13202"] = { line = 28, file = "PluginRuntime.ts" },
        ["13203"] = { line = 28, file = "PluginRuntime.ts" }, ["13204"] = { line = 28, file = "PluginRuntime.ts" },
        ["13205"] = { line = 48, file = "PluginRuntime.ts" }, ["13206"] = { line = 48, file = "PluginRuntime.ts" },
        ["13207"] = { line = 54, file = "PluginRuntime.ts" }, ["13208"] = { line = 54, file = "PluginRuntime.ts" },
        ["13209"] = { line = 54, file = "PluginRuntime.ts" }, ["13210"] = { line = 54, file = "PluginRuntime.ts" },
        ["13211"] = { line = 54, file = "PluginRuntime.ts" }, ["13212"] = { line = 55, file = "PluginRuntime.ts" },
        ["13213"] = { line = 59, file = "PluginRuntime.ts" }, ["13214"] = { line = 60, file = "PluginRuntime.ts" },
        ["13215"] = { line = 61, file = "PluginRuntime.ts" }, ["13216"] = { line = 62, file = "PluginRuntime.ts" },
        ["13217"] = { line = 63, file = "PluginRuntime.ts" }, ["13218"] = { line = 64, file = "PluginRuntime.ts" },
        ["13219"] = { line = 64, file = "PluginRuntime.ts" }, ["13220"] = { line = 64, file = "PluginRuntime.ts" },
        ["13221"] = { line = 64, file = "PluginRuntime.ts" }, ["13222"] = { line = 65, file = "PluginRuntime.ts" },
        ["13223"] = { line = 66, file = "PluginRuntime.ts" }, ["13224"] = { line = 67, file = "PluginRuntime.ts" },
        ["13225"] = { line = 68, file = "PluginRuntime.ts" }, ["13226"] = { line = 69, file = "PluginRuntime.ts" },
        ["13227"] = { line = 69, file = "PluginRuntime.ts" }, ["13228"] = { line = 69, file = "PluginRuntime.ts" },
        ["13229"] = { line = 70, file = "PluginRuntime.ts" }, ["13230"] = { line = 71, file = "PluginRuntime.ts" },
        ["13231"] = { line = 72, file = "PluginRuntime.ts" }, ["13232"] = { line = 73, file = "PluginRuntime.ts" },
        ["13233"] = { line = 69, file = "PluginRuntime.ts" }, ["13234"] = { line = 69, file = "PluginRuntime.ts" },
        ["13235"] = { line = 76, file = "PluginRuntime.ts" }, ["13236"] = { line = 77, file = "PluginRuntime.ts" },
        ["13237"] = { line = 78, file = "PluginRuntime.ts" }, ["13238"] = { line = 79, file = "PluginRuntime.ts" },
        ["13239"] = { line = 80, file = "PluginRuntime.ts" }, ["13240"] = { line = 81, file = "PluginRuntime.ts" },
        ["13241"] = { line = 84, file = "PluginRuntime.ts" }, ["13242"] = { line = 85, file = "PluginRuntime.ts" },
        ["13244"] = { line = 80, file = "PluginRuntime.ts" }, ["13245"] = { line = 88, file = "PluginRuntime.ts" },
        ["13246"] = { line = 89, file = "PluginRuntime.ts" }, ["13247"] = { line = 48, file = "PluginRuntime.ts" },
        ["13248"] = { line = 104, file = "PluginRuntime.ts" }, ["13249"] = { line = 105, file = "PluginRuntime.ts" },
        ["13250"] = { line = 104, file = "PluginRuntime.ts" }, ["13251"] = { line = 111, file = "PluginRuntime.ts" },
        ["13252"] = { line = 112, file = "PluginRuntime.ts" }, ["13253"] = { line = 111, file = "PluginRuntime.ts" },
        ["13254"] = { line = 115, file = "PluginRuntime.ts" }, ["13255"] = { line = 116, file = "PluginRuntime.ts" },
        ["13256"] = { line = 117, file = "PluginRuntime.ts" }, ["13257"] = { line = 115, file = "PluginRuntime.ts" },
        ["13258"] = { line = 120, file = "PluginRuntime.ts" }, ["13259"] = { line = 120, file = "PluginRuntime.ts" },
        ["13260"] = { line = 120, file = "PluginRuntime.ts" }, ["13261"] = { line = 121, file = "PluginRuntime.ts" },
        ["13262"] = { line = 122, file = "PluginRuntime.ts" }, ["13263"] = { line = 123, file = "PluginRuntime.ts" },
        ["13264"] = { line = 124, file = "PluginRuntime.ts" }, ["13265"] = { line = 121, file = "PluginRuntime.ts" },
        ["13266"] = { line = 126, file = "PluginRuntime.ts" }, ["13267"] = { line = 126, file = "PluginRuntime.ts" },
        ["13268"] = { line = 126, file = "PluginRuntime.ts" }, ["13269"] = { line = 128, file = "PluginRuntime.ts" },
        ["13270"] = { line = 129, file = "PluginRuntime.ts" }, ["13271"] = { line = 128, file = "PluginRuntime.ts" },
        ["13272"] = { line = 132, file = "PluginRuntime.ts" }, ["13273"] = { line = 133, file = "PluginRuntime.ts" },
        ["13274"] = { line = 134, file = "PluginRuntime.ts" }, ["13275"] = { line = 135, file = "PluginRuntime.ts" },
        ["13276"] = { line = 136, file = "PluginRuntime.ts" }, ["13278"] = { line = 138, file = "PluginRuntime.ts" },
        ["13279"] = { line = 132, file = "PluginRuntime.ts" }, ["13280"] = { line = 141, file = "PluginRuntime.ts" },
        ["13281"] = { line = 142, file = "PluginRuntime.ts" }, ["13282"] = { line = 143, file = "PluginRuntime.ts" },
        ["13283"] = { line = 144, file = "PluginRuntime.ts" }, ["13285"] = { line = 146, file = "PluginRuntime.ts" },
        ["13286"] = { line = 141, file = "PluginRuntime.ts" }, ["13287"] = { line = 149, file = "PluginRuntime.ts" },
        ["13288"] = { line = 150, file = "PluginRuntime.ts" }, ["13289"] = { line = 151, file = "PluginRuntime.ts" },
        ["13290"] = { line = 152, file = "PluginRuntime.ts" }, ["13292"] = { line = 149, file = "PluginRuntime.ts" },
        ["13293"] = { line = 156, file = "PluginRuntime.ts" }, ["13294"] = { line = 157, file = "PluginRuntime.ts" },
        ["13295"] = { line = 158, file = "PluginRuntime.ts" }, ["13296"] = { line = 158, file = "PluginRuntime.ts" },
        ["13297"] = { line = 158, file = "PluginRuntime.ts" }, ["13298"] = { line = 159, file = "PluginRuntime.ts" },
        ["13299"] = { line = 160, file = "PluginRuntime.ts" }, ["13300"] = { line = 156, file = "PluginRuntime.ts" },
        ["13301"] = { line = 163, file = "PluginRuntime.ts" }, ["13302"] = { line = 164, file = "PluginRuntime.ts" },
        ["13303"] = { line = 165, file = "PluginRuntime.ts" }, ["13304"] = { line = 166, file = "PluginRuntime.ts" },
        ["13306"] = { line = 168, file = "PluginRuntime.ts" }, ["13307"] = { line = 169, file = "PluginRuntime.ts" },
        ["13308"] = { line = 170, file = "PluginRuntime.ts" }, ["13309"] = { line = 171, file = "PluginRuntime.ts" },
        ["13310"] = { line = 172, file = "PluginRuntime.ts" }, ["13311"] = { line = 163, file = "PluginRuntime.ts" },
        ["13312"] = { line = 176, file = "PluginRuntime.ts" }, ["13313"] = { line = 177, file = "PluginRuntime.ts" },
        ["13314"] = { line = 178, file = "PluginRuntime.ts" }, ["13315"] = { line = 179, file = "PluginRuntime.ts" },
        ["13316"] = { line = 180, file = "PluginRuntime.ts" }, ["13317"] = { line = 181, file = "PluginRuntime.ts" },
        ["13318"] = { line = 181, file = "PluginRuntime.ts" }, ["13319"] = { line = 181, file = "PluginRuntime.ts" },
        ["13320"] = { line = 181, file = "PluginRuntime.ts" }, ["13321"] = { line = 182, file = "PluginRuntime.ts" },
        ["13322"] = { line = 179, file = "PluginRuntime.ts" }, ["13323"] = { line = 185, file = "PluginRuntime.ts" },
        ["13324"] = { line = 186, file = "PluginRuntime.ts" }, ["13326"] = { line = 188, file = "PluginRuntime.ts" },
        ["13327"] = { line = 189, file = "PluginRuntime.ts" }, ["13328"] = { line = 191, file = "PluginRuntime.ts" },
        ["13329"] = { line = 192, file = "PluginRuntime.ts" }, ["13332"] = { line = 196, file = "PluginRuntime.ts" },
        ["13333"] = { line = 198, file = "PluginRuntime.ts" }, ["13334"] = { line = 200, file = "PluginRuntime.ts" },
        ["13335"] = { line = 202, file = "PluginRuntime.ts" }, ["13336"] = { line = 177, file = "PluginRuntime.ts" },
        ["13561"] = { line = 2, file = "index.ts" }, ["13569"] = { line = 3, file = "index.ts" }, ["13577"] = { line = 4, file = "index.ts" },
        ["13585"] = { line = 5, file = "index.ts" }, ["13593"] = { line = 6, file = "index.ts" }, ["13601"] = { line = 7, file = "index.ts" },
        ["13609"] = { line = 8, file = "index.ts" }, ["13617"] = { line = 9, file = "index.ts" }, ["13625"] = { line = 10, file = "index.ts" },
        ["13633"] = { line = 11, file = "index.ts" }, ["13641"] = { line = 12, file = "index.ts" }, ["13649"] = { line = 13, file = "index.ts" },
        ["13657"] = { line = 14, file = "index.ts" }, ["13665"] = { line = 15, file = "index.ts" }, ["13673"] = { line = 16, file = "index.ts" },
        ["13681"] = { line = 17, file = "index.ts" }, ["13707"] = { line = 2, file = "SocketMutex.ts" }, ["13708"] = { line = 2, file = "SocketMutex.ts" },
        ["13709"] = { line = 4, file = "SocketMutex.ts" }, ["13710"] = { line = 4, file = "SocketMutex.ts" }, ["13711"] = { line = 4, file = "SocketMutex.ts" },
        ["13712"] = { line = 9, file = "SocketMutex.ts" }, ["13713"] = { line = 9, file = "SocketMutex.ts" }, ["13714"] = { line = 6, file = "SocketMutex.ts" },
        ["13715"] = { line = 11, file = "SocketMutex.ts" }, ["13716"] = { line = 9, file = "SocketMutex.ts" }, ["13717"] = { line = 14, file = "SocketMutex.ts" },
        ["13718"] = { line = 15, file = "SocketMutex.ts" }, ["13719"] = { line = 14, file = "SocketMutex.ts" }, ["13720"] = { line = 22, file = "SocketMutex.ts" },
        ["13721"] = { line = 23, file = "SocketMutex.ts" }, ["13722"] = { line = 24, file = "SocketMutex.ts" }, ["13724"] = { line = 26, file = "SocketMutex.ts" },
        ["13725"] = { line = 27, file = "SocketMutex.ts" }, ["13726"] = { line = 28, file = "SocketMutex.ts" }, ["13727"] = { line = 29, file = "SocketMutex.ts" },
        ["13729"] = { line = 31, file = "SocketMutex.ts" }, ["13731"] = { line = 22, file = "SocketMutex.ts" }, ["13732"] = { line = 35, file = "SocketMutex.ts" },
        ["13733"] = { line = 36, file = "SocketMutex.ts" }, ["13734"] = { line = 37, file = "SocketMutex.ts" }, ["13736"] = { line = 39, file = "SocketMutex.ts" },
        ["13737"] = { line = 40, file = "SocketMutex.ts" }, ["13740"] = { line = 42, file = "SocketMutex.ts" }, ["13741"] = { line = 43, file = "SocketMutex.ts" },
        ["13742"] = { line = 44, file = "SocketMutex.ts" }, ["13743"] = { line = 45, file = "SocketMutex.ts" }, ["13744"] = { line = 46, file = "SocketMutex.ts" },
        ["13746"] = { line = 48, file = "SocketMutex.ts" }, ["13747"] = { line = 49, file = "SocketMutex.ts" }, ["13749"] = { line = 52, file = "SocketMutex.ts" },
        ["13750"] = { line = 53, file = "SocketMutex.ts" }, ["13751"] = { line = 54, file = "SocketMutex.ts" }, ["13754"] = { line = 57, file = "SocketMutex.ts" },
        ["13755"] = { line = 35, file = "SocketMutex.ts" }, ["13756"] = { line = 60, file = "SocketMutex.ts" }, ["13757"] = { line = 61, file = "SocketMutex.ts" },
        ["13758"] = { line = 62, file = "SocketMutex.ts" }, ["13759"] = { line = 63, file = "SocketMutex.ts" }, ["13760"] = { line = 64, file = "SocketMutex.ts" },
        ["13761"] = { line = 65, file = "SocketMutex.ts" }, ["13763"] = { line = 60, file = "SocketMutex.ts" }, ["13764"] = { line = 69, file = "SocketMutex.ts" },
        ["13765"] = { line = 71, file = "SocketMutex.ts" }, ["13766"] = { line = 72, file = "SocketMutex.ts" }, ["13767"] = { line = 73, file = "SocketMutex.ts" },
        ["13768"] = { line = 74, file = "SocketMutex.ts" }, ["13769"] = { line = 75, file = "SocketMutex.ts" }, ["13771"] = { line = 77, file = "SocketMutex.ts" },
        ["13772"] = { line = 69, file = "SocketMutex.ts" }, ["13789"] = { line = 2, file = "SocketMutexRegistry.ts" },
        ["13790"] = { line = 2, file = "SocketMutexRegistry.ts" }, ["13791"] = { line = 3, file = "SocketMutexRegistry.ts" },
        ["13792"] = { line = 3, file = "SocketMutexRegistry.ts" }, ["13793"] = { line = 3, file = "SocketMutexRegistry.ts" },
        ["13794"] = { line = 7, file = "SocketMutexRegistry.ts" }, ["13795"] = { line = 8, file = "SocketMutexRegistry.ts" },
        ["13796"] = { line = 11, file = "SocketMutexRegistry.ts" }, ["13797"] = { line = 11, file = "SocketMutexRegistry.ts" },
        ["13798"] = { line = 11, file = "SocketMutexRegistry.ts" }, ["13800"] = { line = 13, file = "SocketMutexRegistry.ts" },
        ["13801"] = { line = 11, file = "SocketMutexRegistry.ts" }, ["13802"] = { line = 15, file = "SocketMutexRegistry.ts" },
        ["13803"] = { line = 16, file = "SocketMutexRegistry.ts" }, ["13804"] = { line = 17, file = "SocketMutexRegistry.ts" },
        ["13805"] = { line = 22, file = "SocketMutexRegistry.ts" }, ["13806"] = { line = 23, file = "SocketMutexRegistry.ts" },
        ["13809"] = { line = 25, file = "SocketMutexRegistry.ts" }, ["13810"] = { line = 25, file = "SocketMutexRegistry.ts" },
        ["13811"] = { line = 29, file = "SocketMutexRegistry.ts" }, ["13812"] = { line = 31, file = "SocketMutexRegistry.ts" },
        ["13813"] = { line = 32, file = "SocketMutexRegistry.ts" }, ["13814"] = { line = 33, file = "SocketMutexRegistry.ts" },
        ["13815"] = { line = 34, file = "SocketMutexRegistry.ts" }, ["13816"] = { line = 35, file = "SocketMutexRegistry.ts" },
        ["13817"] = { line = 36, file = "SocketMutexRegistry.ts" }, ["13818"] = { line = 37, file = "SocketMutexRegistry.ts" },
        ["13820"] = { line = 39, file = "SocketMutexRegistry.ts" }, ["13821"] = { line = 40, file = "SocketMutexRegistry.ts" },
        ["13822"] = { line = 41, file = "SocketMutexRegistry.ts" }, ["13825"] = { line = 25, file = "SocketMutexRegistry.ts" },
        ["13828"] = { line = 46, file = "SocketMutexRegistry.ts" }, ["13829"] = { line = 17, file = "SocketMutexRegistry.ts" },
        ["13830"] = { line = 53, file = "SocketMutexRegistry.ts" }, ["13831"] = { line = 15, file = "SocketMutexRegistry.ts" },
        ["13832"] = { line = 58, file = "SocketMutexRegistry.ts" }, ["13833"] = { line = 59, file = "SocketMutexRegistry.ts" },
        ["13834"] = { line = 60, file = "SocketMutexRegistry.ts" }, ["13835"] = { line = 60, file = "SocketMutexRegistry.ts" },
        ["13836"] = { line = 60, file = "SocketMutexRegistry.ts" }, ["13837"] = { line = 60, file = "SocketMutexRegistry.ts" },
        ["13838"] = { line = 61, file = "SocketMutexRegistry.ts" }, ["13841"] = { line = 64, file = "SocketMutexRegistry.ts" },
        ["13842"] = { line = 58, file = "SocketMutexRegistry.ts" }, ["13843"] = { line = 67, file = "SocketMutexRegistry.ts" },
        ["13844"] = { line = 68, file = "SocketMutexRegistry.ts" }, ["13845"] = { line = 69, file = "SocketMutexRegistry.ts" },
        ["13846"] = { line = 70, file = "SocketMutexRegistry.ts" }, ["13848"] = { line = 72, file = "SocketMutexRegistry.ts" },
        ["13850"] = { line = 67, file = "SocketMutexRegistry.ts" }, ["13851"] = { line = 76, file = "SocketMutexRegistry.ts" },
        ["13852"] = { line = 77, file = "SocketMutexRegistry.ts" }, ["13853"] = { line = 78, file = "SocketMutexRegistry.ts" },
        ["13855"] = { line = 76, file = "SocketMutexRegistry.ts" }, ["13874"] = { line = 1, file = "common.ts" },
        ["13875"] = { line = 3, file = "common.ts" }, ["13877"] = { line = 5, file = "common.ts" }, ["13878"] = { line = 5, file = "common.ts" },
        ["13879"] = { line = 6, file = "common.ts" }, ["13880"] = { line = 7, file = "common.ts" }, ["13882"] = { line = 5, file = "common.ts" },
        ["13886"] = { line = 11, file = "common.ts" }, ["13887"] = { line = 11, file = "common.ts" }, ["13888"] = { line = 12, file = "common.ts" },
        ["13889"] = { line = 13, file = "common.ts" }, ["13891"] = { line = 11, file = "common.ts" }, ["13894"] = { line = 3, file = "common.ts" },
        ["13906"] = { line = 4, file = "SubPoolWrapper.ts" }, ["13907"] = { line = 4, file = "SubPoolWrapper.ts" },
        ["13908"] = { line = 6, file = "SubPoolWrapper.ts" }, ["13909"] = { line = 6, file = "SubPoolWrapper.ts" },
        ["13910"] = { line = 10, file = "SubPoolWrapper.ts" }, ["13911"] = { line = 10, file = "SubPoolWrapper.ts" },
        ["13912"] = { line = 10, file = "SubPoolWrapper.ts" }, ["13913"] = { line = 18, file = "SubPoolWrapper.ts" },
        ["13914"] = { line = 18, file = "SubPoolWrapper.ts" }, ["13915"] = { line = 28, file = "SubPoolWrapper.ts" },
        ["13916"] = { line = 29, file = "SubPoolWrapper.ts" }, ["13917"] = { line = 30, file = "SubPoolWrapper.ts" },
        ["13918"] = { line = 31, file = "SubPoolWrapper.ts" }, ["13919"] = { line = 32, file = "SubPoolWrapper.ts" },
        ["13920"] = { line = 33, file = "SubPoolWrapper.ts" }, ["13921"] = { line = 34, file = "SubPoolWrapper.ts" },
        ["13922"] = { line = 18, file = "SubPoolWrapper.ts" }, ["13927"] = { line = 37, file = "SubPoolWrapper.ts" },
        ["13935"] = { line = 38, file = "SubPoolWrapper.ts" }, ["13943"] = { line = 39, file = "SubPoolWrapper.ts" },
        ["13951"] = { line = 40, file = "SubPoolWrapper.ts" }, ["13955"] = { line = 42, file = "SubPoolWrapper.ts" },
        ["13956"] = { line = 43, file = "SubPoolWrapper.ts" }, ["13957"] = { line = 42, file = "SubPoolWrapper.ts" },
        ["13958"] = { line = 46, file = "SubPoolWrapper.ts" }, ["13959"] = { line = 47, file = "SubPoolWrapper.ts" },
        ["13960"] = { line = 46, file = "SubPoolWrapper.ts" }, ["13961"] = { line = 50, file = "SubPoolWrapper.ts" },
        ["13962"] = { line = 51, file = "SubPoolWrapper.ts" }, ["13963"] = { line = 50, file = "SubPoolWrapper.ts" },
        ["13964"] = { line = 54, file = "SubPoolWrapper.ts" }, ["13965"] = { line = 55, file = "SubPoolWrapper.ts" },
        ["13966"] = { line = 54, file = "SubPoolWrapper.ts" }, ["13967"] = { line = 58, file = "SubPoolWrapper.ts" },
        ["13968"] = { line = 59, file = "SubPoolWrapper.ts" }, ["13969"] = { line = 60, file = "SubPoolWrapper.ts" },
        ["13970"] = { line = 58, file = "SubPoolWrapper.ts" }, ["13971"] = { line = 62, file = "SubPoolWrapper.ts" },
        ["13972"] = { line = 63, file = "SubPoolWrapper.ts" }, ["13973"] = { line = 63, file = "SubPoolWrapper.ts" },
        ["13975"] = { line = 64, file = "SubPoolWrapper.ts" }, ["13976"] = { line = 65, file = "SubPoolWrapper.ts" },
        ["13977"] = { line = 62, file = "SubPoolWrapper.ts" }, ["13978"] = { line = 68, file = "SubPoolWrapper.ts" },
        ["13979"] = { line = 69, file = "SubPoolWrapper.ts" }, ["13980"] = { line = 69, file = "SubPoolWrapper.ts" },
        ["13982"] = { line = 70, file = "SubPoolWrapper.ts" }, ["13983"] = { line = 71, file = "SubPoolWrapper.ts" },
        ["13984"] = { line = 72, file = "SubPoolWrapper.ts" }, ["13985"] = { line = 68, file = "SubPoolWrapper.ts" },
        ["13986"] = { line = 76, file = "SubPoolWrapper.ts" }, ["13987"] = { line = 77, file = "SubPoolWrapper.ts" },
        ["13988"] = { line = 77, file = "SubPoolWrapper.ts" }, ["13990"] = { line = 78, file = "SubPoolWrapper.ts" },
        ["13991"] = { line = 79, file = "SubPoolWrapper.ts" }, ["13992"] = { line = 79, file = "SubPoolWrapper.ts" },
        ["13993"] = { line = 80, file = "SubPoolWrapper.ts" }, ["13995"] = { line = 76, file = "SubPoolWrapper.ts" },
        ["13996"] = { line = 84, file = "SubPoolWrapper.ts" }, ["13997"] = { line = 85, file = "SubPoolWrapper.ts" },
        ["13998"] = { line = 84, file = "SubPoolWrapper.ts" }, ["13999"] = { line = 88, file = "SubPoolWrapper.ts" },
        ["14000"] = { line = 93, file = "SubPoolWrapper.ts" }, ["14001"] = { line = 88, file = "SubPoolWrapper.ts" },
        ["14002"] = { line = 95, file = "SubPoolWrapper.ts" }, ["14003"] = { line = 96, file = "SubPoolWrapper.ts" },
        ["14004"] = { line = 96, file = "SubPoolWrapper.ts" }, ["14005"] = { line = 96, file = "SubPoolWrapper.ts" },
        ["14006"] = { line = 96, file = "SubPoolWrapper.ts" }, ["14007"] = { line = 95, file = "SubPoolWrapper.ts" },
        ["14021"] = { line = 188, file = "SubPoolRegistry.ts" }, ["14022"] = { line = 3, file = "SubPoolRegistry.ts" },
        ["14023"] = { line = 3, file = "SubPoolRegistry.ts" }, ["14024"] = { line = 5, file = "SubPoolRegistry.ts" },
        ["14025"] = { line = 5, file = "SubPoolRegistry.ts" }, ["14026"] = { line = 6, file = "SubPoolRegistry.ts" },
        ["14027"] = { line = 6, file = "SubPoolRegistry.ts" }, ["14028"] = { line = 10, file = "SubPoolRegistry.ts" },
        ["14029"] = { line = 10, file = "SubPoolRegistry.ts" }, ["14030"] = { line = 188, file = "SubPoolRegistry.ts" },
        ["14031"] = { line = 189, file = "SubPoolRegistry.ts" }, ["14032"] = { line = 190, file = "SubPoolRegistry.ts" },
        ["14034"] = { line = 191, file = "SubPoolRegistry.ts" }, ["14035"] = { line = 192, file = "SubPoolRegistry.ts" },
        ["14038"] = { line = 193, file = "SubPoolRegistry.ts" }, ["14039"] = { line = 194, file = "SubPoolRegistry.ts" },
        ["14043"] = { line = 197, file = "SubPoolRegistry.ts" }, ["14046"] = { line = 198, file = "SubPoolRegistry.ts" },
        ["14047"] = { line = 199, file = "SubPoolRegistry.ts" }, ["14051"] = { line = 202, file = "SubPoolRegistry.ts" },
        ["14054"] = { line = 203, file = "SubPoolRegistry.ts" }, ["14055"] = { line = 204, file = "SubPoolRegistry.ts" },
        ["14059"] = { line = 207, file = "SubPoolRegistry.ts" }, ["14062"] = { line = 208, file = "SubPoolRegistry.ts" },
        ["14063"] = { line = 209, file = "SubPoolRegistry.ts" }, ["14069"] = { line = 213, file = "SubPoolRegistry.ts" },
        ["14073"] = { line = 217, file = "SubPoolRegistry.ts" }, ["14075"] = { line = 13, file = "SubPoolRegistry.ts" },
        ["14076"] = { line = 13, file = "SubPoolRegistry.ts" }, ["14077"] = { line = 13, file = "SubPoolRegistry.ts" },
        ["14078"] = { line = 19, file = "SubPoolRegistry.ts" }, ["14079"] = { line = 19, file = "SubPoolRegistry.ts" },
        ["14080"] = { line = 28, file = "SubPoolRegistry.ts" }, ["14081"] = { line = 29, file = "SubPoolRegistry.ts" },
        ["14082"] = { line = 30, file = "SubPoolRegistry.ts" }, ["14083"] = { line = 31, file = "SubPoolRegistry.ts" },
        ["14084"] = { line = 19, file = "SubPoolRegistry.ts" }, ["14085"] = { line = 34, file = "SubPoolRegistry.ts" },
        ["14086"] = { line = 35, file = "SubPoolRegistry.ts" }, ["14087"] = { line = 34, file = "SubPoolRegistry.ts" },
        ["14088"] = { line = 38, file = "SubPoolRegistry.ts" }, ["14089"] = { line = 39, file = "SubPoolRegistry.ts" },
        ["14090"] = { line = 40, file = "SubPoolRegistry.ts" }, ["14091"] = { line = 41, file = "SubPoolRegistry.ts" },
        ["14092"] = { line = 42, file = "SubPoolRegistry.ts" }, ["14093"] = { line = 42, file = "SubPoolRegistry.ts" },
        ["14094"] = { line = 42, file = "SubPoolRegistry.ts" }, ["14095"] = { line = 43, file = "SubPoolRegistry.ts" },
        ["14096"] = { line = 42, file = "SubPoolRegistry.ts" }, ["14097"] = { line = 42, file = "SubPoolRegistry.ts" },
        ["14099"] = { line = 38, file = "SubPoolRegistry.ts" }, ["14100"] = { line = 48, file = "SubPoolRegistry.ts" },
        ["14101"] = { line = 49, file = "SubPoolRegistry.ts" }, ["14102"] = { line = 49, file = "SubPoolRegistry.ts" },
        ["14103"] = { line = 49, file = "SubPoolRegistry.ts" }, ["14104"] = { line = 50, file = "SubPoolRegistry.ts" },
        ["14105"] = { line = 49, file = "SubPoolRegistry.ts" }, ["14106"] = { line = 49, file = "SubPoolRegistry.ts" },
        ["14107"] = { line = 52, file = "SubPoolRegistry.ts" }, ["14108"] = { line = 48, file = "SubPoolRegistry.ts" },
        ["14109"] = { line = 55, file = "SubPoolRegistry.ts" }, ["14110"] = { line = 56, file = "SubPoolRegistry.ts" },
        ["14111"] = { line = 56, file = "SubPoolRegistry.ts" }, ["14112"] = { line = 56, file = "SubPoolRegistry.ts" },
        ["14113"] = { line = 57, file = "SubPoolRegistry.ts" }, ["14114"] = { line = 56, file = "SubPoolRegistry.ts" },
        ["14115"] = { line = 56, file = "SubPoolRegistry.ts" }, ["14116"] = { line = 59, file = "SubPoolRegistry.ts" },
        ["14117"] = { line = 55, file = "SubPoolRegistry.ts" }, ["14118"] = { line = 62, file = "SubPoolRegistry.ts" },
        ["14119"] = { line = 63, file = "SubPoolRegistry.ts" }, ["14120"] = { line = 64, file = "SubPoolRegistry.ts" },
        ["14121"] = { line = 65, file = "SubPoolRegistry.ts" }, ["14122"] = { line = 66, file = "SubPoolRegistry.ts" },
        ["14123"] = { line = 67, file = "SubPoolRegistry.ts" }, ["14127"] = { line = 71, file = "SubPoolRegistry.ts" },
        ["14128"] = { line = 62, file = "SubPoolRegistry.ts" }, ["14129"] = { line = 74, file = "SubPoolRegistry.ts" },
        ["14130"] = { line = 75, file = "SubPoolRegistry.ts" }, ["14131"] = { line = 75, file = "SubPoolRegistry.ts" },
        ["14132"] = { line = 75, file = "SubPoolRegistry.ts" }, ["14133"] = { line = 75, file = "SubPoolRegistry.ts" },
        ["14134"] = { line = 76, file = "SubPoolRegistry.ts" }, ["14135"] = { line = 77, file = "SubPoolRegistry.ts" },
        ["14136"] = { line = 78, file = "SubPoolRegistry.ts" }, ["14137"] = { line = 79, file = "SubPoolRegistry.ts" },
        ["14139"] = { line = 81, file = "SubPoolRegistry.ts" }, ["14140"] = { line = 74, file = "SubPoolRegistry.ts" },
        ["14141"] = { line = 84, file = "SubPoolRegistry.ts" }, ["14142"] = { line = 85, file = "SubPoolRegistry.ts" },
        ["14143"] = { line = 86, file = "SubPoolRegistry.ts" }, ["14144"] = { line = 86, file = "SubPoolRegistry.ts" },
        ["14145"] = { line = 86, file = "SubPoolRegistry.ts" }, ["14146"] = { line = 87, file = "SubPoolRegistry.ts" },
        ["14147"] = { line = 88, file = "SubPoolRegistry.ts" }, ["14148"] = { line = 89, file = "SubPoolRegistry.ts" },
        ["14150"] = { line = 86, file = "SubPoolRegistry.ts" }, ["14151"] = { line = 86, file = "SubPoolRegistry.ts" },
        ["14152"] = { line = 92, file = "SubPoolRegistry.ts" }, ["14153"] = { line = 84, file = "SubPoolRegistry.ts" },
        ["14154"] = { line = 95, file = "SubPoolRegistry.ts" }, ["14155"] = { line = 96, file = "SubPoolRegistry.ts" },
        ["14156"] = { line = 97, file = "SubPoolRegistry.ts" }, ["14157"] = { line = 98, file = "SubPoolRegistry.ts" },
        ["14158"] = { line = 99, file = "SubPoolRegistry.ts" }, ["14160"] = { line = 101, file = "SubPoolRegistry.ts" },
        ["14161"] = { line = 102, file = "SubPoolRegistry.ts" }, ["14162"] = { line = 103, file = "SubPoolRegistry.ts" },
        ["14163"] = { line = 104, file = "SubPoolRegistry.ts" }, ["14164"] = { line = 105, file = "SubPoolRegistry.ts" },
        ["14165"] = { line = 106, file = "SubPoolRegistry.ts" }, ["14166"] = { line = 101, file = "SubPoolRegistry.ts" },
        ["14167"] = { line = 95, file = "SubPoolRegistry.ts" }, ["14168"] = { line = 110, file = "SubPoolRegistry.ts" },
        ["14169"] = { line = 111, file = "SubPoolRegistry.ts" }, ["14170"] = { line = 111, file = "SubPoolRegistry.ts" },
        ["14171"] = { line = 111, file = "SubPoolRegistry.ts" }, ["14172"] = { line = 111, file = "SubPoolRegistry.ts" },
        ["14173"] = { line = 110, file = "SubPoolRegistry.ts" }, ["14174"] = { line = 141, file = "SubPoolRegistry.ts" },
        ["14175"] = { line = 142, file = "SubPoolRegistry.ts" }, ["14176"] = { line = 143, file = "SubPoolRegistry.ts" },
        ["14177"] = { line = 145, file = "SubPoolRegistry.ts" }, ["14178"] = { line = 146, file = "SubPoolRegistry.ts" },
        ["14179"] = { line = 147, file = "SubPoolRegistry.ts" }, ["14180"] = { line = 148, file = "SubPoolRegistry.ts" },
        ["14181"] = { line = 149, file = "SubPoolRegistry.ts" }, ["14182"] = { line = 150, file = "SubPoolRegistry.ts" },
        ["14183"] = { line = 151, file = "SubPoolRegistry.ts" }, ["14184"] = { line = 151, file = "SubPoolRegistry.ts" },
        ["14185"] = { line = 151, file = "SubPoolRegistry.ts" }, ["14186"] = { line = 152, file = "SubPoolRegistry.ts" },
        ["14187"] = { line = 153, file = "SubPoolRegistry.ts" }, ["14188"] = { line = 154, file = "SubPoolRegistry.ts" },
        ["14189"] = { line = 157, file = "SubPoolRegistry.ts" }, ["14190"] = { line = 159, file = "SubPoolRegistry.ts" },
        ["14191"] = { line = 160, file = "SubPoolRegistry.ts" }, ["14192"] = { line = 161, file = "SubPoolRegistry.ts" },
        ["14193"] = { line = 162, file = "SubPoolRegistry.ts" }, ["14194"] = { line = 163, file = "SubPoolRegistry.ts" },
        ["14195"] = { line = 164, file = "SubPoolRegistry.ts" }, ["14196"] = { line = 165, file = "SubPoolRegistry.ts" },
        ["14199"] = { line = 168, file = "SubPoolRegistry.ts" }, ["14201"] = { line = 170, file = "SubPoolRegistry.ts" },
        ["14202"] = { line = 171, file = "SubPoolRegistry.ts" }, ["14205"] = { line = 175, file = "SubPoolRegistry.ts" },
        ["14206"] = { line = 141, file = "SubPoolRegistry.ts" }, ["14207"] = { line = 179, file = "SubPoolRegistry.ts" },
        ["14208"] = { line = 180, file = "SubPoolRegistry.ts" }, ["14209"] = { line = 181, file = "SubPoolRegistry.ts" },
        ["14210"] = { line = 181, file = "SubPoolRegistry.ts" }, ["14211"] = { line = 182, file = "SubPoolRegistry.ts" },
        ["14212"] = { line = 183, file = "SubPoolRegistry.ts" }, ["14213"] = { line = 181, file = "SubPoolRegistry.ts" },
        ["14214"] = { line = 184, file = "SubPoolRegistry.ts" }, ["14215"] = { line = 181, file = "SubPoolRegistry.ts" },
        ["14216"] = { line = 179, file = "SubPoolRegistry.ts" }, ["14223"] = { line = 3, file = "Utils.ts" }, ["14224"] = { line = 4, file = "Utils.ts" },
        ["14225"] = { line = 5, file = "Utils.ts" }, ["14227"] = { line = 7, file = "Utils.ts" }, ["14229"] = { line = 3, file = "Utils.ts" },
        ["14232"] = { line = 15, file = "Utils.ts" }, ["14233"] = { line = 16, file = "Utils.ts" }, ["14234"] = { line = 17, file = "Utils.ts" },
        ["14236"] = { line = 19, file = "Utils.ts" }, ["14237"] = { line = 20, file = "Utils.ts" }, ["14239"] = { line = 22, file = "Utils.ts" },
        ["14240"] = { line = 23, file = "Utils.ts" }, ["14241"] = { line = 23, file = "Utils.ts" }, ["14242"] = { line = 23, file = "Utils.ts" },
        ["14243"] = { line = 23, file = "Utils.ts" }, ["14245"] = { line = 25, file = "Utils.ts" }, ["14246"] = { line = 25, file = "Utils.ts" },
        ["14247"] = { line = 25, file = "Utils.ts" }, ["14248"] = { line = 25, file = "Utils.ts" }, ["14251"] = { line = 15, file = "Utils.ts" },
        ["14258"] = { line = 37, file = "Utils.ts" }, ["14259"] = { line = 38, file = "Utils.ts" }, ["14260"] = { line = 39, file = "Utils.ts" },
        ["14262"] = { line = 41, file = "Utils.ts" }, ["14263"] = { line = 42, file = "Utils.ts" }, ["14265"] = { line = 44, file = "Utils.ts" },
        ["14266"] = { line = 45, file = "Utils.ts" }, ["14268"] = { line = 47, file = "Utils.ts" }, ["14271"] = { line = 37, file = "Utils.ts" },
        ["14290"] = { line = 2, file = "PoolWrapper.ts" }, ["14291"] = { line = 2, file = "PoolWrapper.ts" }, ["14292"] = { line = 4, file = "PoolWrapper.ts" },
        ["14293"] = { line = 4, file = "PoolWrapper.ts" }, ["14294"] = { line = 5, file = "PoolWrapper.ts" }, ["14295"] = { line = 5, file = "PoolWrapper.ts" },
        ["14296"] = { line = 7, file = "PoolWrapper.ts" }, ["14297"] = { line = 7, file = "PoolWrapper.ts" }, ["14298"] = { line = 7, file = "PoolWrapper.ts" },
        ["14299"] = { line = 7, file = "PoolWrapper.ts" }, ["14300"] = { line = 9, file = "PoolWrapper.ts" }, ["14301"] = { line = 9, file = "PoolWrapper.ts" },
        ["14302"] = { line = 10, file = "PoolWrapper.ts" }, ["14303"] = { line = 10, file = "PoolWrapper.ts" }, ["14304"] = { line = 10, file = "PoolWrapper.ts" },
        ["14305"] = { line = 12, file = "PoolWrapper.ts" }, ["14306"] = { line = 13, file = "PoolWrapper.ts" }, ["14307"] = { line = 15, file = "PoolWrapper.ts" },
        ["14308"] = { line = 17, file = "PoolWrapper.ts" }, ["14309"] = { line = 17, file = "PoolWrapper.ts" }, ["14310"] = { line = 17, file = "PoolWrapper.ts" },
        ["14311"] = { line = 23, file = "PoolWrapper.ts" }, ["14312"] = { line = 23, file = "PoolWrapper.ts" }, ["14313"] = { line = 30, file = "PoolWrapper.ts" },
        ["14314"] = { line = 31, file = "PoolWrapper.ts" }, ["14315"] = { line = 32, file = "PoolWrapper.ts" }, ["14316"] = { line = 33, file = "PoolWrapper.ts" },
        ["14317"] = { line = 34, file = "PoolWrapper.ts" }, ["14318"] = { line = 23, file = "PoolWrapper.ts" }, ["14319"] = { line = 37, file = "PoolWrapper.ts" },
        ["14320"] = { line = 38, file = "PoolWrapper.ts" }, ["14321"] = { line = 37, file = "PoolWrapper.ts" }, ["14322"] = { line = 44, file = "PoolWrapper.ts" },
        ["14323"] = { line = 45, file = "PoolWrapper.ts" }, ["14324"] = { line = 45, file = "PoolWrapper.ts" }, ["14326"] = { line = 46, file = "PoolWrapper.ts" },
        ["14327"] = { line = 47, file = "PoolWrapper.ts" }, ["14328"] = { line = 53, file = "PoolWrapper.ts" }, ["14329"] = { line = 44, file = "PoolWrapper.ts" },
        ["14330"] = { line = 56, file = "PoolWrapper.ts" }, ["14331"] = { line = 57, file = "PoolWrapper.ts" }, ["14332"] = { line = 56, file = "PoolWrapper.ts" },
        ["14333"] = { line = 60, file = "PoolWrapper.ts" }, ["14334"] = { line = 61, file = "PoolWrapper.ts" }, ["14335"] = { line = 60, file = "PoolWrapper.ts" },
        ["14336"] = { line = 64, file = "PoolWrapper.ts" }, ["14337"] = { line = 64, file = "PoolWrapper.ts" }, ["14338"] = { line = 64, file = "PoolWrapper.ts" },
        ["14340"] = { line = 65, file = "PoolWrapper.ts" }, ["14341"] = { line = 65, file = "PoolWrapper.ts" }, ["14343"] = { line = 66, file = "PoolWrapper.ts" },
        ["14344"] = { line = 67, file = "PoolWrapper.ts" }, ["14345"] = { line = 68, file = "PoolWrapper.ts" }, ["14347"] = { line = 70, file = "PoolWrapper.ts" },
        ["14349"] = { line = 72, file = "PoolWrapper.ts" }, ["14350"] = { line = 73, file = "PoolWrapper.ts" }, ["14351"] = { line = 74, file = "PoolWrapper.ts" },
        ["14352"] = { line = 75, file = "PoolWrapper.ts" }, ["14353"] = { line = 76, file = "PoolWrapper.ts" }, ["14354"] = { line = 77, file = "PoolWrapper.ts" },
        ["14355"] = { line = 72, file = "PoolWrapper.ts" }, ["14356"] = { line = 79, file = "PoolWrapper.ts" }, ["14357"] = { line = 80, file = "PoolWrapper.ts" },
        ["14358"] = { line = 81, file = "PoolWrapper.ts" }, ["14359"] = { line = 82, file = "PoolWrapper.ts" }, ["14360"] = { line = 83, file = "PoolWrapper.ts" },
        ["14361"] = { line = 84, file = "PoolWrapper.ts" }, ["14362"] = { line = 85, file = "PoolWrapper.ts" }, ["14363"] = { line = 86, file = "PoolWrapper.ts" },
        ["14364"] = { line = 87, file = "PoolWrapper.ts" }, ["14365"] = { line = 88, file = "PoolWrapper.ts" }, ["14366"] = { line = 81, file = "PoolWrapper.ts" },
        ["14367"] = { line = 64, file = "PoolWrapper.ts" }, ["14368"] = { line = 93, file = "PoolWrapper.ts" }, ["14369"] = { line = 94, file = "PoolWrapper.ts" },
        ["14370"] = { line = 95, file = "PoolWrapper.ts" }, ["14371"] = { line = 96, file = "PoolWrapper.ts" }, ["14372"] = { line = 93, file = "PoolWrapper.ts" },
        ["14373"] = { line = 100, file = "PoolWrapper.ts" }, ["14374"] = { line = 101, file = "PoolWrapper.ts" },
        ["14375"] = { line = 101, file = "PoolWrapper.ts" }, ["14377"] = { line = 102, file = "PoolWrapper.ts" },
        ["14378"] = { line = 103, file = "PoolWrapper.ts" }, ["14379"] = { line = 104, file = "PoolWrapper.ts" },
        ["14380"] = { line = 105, file = "PoolWrapper.ts" }, ["14381"] = { line = 107, file = "PoolWrapper.ts" },
        ["14383"] = { line = 109, file = "PoolWrapper.ts" }, ["14386"] = { line = 100, file = "PoolWrapper.ts" },
        ["14387"] = { line = 114, file = "PoolWrapper.ts" }, ["14388"] = { line = 115, file = "PoolWrapper.ts" },
        ["14389"] = { line = 115, file = "PoolWrapper.ts" }, ["14391"] = { line = 116, file = "PoolWrapper.ts" },
        ["14392"] = { line = 117, file = "PoolWrapper.ts" }, ["14393"] = { line = 118, file = "PoolWrapper.ts" },
        ["14394"] = { line = 119, file = "PoolWrapper.ts" }, ["14395"] = { line = 120, file = "PoolWrapper.ts" },
        ["14396"] = { line = 121, file = "PoolWrapper.ts" }, ["14397"] = { line = 122, file = "PoolWrapper.ts" },
        ["14398"] = { line = 123, file = "PoolWrapper.ts" }, ["14400"] = { line = 125, file = "PoolWrapper.ts" },
        ["14401"] = { line = 126, file = "PoolWrapper.ts" }, ["14402"] = { line = 127, file = "PoolWrapper.ts" },
        ["14404"] = { line = 129, file = "PoolWrapper.ts" }, ["14405"] = { line = 130, file = "PoolWrapper.ts" },
        ["14408"] = { line = 114, file = "PoolWrapper.ts" }, ["14409"] = { line = 135, file = "PoolWrapper.ts" },
        ["14410"] = { line = 136, file = "PoolWrapper.ts" }, ["14411"] = { line = 136, file = "PoolWrapper.ts" },
        ["14413"] = { line = 137, file = "PoolWrapper.ts" }, ["14414"] = { line = 138, file = "PoolWrapper.ts" },
        ["14415"] = { line = 139, file = "PoolWrapper.ts" }, ["14416"] = { line = 139, file = "PoolWrapper.ts" },
        ["14417"] = { line = 140, file = "PoolWrapper.ts" }, ["14419"] = { line = 135, file = "PoolWrapper.ts" },
        ["14420"] = { line = 144, file = "PoolWrapper.ts" }, ["14421"] = { line = 145, file = "PoolWrapper.ts" },
        ["14422"] = { line = 146, file = "PoolWrapper.ts" }, ["14423"] = { line = 146, file = "PoolWrapper.ts" },
        ["14424"] = { line = 146, file = "PoolWrapper.ts" }, ["14426"] = { line = 146, file = "PoolWrapper.ts" },
        ["14427"] = { line = 147, file = "PoolWrapper.ts" }, ["14428"] = { line = 148, file = "PoolWrapper.ts" },
        ["14429"] = { line = 149, file = "PoolWrapper.ts" }, ["14430"] = { line = 150, file = "PoolWrapper.ts" },
        ["14431"] = { line = 151, file = "PoolWrapper.ts" }, ["14432"] = { line = 152, file = "PoolWrapper.ts" },
        ["14433"] = { line = 153, file = "PoolWrapper.ts" }, ["14434"] = { line = 146, file = "PoolWrapper.ts" },
        ["14436"] = { line = 146, file = "PoolWrapper.ts" }, ["14437"] = { line = 144, file = "PoolWrapper.ts" },
        ["14438"] = { line = 157, file = "PoolWrapper.ts" }, ["14439"] = { line = 158, file = "PoolWrapper.ts" },
        ["14440"] = { line = 158, file = "PoolWrapper.ts" }, ["14441"] = { line = 158, file = "PoolWrapper.ts" },
        ["14442"] = { line = 159, file = "PoolWrapper.ts" }, ["14443"] = { line = 160, file = "PoolWrapper.ts" },
        ["14444"] = { line = 161, file = "PoolWrapper.ts" }, ["14445"] = { line = 162, file = "PoolWrapper.ts" },
        ["14446"] = { line = 163, file = "PoolWrapper.ts" }, ["14447"] = { line = 164, file = "PoolWrapper.ts" },
        ["14448"] = { line = 165, file = "PoolWrapper.ts" }, ["14449"] = { line = 166, file = "PoolWrapper.ts" },
        ["14450"] = { line = 159, file = "PoolWrapper.ts" }, ["14451"] = { line = 158, file = "PoolWrapper.ts" },
        ["14452"] = { line = 158, file = "PoolWrapper.ts" }, ["14453"] = { line = 157, file = "PoolWrapper.ts" },
        ["14454"] = { line = 174, file = "PoolWrapper.ts" }, ["14455"] = { line = 175, file = "PoolWrapper.ts" },
        ["14456"] = { line = 175, file = "PoolWrapper.ts" }, ["14457"] = { line = 175, file = "PoolWrapper.ts" },
        ["14458"] = { line = 175, file = "PoolWrapper.ts" }, ["14459"] = { line = 174, file = "PoolWrapper.ts" },
        ["14460"] = { line = 178, file = "PoolWrapper.ts" }, ["14461"] = { line = 179, file = "PoolWrapper.ts" },
        ["14462"] = { line = 179, file = "PoolWrapper.ts" }, ["14463"] = { line = 180, file = "PoolWrapper.ts" },
        ["14464"] = { line = 180, file = "PoolWrapper.ts" }, ["14465"] = { line = 180, file = "PoolWrapper.ts" },
        ["14466"] = { line = 180, file = "PoolWrapper.ts" }, ["14467"] = { line = 180, file = "PoolWrapper.ts" },
        ["14468"] = { line = 180, file = "PoolWrapper.ts" }, ["14469"] = { line = 180, file = "PoolWrapper.ts" },
        ["14470"] = { line = 181, file = "PoolWrapper.ts" }, ["14471"] = { line = 178, file = "PoolWrapper.ts" },
        ["14472"] = { line = 187, file = "PoolWrapper.ts" }, ["14473"] = { line = 193, file = "PoolWrapper.ts" },
        ["14474"] = { line = 193, file = "PoolWrapper.ts" }, ["14475"] = { line = 193, file = "PoolWrapper.ts" },
        ["14476"] = { line = 193, file = "PoolWrapper.ts" }, ["14477"] = { line = 193, file = "PoolWrapper.ts" },
        ["14478"] = { line = 194, file = "PoolWrapper.ts" }, ["14479"] = { line = 195, file = "PoolWrapper.ts" },
        ["14480"] = { line = 197, file = "PoolWrapper.ts" }, ["14481"] = { line = 198, file = "PoolWrapper.ts" },
        ["14482"] = { line = 199, file = "PoolWrapper.ts" }, ["14483"] = { line = 200, file = "PoolWrapper.ts" },
        ["14484"] = { line = 201, file = "PoolWrapper.ts" }, ["14485"] = { line = 202, file = "PoolWrapper.ts" },
        ["14486"] = { line = 203, file = "PoolWrapper.ts" }, ["14487"] = { line = 203, file = "PoolWrapper.ts" },
        ["14488"] = { line = 203, file = "PoolWrapper.ts" }, ["14490"] = { line = 203, file = "PoolWrapper.ts" },
        ["14491"] = { line = 204, file = "PoolWrapper.ts" }, ["14493"] = { line = 206, file = "PoolWrapper.ts" },
        ["14494"] = { line = 206, file = "PoolWrapper.ts" }, ["14495"] = { line = 206, file = "PoolWrapper.ts" },
        ["14496"] = { line = 206, file = "PoolWrapper.ts" }, ["14497"] = { line = 206, file = "PoolWrapper.ts" },
        ["14498"] = { line = 208, file = "PoolWrapper.ts" }, ["14499"] = { line = 209, file = "PoolWrapper.ts" },
        ["14501"] = { line = 211, file = "PoolWrapper.ts" }, ["14505"] = { line = 215, file = "PoolWrapper.ts" },
        ["14506"] = { line = 215, file = "PoolWrapper.ts" }, ["14507"] = { line = 215, file = "PoolWrapper.ts" },
        ["14508"] = { line = 215, file = "PoolWrapper.ts" }, ["14509"] = { line = 216, file = "PoolWrapper.ts" },
        ["14512"] = { line = 220, file = "PoolWrapper.ts" }, ["14513"] = { line = 187, file = "PoolWrapper.ts" },
        ["14514"] = { line = 229, file = "PoolWrapper.ts" }, ["14515"] = { line = 230, file = "PoolWrapper.ts" },
        ["14516"] = { line = 231, file = "PoolWrapper.ts" }, ["14517"] = { line = 232, file = "PoolWrapper.ts" },
        ["14518"] = { line = 234, file = "PoolWrapper.ts" }, ["14521"] = { line = 237, file = "PoolWrapper.ts" },
        ["14522"] = { line = 229, file = "PoolWrapper.ts" }, ["14523"] = { line = 243, file = "PoolWrapper.ts" },
        ["14524"] = { line = 244, file = "PoolWrapper.ts" }, ["14525"] = { line = 244, file = "PoolWrapper.ts" },
        ["14527"] = { line = 245, file = "PoolWrapper.ts" }, ["14528"] = { line = 246, file = "PoolWrapper.ts" },
        ["14529"] = { line = 243, file = "PoolWrapper.ts" }, ["14530"] = { line = 250, file = "PoolWrapper.ts" },
        ["14531"] = { line = 251, file = "PoolWrapper.ts" }, ["14532"] = { line = 252, file = "PoolWrapper.ts" },
        ["14533"] = { line = 253, file = "PoolWrapper.ts" }, ["14534"] = { line = 254, file = "PoolWrapper.ts" },
        ["14535"] = { line = 255, file = "PoolWrapper.ts" }, ["14536"] = { line = 257, file = "PoolWrapper.ts" },
        ["14537"] = { line = 257, file = "PoolWrapper.ts" }, ["14538"] = { line = 257, file = "PoolWrapper.ts" },
        ["14539"] = { line = 258, file = "PoolWrapper.ts" }, ["14540"] = { line = 258, file = "PoolWrapper.ts" },
        ["14541"] = { line = 258, file = "PoolWrapper.ts" }, ["14542"] = { line = 258, file = "PoolWrapper.ts" },
        ["14543"] = { line = 259, file = "PoolWrapper.ts" }, ["14544"] = { line = 260, file = "PoolWrapper.ts" },
        ["14545"] = { line = 261, file = "PoolWrapper.ts" }, ["14546"] = { line = 261, file = "PoolWrapper.ts" },
        ["14547"] = { line = 261, file = "PoolWrapper.ts" }, ["14548"] = { line = 261, file = "PoolWrapper.ts" },
        ["14549"] = { line = 260, file = "PoolWrapper.ts" }, ["14550"] = { line = 263, file = "PoolWrapper.ts" },
        ["14551"] = { line = 264, file = "PoolWrapper.ts" }, ["14552"] = { line = 265, file = "PoolWrapper.ts" },
        ["14555"] = { line = 267, file = "PoolWrapper.ts" }, ["14556"] = { line = 267, file = "PoolWrapper.ts" },
        ["14557"] = { line = 268, file = "PoolWrapper.ts" }, ["14558"] = { line = 270, file = "PoolWrapper.ts" },
        ["14559"] = { line = 272, file = "PoolWrapper.ts" }, ["14560"] = { line = 273, file = "PoolWrapper.ts" },
        ["14561"] = { line = 274, file = "PoolWrapper.ts" }, ["14562"] = { line = 275, file = "PoolWrapper.ts" },
        ["14563"] = { line = 276, file = "PoolWrapper.ts" }, ["14564"] = { line = 277, file = "PoolWrapper.ts" },
        ["14566"] = { line = 279, file = "PoolWrapper.ts" }, ["14569"] = { line = 282, file = "PoolWrapper.ts" },
        ["14570"] = { line = 283, file = "PoolWrapper.ts" }, ["14571"] = { line = 284, file = "PoolWrapper.ts" },
        ["14572"] = { line = 286, file = "PoolWrapper.ts" }, ["14573"] = { line = 288, file = "PoolWrapper.ts" },
        ["14576"] = { line = 267, file = "PoolWrapper.ts" }, ["14579"] = { line = 292, file = "PoolWrapper.ts" },
        ["14580"] = { line = 263, file = "PoolWrapper.ts" }, ["14581"] = { line = 294, file = "PoolWrapper.ts" },
        ["14582"] = { line = 295, file = "PoolWrapper.ts" }, ["14583"] = { line = 296, file = "PoolWrapper.ts" },
        ["14584"] = { line = 296, file = "PoolWrapper.ts" }, ["14585"] = { line = 296, file = "PoolWrapper.ts" },
        ["14586"] = { line = 298, file = "PoolWrapper.ts" }, ["14587"] = { line = 298, file = "PoolWrapper.ts" },
        ["14588"] = { line = 298, file = "PoolWrapper.ts" }, ["14589"] = { line = 298, file = "PoolWrapper.ts" },
        ["14590"] = { line = 299, file = "PoolWrapper.ts" }, ["14591"] = { line = 299, file = "PoolWrapper.ts" },
        ["14592"] = { line = 299, file = "PoolWrapper.ts" }, ["14593"] = { line = 299, file = "PoolWrapper.ts" },
        ["14594"] = { line = 300, file = "PoolWrapper.ts" }, ["14595"] = { line = 305, file = "PoolWrapper.ts" },
        ["14597"] = { line = 257, file = "PoolWrapper.ts" }, ["14598"] = { line = 257, file = "PoolWrapper.ts" },
        ["14599"] = { line = 250, file = "PoolWrapper.ts" }, ["14600"] = { line = 311, file = "PoolWrapper.ts" },
        ["14601"] = { line = 312, file = "PoolWrapper.ts" }, ["14602"] = { line = 312, file = "PoolWrapper.ts" },
        ["14603"] = { line = 312, file = "PoolWrapper.ts" }, ["14604"] = { line = 312, file = "PoolWrapper.ts" },
        ["14605"] = { line = 313, file = "PoolWrapper.ts" }, ["14608"] = { line = 317, file = "PoolWrapper.ts" },
        ["14609"] = { line = 319, file = "PoolWrapper.ts" }, ["14610"] = { line = 319, file = "PoolWrapper.ts" },
        ["14611"] = { line = 319, file = "PoolWrapper.ts" }, ["14612"] = { line = 319, file = "PoolWrapper.ts" },
        ["14613"] = { line = 320, file = "PoolWrapper.ts" }, ["14614"] = { line = 319, file = "PoolWrapper.ts" },
        ["14615"] = { line = 319, file = "PoolWrapper.ts" }, ["14616"] = { line = 311, file = "PoolWrapper.ts" },
        ["14617"] = { line = 324, file = "PoolWrapper.ts" }, ["14618"] = { line = 325, file = "PoolWrapper.ts" },
        ["14619"] = { line = 325, file = "PoolWrapper.ts" }, ["14620"] = { line = 325, file = "PoolWrapper.ts" },
        ["14621"] = { line = 326, file = "PoolWrapper.ts" }, ["14622"] = { line = 325, file = "PoolWrapper.ts" },
        ["14623"] = { line = 325, file = "PoolWrapper.ts" }, ["14624"] = { line = 324, file = "PoolWrapper.ts" },
        ["14625"] = { line = 331, file = "PoolWrapper.ts" }, ["14626"] = { line = 332, file = "PoolWrapper.ts" },
        ["14627"] = { line = 332, file = "PoolWrapper.ts" }, ["14628"] = { line = 332, file = "PoolWrapper.ts" },
        ["14629"] = { line = 333, file = "PoolWrapper.ts" }, ["14630"] = { line = 334, file = "PoolWrapper.ts" },
        ["14631"] = { line = 335, file = "PoolWrapper.ts" }, ["14633"] = { line = 332, file = "PoolWrapper.ts" },
        ["14634"] = { line = 332, file = "PoolWrapper.ts" }, ["14635"] = { line = 331, file = "PoolWrapper.ts" },
        ["14643"] = { line = 1, file = "index.ts" }, ["14651"] = { line = 2, file = "index.ts" }, ["14659"] = { line = 3, file = "index.ts" },
        ["14667"] = { line = 4, file = "index.ts" }, ["14680"] = { line = 1, file = "OldPluginsRegistryHack.ts" },
        ["14681"] = { line = 19, file = "OldPluginsRegistryHack.ts" }, ["14682"] = { line = 20, file = "OldPluginsRegistryHack.ts" },
        ["14683"] = { line = 19, file = "OldPluginsRegistryHack.ts" }, ["14684"] = { line = 24, file = "OldPluginsRegistryHack.ts" },
        ["14685"] = { line = 25, file = "OldPluginsRegistryHack.ts" }, ["14686"] = { line = 26, file = "OldPluginsRegistryHack.ts" },
        ["14687"] = { line = 24, file = "OldPluginsRegistryHack.ts" }, ["14688"] = { line = 1, file = "OldPluginsRegistryHack.ts" },
        ["14689"] = { line = 2, file = "OldPluginsRegistryHack.ts" }, ["14690"] = { line = 6, file = "OldPluginsRegistryHack.ts" },
        ["14691"] = { line = 8, file = "OldPluginsRegistryHack.ts" }, ["14692"] = { line = 9, file = "OldPluginsRegistryHack.ts" },
        ["14693"] = { line = 10, file = "OldPluginsRegistryHack.ts" }, ["14694"] = { line = 11, file = "OldPluginsRegistryHack.ts" },
        ["14695"] = { line = 12, file = "OldPluginsRegistryHack.ts" }, ["14696"] = { line = 13, file = "OldPluginsRegistryHack.ts" },
        ["14697"] = { line = 13, file = "OldPluginsRegistryHack.ts" }, ["14698"] = { line = 13, file = "OldPluginsRegistryHack.ts" },
        ["14699"] = { line = 13, file = "OldPluginsRegistryHack.ts" }, ["14700"] = { line = 14, file = "OldPluginsRegistryHack.ts" },
        ["14701"] = { line = 11, file = "OldPluginsRegistryHack.ts" }, ["14703"] = { line = 6, file = "OldPluginsRegistryHack.ts" },
        ["14714"] = { line = 58, file = "PluginsEvents.ts" }, ["14715"] = { line = 1, file = "PluginsEvents.ts" },
        ["14716"] = { line = 1, file = "PluginsEvents.ts" }, ["14717"] = { line = 3, file = "PluginsEvents.ts" },
        ["14718"] = { line = 3, file = "PluginsEvents.ts" }, ["14719"] = { line = 58, file = "PluginsEvents.ts" },
        ["14720"] = { line = 59, file = "PluginsEvents.ts" }, ["14721"] = { line = 61, file = "PluginsEvents.ts" },
        ["14722"] = { line = 62, file = "PluginsEvents.ts" }, ["14723"] = { line = 62, file = "PluginsEvents.ts" },
        ["14724"] = { line = 62, file = "PluginsEvents.ts" }, ["14725"] = { line = 62, file = "PluginsEvents.ts" },
        ["14726"] = { line = 63, file = "PluginsEvents.ts" }, ["14727"] = { line = 64, file = "PluginsEvents.ts" },
        ["14729"] = { line = 66, file = "PluginsEvents.ts" }, ["14731"] = { line = 60, file = "PluginsEvents.ts" },
        ["14733"] = { line = 7, file = "PluginsEvents.ts" }, ["14734"] = { line = 7, file = "PluginsEvents.ts" },
        ["14735"] = { line = 7, file = "PluginsEvents.ts" }, ["14736"] = { line = 15, file = "PluginsEvents.ts" },
        ["14737"] = { line = 16, file = "PluginsEvents.ts" }, ["14738"] = { line = 17, file = "PluginsEvents.ts" },
        ["14739"] = { line = 18, file = "PluginsEvents.ts" }, ["14740"] = { line = 19, file = "PluginsEvents.ts" },
        ["14741"] = { line = 20, file = "PluginsEvents.ts" }, ["14742"] = { line = 21, file = "PluginsEvents.ts" },
        ["14743"] = { line = 22, file = "PluginsEvents.ts" }, ["14744"] = { line = 23, file = "PluginsEvents.ts" },
        ["14745"] = { line = 15, file = "PluginsEvents.ts" }, ["14746"] = { line = 26, file = "PluginsEvents.ts" },
        ["14747"] = { line = 27, file = "PluginsEvents.ts" }, ["14748"] = { line = 28, file = "PluginsEvents.ts" },
        ["14751"] = { line = 31, file = "PluginsEvents.ts" }, ["14752"] = { line = 33, file = "PluginsEvents.ts" },
        ["14753"] = { line = 34, file = "PluginsEvents.ts" }, ["14754"] = { line = 35, file = "PluginsEvents.ts" },
        ["14755"] = { line = 36, file = "PluginsEvents.ts" }, ["14756"] = { line = 37, file = "PluginsEvents.ts" },
        ["14759"] = { line = 41, file = "PluginsEvents.ts" }, ["14762"] = { line = 39, file = "PluginsEvents.ts" },
        ["14768"] = { line = 43, file = "PluginsEvents.ts" }, ["14770"] = { line = 45, file = "PluginsEvents.ts" },
        ["14771"] = { line = 46, file = "PluginsEvents.ts" }, ["14773"] = { line = 26, file = "PluginsEvents.ts" },
        ["14774"] = { line = 50, file = "PluginsEvents.ts" }, ["14775"] = { line = 51, file = "PluginsEvents.ts" },
        ["14776"] = { line = 52, file = "PluginsEvents.ts" }, ["14777"] = { line = 53, file = "PluginsEvents.ts" },
        ["14778"] = { line = 50, file = "PluginsEvents.ts" }, ["14789"] = { line = 171, file = "PluginsRegistry.ts" },
        ["14790"] = { line = 2, file = "PluginsRegistry.ts" }, ["14791"] = { line = 2, file = "PluginsRegistry.ts" },
        ["14792"] = { line = 2, file = "PluginsRegistry.ts" }, ["14793"] = { line = 3, file = "PluginsRegistry.ts" },
        ["14794"] = { line = 3, file = "PluginsRegistry.ts" }, ["14795"] = { line = 4, file = "PluginsRegistry.ts" },
        ["14796"] = { line = 4, file = "PluginsRegistry.ts" }, ["14797"] = { line = 6, file = "PluginsRegistry.ts" },
        ["14798"] = { line = 6, file = "PluginsRegistry.ts" }, ["14799"] = { line = 6, file = "PluginsRegistry.ts" },
        ["14800"] = { line = 6, file = "PluginsRegistry.ts" }, ["14801"] = { line = 7, file = "PluginsRegistry.ts" },
        ["14802"] = { line = 7, file = "PluginsRegistry.ts" }, ["14803"] = { line = 9, file = "PluginsRegistry.ts" },
        ["14804"] = { line = 9, file = "PluginsRegistry.ts" }, ["14805"] = { line = 9, file = "PluginsRegistry.ts" },
        ["14806"] = { line = 11, file = "PluginsRegistry.ts" }, ["14807"] = { line = 11, file = "PluginsRegistry.ts" },
        ["14808"] = { line = 12, file = "PluginsRegistry.ts" }, ["14809"] = { line = 12, file = "PluginsRegistry.ts" },
        ["14810"] = { line = 13, file = "PluginsRegistry.ts" }, ["14811"] = { line = 13, file = "PluginsRegistry.ts" },
        ["14812"] = { line = 171, file = "PluginsRegistry.ts" }, ["14813"] = { line = 172, file = "PluginsRegistry.ts" },
        ["14814"] = { line = 172, file = "PluginsRegistry.ts" }, ["14815"] = { line = 172, file = "PluginsRegistry.ts" },
        ["14816"] = { line = 172, file = "PluginsRegistry.ts" }, ["14817"] = { line = 172, file = "PluginsRegistry.ts" },
        ["14818"] = { line = 172, file = "PluginsRegistry.ts" }, ["14824"] = { line = 22, file = "PluginsRegistry.ts" },
        ["14825"] = { line = 23, file = "PluginsRegistry.ts" }, ["14826"] = { line = 24, file = "PluginsRegistry.ts" },
        ["14827"] = { line = 26, file = "PluginsRegistry.ts" }, ["14828"] = { line = 27, file = "PluginsRegistry.ts" },
        ["14829"] = { line = 28, file = "PluginsRegistry.ts" }, ["14830"] = { line = 35, file = "PluginsRegistry.ts" },
        ["14831"] = { line = 35, file = "PluginsRegistry.ts" }, ["14832"] = { line = 35, file = "PluginsRegistry.ts" },
        ["14834"] = { line = 39, file = "PluginsRegistry.ts" }, ["14835"] = { line = 42, file = "PluginsRegistry.ts" },
        ["14836"] = { line = 47, file = "PluginsRegistry.ts" }, ["14837"] = { line = 48, file = "PluginsRegistry.ts" },
        ["14838"] = { line = 49, file = "PluginsRegistry.ts" }, ["14839"] = { line = 50, file = "PluginsRegistry.ts" },
        ["14840"] = { line = 51, file = "PluginsRegistry.ts" }, ["14841"] = { line = 52, file = "PluginsRegistry.ts" },
        ["14842"] = { line = 53, file = "PluginsRegistry.ts" }, ["14843"] = { line = 54, file = "PluginsRegistry.ts" },
        ["14844"] = { line = 55, file = "PluginsRegistry.ts" }, ["14845"] = { line = 55, file = "PluginsRegistry.ts" },
        ["14846"] = { line = 55, file = "PluginsRegistry.ts" }, ["14847"] = { line = 55, file = "PluginsRegistry.ts" },
        ["14848"] = { line = 46, file = "PluginsRegistry.ts" }, ["14849"] = { line = 65, file = "PluginsRegistry.ts" },
        ["14850"] = { line = 66, file = "PluginsRegistry.ts" }, ["14851"] = { line = 69, file = "PluginsRegistry.ts" },
        ["14852"] = { line = 71, file = "PluginsRegistry.ts" }, ["14853"] = { line = 72, file = "PluginsRegistry.ts" },
        ["14854"] = { line = 73, file = "PluginsRegistry.ts" }, ["14855"] = { line = 74, file = "PluginsRegistry.ts" },
        ["14856"] = { line = 75, file = "PluginsRegistry.ts" }, ["14857"] = { line = 76, file = "PluginsRegistry.ts" },
        ["14858"] = { line = 71, file = "PluginsRegistry.ts" }, ["14859"] = { line = 79, file = "PluginsRegistry.ts" },
        ["14860"] = { line = 79, file = "PluginsRegistry.ts" }, ["14861"] = { line = 79, file = "PluginsRegistry.ts" },
        ["14862"] = { line = 79, file = "PluginsRegistry.ts" }, ["14863"] = { line = 79, file = "PluginsRegistry.ts" },
        ["14864"] = { line = 81, file = "PluginsRegistry.ts" }, ["14865"] = { line = 83, file = "PluginsRegistry.ts" },
        ["14866"] = { line = 84, file = "PluginsRegistry.ts" }, ["14867"] = { line = 65, file = "PluginsRegistry.ts" },
        ["14868"] = { line = 88, file = "PluginsRegistry.ts" }, ["14869"] = { line = 89, file = "PluginsRegistry.ts" },
        ["14870"] = { line = 88, file = "PluginsRegistry.ts" }, ["14871"] = { line = 96, file = "PluginsRegistry.ts" },
        ["14872"] = { line = 97, file = "PluginsRegistry.ts" }, ["14873"] = { line = 98, file = "PluginsRegistry.ts" },
        ["14874"] = { line = 99, file = "PluginsRegistry.ts" }, ["14875"] = { line = 100, file = "PluginsRegistry.ts" },
        ["14876"] = { line = 101, file = "PluginsRegistry.ts" }, ["14879"] = { line = 104, file = "PluginsRegistry.ts" },
        ["14882"] = { line = 110, file = "PluginsRegistry.ts" }, ["14883"] = { line = 96, file = "PluginsRegistry.ts" },
        ["14884"] = { line = 113, file = "PluginsRegistry.ts" }, ["14885"] = { line = 114, file = "PluginsRegistry.ts" },
        ["14886"] = { line = 113, file = "PluginsRegistry.ts" }, ["14887"] = { line = 117, file = "PluginsRegistry.ts" },
        ["14888"] = { line = 118, file = "PluginsRegistry.ts" }, ["14889"] = { line = 117, file = "PluginsRegistry.ts" },
        ["14890"] = { line = 122, file = "PluginsRegistry.ts" }, ["14891"] = { line = 123, file = "PluginsRegistry.ts" },
        ["14892"] = { line = 124, file = "PluginsRegistry.ts" }, ["14893"] = { line = 125, file = "PluginsRegistry.ts" },
        ["14894"] = { line = 125, file = "PluginsRegistry.ts" }, ["14895"] = { line = 125, file = "PluginsRegistry.ts" },
        ["14896"] = { line = 126, file = "PluginsRegistry.ts" }, ["14897"] = { line = 125, file = "PluginsRegistry.ts" },
        ["14898"] = { line = 125, file = "PluginsRegistry.ts" }, ["14899"] = { line = 128, file = "PluginsRegistry.ts" },
        ["14900"] = { line = 129, file = "PluginsRegistry.ts" }, ["14901"] = { line = 122, file = "PluginsRegistry.ts" },
        ["14902"] = { line = 132, file = "PluginsRegistry.ts" }, ["14903"] = { line = 133, file = "PluginsRegistry.ts" },
        ["14904"] = { line = 132, file = "PluginsRegistry.ts" }, ["14905"] = { line = 136, file = "PluginsRegistry.ts" },
        ["14906"] = { line = 137, file = "PluginsRegistry.ts" }, ["14907"] = { line = 136, file = "PluginsRegistry.ts" },
        ["14908"] = { line = 140, file = "PluginsRegistry.ts" }, ["14909"] = { line = 141, file = "PluginsRegistry.ts" },
        ["14910"] = { line = 142, file = "PluginsRegistry.ts" }, ["14911"] = { line = 143, file = "PluginsRegistry.ts" },
        ["14912"] = { line = 144, file = "PluginsRegistry.ts" }, ["14913"] = { line = 145, file = "PluginsRegistry.ts" },
        ["14915"] = { line = 147, file = "PluginsRegistry.ts" }, ["14917"] = { line = 149, file = "PluginsRegistry.ts" },
        ["14918"] = { line = 140, file = "PluginsRegistry.ts" }, ["14919"] = { line = 152, file = "PluginsRegistry.ts" },
        ["14920"] = { line = 153, file = "PluginsRegistry.ts" }, ["14921"] = { line = 152, file = "PluginsRegistry.ts" },
        ["14922"] = { line = 156, file = "PluginsRegistry.ts" }, ["14923"] = { line = 157, file = "PluginsRegistry.ts" },
        ["14924"] = { line = 156, file = "PluginsRegistry.ts" }, ["14925"] = { line = 160, file = "PluginsRegistry.ts" },
        ["14926"] = { line = 161, file = "PluginsRegistry.ts" }, ["14927"] = { line = 161, file = "PluginsRegistry.ts" },
        ["14928"] = { line = 161, file = "PluginsRegistry.ts" }, ["14929"] = { line = 161, file = "PluginsRegistry.ts" },
        ["14930"] = { line = 161, file = "PluginsRegistry.ts" }, ["14931"] = { line = 160, file = "PluginsRegistry.ts" },
        ["14932"] = { line = 163, file = "PluginsRegistry.ts" }, ["14933"] = { line = 164, file = "PluginsRegistry.ts" },
        ["14934"] = { line = 163, file = "PluginsRegistry.ts" }, ["14935"] = { line = 166, file = "PluginsRegistry.ts" },
        ["14936"] = { line = 167, file = "PluginsRegistry.ts" }, ["14937"] = { line = 166, file = "PluginsRegistry.ts" },
        ["14941"] = { line = 179, file = "PluginsRegistry.ts" }, ["14942"] = { line = 180, file = "PluginsRegistry.ts" },
        ["14943"] = { line = 181, file = "PluginsRegistry.ts" }, ["14944"] = { line = 182, file = "PluginsRegistry.ts" },
        ["14945"] = { line = 182, file = "PluginsRegistry.ts" }, ["14946"] = { line = 182, file = "PluginsRegistry.ts" },
        ["14947"] = { line = 182, file = "PluginsRegistry.ts" }, ["14948"] = { line = 183, file = "PluginsRegistry.ts" },
        ["14949"] = { line = 184, file = "PluginsRegistry.ts" }, ["14950"] = { line = 185, file = "PluginsRegistry.ts" },
        ["14952"] = { line = 187, file = "PluginsRegistry.ts" }, ["14954"] = { line = 181, file = "PluginsRegistry.ts" },
        ["14955"] = { line = 190, file = "PluginsRegistry.ts" }, ["14956"] = { line = 191, file = "PluginsRegistry.ts" },
        ["14957"] = { line = 191, file = "PluginsRegistry.ts" }, ["14958"] = { line = 191, file = "PluginsRegistry.ts" },
        ["14959"] = { line = 191, file = "PluginsRegistry.ts" }, ["14960"] = { line = 192, file = "PluginsRegistry.ts" },
        ["14961"] = { line = 190, file = "PluginsRegistry.ts" }, ["14962"] = { line = 179, file = "PluginsRegistry.ts" },
        ["14970"] = { line = 1, file = "PluginEventHandler.ts" }, ["14971"] = { line = 1, file = "PluginEventHandler.ts" },
        ["14972"] = { line = 4, file = "PluginEventHandler.ts" }, ["14973"] = { line = 4, file = "PluginEventHandler.ts" },
        ["14974"] = { line = 6, file = "PluginEventHandler.ts" }, ["14975"] = { line = 6, file = "PluginEventHandler.ts" },
        ["14976"] = { line = 6, file = "PluginEventHandler.ts" }, ["14977"] = { line = 7, file = "PluginEventHandler.ts" },
        ["14978"] = { line = 7, file = "PluginEventHandler.ts" }, ["14979"] = { line = 8, file = "PluginEventHandler.ts" },
        ["14980"] = { line = 8, file = "PluginEventHandler.ts" }, ["14981"] = { line = 10, file = "PluginEventHandler.ts" },
        ["14982"] = { line = 10, file = "PluginEventHandler.ts" }, ["14983"] = { line = 10, file = "PluginEventHandler.ts" },
        ["14984"] = { line = 25, file = "PluginEventHandler.ts" }, ["14985"] = { line = 25, file = "PluginEventHandler.ts" },
        ["14986"] = { line = 25, file = "PluginEventHandler.ts" }, ["14987"] = { line = 40, file = "PluginEventHandler.ts" },
        ["14988"] = { line = 40, file = "PluginEventHandler.ts" }, ["14989"] = { line = 33, file = "PluginEventHandler.ts" },
        ["14990"] = { line = 50, file = "PluginEventHandler.ts" }, ["14991"] = { line = 51, file = "PluginEventHandler.ts" },
        ["14992"] = { line = 52, file = "PluginEventHandler.ts" }, ["14993"] = { line = 52, file = "PluginEventHandler.ts" },
        ["14994"] = { line = 52, file = "PluginEventHandler.ts" }, ["14995"] = { line = 52, file = "PluginEventHandler.ts" },
        ["14996"] = { line = 52, file = "PluginEventHandler.ts" }, ["14997"] = { line = 52, file = "PluginEventHandler.ts" },
        ["14998"] = { line = 52, file = "PluginEventHandler.ts" }, ["14999"] = { line = 52, file = "PluginEventHandler.ts" },
        ["15000"] = { line = 40, file = "PluginEventHandler.ts" }, ["15001"] = { line = 55, file = "PluginEventHandler.ts" },
        ["15002"] = { line = 58, file = "PluginEventHandler.ts" }, ["15004"] = { line = 59, file = "PluginEventHandler.ts" },
        ["15005"] = { line = 59, file = "PluginEventHandler.ts" }, ["15006"] = { line = 59, file = "PluginEventHandler.ts" },
        ["15008"] = { line = 58, file = "PluginEventHandler.ts" }, ["15009"] = { line = 61, file = "PluginEventHandler.ts" },
        ["15010"] = { line = 62, file = "PluginEventHandler.ts" }, ["15011"] = { line = 66, file = "PluginEventHandler.ts" },
        ["15012"] = { line = 67, file = "PluginEventHandler.ts" }, ["15013"] = { line = 68, file = "PluginEventHandler.ts" },
        ["15014"] = { line = 69, file = "PluginEventHandler.ts" }, ["15015"] = { line = 69, file = "PluginEventHandler.ts" },
        ["15016"] = { line = 69, file = "PluginEventHandler.ts" }, ["15017"] = { line = 69, file = "PluginEventHandler.ts" },
        ["15018"] = { line = 69, file = "PluginEventHandler.ts" }, ["15019"] = { line = 69, file = "PluginEventHandler.ts" },
        ["15020"] = { line = 70, file = "PluginEventHandler.ts" }, ["15021"] = { line = 68, file = "PluginEventHandler.ts" },
        ["15022"] = { line = 66, file = "PluginEventHandler.ts" }, ["15024"] = { line = 74, file = "PluginEventHandler.ts" },
        ["15025"] = { line = 77, file = "PluginEventHandler.ts" }, ["15026"] = { line = 78, file = "PluginEventHandler.ts" },
        ["15027"] = { line = 79, file = "PluginEventHandler.ts" }, ["15028"] = { line = 80, file = "PluginEventHandler.ts" },
        ["15029"] = { line = 81, file = "PluginEventHandler.ts" }, ["15030"] = { line = 79, file = "PluginEventHandler.ts" },
        ["15031"] = { line = 77, file = "PluginEventHandler.ts" }, ["15033"] = { line = 55, file = "PluginEventHandler.ts" },
        ["15034"] = { line = 87, file = "PluginEventHandler.ts" }, ["15035"] = { line = 91, file = "PluginEventHandler.ts" },
        ["15036"] = { line = 92, file = "PluginEventHandler.ts" }, ["15038"] = { line = 94, file = "PluginEventHandler.ts" },
        ["15039"] = { line = 94, file = "PluginEventHandler.ts" }, ["15040"] = { line = 94, file = "PluginEventHandler.ts" },
        ["15042"] = { line = 92, file = "PluginEventHandler.ts" }, ["15043"] = { line = 99, file = "PluginEventHandler.ts" },
        ["15044"] = { line = 100, file = "PluginEventHandler.ts" }, ["15045"] = { line = 101, file = "PluginEventHandler.ts" },
        ["15046"] = { line = 102, file = "PluginEventHandler.ts" }, ["15047"] = { line = 102, file = "PluginEventHandler.ts" },
        ["15048"] = { line = 102, file = "PluginEventHandler.ts" }, ["15049"] = { line = 102, file = "PluginEventHandler.ts" },
        ["15050"] = { line = 102, file = "PluginEventHandler.ts" }, ["15051"] = { line = 102, file = "PluginEventHandler.ts" },
        ["15052"] = { line = 103, file = "PluginEventHandler.ts" }, ["15053"] = { line = 101, file = "PluginEventHandler.ts" },
        ["15054"] = { line = 104, file = "PluginEventHandler.ts" }, ["15055"] = { line = 99, file = "PluginEventHandler.ts" },
        ["15057"] = { line = 106, file = "PluginEventHandler.ts" }, ["15059"] = { line = 107, file = "PluginEventHandler.ts" },
        ["15060"] = { line = 107, file = "PluginEventHandler.ts" }, ["15061"] = { line = 107, file = "PluginEventHandler.ts" },
        ["15063"] = { line = 106, file = "PluginEventHandler.ts" }, ["15064"] = { line = 111, file = "PluginEventHandler.ts" },
        ["15065"] = { line = 112, file = "PluginEventHandler.ts" }, ["15066"] = { line = 113, file = "PluginEventHandler.ts" },
        ["15067"] = { line = 114, file = "PluginEventHandler.ts" }, ["15068"] = { line = 115, file = "PluginEventHandler.ts" },
        ["15069"] = { line = 113, file = "PluginEventHandler.ts" }, ["15070"] = { line = 116, file = "PluginEventHandler.ts" },
        ["15071"] = { line = 111, file = "PluginEventHandler.ts" }, ["15073"] = { line = 87, file = "PluginEventHandler.ts" },
        ["15074"] = { line = 120, file = "PluginEventHandler.ts" }, ["15075"] = { line = 125, file = "PluginEventHandler.ts" },
        ["15076"] = { line = 125, file = "PluginEventHandler.ts" }, ["15078"] = { line = 126, file = "PluginEventHandler.ts" },
        ["15080"] = { line = 128, file = "PluginEventHandler.ts" }, ["15081"] = { line = 128, file = "PluginEventHandler.ts" },
        ["15082"] = { line = 128, file = "PluginEventHandler.ts" }, ["15084"] = { line = 126, file = "PluginEventHandler.ts" },
        ["15085"] = { line = 133, file = "PluginEventHandler.ts" }, ["15086"] = { line = 134, file = "PluginEventHandler.ts" },
        ["15087"] = { line = 135, file = "PluginEventHandler.ts" }, ["15088"] = { line = 136, file = "PluginEventHandler.ts" },
        ["15089"] = { line = 136, file = "PluginEventHandler.ts" }, ["15090"] = { line = 136, file = "PluginEventHandler.ts" },
        ["15091"] = { line = 136, file = "PluginEventHandler.ts" }, ["15092"] = { line = 136, file = "PluginEventHandler.ts" },
        ["15093"] = { line = 136, file = "PluginEventHandler.ts" }, ["15094"] = { line = 136, file = "PluginEventHandler.ts" },
        ["15095"] = { line = 137, file = "PluginEventHandler.ts" }, ["15096"] = { line = 135, file = "PluginEventHandler.ts" },
        ["15097"] = { line = 133, file = "PluginEventHandler.ts" }, ["15098"] = { line = 120, file = "PluginEventHandler.ts" },
        ["15099"] = { line = 141, file = "PluginEventHandler.ts" }, ["15100"] = { line = 146, file = "PluginEventHandler.ts" },
        ["15101"] = { line = 146, file = "PluginEventHandler.ts" }, ["15103"] = { line = 148, file = "PluginEventHandler.ts" },
        ["15105"] = { line = 150, file = "PluginEventHandler.ts" }, ["15106"] = { line = 150, file = "PluginEventHandler.ts" },
        ["15107"] = { line = 150, file = "PluginEventHandler.ts" }, ["15109"] = { line = 148, file = "PluginEventHandler.ts" },
        ["15110"] = { line = 155, file = "PluginEventHandler.ts" }, ["15111"] = { line = 156, file = "PluginEventHandler.ts" },
        ["15112"] = { line = 157, file = "PluginEventHandler.ts" }, ["15113"] = { line = 158, file = "PluginEventHandler.ts" },
        ["15114"] = { line = 158, file = "PluginEventHandler.ts" }, ["15115"] = { line = 158, file = "PluginEventHandler.ts" },
        ["15116"] = { line = 158, file = "PluginEventHandler.ts" }, ["15117"] = { line = 158, file = "PluginEventHandler.ts" },
        ["15118"] = { line = 158, file = "PluginEventHandler.ts" }, ["15119"] = { line = 158, file = "PluginEventHandler.ts" },
        ["15120"] = { line = 159, file = "PluginEventHandler.ts" }, ["15121"] = { line = 157, file = "PluginEventHandler.ts" },
        ["15122"] = { line = 161, file = "PluginEventHandler.ts" }, ["15123"] = { line = 155, file = "PluginEventHandler.ts" },
        ["15124"] = { line = 141, file = "PluginEventHandler.ts" }, ["15125"] = { line = 164, file = "PluginEventHandler.ts" },
        ["15126"] = { line = 165, file = "PluginEventHandler.ts" }, ["15127"] = { line = 165, file = "PluginEventHandler.ts" },
        ["15129"] = { line = 167, file = "PluginEventHandler.ts" }, ["15130"] = { line = 172, file = "PluginEventHandler.ts" },
        ["15131"] = { line = 173, file = "PluginEventHandler.ts" }, ["15132"] = { line = 174, file = "PluginEventHandler.ts" },
        ["15133"] = { line = 175, file = "PluginEventHandler.ts" }, ["15134"] = { line = 174, file = "PluginEventHandler.ts" },
        ["15135"] = { line = 177, file = "PluginEventHandler.ts" }, ["15136"] = { line = 172, file = "PluginEventHandler.ts" },
        ["15137"] = { line = 164, file = "PluginEventHandler.ts" }, ["15138"] = { line = 180, file = "PluginEventHandler.ts" },
        ["15139"] = { line = 181, file = "PluginEventHandler.ts" }, ["15140"] = { line = 181, file = "PluginEventHandler.ts" },
        ["15142"] = { line = 182, file = "PluginEventHandler.ts" }, ["15143"] = { line = 187, file = "PluginEventHandler.ts" },
        ["15144"] = { line = 188, file = "PluginEventHandler.ts" }, ["15145"] = { line = 189, file = "PluginEventHandler.ts" },
        ["15146"] = { line = 190, file = "PluginEventHandler.ts" }, ["15147"] = { line = 190, file = "PluginEventHandler.ts" },
        ["15148"] = { line = 190, file = "PluginEventHandler.ts" }, ["15149"] = { line = 190, file = "PluginEventHandler.ts" },
        ["15150"] = { line = 189, file = "PluginEventHandler.ts" }, ["15151"] = { line = 192, file = "PluginEventHandler.ts" },
        ["15152"] = { line = 187, file = "PluginEventHandler.ts" }, ["15153"] = { line = 180, file = "PluginEventHandler.ts" },
        ["15154"] = { line = 195, file = "PluginEventHandler.ts" }, ["15155"] = { line = 196, file = "PluginEventHandler.ts" },
        ["15156"] = { line = 201, file = "PluginEventHandler.ts" }, ["15157"] = { line = 202, file = "PluginEventHandler.ts" },
        ["15158"] = { line = 203, file = "PluginEventHandler.ts" }, ["15159"] = { line = 204, file = "PluginEventHandler.ts" },
        ["15160"] = { line = 203, file = "PluginEventHandler.ts" }, ["15161"] = { line = 206, file = "PluginEventHandler.ts" },
        ["15162"] = { line = 201, file = "PluginEventHandler.ts" }, ["15163"] = { line = 195, file = "PluginEventHandler.ts" },
        ["15164"] = { line = 209, file = "PluginEventHandler.ts" }, ["15165"] = { line = 212, file = "PluginEventHandler.ts" },
        ["15166"] = { line = 212, file = "PluginEventHandler.ts" }, ["15168"] = { line = 214, file = "PluginEventHandler.ts" },
        ["15169"] = { line = 215, file = "PluginEventHandler.ts" }, ["15170"] = { line = 215, file = "PluginEventHandler.ts" },
        ["15171"] = { line = 215, file = "PluginEventHandler.ts" }, ["15172"] = { line = 215, file = "PluginEventHandler.ts" },
        ["15173"] = { line = 215, file = "PluginEventHandler.ts" }, ["15174"] = { line = 215, file = "PluginEventHandler.ts" },
        ["15175"] = { line = 217, file = "PluginEventHandler.ts" }, ["15176"] = { line = 218, file = "PluginEventHandler.ts" },
        ["15177"] = { line = 218, file = "PluginEventHandler.ts" }, ["15178"] = { line = 218, file = "PluginEventHandler.ts" },
        ["15179"] = { line = 218, file = "PluginEventHandler.ts" }, ["15180"] = { line = 221, file = "PluginEventHandler.ts" },
        ["15181"] = { line = 222, file = "PluginEventHandler.ts" }, ["15182"] = { line = 214, file = "PluginEventHandler.ts" },
        ["15183"] = { line = 224, file = "PluginEventHandler.ts" }, ["15184"] = { line = 227, file = "PluginEventHandler.ts" },
        ["15185"] = { line = 228, file = "PluginEventHandler.ts" }, ["15187"] = { line = 231, file = "PluginEventHandler.ts" },
        ["15188"] = { line = 209, file = "PluginEventHandler.ts" }, ["15189"] = { line = 235, file = "PluginEventHandler.ts" },
        ["15190"] = { line = 238, file = "PluginEventHandler.ts" }, ["15191"] = { line = 239, file = "PluginEventHandler.ts" },
        ["15192"] = { line = 235, file = "PluginEventHandler.ts" }, ["15193"] = { line = 246, file = "PluginEventHandler.ts" },
        ["15194"] = { line = 252, file = "PluginEventHandler.ts" }, ["15195"] = { line = 254, file = "PluginEventHandler.ts" },
        ["15196"] = { line = 255, file = "PluginEventHandler.ts" }, ["15197"] = { line = 256, file = "PluginEventHandler.ts" },
        ["15199"] = { line = 258, file = "PluginEventHandler.ts" }, ["15200"] = { line = 259, file = "PluginEventHandler.ts" },
        ["15203"] = { line = 263, file = "PluginEventHandler.ts" }, ["15204"] = { line = 263, file = "PluginEventHandler.ts" },
        ["15205"] = { line = 263, file = "PluginEventHandler.ts" }, ["15206"] = { line = 265, file = "PluginEventHandler.ts" },
        ["15207"] = { line = 266, file = "PluginEventHandler.ts" }, ["15208"] = { line = 268, file = "PluginEventHandler.ts" },
        ["15209"] = { line = 272, file = "PluginEventHandler.ts" }, ["15210"] = { line = 273, file = "PluginEventHandler.ts" },
        ["15211"] = { line = 273, file = "PluginEventHandler.ts" }, ["15212"] = { line = 273, file = "PluginEventHandler.ts" },
        ["15213"] = { line = 274, file = "PluginEventHandler.ts" }, ["15214"] = { line = 275, file = "PluginEventHandler.ts" },
        ["15215"] = { line = 273, file = "PluginEventHandler.ts" }, ["15216"] = { line = 277, file = "PluginEventHandler.ts" },
        ["15217"] = { line = 278, file = "PluginEventHandler.ts" }, ["15218"] = { line = 279, file = "PluginEventHandler.ts" },
        ["15220"] = { line = 284, file = "PluginEventHandler.ts" }, ["15221"] = { line = 284, file = "PluginEventHandler.ts" },
        ["15222"] = { line = 284, file = "PluginEventHandler.ts" }, ["15223"] = { line = 284, file = "PluginEventHandler.ts" },
        ["15224"] = { line = 284, file = "PluginEventHandler.ts" }, ["15225"] = { line = 284, file = "PluginEventHandler.ts" },
        ["15226"] = { line = 285, file = "PluginEventHandler.ts" }, ["15227"] = { line = 286, file = "PluginEventHandler.ts" },
        ["15228"] = { line = 287, file = "PluginEventHandler.ts" }, ["15229"] = { line = 288, file = "PluginEventHandler.ts" },
        ["15230"] = { line = 289, file = "PluginEventHandler.ts" }, ["15231"] = { line = 290, file = "PluginEventHandler.ts" },
        ["15232"] = { line = 288, file = "PluginEventHandler.ts" }, ["15233"] = { line = 292, file = "PluginEventHandler.ts" },
        ["15234"] = { line = 293, file = "PluginEventHandler.ts" }, ["15235"] = { line = 294, file = "PluginEventHandler.ts" },
        ["15236"] = { line = 295, file = "PluginEventHandler.ts" }, ["15237"] = { line = 296, file = "PluginEventHandler.ts" },
        ["15238"] = { line = 294, file = "PluginEventHandler.ts" }, ["15239"] = { line = 292, file = "PluginEventHandler.ts" },
        ["15240"] = { line = 287, file = "PluginEventHandler.ts" }, ["15241"] = { line = 284, file = "PluginEventHandler.ts" },
        ["15242"] = { line = 284, file = "PluginEventHandler.ts" }, ["15243"] = { line = 284, file = "PluginEventHandler.ts" },
        ["15244"] = { line = 302, file = "PluginEventHandler.ts" }, ["15245"] = { line = 266, file = "PluginEventHandler.ts" },
        ["15246"] = { line = 306, file = "PluginEventHandler.ts" }, ["15247"] = { line = 306, file = "PluginEventHandler.ts" },
        ["15248"] = { line = 307, file = "PluginEventHandler.ts" }, ["15249"] = { line = 308, file = "PluginEventHandler.ts" },
        ["15250"] = { line = 309, file = "PluginEventHandler.ts" }, ["15251"] = { line = 311, file = "PluginEventHandler.ts" },
        ["15252"] = { line = 307, file = "PluginEventHandler.ts" }, ["15253"] = { line = 306, file = "PluginEventHandler.ts" },
        ["15254"] = { line = 306, file = "PluginEventHandler.ts" }, ["15255"] = { line = 306, file = "PluginEventHandler.ts" },
        ["15256"] = { line = 315, file = "PluginEventHandler.ts" }, ["15257"] = { line = 317, file = "PluginEventHandler.ts" },
        ["15258"] = { line = 318, file = "PluginEventHandler.ts" }, ["15260"] = { line = 320, file = "PluginEventHandler.ts" },
        ["15261"] = { line = 321, file = "PluginEventHandler.ts" }, ["15262"] = { line = 246, file = "PluginEventHandler.ts" },
        ["15287"] = { line = 2, file = "PluginConstants.ts" }, ["15288"] = { line = 2, file = "PluginConstants.ts" },
        ["15289"] = { line = 3, file = "PluginConstants.ts" }, ["15290"] = { line = 3, file = "PluginConstants.ts" },
        ["15291"] = { line = 6, file = "PluginConstants.ts" }, ["15292"] = { line = 8, file = "PluginConstants.ts" },
        ["15293"] = { line = 9, file = "PluginConstants.ts" }, ["15294"] = { line = 9, file = "PluginConstants.ts" },
        ["15295"] = { line = 10, file = "PluginConstants.ts" }, ["15296"] = { line = 9, file = "PluginConstants.ts" },
        ["15297"] = { line = 12, file = "PluginConstants.ts" }, ["15298"] = { line = 13, file = "PluginConstants.ts" },
        ["15299"] = { line = 9, file = "PluginConstants.ts" }, ["15300"] = { line = 8, file = "PluginConstants.ts" },
        ["15313"] = { line = 2, file = "PluginBase.ts" }, ["15314"] = { line = 2, file = "PluginBase.ts" }, ["15315"] = { line = 6, file = "PluginBase.ts" },
        ["15316"] = { line = 6, file = "PluginBase.ts" }, ["15317"] = { line = 8, file = "PluginBase.ts" }, ["15318"] = { line = 8, file = "PluginBase.ts" },
        ["15319"] = { line = 9, file = "PluginBase.ts" }, ["15320"] = { line = 9, file = "PluginBase.ts" }, ["15321"] = { line = 11, file = "PluginBase.ts" },
        ["15322"] = { line = 11, file = "PluginBase.ts" }, ["15323"] = { line = 11, file = "PluginBase.ts" }, ["15324"] = { line = 12, file = "PluginBase.ts" },
        ["15325"] = { line = 12, file = "PluginBase.ts" }, ["15326"] = { line = 12, file = "PluginBase.ts" }, ["15327"] = { line = 13, file = "PluginBase.ts" },
        ["15328"] = { line = 13, file = "PluginBase.ts" }, ["15329"] = { line = 17, file = "PluginBase.ts" }, ["15330"] = { line = 17, file = "PluginBase.ts" },
        ["15331"] = { line = 18, file = "PluginBase.ts" }, ["15332"] = { line = 18, file = "PluginBase.ts" }, ["15333"] = { line = 19, file = "PluginBase.ts" },
        ["15334"] = { line = 19, file = "PluginBase.ts" }, ["15335"] = { line = 20, file = "PluginBase.ts" }, ["15336"] = { line = 20, file = "PluginBase.ts" },
        ["15337"] = { line = 24, file = "PluginBase.ts" }, ["15338"] = { line = 24, file = "PluginBase.ts" }, ["15339"] = { line = 24, file = "PluginBase.ts" },
        ["15340"] = { line = 47, file = "PluginBase.ts" }, ["15341"] = { line = 47, file = "PluginBase.ts" }, ["15342"] = { line = 74, file = "PluginBase.ts" },
        ["15343"] = { line = 64, file = "PluginBase.ts" }, ["15344"] = { line = 65, file = "PluginBase.ts" }, ["15345"] = { line = 66, file = "PluginBase.ts" },
        ["15346"] = { line = 67, file = "PluginBase.ts" }, ["15347"] = { line = 68, file = "PluginBase.ts" }, ["15348"] = { line = 69, file = "PluginBase.ts" },
        ["15349"] = { line = 70, file = "PluginBase.ts" }, ["15350"] = { line = 71, file = "PluginBase.ts" }, ["15351"] = { line = 72, file = "PluginBase.ts" },
        ["15352"] = { line = 73, file = "PluginBase.ts" }, ["15353"] = { line = 75, file = "PluginBase.ts" }, ["15354"] = { line = 75, file = "PluginBase.ts" },
        ["15355"] = { line = 75, file = "PluginBase.ts" }, ["15357"] = { line = 75, file = "PluginBase.ts" }, ["15359"] = { line = 75, file = "PluginBase.ts" },
        ["15360"] = { line = 76, file = "PluginBase.ts" }, ["15361"] = { line = 77, file = "PluginBase.ts" }, ["15362"] = { line = 78, file = "PluginBase.ts" },
        ["15363"] = { line = 79, file = "PluginBase.ts" }, ["15364"] = { line = 80, file = "PluginBase.ts" }, ["15365"] = { line = 81, file = "PluginBase.ts" },
        ["15366"] = { line = 81, file = "PluginBase.ts" }, ["15367"] = { line = 81, file = "PluginBase.ts" }, ["15368"] = { line = 82, file = "PluginBase.ts" },
        ["15369"] = { line = 83, file = "PluginBase.ts" }, ["15370"] = { line = 84, file = "PluginBase.ts" }, ["15371"] = { line = 85, file = "PluginBase.ts" },
        ["15372"] = { line = 86, file = "PluginBase.ts" }, ["15373"] = { line = 87, file = "PluginBase.ts" }, ["15374"] = { line = 88, file = "PluginBase.ts" },
        ["15375"] = { line = 89, file = "PluginBase.ts" }, ["15376"] = { line = 81, file = "PluginBase.ts" }, ["15377"] = { line = 81, file = "PluginBase.ts" },
        ["15378"] = { line = 91, file = "PluginBase.ts" }, ["15379"] = { line = 92, file = "PluginBase.ts" }, ["15380"] = { line = 93, file = "PluginBase.ts" },
        ["15381"] = { line = 94, file = "PluginBase.ts" }, ["15382"] = { line = 95, file = "PluginBase.ts" }, ["15383"] = { line = 96, file = "PluginBase.ts" },
        ["15384"] = { line = 96, file = "PluginBase.ts" }, ["15385"] = { line = 96, file = "PluginBase.ts" }, ["15386"] = { line = 97, file = "PluginBase.ts" },
        ["15387"] = { line = 98, file = "PluginBase.ts" }, ["15388"] = { line = 99, file = "PluginBase.ts" }, ["15389"] = { line = 100, file = "PluginBase.ts" },
        ["15390"] = { line = 101, file = "PluginBase.ts" }, ["15391"] = { line = 102, file = "PluginBase.ts" }, ["15392"] = { line = 103, file = "PluginBase.ts" },
        ["15393"] = { line = 104, file = "PluginBase.ts" }, ["15394"] = { line = 105, file = "PluginBase.ts" }, ["15395"] = { line = 106, file = "PluginBase.ts" },
        ["15396"] = { line = 110, file = "PluginBase.ts" }, ["15397"] = { line = 111, file = "PluginBase.ts" }, ["15398"] = { line = 112, file = "PluginBase.ts" },
        ["15399"] = { line = 113, file = "PluginBase.ts" }, ["15400"] = { line = 114, file = "PluginBase.ts" }, ["15401"] = { line = 110, file = "PluginBase.ts" },
        ["15402"] = { line = 115, file = "PluginBase.ts" }, ["15403"] = { line = 116, file = "PluginBase.ts" }, ["15404"] = { line = 96, file = "PluginBase.ts" },
        ["15405"] = { line = 96, file = "PluginBase.ts" }, ["15406"] = { line = 118, file = "PluginBase.ts" }, ["15407"] = { line = 120, file = "PluginBase.ts" },
        ["15408"] = { line = 121, file = "PluginBase.ts" }, ["15409"] = { line = 122, file = "PluginBase.ts" }, ["15410"] = { line = 121, file = "PluginBase.ts" },
        ["15411"] = { line = 129, file = "PluginBase.ts" }, ["15412"] = { line = 130, file = "PluginBase.ts" }, ["15413"] = { line = 120, file = "PluginBase.ts" },
        ["15414"] = { line = 47, file = "PluginBase.ts" }, ["15419"] = { line = 136, file = "PluginBase.ts" }, ["15423"] = { line = 160, file = "PluginBase.ts" },
        ["15424"] = { line = 166, file = "PluginBase.ts" }, ["15425"] = { line = 166, file = "PluginBase.ts" }, ["15426"] = { line = 166, file = "PluginBase.ts" },
        ["15427"] = { line = 166, file = "PluginBase.ts" }, ["15428"] = { line = 166, file = "PluginBase.ts" }, ["15429"] = { line = 167, file = "PluginBase.ts" },
        ["15430"] = { line = 168, file = "PluginBase.ts" }, ["15431"] = { line = 170, file = "PluginBase.ts" }, ["15432"] = { line = 171, file = "PluginBase.ts" },
        ["15434"] = { line = 173, file = "PluginBase.ts" }, ["15435"] = { line = 174, file = "PluginBase.ts" }, ["15436"] = { line = 175, file = "PluginBase.ts" },
        ["15438"] = { line = 177, file = "PluginBase.ts" }, ["15439"] = { line = 177, file = "PluginBase.ts" }, ["15440"] = { line = 177, file = "PluginBase.ts" },
        ["15441"] = { line = 177, file = "PluginBase.ts" }, ["15442"] = { line = 177, file = "PluginBase.ts" }, ["15445"] = { line = 180, file = "PluginBase.ts" },
        ["15446"] = { line = 181, file = "PluginBase.ts" }, ["15447"] = { line = 181, file = "PluginBase.ts" }, ["15448"] = { line = 181, file = "PluginBase.ts" },
        ["15450"] = { line = 181, file = "PluginBase.ts" }, ["15451"] = { line = 182, file = "PluginBase.ts" }, ["15452"] = { line = 183, file = "PluginBase.ts" },
        ["15453"] = { line = 183, file = "PluginBase.ts" }, ["15454"] = { line = 183, file = "PluginBase.ts" }, ["15455"] = { line = 183, file = "PluginBase.ts" },
        ["15456"] = { line = 183, file = "PluginBase.ts" }, ["15459"] = { line = 160, file = "PluginBase.ts" }, ["15460"] = { line = 188, file = "PluginBase.ts" },
        ["15461"] = { line = 193, file = "PluginBase.ts" }, ["15462"] = { line = 193, file = "PluginBase.ts" }, ["15463"] = { line = 193, file = "PluginBase.ts" },
        ["15464"] = { line = 193, file = "PluginBase.ts" }, ["15465"] = { line = 194, file = "PluginBase.ts" }, ["15466"] = { line = 195, file = "PluginBase.ts" },
        ["15467"] = { line = 197, file = "PluginBase.ts" }, ["15468"] = { line = 198, file = "PluginBase.ts" }, ["15469"] = { line = 200, file = "PluginBase.ts" },
        ["15470"] = { line = 200, file = "PluginBase.ts" }, ["15471"] = { line = 200, file = "PluginBase.ts" }, ["15472"] = { line = 201, file = "PluginBase.ts" },
        ["15473"] = { line = 200, file = "PluginBase.ts" }, ["15474"] = { line = 200, file = "PluginBase.ts" }, ["15476"] = { line = 206, file = "PluginBase.ts" },
        ["15477"] = { line = 207, file = "PluginBase.ts" }, ["15479"] = { line = 209, file = "PluginBase.ts" }, ["15480"] = { line = 210, file = "PluginBase.ts" },
        ["15481"] = { line = 210, file = "PluginBase.ts" }, ["15482"] = { line = 210, file = "PluginBase.ts" }, ["15483"] = { line = 210, file = "PluginBase.ts" },
        ["15484"] = { line = 210, file = "PluginBase.ts" }, ["15486"] = { line = 188, file = "PluginBase.ts" }, ["15487"] = { line = 214, file = "PluginBase.ts" },
        ["15488"] = { line = 215, file = "PluginBase.ts" }, ["15489"] = { line = 215, file = "PluginBase.ts" }, ["15490"] = { line = 215, file = "PluginBase.ts" },
        ["15491"] = { line = 216, file = "PluginBase.ts" }, ["15492"] = { line = 215, file = "PluginBase.ts" }, ["15493"] = { line = 215, file = "PluginBase.ts" },
        ["15494"] = { line = 214, file = "PluginBase.ts" }, ["15495"] = { line = 220, file = "PluginBase.ts" }, ["15496"] = { line = 221, file = "PluginBase.ts" },
        ["15497"] = { line = 221, file = "PluginBase.ts" }, ["15498"] = { line = 221, file = "PluginBase.ts" }, ["15499"] = { line = 222, file = "PluginBase.ts" },
        ["15500"] = { line = 221, file = "PluginBase.ts" }, ["15501"] = { line = 221, file = "PluginBase.ts" }, ["15502"] = { line = 220, file = "PluginBase.ts" },
        ["15503"] = { line = 226, file = "PluginBase.ts" }, ["15504"] = { line = 227, file = "PluginBase.ts" }, ["15505"] = { line = 226, file = "PluginBase.ts" },
        ["15506"] = { line = 230, file = "PluginBase.ts" }, ["15507"] = { line = 231, file = "PluginBase.ts" }, ["15508"] = { line = 231, file = "PluginBase.ts" },
        ["15510"] = { line = 232, file = "PluginBase.ts" }, ["15511"] = { line = 233, file = "PluginBase.ts" }, ["15512"] = { line = 234, file = "PluginBase.ts" },
        ["15513"] = { line = 234, file = "PluginBase.ts" }, ["15514"] = { line = 234, file = "PluginBase.ts" }, ["15515"] = { line = 234, file = "PluginBase.ts" },
        ["15517"] = { line = 236, file = "PluginBase.ts" }, ["15519"] = { line = 230, file = "PluginBase.ts" }, ["15520"] = { line = 240, file = "PluginBase.ts" },
        ["15521"] = { line = 241, file = "PluginBase.ts" }, ["15522"] = { line = 241, file = "PluginBase.ts" }, ["15524"] = { line = 242, file = "PluginBase.ts" },
        ["15525"] = { line = 243, file = "PluginBase.ts" }, ["15526"] = { line = 243, file = "PluginBase.ts" }, ["15527"] = { line = 244, file = "PluginBase.ts" },
        ["15528"] = { line = 245, file = "PluginBase.ts" }, ["15529"] = { line = 245, file = "PluginBase.ts" }, ["15530"] = { line = 245, file = "PluginBase.ts" },
        ["15531"] = { line = 246, file = "PluginBase.ts" }, ["15532"] = { line = 247, file = "PluginBase.ts" }, ["15533"] = { line = 248, file = "PluginBase.ts" },
        ["15534"] = { line = 249, file = "PluginBase.ts" }, ["15535"] = { line = 250, file = "PluginBase.ts" }, ["15536"] = { line = 245, file = "PluginBase.ts" },
        ["15537"] = { line = 245, file = "PluginBase.ts" }, ["15538"] = { line = 253, file = "PluginBase.ts" }, ["15539"] = { line = 243, file = "PluginBase.ts" },
        ["15540"] = { line = 242, file = "PluginBase.ts" }, ["15541"] = { line = 242, file = "PluginBase.ts" }, ["15542"] = { line = 242, file = "PluginBase.ts" },
        ["15543"] = { line = 255, file = "PluginBase.ts" }, ["15544"] = { line = 256, file = "PluginBase.ts" }, ["15545"] = { line = 257, file = "PluginBase.ts" },
        ["15546"] = { line = 258, file = "PluginBase.ts" }, ["15547"] = { line = 259, file = "PluginBase.ts" }, ["15548"] = { line = 260, file = "PluginBase.ts" },
        ["15550"] = { line = 262, file = "PluginBase.ts" }, ["15551"] = { line = 262, file = "PluginBase.ts" }, ["15552"] = { line = 262, file = "PluginBase.ts" },
        ["15553"] = { line = 263, file = "PluginBase.ts" }, ["15554"] = { line = 264, file = "PluginBase.ts" }, ["15557"] = { line = 267, file = "PluginBase.ts" },
        ["15559"] = { line = 256, file = "PluginBase.ts" }, ["15560"] = { line = 270, file = "PluginBase.ts" }, ["15561"] = { line = 270, file = "PluginBase.ts" },
        ["15562"] = { line = 270, file = "PluginBase.ts" }, ["15563"] = { line = 271, file = "PluginBase.ts" }, ["15564"] = { line = 270, file = "PluginBase.ts" },
        ["15565"] = { line = 270, file = "PluginBase.ts" }, ["15567"] = { line = 240, file = "PluginBase.ts" }, ["15568"] = { line = 276, file = "PluginBase.ts" },
        ["15569"] = { line = 277, file = "PluginBase.ts" }, ["15570"] = { line = 276, file = "PluginBase.ts" }, ["15571"] = { line = 280, file = "PluginBase.ts" },
        ["15572"] = { line = 281, file = "PluginBase.ts" }, ["15573"] = { line = 281, file = "PluginBase.ts" }, ["15575"] = { line = 282, file = "PluginBase.ts" },
        ["15576"] = { line = 282, file = "PluginBase.ts" }, ["15577"] = { line = 282, file = "PluginBase.ts" }, ["15578"] = { line = 283, file = "PluginBase.ts" },
        ["15580"] = { line = 283, file = "PluginBase.ts" }, ["15581"] = { line = 283, file = "PluginBase.ts" }, ["15582"] = { line = 283, file = "PluginBase.ts" },
        ["15583"] = { line = 283, file = "PluginBase.ts" }, ["15585"] = { line = 283, file = "PluginBase.ts" }, ["15592"] = { line = 282, file = "PluginBase.ts" },
        ["15593"] = { line = 282, file = "PluginBase.ts" }, ["15594"] = { line = 280, file = "PluginBase.ts" }, ["15595"] = { line = 287, file = "PluginBase.ts" },
        ["15596"] = { line = 288, file = "PluginBase.ts" }, ["15597"] = { line = 287, file = "PluginBase.ts" }, ["15598"] = { line = 291, file = "PluginBase.ts" },
        ["15599"] = { line = 292, file = "PluginBase.ts" }, ["15600"] = { line = 292, file = "PluginBase.ts" }, ["15602"] = { line = 293, file = "PluginBase.ts" },
        ["15603"] = { line = 293, file = "PluginBase.ts" }, ["15604"] = { line = 294, file = "PluginBase.ts" }, ["15605"] = { line = 295, file = "PluginBase.ts" },
        ["15606"] = { line = 304, file = "PluginBase.ts" }, ["15607"] = { line = 304, file = "PluginBase.ts" }, ["15608"] = { line = 304, file = "PluginBase.ts" },
        ["15609"] = { line = 304, file = "PluginBase.ts" }, ["15610"] = { line = 294, file = "PluginBase.ts" }, ["15611"] = { line = 293, file = "PluginBase.ts" },
        ["15612"] = { line = 291, file = "PluginBase.ts" }, ["15613"] = { line = 308, file = "PluginBase.ts" }, ["15614"] = { line = 309, file = "PluginBase.ts" },
        ["15615"] = { line = 308, file = "PluginBase.ts" }, ["15616"] = { line = 312, file = "PluginBase.ts" }, ["15617"] = { line = 313, file = "PluginBase.ts" },
        ["15618"] = { line = 313, file = "PluginBase.ts" }, ["15620"] = { line = 314, file = "PluginBase.ts" }, ["15621"] = { line = 314, file = "PluginBase.ts" },
        ["15622"] = { line = 314, file = "PluginBase.ts" }, ["15623"] = { line = 314, file = "PluginBase.ts" }, ["15624"] = { line = 315, file = "PluginBase.ts" },
        ["15625"] = { line = 315, file = "PluginBase.ts" }, ["15626"] = { line = 316, file = "PluginBase.ts" }, ["15627"] = { line = 316, file = "PluginBase.ts" },
        ["15628"] = { line = 316, file = "PluginBase.ts" }, ["15629"] = { line = 319, file = "PluginBase.ts" }, ["15630"] = { line = 321, file = "PluginBase.ts" },
        ["15631"] = { line = 323, file = "PluginBase.ts" }, ["15632"] = { line = 326, file = "PluginBase.ts" }, ["15633"] = { line = 312, file = "PluginBase.ts" },
        ["15634"] = { line = 329, file = "PluginBase.ts" }, ["15635"] = { line = 330, file = "PluginBase.ts" }, ["15636"] = { line = 329, file = "PluginBase.ts" },
        ["15637"] = { line = 333, file = "PluginBase.ts" }, ["15638"] = { line = 334, file = "PluginBase.ts" }, ["15639"] = { line = 333, file = "PluginBase.ts" },
        ["15640"] = { line = 337, file = "PluginBase.ts" }, ["15641"] = { line = 341, file = "PluginBase.ts" }, ["15642"] = { line = 337, file = "PluginBase.ts" },
        ["15643"] = { line = 347, file = "PluginBase.ts" }, ["15644"] = { line = 351, file = "PluginBase.ts" }, ["15645"] = { line = 347, file = "PluginBase.ts" },
        ["15646"] = { line = 357, file = "PluginBase.ts" }, ["15647"] = { line = 360, file = "PluginBase.ts" }, ["15648"] = { line = 357, file = "PluginBase.ts" },
        ["15649"] = { line = 367, file = "PluginBase.ts" }, ["15650"] = { line = 371, file = "PluginBase.ts" }, ["15651"] = { line = 367, file = "PluginBase.ts" },
        ["15671"] = { line = 6, file = "UserDataWrapper.ts" }, ["15672"] = { line = 6, file = "UserDataWrapper.ts" },
        ["15673"] = { line = 8, file = "UserDataWrapper.ts" }, ["15674"] = { line = 8, file = "UserDataWrapper.ts" },
        ["15675"] = { line = 11, file = "UserDataWrapper.ts" }, ["15676"] = { line = 19, file = "UserDataWrapper.ts" },
        ["15677"] = { line = 19, file = "UserDataWrapper.ts" }, ["15678"] = { line = 21, file = "UserDataWrapper.ts" },
        ["15679"] = { line = 22, file = "UserDataWrapper.ts" }, ["15680"] = { line = 22, file = "UserDataWrapper.ts" },
        ["15681"] = { line = 22, file = "UserDataWrapper.ts" }, ["15682"] = { line = 23, file = "UserDataWrapper.ts" },
        ["15683"] = { line = 24, file = "UserDataWrapper.ts" }, ["15684"] = { line = 23, file = "UserDataWrapper.ts" },
        ["15685"] = { line = 26, file = "UserDataWrapper.ts" }, ["15686"] = { line = 27, file = "UserDataWrapper.ts" },
        ["15687"] = { line = 27, file = "UserDataWrapper.ts" }, ["15688"] = { line = 27, file = "UserDataWrapper.ts" },
        ["15689"] = { line = 27, file = "UserDataWrapper.ts" }, ["15690"] = { line = 26, file = "UserDataWrapper.ts" },
        ["15691"] = { line = 29, file = "UserDataWrapper.ts" }, ["15692"] = { line = 30, file = "UserDataWrapper.ts" },
        ["15693"] = { line = 30, file = "UserDataWrapper.ts" }, ["15694"] = { line = 30, file = "UserDataWrapper.ts" },
        ["15695"] = { line = 30, file = "UserDataWrapper.ts" }, ["15696"] = { line = 30, file = "UserDataWrapper.ts" },
        ["15697"] = { line = 30, file = "UserDataWrapper.ts" }, ["15698"] = { line = 30, file = "UserDataWrapper.ts" },
        ["15699"] = { line = 30, file = "UserDataWrapper.ts" }, ["15700"] = { line = 30, file = "UserDataWrapper.ts" },
        ["15701"] = { line = 30, file = "UserDataWrapper.ts" }, ["15702"] = { line = 29, file = "UserDataWrapper.ts" },
        ["15703"] = { line = 32, file = "UserDataWrapper.ts" }, ["15704"] = { line = 33, file = "UserDataWrapper.ts" },
        ["15705"] = { line = 32, file = "UserDataWrapper.ts" }, ["15706"] = { line = 35, file = "UserDataWrapper.ts" },
        ["15707"] = { line = 36, file = "UserDataWrapper.ts" }, ["15708"] = { line = 36, file = "UserDataWrapper.ts" },
        ["15709"] = { line = 36, file = "UserDataWrapper.ts" }, ["15710"] = { line = 35, file = "UserDataWrapper.ts" },
        ["15711"] = { line = 21, file = "UserDataWrapper.ts" }, ["15712"] = { line = 11, file = "UserDataWrapper.ts" },
        ["15719"] = { line = 9, file = "InstanceUserDataWrapper.ts" }, ["15720"] = { line = 18, file = "InstanceUserDataWrapper.ts" },
        ["15721"] = { line = 19, file = "InstanceUserDataWrapper.ts" }, ["15722"] = { line = 21, file = "InstanceUserDataWrapper.ts" },
        ["15723"] = { line = 20, file = "InstanceUserDataWrapper.ts" }, ["15724"] = { line = 9, file = "InstanceUserDataWrapper.ts" },
        ["15732"] = { line = 1, file = "index.ts" }, ["15733"] = { line = 1, file = "index.ts" }, ["15734"] = { line = 1, file = "index.ts" },
        ["15737"] = { line = 2, file = "index.ts" }, ["15738"] = { line = 2, file = "index.ts" }, ["15739"] = { line = 2, file = "index.ts" },
        ["15747"] = { line = 4, file = "EventHandler.ts" }, ["15748"] = { line = 6, file = "EventHandler.ts" }, ["15749"] = { line = 4, file = "EventHandler.ts" },
        ["15756"] = { line = 5, file = "index.ts" }, ["15775"] = { line = 3, file = "AssetTypes.ts" }, ["15776"] = { line = 5, file = "AssetTypes.ts" },
        ["15777"] = { line = 4, file = "AssetTypes.ts" }, ["15786"] = { line = 1, file = "ContextBuilder.ts" }, ["15787"] = { line = 1, file = "ContextBuilder.ts" },
        ["15788"] = { line = 4, file = "ContextBuilder.ts" }, ["15789"] = { line = 4, file = "ContextBuilder.ts" },
        ["15790"] = { line = 5, file = "ContextBuilder.ts" }, ["15791"] = { line = 5, file = "ContextBuilder.ts" },
        ["15792"] = { line = 8, file = "ContextBuilder.ts" }, ["15793"] = { line = 8, file = "ContextBuilder.ts" },
        ["15794"] = { line = 10, file = "ContextBuilder.ts" }, ["15795"] = { line = 17, file = "ContextBuilder.ts" },
        ["15796"] = { line = 18, file = "ContextBuilder.ts" }, ["15797"] = { line = 18, file = "ContextBuilder.ts" },
        ["15798"] = { line = 19, file = "ContextBuilder.ts" }, ["15799"] = { line = 18, file = "ContextBuilder.ts" },
        ["15800"] = { line = 20, file = "ContextBuilder.ts" }, ["15801"] = { line = 20, file = "ContextBuilder.ts" },
        ["15802"] = { line = 21, file = "ContextBuilder.ts" }, ["15803"] = { line = 22, file = "ContextBuilder.ts" },
        ["15804"] = { line = 23, file = "ContextBuilder.ts" }, ["15805"] = { line = 24, file = "ContextBuilder.ts" },
        ["15806"] = { line = 25, file = "ContextBuilder.ts" }, ["15807"] = { line = 26, file = "ContextBuilder.ts" },
        ["15808"] = { line = 20, file = "ContextBuilder.ts" }, ["15809"] = { line = 28, file = "ContextBuilder.ts" },
        ["15810"] = { line = 18, file = "ContextBuilder.ts" }, ["15811"] = { line = 18, file = "ContextBuilder.ts" },
        ["15812"] = { line = 17, file = "ContextBuilder.ts" }, ["15813"] = { line = 32, file = "ContextBuilder.ts" },
        ["15814"] = { line = 33, file = "ContextBuilder.ts" }, ["15815"] = { line = 33, file = "ContextBuilder.ts" },
        ["15816"] = { line = 33, file = "ContextBuilder.ts" }, ["15817"] = { line = 33, file = "ContextBuilder.ts" },
        ["15818"] = { line = 33, file = "ContextBuilder.ts" }, ["15819"] = { line = 34, file = "ContextBuilder.ts" },
        ["15820"] = { line = 34, file = "ContextBuilder.ts" }, ["15821"] = { line = 35, file = "ContextBuilder.ts" },
        ["15822"] = { line = 34, file = "ContextBuilder.ts" }, ["15823"] = { line = 36, file = "ContextBuilder.ts" },
        ["15824"] = { line = 36, file = "ContextBuilder.ts" }, ["15825"] = { line = 36, file = "ContextBuilder.ts" },
        ["15826"] = { line = 36, file = "ContextBuilder.ts" }, ["15827"] = { line = 36, file = "ContextBuilder.ts" },
        ["15828"] = { line = 36, file = "ContextBuilder.ts" }, ["15829"] = { line = 36, file = "ContextBuilder.ts" },
        ["15830"] = { line = 36, file = "ContextBuilder.ts" }, ["15831"] = { line = 34, file = "ContextBuilder.ts" },
        ["15832"] = { line = 32, file = "ContextBuilder.ts" }, ["15833"] = { line = 41, file = "ContextBuilder.ts" },
        ["15834"] = { line = 42, file = "ContextBuilder.ts" }, ["15835"] = { line = 42, file = "ContextBuilder.ts" },
        ["15836"] = { line = 42, file = "ContextBuilder.ts" }, ["15837"] = { line = 42, file = "ContextBuilder.ts" },
        ["15838"] = { line = 42, file = "ContextBuilder.ts" }, ["15839"] = { line = 43, file = "ContextBuilder.ts" },
        ["15840"] = { line = 43, file = "ContextBuilder.ts" }, ["15841"] = { line = 43, file = "ContextBuilder.ts" },
        ["15842"] = { line = 43, file = "ContextBuilder.ts" }, ["15843"] = { line = 43, file = "ContextBuilder.ts" },
        ["15844"] = { line = 43, file = "ContextBuilder.ts" }, ["15845"] = { line = 43, file = "ContextBuilder.ts" },
        ["15846"] = { line = 43, file = "ContextBuilder.ts" }, ["15847"] = { line = 43, file = "ContextBuilder.ts" },
        ["15848"] = { line = 44, file = "ContextBuilder.ts" }, ["15849"] = { line = 44, file = "ContextBuilder.ts" },
        ["15850"] = { line = 45, file = "ContextBuilder.ts" }, ["15851"] = { line = 44, file = "ContextBuilder.ts" },
        ["15852"] = { line = 46, file = "ContextBuilder.ts" }, ["15853"] = { line = 47, file = "ContextBuilder.ts" },
        ["15854"] = { line = 44, file = "ContextBuilder.ts" }, ["15855"] = { line = 44, file = "ContextBuilder.ts" },
        ["15856"] = { line = 41, file = "ContextBuilder.ts" }, ["15857"] = { line = 51, file = "ContextBuilder.ts" },
        ["15858"] = { line = 52, file = "ContextBuilder.ts" }, ["15859"] = { line = 52, file = "ContextBuilder.ts" },
        ["15860"] = { line = 53, file = "ContextBuilder.ts" }, ["15861"] = { line = 54, file = "ContextBuilder.ts" },
        ["15862"] = { line = 54, file = "ContextBuilder.ts" }, ["15863"] = { line = 55, file = "ContextBuilder.ts" },
        ["15864"] = { line = 54, file = "ContextBuilder.ts" }, ["15865"] = { line = 56, file = "ContextBuilder.ts" },
        ["15866"] = { line = 57, file = "ContextBuilder.ts" }, ["15867"] = { line = 57, file = "ContextBuilder.ts" },
        ["15868"] = { line = 57, file = "ContextBuilder.ts" }, ["15869"] = { line = 57, file = "ContextBuilder.ts" },
        ["15870"] = { line = 57, file = "ContextBuilder.ts" }, ["15871"] = { line = 57, file = "ContextBuilder.ts" },
        ["15872"] = { line = 57, file = "ContextBuilder.ts" }, ["15873"] = { line = 57, file = "ContextBuilder.ts" },
        ["15874"] = { line = 57, file = "ContextBuilder.ts" }, ["15875"] = { line = 58, file = "ContextBuilder.ts" },
        ["15876"] = { line = 58, file = "ContextBuilder.ts" }, ["15877"] = { line = 58, file = "ContextBuilder.ts" },
        ["15878"] = { line = 58, file = "ContextBuilder.ts" }, ["15879"] = { line = 58, file = "ContextBuilder.ts" },
        ["15880"] = { line = 58, file = "ContextBuilder.ts" }, ["15881"] = { line = 58, file = "ContextBuilder.ts" },
        ["15882"] = { line = 58, file = "ContextBuilder.ts" }, ["15883"] = { line = 58, file = "ContextBuilder.ts" },
        ["15884"] = { line = 59, file = "ContextBuilder.ts" }, ["15885"] = { line = 54, file = "ContextBuilder.ts" },
        ["15886"] = { line = 54, file = "ContextBuilder.ts" }, ["15887"] = { line = 51, file = "ContextBuilder.ts" },
        ["15888"] = { line = 63, file = "ContextBuilder.ts" }, ["15889"] = { line = 74, file = "ContextBuilder.ts" },
        ["15890"] = { line = 75, file = "ContextBuilder.ts" }, ["15891"] = { line = 76, file = "ContextBuilder.ts" },
        ["15892"] = { line = 77, file = "ContextBuilder.ts" }, ["15893"] = { line = 78, file = "ContextBuilder.ts" },
        ["15894"] = { line = 79, file = "ContextBuilder.ts" }, ["15895"] = { line = 80, file = "ContextBuilder.ts" },
        ["15896"] = { line = 81, file = "ContextBuilder.ts" }, ["15897"] = { line = 82, file = "ContextBuilder.ts" },
        ["15898"] = { line = 73, file = "ContextBuilder.ts" }, ["15899"] = { line = 10, file = "ContextBuilder.ts" },
        ["15906"] = { line = 3, file = "DataMigrations.ts" }, ["15907"] = { line = 4, file = "DataMigrations.ts" },
        ["15908"] = { line = 5, file = "DataMigrations.ts" }, ["15909"] = { line = 6, file = "DataMigrations.ts" },
        ["15910"] = { line = 7, file = "DataMigrations.ts" }, ["15911"] = { line = 8, file = "DataMigrations.ts" },
        ["15912"] = { line = 9, file = "DataMigrations.ts" }, ["15913"] = { line = 8, file = "DataMigrations.ts" },
        ["15914"] = { line = 4, file = "DataMigrations.ts" }, ["15915"] = { line = 12, file = "DataMigrations.ts" },
        ["15916"] = { line = 13, file = "DataMigrations.ts" }, ["15917"] = { line = 14, file = "DataMigrations.ts" },
        ["15918"] = { line = 15, file = "DataMigrations.ts" }, ["15919"] = { line = 16, file = "DataMigrations.ts" },
        ["15920"] = { line = 17, file = "DataMigrations.ts" }, ["15921"] = { line = 16, file = "DataMigrations.ts" },
        ["15922"] = { line = 12, file = "DataMigrations.ts" }, ["15923"] = { line = 20, file = "DataMigrations.ts" },
        ["15924"] = { line = 21, file = "DataMigrations.ts" }, ["15925"] = { line = 22, file = "DataMigrations.ts" },
        ["15926"] = { line = 23, file = "DataMigrations.ts" }, ["15927"] = { line = 24, file = "DataMigrations.ts" },
        ["15928"] = { line = 25, file = "DataMigrations.ts" }, ["15929"] = { line = 24, file = "DataMigrations.ts" },
        ["15930"] = { line = 20, file = "DataMigrations.ts" }, ["15931"] = { line = 28, file = "DataMigrations.ts" },
        ["15932"] = { line = 29, file = "DataMigrations.ts" }, ["15933"] = { line = 30, file = "DataMigrations.ts" },
        ["15934"] = { line = 31, file = "DataMigrations.ts" }, ["15935"] = { line = 32, file = "DataMigrations.ts" },
        ["15936"] = { line = 33, file = "DataMigrations.ts" }, ["15937"] = { line = 32, file = "DataMigrations.ts" },
        ["15938"] = { line = 28, file = "DataMigrations.ts" }, ["15939"] = { line = 3, file = "DataMigrations.ts" },
        ["15948"] = { line = 179, file = "EncoderLocator.ts" }, ["15949"] = { line = 179, file = "EncoderLocator.ts" },
        ["15950"] = { line = 180, file = "EncoderLocator.ts" }, ["15952"] = { line = 198, file = "EncoderLocator.ts" },
        ["15953"] = { line = 199, file = "EncoderLocator.ts" }, ["15954"] = { line = 201, file = "EncoderLocator.ts" },
        ["15956"] = { line = 203, file = "EncoderLocator.ts" }, ["15957"] = { line = 205, file = "EncoderLocator.ts" },
        ["15958"] = { line = 205, file = "EncoderLocator.ts" }, ["15959"] = { line = 205, file = "EncoderLocator.ts" },
        ["15960"] = { line = 205, file = "EncoderLocator.ts" }, ["15962"] = { line = 207, file = "EncoderLocator.ts" },
        ["15963"] = { line = 208, file = "EncoderLocator.ts" }, ["15964"] = { line = 208, file = "EncoderLocator.ts" },
        ["15965"] = { line = 208, file = "EncoderLocator.ts" }, ["15966"] = { line = 208, file = "EncoderLocator.ts" },
        ["15972"] = { line = 9, file = "EncoderLocator.ts" }, ["15973"] = { line = 11, file = "EncoderLocator.ts" },
        ["15974"] = { line = 11, file = "EncoderLocator.ts" }, ["15975"] = { line = 11, file = "EncoderLocator.ts" },
        ["15976"] = { line = 11, file = "EncoderLocator.ts" }, ["15977"] = { line = 11, file = "EncoderLocator.ts" },
        ["15978"] = { line = 16, file = "EncoderLocator.ts" }, ["15979"] = { line = 27, file = "EncoderLocator.ts" },
        ["15980"] = { line = 27, file = "EncoderLocator.ts" }, ["15981"] = { line = 28, file = "EncoderLocator.ts" },
        ["15982"] = { line = 29, file = "EncoderLocator.ts" }, ["15983"] = { line = 30, file = "EncoderLocator.ts" },
        ["15985"] = { line = 32, file = "EncoderLocator.ts" }, ["15988"] = { line = 39, file = "EncoderLocator.ts" },
        ["15989"] = { line = 40, file = "EncoderLocator.ts" }, ["15990"] = { line = 41, file = "EncoderLocator.ts" },
        ["15991"] = { line = 42, file = "EncoderLocator.ts" }, ["15993"] = { line = 44, file = "EncoderLocator.ts" },
        ["15996"] = { line = 51, file = "EncoderLocator.ts" }, ["15997"] = { line = 54, file = "EncoderLocator.ts" },
        ["15998"] = { line = 55, file = "EncoderLocator.ts" }, ["15999"] = { line = 56, file = "EncoderLocator.ts" },
        ["16000"] = { line = 58, file = "EncoderLocator.ts" }, ["16001"] = { line = 59, file = "EncoderLocator.ts" },
        ["16002"] = { line = 60, file = "EncoderLocator.ts" }, ["16003"] = { line = 61, file = "EncoderLocator.ts" },
        ["16004"] = { line = 64, file = "EncoderLocator.ts" }, ["16005"] = { line = 65, file = "EncoderLocator.ts" },
        ["16006"] = { line = 66, file = "EncoderLocator.ts" }, ["16007"] = { line = 67, file = "EncoderLocator.ts" },
        ["16008"] = { line = 68, file = "EncoderLocator.ts" }, ["16009"] = { line = 69, file = "EncoderLocator.ts" },
        ["16010"] = { line = 70, file = "EncoderLocator.ts" }, ["16011"] = { line = 71, file = "EncoderLocator.ts" },
        ["16013"] = { line = 73, file = "EncoderLocator.ts" }, ["16014"] = { line = 73, file = "EncoderLocator.ts" },
        ["16015"] = { line = 73, file = "EncoderLocator.ts" }, ["16016"] = { line = 73, file = "EncoderLocator.ts" },
        ["16017"] = { line = 73, file = "EncoderLocator.ts" }, ["16018"] = { line = 73, file = "EncoderLocator.ts" },
        ["16019"] = { line = 73, file = "EncoderLocator.ts" }, ["16023"] = { line = 80, file = "EncoderLocator.ts" },
        ["16024"] = { line = 81, file = "EncoderLocator.ts" }, ["16025"] = { line = 83, file = "EncoderLocator.ts" },
        ["16026"] = { line = 84, file = "EncoderLocator.ts" }, ["16027"] = { line = 87, file = "EncoderLocator.ts" },
        ["16028"] = { line = 88, file = "EncoderLocator.ts" }, ["16029"] = { line = 89, file = "EncoderLocator.ts" },
        ["16030"] = { line = 90, file = "EncoderLocator.ts" }, ["16032"] = { line = 92, file = "EncoderLocator.ts" },
        ["16035"] = { line = 87, file = "EncoderLocator.ts" }, ["16036"] = { line = 98, file = "EncoderLocator.ts" },
        ["16037"] = { line = 99, file = "EncoderLocator.ts" }, ["16038"] = { line = 100, file = "EncoderLocator.ts" },
        ["16039"] = { line = 101, file = "EncoderLocator.ts" }, ["16040"] = { line = 103, file = "EncoderLocator.ts" },
        ["16042"] = { line = 107, file = "EncoderLocator.ts" }, ["16045"] = { line = 113, file = "EncoderLocator.ts" },
        ["16046"] = { line = 115, file = "EncoderLocator.ts" }, ["16047"] = { line = 116, file = "EncoderLocator.ts" },
        ["16049"] = { line = 119, file = "EncoderLocator.ts" }, ["16050"] = { line = 120, file = "EncoderLocator.ts" },
        ["16051"] = { line = 121, file = "EncoderLocator.ts" }, ["16052"] = { line = 130, file = "EncoderLocator.ts" },
        ["16053"] = { line = 131, file = "EncoderLocator.ts" }, ["16054"] = { line = 134, file = "EncoderLocator.ts" },
        ["16056"] = { line = 141, file = "EncoderLocator.ts" }, ["16057"] = { line = 141, file = "EncoderLocator.ts" },
        ["16058"] = { line = 141, file = "EncoderLocator.ts" }, ["16059"] = { line = 141, file = "EncoderLocator.ts" },
        ["16060"] = { line = 141, file = "EncoderLocator.ts" }, ["16061"] = { line = 141, file = "EncoderLocator.ts" },
        ["16062"] = { line = 141, file = "EncoderLocator.ts" }, ["16066"] = { line = 147, file = "EncoderLocator.ts" },
        ["16067"] = { line = 148, file = "EncoderLocator.ts" }, ["16068"] = { line = 149, file = "EncoderLocator.ts" },
        ["16069"] = { line = 150, file = "EncoderLocator.ts" }, ["16071"] = { line = 151, file = "EncoderLocator.ts" },
        ["16072"] = { line = 152, file = "EncoderLocator.ts" }, ["16075"] = { line = 153, file = "EncoderLocator.ts" },
        ["16076"] = { line = 154, file = "EncoderLocator.ts" }, ["16079"] = { line = 156, file = "EncoderLocator.ts" },
        ["16082"] = { line = 157, file = "EncoderLocator.ts" }, ["16087"] = { line = 162, file = "EncoderLocator.ts" },
        ["16088"] = { line = 163, file = "EncoderLocator.ts" }, ["16089"] = { line = 164, file = "EncoderLocator.ts" },
        ["16090"] = { line = 165, file = "EncoderLocator.ts" }, ["16092"] = { line = 168, file = "EncoderLocator.ts" },
        ["16093"] = { line = 169, file = "EncoderLocator.ts" }, ["16094"] = { line = 170, file = "EncoderLocator.ts" },
        ["16095"] = { line = 171, file = "EncoderLocator.ts" }, ["16096"] = { line = 172, file = "EncoderLocator.ts" },
        ["16098"] = { line = 174, file = "EncoderLocator.ts" }, ["16099"] = { line = 174, file = "EncoderLocator.ts" },
        ["16100"] = { line = 174, file = "EncoderLocator.ts" }, ["16101"] = { line = 174, file = "EncoderLocator.ts" },
        ["16104"] = { line = 17, file = "EncoderLocator.ts" }, ["16105"] = { line = 18, file = "EncoderLocator.ts" },
        ["16106"] = { line = 19, file = "EncoderLocator.ts" }, ["16107"] = { line = 24, file = "EncoderLocator.ts" },
        ["16108"] = { line = 17, file = "EncoderLocator.ts" }, ["16109"] = { line = 16, file = "EncoderLocator.ts" },
        ["16110"] = { line = 185, file = "EncoderLocator.ts" }, ["16111"] = { line = 186, file = "EncoderLocator.ts" },
        ["16112"] = { line = 187, file = "EncoderLocator.ts" }, ["16113"] = { line = 188, file = "EncoderLocator.ts" },
        ["16114"] = { line = 189, file = "EncoderLocator.ts" }, ["16115"] = { line = 190, file = "EncoderLocator.ts" },
        ["16116"] = { line = 191, file = "EncoderLocator.ts" }, ["16117"] = { line = 192, file = "EncoderLocator.ts" },
        ["16118"] = { line = 193, file = "EncoderLocator.ts" }, ["16119"] = { line = 194, file = "EncoderLocator.ts" },
        ["16120"] = { line = 195, file = "EncoderLocator.ts" }, ["16121"] = { line = 185, file = "EncoderLocator.ts" },
        ["16129"] = { line = 2, file = "__env.ts" }, ["16130"] = { line = 2, file = "__env.ts" }, ["16131"] = { line = 3, file = "__env.ts" },
        ["16132"] = { line = 4, file = "__env.ts" }, ["16133"] = { line = 5, file = "__env.ts" }, ["16134"] = { line = 6, file = "__env.ts" },
        ["16135"] = { line = 7, file = "__env.ts" }, ["16136"] = { line = 8, file = "__env.ts" }, ["16137"] = { line = 3, file = "__env.ts" },
        ["16146"] = { line = 3, file = "common.ts" }, ["16147"] = { line = 3, file = "common.ts" }, ["16148"] = { line = 6, file = "common.ts" },
        ["16149"] = { line = 8, file = "common.ts" }, ["16150"] = { line = 9, file = "common.ts" }, ["16151"] = { line = 8, file = "common.ts" },
        ["16152"] = { line = 12, file = "common.ts" }, ["16153"] = { line = 13, file = "common.ts" }, ["16154"] = { line = 12, file = "common.ts" },
        ["16155"] = { line = 15, file = "common.ts" }, ["16156"] = { line = 16, file = "common.ts" }, ["16157"] = { line = 17, file = "common.ts" },
        ["16158"] = { line = 18, file = "common.ts" }, ["16159"] = { line = 19, file = "common.ts" }, ["16162"] = { line = 15, file = "common.ts" },
        ["16163"] = { line = 23, file = "common.ts" }, ["16167"] = { line = 31, file = "common.ts" }, ["16174"] = { line = 4, file = "defaultConfig.ts" },
        ["16175"] = { line = 4, file = "defaultConfig.ts" }, ["16176"] = { line = 7, file = "defaultConfig.ts" },
        ["16177"] = { line = 9, file = "defaultConfig.ts" }, ["16178"] = { line = 15, file = "defaultConfig.ts" },
        ["16179"] = { line = 17, file = "defaultConfig.ts" }, ["16180"] = { line = 18, file = "defaultConfig.ts" },
        ["16181"] = { line = 19, file = "defaultConfig.ts" }, ["16182"] = { line = 20, file = "defaultConfig.ts" },
        ["16183"] = { line = 21, file = "defaultConfig.ts" }, ["16184"] = { line = 22, file = "defaultConfig.ts" },
        ["16185"] = { line = 23, file = "defaultConfig.ts" }, ["16186"] = { line = 24, file = "defaultConfig.ts" },
        ["16187"] = { line = 25, file = "defaultConfig.ts" }, ["16188"] = { line = 26, file = "defaultConfig.ts" },
        ["16189"] = { line = 27, file = "defaultConfig.ts" }, ["16190"] = { line = 28, file = "defaultConfig.ts" },
        ["16191"] = { line = 29, file = "defaultConfig.ts" }, ["16192"] = { line = 30, file = "defaultConfig.ts" },
        ["16193"] = { line = 31, file = "defaultConfig.ts" }, ["16194"] = { line = 32, file = "defaultConfig.ts" },
        ["16195"] = { line = 33, file = "defaultConfig.ts" }, ["16196"] = { line = 34, file = "defaultConfig.ts" },
        ["16197"] = { line = 35, file = "defaultConfig.ts" }, ["16198"] = { line = 36, file = "defaultConfig.ts" },
        ["16199"] = { line = 25, file = "defaultConfig.ts" }, ["16200"] = { line = 19, file = "defaultConfig.ts" },
        ["16202"] = { line = 40, file = "defaultConfig.ts" }, ["16203"] = { line = 41, file = "defaultConfig.ts" },
        ["16204"] = { line = 42, file = "defaultConfig.ts" }, ["16205"] = { line = 43, file = "defaultConfig.ts" },
        ["16206"] = { line = 44, file = "defaultConfig.ts" }, ["16207"] = { line = 45, file = "defaultConfig.ts" },
        ["16208"] = { line = 46, file = "defaultConfig.ts" }, ["16209"] = { line = 47, file = "defaultConfig.ts" },
        ["16210"] = { line = 48, file = "defaultConfig.ts" }, ["16211"] = { line = 49, file = "defaultConfig.ts" },
        ["16212"] = { line = 50, file = "defaultConfig.ts" }, ["16213"] = { line = 51, file = "defaultConfig.ts" },
        ["16214"] = { line = 52, file = "defaultConfig.ts" }, ["16215"] = { line = 53, file = "defaultConfig.ts" },
        ["16216"] = { line = 54, file = "defaultConfig.ts" }, ["16217"] = { line = 55, file = "defaultConfig.ts" },
        ["16218"] = { line = 56, file = "defaultConfig.ts" }, ["16219"] = { line = 57, file = "defaultConfig.ts" },
        ["16220"] = { line = 46, file = "defaultConfig.ts" }, ["16221"] = { line = 40, file = "defaultConfig.ts" },
        ["16223"] = { line = 17, file = "defaultConfig.ts" }, ["16224"] = { line = 62, file = "defaultConfig.ts" },
        ["16225"] = { line = 63, file = "defaultConfig.ts" }, ["16226"] = { line = 62, file = "defaultConfig.ts" },
        ["16233"] = { line = 10, file = "ExecutorToggle.ts" }, ["16234"] = { line = 34, file = "ExecutorToggle.ts" },
        ["16235"] = { line = 34, file = "ExecutorToggle.ts" }, ["16236"] = { line = 35, file = "ExecutorToggle.ts" },
        ["16238"] = { line = 38, file = "ExecutorToggle.ts" }, ["16239"] = { line = 39, file = "ExecutorToggle.ts" },
        ["16240"] = { line = 41, file = "ExecutorToggle.ts" }, ["16242"] = { line = 44, file = "ExecutorToggle.ts" },
        ["16243"] = { line = 47, file = "ExecutorToggle.ts" }, ["16244"] = { line = 47, file = "ExecutorToggle.ts" },
        ["16245"] = { line = 49, file = "ExecutorToggle.ts" }, ["16246"] = { line = 52, file = "ExecutorToggle.ts" },
        ["16247"] = { line = 57, file = "ExecutorToggle.ts" }, ["16248"] = { line = 58, file = "ExecutorToggle.ts" },
        ["16249"] = { line = 60, file = "ExecutorToggle.ts" }, ["16250"] = { line = 63, file = "ExecutorToggle.ts" },
        ["16252"] = { line = 67, file = "ExecutorToggle.ts" }, ["16253"] = { line = 68, file = "ExecutorToggle.ts" },
        ["16254"] = { line = 68, file = "ExecutorToggle.ts" }, ["16255"] = { line = 68, file = "ExecutorToggle.ts" },
        ["16256"] = { line = 68, file = "ExecutorToggle.ts" }, ["16257"] = { line = 69, file = "ExecutorToggle.ts" },
        ["16258"] = { line = 70, file = "ExecutorToggle.ts" }, ["16259"] = { line = 71, file = "ExecutorToggle.ts" },
        ["16261"] = { line = 73, file = "ExecutorToggle.ts" }, ["16262"] = { line = 74, file = "ExecutorToggle.ts" },
        ["16263"] = { line = 75, file = "ExecutorToggle.ts" }, ["16264"] = { line = 76, file = "ExecutorToggle.ts" },
        ["16265"] = { line = 77, file = "ExecutorToggle.ts" }, ["16266"] = { line = 78, file = "ExecutorToggle.ts" },
        ["16267"] = { line = 79, file = "ExecutorToggle.ts" }, ["16268"] = { line = 74, file = "ExecutorToggle.ts" },
        ["16269"] = { line = 81, file = "ExecutorToggle.ts" }, ["16270"] = { line = 82, file = "ExecutorToggle.ts" },
        ["16273"] = { line = 25, file = "ExecutorToggle.ts" }, ["16274"] = { line = 19, file = "ExecutorToggle.ts" },
        ["16275"] = { line = 20, file = "ExecutorToggle.ts" }, ["16276"] = { line = 21, file = "ExecutorToggle.ts" },
        ["16277"] = { line = 22, file = "ExecutorToggle.ts" }, ["16278"] = { line = 23, file = "ExecutorToggle.ts" },
        ["16279"] = { line = 24, file = "ExecutorToggle.ts" }, ["16280"] = { line = 28, file = "ExecutorToggle.ts" },
        ["16281"] = { line = 10, file = "ExecutorToggle.ts" }, ["16291"] = { line = 13, file = "RelativeMidiMap.ts" },
        ["16293"] = { line = 14, file = "RelativeMidiMap.ts" }, ["16294"] = { line = 15, file = "RelativeMidiMap.ts" },
        ["16297"] = { line = 16, file = "RelativeMidiMap.ts" }, ["16298"] = { line = 17, file = "RelativeMidiMap.ts" },
        ["16300"] = { line = 18, file = "RelativeMidiMap.ts" }, ["16301"] = { line = 18, file = "RelativeMidiMap.ts" },
        ["16302"] = { line = 19, file = "RelativeMidiMap.ts" }, ["16303"] = { line = 20, file = "RelativeMidiMap.ts" },
        ["16304"] = { line = 22, file = "RelativeMidiMap.ts" }, ["16305"] = { line = 23, file = "RelativeMidiMap.ts" },
        ["16306"] = { line = 18, file = "RelativeMidiMap.ts" }, ["16309"] = { line = 25, file = "RelativeMidiMap.ts" },
        ["16312"] = { line = 27, file = "RelativeMidiMap.ts" }, ["16315"] = { line = 28, file = "RelativeMidiMap.ts" },
        ["16316"] = { line = 29, file = "RelativeMidiMap.ts" }, ["16318"] = { line = 30, file = "RelativeMidiMap.ts" },
        ["16319"] = { line = 30, file = "RelativeMidiMap.ts" }, ["16320"] = { line = 31, file = "RelativeMidiMap.ts" },
        ["16321"] = { line = 32, file = "RelativeMidiMap.ts" }, ["16322"] = { line = 34, file = "RelativeMidiMap.ts" },
        ["16323"] = { line = 35, file = "RelativeMidiMap.ts" }, ["16324"] = { line = 30, file = "RelativeMidiMap.ts" },
        ["16327"] = { line = 37, file = "RelativeMidiMap.ts" }, ["16330"] = { line = 39, file = "RelativeMidiMap.ts" },
        ["16333"] = { line = 40, file = "RelativeMidiMap.ts" }, ["16334"] = { line = 41, file = "RelativeMidiMap.ts" },
        ["16336"] = { line = 42, file = "RelativeMidiMap.ts" }, ["16337"] = { line = 42, file = "RelativeMidiMap.ts" },
        ["16338"] = { line = 43, file = "RelativeMidiMap.ts" }, ["16339"] = { line = 44, file = "RelativeMidiMap.ts" },
        ["16340"] = { line = 46, file = "RelativeMidiMap.ts" }, ["16341"] = { line = 47, file = "RelativeMidiMap.ts" },
        ["16342"] = { line = 42, file = "RelativeMidiMap.ts" }, ["16345"] = { line = 49, file = "RelativeMidiMap.ts" },
        ["16350"] = { line = 52, file = "RelativeMidiMap.ts" }, ["16354"] = { line = 13, file = "RelativeMidiMap.ts" },
        ["16356"] = { line = 60, file = "RelativeMidiMap.ts" }, ["16357"] = { line = 61, file = "RelativeMidiMap.ts" },
        ["16358"] = { line = 62, file = "RelativeMidiMap.ts" }, ["16359"] = { line = 63, file = "RelativeMidiMap.ts" },
        ["16360"] = { line = 60, file = "RelativeMidiMap.ts" }, ["16367"] = { line = 2, file = "TempGlobalVariableFactory.ts" },
        ["16368"] = { line = 11, file = "TempGlobalVariableFactory.ts" }, ["16369"] = { line = 11, file = "TempGlobalVariableFactory.ts" },
        ["16370"] = { line = 12, file = "TempGlobalVariableFactory.ts" }, ["16372"] = { line = 15, file = "TempGlobalVariableFactory.ts" },
        ["16373"] = { line = 16, file = "TempGlobalVariableFactory.ts" }, ["16375"] = { line = 3, file = "TempGlobalVariableFactory.ts" },
        ["16376"] = { line = 5, file = "TempGlobalVariableFactory.ts" }, ["16377"] = { line = 2, file = "TempGlobalVariableFactory.ts" },
        ["16387"] = { line = 2, file = "Generator.ts" }, ["16388"] = { line = 2, file = "Generator.ts" }, ["16389"] = { line = 3, file = "Generator.ts" },
        ["16390"] = { line = 3, file = "Generator.ts" }, ["16391"] = { line = 4, file = "Generator.ts" }, ["16392"] = { line = 4, file = "Generator.ts" },
        ["16393"] = { line = 5, file = "Generator.ts" }, ["16394"] = { line = 5, file = "Generator.ts" }, ["16395"] = { line = 6, file = "Generator.ts" },
        ["16396"] = { line = 6, file = "Generator.ts" }, ["16397"] = { line = 7, file = "Generator.ts" }, ["16398"] = { line = 7, file = "Generator.ts" },
        ["16399"] = { line = 10, file = "Generator.ts" }, ["16400"] = { line = 29, file = "Generator.ts" }, ["16401"] = { line = 29, file = "Generator.ts" },
        ["16402"] = { line = 30, file = "Generator.ts" }, ["16403"] = { line = 35, file = "Generator.ts" }, ["16404"] = { line = 35, file = "Generator.ts" },
        ["16405"] = { line = 35, file = "Generator.ts" }, ["16406"] = { line = 36, file = "Generator.ts" }, ["16407"] = { line = 35, file = "Generator.ts" },
        ["16408"] = { line = 35, file = "Generator.ts" }, ["16409"] = { line = 39, file = "Generator.ts" }, ["16410"] = { line = 42, file = "Generator.ts" },
        ["16411"] = { line = 45, file = "Generator.ts" }, ["16413"] = { line = 48, file = "Generator.ts" }, ["16414"] = { line = 49, file = "Generator.ts" },
        ["16415"] = { line = 49, file = "Generator.ts" }, ["16416"] = { line = 49, file = "Generator.ts" }, ["16417"] = { line = 50, file = "Generator.ts" },
        ["16418"] = { line = 51, file = "Generator.ts" }, ["16420"] = { line = 49, file = "Generator.ts" }, ["16421"] = { line = 49, file = "Generator.ts" },
        ["16423"] = { line = 56, file = "Generator.ts" }, ["16424"] = { line = 57, file = "Generator.ts" }, ["16425"] = { line = 58, file = "Generator.ts" },
        ["16426"] = { line = 58, file = "Generator.ts" }, ["16427"] = { line = 58, file = "Generator.ts" }, ["16428"] = { line = 59, file = "Generator.ts" },
        ["16429"] = { line = 60, file = "Generator.ts" }, ["16430"] = { line = 61, file = "Generator.ts" }, ["16433"] = { line = 65, file = "Generator.ts" },
        ["16434"] = { line = 65, file = "Generator.ts" }, ["16435"] = { line = 66, file = "Generator.ts" }, ["16436"] = { line = 68, file = "Generator.ts" },
        ["16437"] = { line = 70, file = "Generator.ts" }, ["16439"] = { line = 65, file = "Generator.ts" }, ["16442"] = { line = 58, file = "Generator.ts" },
        ["16443"] = { line = 58, file = "Generator.ts" }, ["16445"] = { line = 75, file = "Generator.ts" }, ["16446"] = { line = 77, file = "Generator.ts" },
        ["16447"] = { line = 78, file = "Generator.ts" }, ["16448"] = { line = 79, file = "Generator.ts" }, ["16449"] = { line = 80, file = "Generator.ts" },
        ["16451"] = { line = 85, file = "Generator.ts" }, ["16452"] = { line = 87, file = "Generator.ts" }, ["16453"] = { line = 87, file = "Generator.ts" },
        ["16454"] = { line = 87, file = "Generator.ts" }, ["16455"] = { line = 88, file = "Generator.ts" }, ["16456"] = { line = 87, file = "Generator.ts" },
        ["16457"] = { line = 87, file = "Generator.ts" }, ["16458"] = { line = 91, file = "Generator.ts" }, ["16459"] = { line = 92, file = "Generator.ts" },
        ["16460"] = { line = 93, file = "Generator.ts" }, ["16461"] = { line = 94, file = "Generator.ts" }, ["16462"] = { line = 95, file = "Generator.ts" },
        ["16463"] = { line = 92, file = "Generator.ts" }, ["16466"] = { line = 99, file = "Generator.ts" }, ["16467"] = { line = 100, file = "Generator.ts" },
        ["16469"] = { line = 110, file = "Generator.ts" }, ["16470"] = { line = 111, file = "Generator.ts" }, ["16471"] = { line = 111, file = "Generator.ts" },
        ["16472"] = { line = 112, file = "Generator.ts" }, ["16473"] = { line = 112, file = "Generator.ts" }, ["16474"] = { line = 113, file = "Generator.ts" },
        ["16475"] = { line = 116, file = "Generator.ts" }, ["16476"] = { line = 117, file = "Generator.ts" }, ["16477"] = { line = 130, file = "Generator.ts" },
        ["16478"] = { line = 131, file = "Generator.ts" }, ["16479"] = { line = 132, file = "Generator.ts" }, ["16480"] = { line = 134, file = "Generator.ts" },
        ["16481"] = { line = 138, file = "Generator.ts" }, ["16482"] = { line = 130, file = "Generator.ts" }, ["16484"] = { line = 141, file = "Generator.ts" },
        ["16485"] = { line = 141, file = "Generator.ts" }, ["16486"] = { line = 142, file = "Generator.ts" }, ["16487"] = { line = 143, file = "Generator.ts" },
        ["16488"] = { line = 141, file = "Generator.ts" }, ["16492"] = { line = 149, file = "Generator.ts" }, ["16493"] = { line = 150, file = "Generator.ts" },
        ["16494"] = { line = 150, file = "Generator.ts" }, ["16495"] = { line = 152, file = "Generator.ts" }, ["16496"] = { line = 153, file = "Generator.ts" },
        ["16498"] = { line = 165, file = "Generator.ts" }, ["16499"] = { line = 166, file = "Generator.ts" }, ["16500"] = { line = 167, file = "Generator.ts" },
        ["16502"] = { line = 170, file = "Generator.ts" }, ["16503"] = { line = 171, file = "Generator.ts" }, ["16504"] = { line = 172, file = "Generator.ts" },
        ["16506"] = { line = 175, file = "Generator.ts" }, ["16507"] = { line = 176, file = "Generator.ts" }, ["16508"] = { line = 176, file = "Generator.ts" },
        ["16509"] = { line = 176, file = "Generator.ts" }, ["16510"] = { line = 176, file = "Generator.ts" }, ["16511"] = { line = 177, file = "Generator.ts" },
        ["16512"] = { line = 177, file = "Generator.ts" }, ["16513"] = { line = 177, file = "Generator.ts" }, ["16514"] = { line = 177, file = "Generator.ts" },
        ["16515"] = { line = 178, file = "Generator.ts" }, ["16516"] = { line = 179, file = "Generator.ts" }, ["16519"] = { line = 182, file = "Generator.ts" },
        ["16520"] = { line = 183, file = "Generator.ts" }, ["16521"] = { line = 185, file = "Generator.ts" }, ["16522"] = { line = 186, file = "Generator.ts" },
        ["16523"] = { line = 187, file = "Generator.ts" }, ["16524"] = { line = 188, file = "Generator.ts" }, ["16525"] = { line = 189, file = "Generator.ts" },
        ["16526"] = { line = 190, file = "Generator.ts" }, ["16527"] = { line = 191, file = "Generator.ts" }, ["16528"] = { line = 192, file = "Generator.ts" },
        ["16529"] = { line = 185, file = "Generator.ts" }, ["16530"] = { line = 194, file = "Generator.ts" }, ["16531"] = { line = 196, file = "Generator.ts" },
        ["16532"] = { line = 198, file = "Generator.ts" }, ["16533"] = { line = 199, file = "Generator.ts" }, ["16534"] = { line = 202, file = "Generator.ts" },
        ["16535"] = { line = 203, file = "Generator.ts" }, ["16536"] = { line = 204, file = "Generator.ts" }, ["16537"] = { line = 205, file = "Generator.ts" },
        ["16538"] = { line = 206, file = "Generator.ts" }, ["16539"] = { line = 207, file = "Generator.ts" }, ["16540"] = { line = 208, file = "Generator.ts" },
        ["16541"] = { line = 209, file = "Generator.ts" }, ["16542"] = { line = 210, file = "Generator.ts" }, ["16543"] = { line = 203, file = "Generator.ts" },
        ["16544"] = { line = 212, file = "Generator.ts" }, ["16545"] = { line = 198, file = "Generator.ts" }, ["16546"] = { line = 215, file = "Generator.ts" },
        ["16548"] = { line = 216, file = "Generator.ts" }, ["16549"] = { line = 216, file = "Generator.ts" }, ["16550"] = { line = 217, file = "Generator.ts" },
        ["16551"] = { line = 218, file = "Generator.ts" }, ["16552"] = { line = 216, file = "Generator.ts" }, ["16555"] = { line = 220, file = "Generator.ts" },
        ["16556"] = { line = 220, file = "Generator.ts" }, ["16557"] = { line = 220, file = "Generator.ts" }, ["16558"] = { line = 221, file = "Generator.ts" },
        ["16559"] = { line = 220, file = "Generator.ts" }, ["16560"] = { line = 220, file = "Generator.ts" }, ["16562"] = { line = 225, file = "Generator.ts" },
        ["16563"] = { line = 226, file = "Generator.ts" }, ["16564"] = { line = 226, file = "Generator.ts" }, ["16565"] = { line = 227, file = "Generator.ts" },
        ["16566"] = { line = 227, file = "Generator.ts" }, ["16567"] = { line = 227, file = "Generator.ts" }, ["16568"] = { line = 227, file = "Generator.ts" },
        ["16569"] = { line = 227, file = "Generator.ts" }, ["16570"] = { line = 228, file = "Generator.ts" }, ["16571"] = { line = 229, file = "Generator.ts" },
        ["16574"] = { line = 232, file = "Generator.ts" }, ["16575"] = { line = 233, file = "Generator.ts" }, ["16576"] = { line = 234, file = "Generator.ts" },
        ["16577"] = { line = 235, file = "Generator.ts" }, ["16578"] = { line = 236, file = "Generator.ts" }, ["16579"] = { line = 237, file = "Generator.ts" },
        ["16580"] = { line = 238, file = "Generator.ts" }, ["16581"] = { line = 239, file = "Generator.ts" }, ["16582"] = { line = 234, file = "Generator.ts" },
        ["16583"] = { line = 241, file = "Generator.ts" }, ["16585"] = { line = 245, file = "Generator.ts" }, ["16586"] = { line = 249, file = "Generator.ts" },
        ["16587"] = { line = 249, file = "Generator.ts" }, ["16588"] = { line = 250, file = "Generator.ts" }, ["16589"] = { line = 251, file = "Generator.ts" },
        ["16591"] = { line = 246, file = "Generator.ts" }, ["16592"] = { line = 247, file = "Generator.ts" }, ["16594"] = { line = 12, file = "Generator.ts" },
        ["16595"] = { line = 12, file = "Generator.ts" }, ["16596"] = { line = 12, file = "Generator.ts" }, ["16597"] = { line = 13, file = "Generator.ts" },
        ["16598"] = { line = 14, file = "Generator.ts" }, ["16599"] = { line = 15, file = "Generator.ts" }, ["16600"] = { line = 15, file = "Generator.ts" },
        ["16601"] = { line = 15, file = "Generator.ts" }, ["16602"] = { line = 16, file = "Generator.ts" }, ["16603"] = { line = 17, file = "Generator.ts" },
        ["16604"] = { line = 18, file = "Generator.ts" }, ["16605"] = { line = 19, file = "Generator.ts" }, ["16606"] = { line = 20, file = "Generator.ts" },
        ["16607"] = { line = 21, file = "Generator.ts" }, ["16608"] = { line = 15, file = "Generator.ts" }, ["16609"] = { line = 15, file = "Generator.ts" },
        ["16610"] = { line = 24, file = "Generator.ts" }, ["16611"] = { line = 10, file = "Generator.ts" }, ["16618"] = { line = 1, file = "InstanceCreator.ts" },
        ["16619"] = { line = 1, file = "InstanceCreator.ts" }, ["16620"] = { line = 4, file = "InstanceCreator.ts" },
        ["16621"] = { line = 5, file = "InstanceCreator.ts" }, ["16622"] = { line = 6, file = "InstanceCreator.ts" },
        ["16623"] = { line = 4, file = "InstanceCreator.ts" }, ["16624"] = { line = 9, file = "InstanceCreator.ts" },
        ["16633"] = { line = 2, file = "InstanceRuntime.ts" }, ["16634"] = { line = 2, file = "InstanceRuntime.ts" },
        ["16635"] = { line = 7, file = "InstanceRuntime.ts" }, ["16636"] = { line = 7, file = "InstanceRuntime.ts" },
        ["16637"] = { line = 7, file = "InstanceRuntime.ts" }, ["16638"] = { line = 7, file = "InstanceRuntime.ts" },
        ["16639"] = { line = 13, file = "InstanceRuntime.ts" }, ["16640"] = { line = 7, file = "InstanceRuntime.ts" },
        ["16641"] = { line = 18, file = "InstanceRuntime.ts" }, ["16642"] = { line = 18, file = "InstanceRuntime.ts" },
        ["16643"] = { line = 18, file = "InstanceRuntime.ts" }, ["16644"] = { line = 18, file = "InstanceRuntime.ts" },
        ["16645"] = { line = 18, file = "InstanceRuntime.ts" }, ["16646"] = { line = 18, file = "InstanceRuntime.ts" },
        ["16647"] = { line = 11, file = "InstanceRuntime.ts" }, ["16648"] = { line = 12, file = "InstanceRuntime.ts" },
        ["16649"] = { line = 26, file = "InstanceRuntime.ts" }, ["16650"] = { line = 27, file = "InstanceRuntime.ts" },
        ["16651"] = { line = 26, file = "InstanceRuntime.ts" }, ["16652"] = { line = 31, file = "InstanceRuntime.ts" },
        ["16653"] = { line = 32, file = "InstanceRuntime.ts" }, ["16654"] = { line = 31, file = "InstanceRuntime.ts" },
        ["16655"] = { line = 35, file = "InstanceRuntime.ts" }, ["16656"] = { line = 36, file = "InstanceRuntime.ts" },
        ["16657"] = { line = 35, file = "InstanceRuntime.ts" }, ["16658"] = { line = 39, file = "InstanceRuntime.ts" },
        ["16659"] = { line = 40, file = "InstanceRuntime.ts" }, ["16660"] = { line = 39, file = "InstanceRuntime.ts" },
        ["16671"] = { line = 2, file = "Runtime.ts" }, ["16672"] = { line = 2, file = "Runtime.ts" }, ["16673"] = { line = 3, file = "Runtime.ts" },
        ["16674"] = { line = 3, file = "Runtime.ts" }, ["16675"] = { line = 6, file = "Runtime.ts" }, ["16676"] = { line = 6, file = "Runtime.ts" },
        ["16677"] = { line = 6, file = "Runtime.ts" }, ["16678"] = { line = 7, file = "Runtime.ts" }, ["16679"] = { line = 7, file = "Runtime.ts" },
        ["16680"] = { line = 8, file = "Runtime.ts" }, ["16681"] = { line = 8, file = "Runtime.ts" }, ["16682"] = { line = 9, file = "Runtime.ts" },
        ["16683"] = { line = 9, file = "Runtime.ts" }, ["16684"] = { line = 14, file = "Runtime.ts" }, ["16685"] = { line = 14, file = "Runtime.ts" },
        ["16686"] = { line = 14, file = "Runtime.ts" }, ["16687"] = { line = 14, file = "Runtime.ts" }, ["16688"] = { line = 21, file = "Runtime.ts" },
        ["16689"] = { line = 14, file = "Runtime.ts" }, ["16690"] = { line = 17, file = "Runtime.ts" }, ["16691"] = { line = 18, file = "Runtime.ts" },
        ["16692"] = { line = 29, file = "Runtime.ts" }, ["16693"] = { line = 30, file = "Runtime.ts" }, ["16694"] = { line = 30, file = "Runtime.ts" },
        ["16695"] = { line = 30, file = "Runtime.ts" }, ["16696"] = { line = 31, file = "Runtime.ts" }, ["16697"] = { line = 32, file = "Runtime.ts" },
        ["16698"] = { line = 33, file = "Runtime.ts" }, ["16699"] = { line = 30, file = "Runtime.ts" }, ["16700"] = { line = 30, file = "Runtime.ts" },
        ["16701"] = { line = 21, file = "Runtime.ts" }, ["16702"] = { line = 38, file = "Runtime.ts" }, ["16703"] = { line = 14, file = "Runtime.ts" },
        ["16704"] = { line = 40, file = "Runtime.ts" }, ["16705"] = { line = 41, file = "Runtime.ts" }, ["16706"] = { line = 42, file = "Runtime.ts" },
        ["16708"] = { line = 38, file = "Runtime.ts" }, ["16709"] = { line = 47, file = "Runtime.ts" }, ["16710"] = { line = 47, file = "Runtime.ts" },
        ["16711"] = { line = 50, file = "Runtime.ts" }, ["16712"] = { line = 51, file = "Runtime.ts" }, ["16713"] = { line = 51, file = "Runtime.ts" },
        ["16714"] = { line = 51, file = "Runtime.ts" }, ["16715"] = { line = 51, file = "Runtime.ts" }, ["16716"] = { line = 51, file = "Runtime.ts" },
        ["16717"] = { line = 51, file = "Runtime.ts" }, ["16718"] = { line = 51, file = "Runtime.ts" }, ["16719"] = { line = 50, file = "Runtime.ts" },
        ["16720"] = { line = 54, file = "Runtime.ts" }, ["16721"] = { line = 55, file = "Runtime.ts" }, ["16722"] = { line = 54, file = "Runtime.ts" },
        ["16723"] = { line = 58, file = "Runtime.ts" }, ["16724"] = { line = 59, file = "Runtime.ts" }, ["16725"] = { line = 60, file = "Runtime.ts" },
        ["16726"] = { line = 60, file = "Runtime.ts" }, ["16727"] = { line = 61, file = "Runtime.ts" }, ["16728"] = { line = 62, file = "Runtime.ts" },
        ["16729"] = { line = 63, file = "Runtime.ts" }, ["16730"] = { line = 58, file = "Runtime.ts" }, ["16731"] = { line = 66, file = "Runtime.ts" },
        ["16732"] = { line = 67, file = "Runtime.ts" }, ["16733"] = { line = 68, file = "Runtime.ts" }, ["16734"] = { line = 69, file = "Runtime.ts" },
        ["16735"] = { line = 70, file = "Runtime.ts" }, ["16736"] = { line = 71, file = "Runtime.ts" }, ["16737"] = { line = 66, file = "Runtime.ts" },
        ["16749"] = { line = 3, file = "PPlugin.ts" }, ["16750"] = { line = 3, file = "PPlugin.ts" }, ["16751"] = { line = 4, file = "PPlugin.ts" },
        ["16752"] = { line = 4, file = "PPlugin.ts" }, ["16753"] = { line = 4, file = "PPlugin.ts" }, ["16754"] = { line = 8, file = "PPlugin.ts" },
        ["16755"] = { line = 8, file = "PPlugin.ts" }, ["16756"] = { line = 8, file = "PPlugin.ts" }, ["16757"] = { line = 9, file = "PPlugin.ts" },
        ["16758"] = { line = 9, file = "PPlugin.ts" }, ["16759"] = { line = 10, file = "PPlugin.ts" }, ["16760"] = { line = 10, file = "PPlugin.ts" },
        ["16761"] = { line = 11, file = "PPlugin.ts" }, ["16762"] = { line = 11, file = "PPlugin.ts" }, ["16763"] = { line = 11, file = "PPlugin.ts" },
        ["16764"] = { line = 12, file = "PPlugin.ts" }, ["16765"] = { line = 12, file = "PPlugin.ts" }, ["16766"] = { line = 13, file = "PPlugin.ts" },
        ["16767"] = { line = 13, file = "PPlugin.ts" }, ["16768"] = { line = 14, file = "PPlugin.ts" }, ["16769"] = { line = 14, file = "PPlugin.ts" },
        ["16770"] = { line = 18, file = "PPlugin.ts" }, ["16771"] = { line = 18, file = "PPlugin.ts" }, ["16772"] = { line = 19, file = "PPlugin.ts" },
        ["16773"] = { line = 19, file = "PPlugin.ts" }, ["16774"] = { line = 22, file = "PPlugin.ts" }, ["16775"] = { line = 22, file = "PPlugin.ts" },
        ["16776"] = { line = 22, file = "PPlugin.ts" }, ["16777"] = { line = 22, file = "PPlugin.ts" }, ["16778"] = { line = 34, file = "PPlugin.ts" },
        ["16779"] = { line = 35, file = "PPlugin.ts" }, ["16780"] = { line = 36, file = "PPlugin.ts" }, ["16781"] = { line = 22, file = "PPlugin.ts" },
        ["16782"] = { line = 38, file = "PPlugin.ts" }, ["16783"] = { line = 39, file = "PPlugin.ts" }, ["16784"] = { line = 40, file = "PPlugin.ts" },
        ["16785"] = { line = 41, file = "PPlugin.ts" }, ["16786"] = { line = 42, file = "PPlugin.ts" }, ["16787"] = { line = 43, file = "PPlugin.ts" },
        ["16788"] = { line = 44, file = "PPlugin.ts" }, ["16789"] = { line = 45, file = "PPlugin.ts" }, ["16790"] = { line = 46, file = "PPlugin.ts" },
        ["16791"] = { line = 37, file = "PPlugin.ts" }, ["16792"] = { line = 48, file = "PPlugin.ts" }, ["16793"] = { line = 48, file = "PPlugin.ts" },
        ["16794"] = { line = 48, file = "PPlugin.ts" }, ["16795"] = { line = 48, file = "PPlugin.ts" }, ["16796"] = { line = 34, file = "PPlugin.ts" },
        ["16797"] = { line = 52, file = "PPlugin.ts" }, ["16798"] = { line = 52, file = "PPlugin.ts" }, ["16799"] = { line = 57, file = "PPlugin.ts" },
        ["16800"] = { line = 58, file = "PPlugin.ts" }, ["16801"] = { line = 57, file = "PPlugin.ts" }, ["16802"] = { line = 64, file = "PPlugin.ts" },
        ["16803"] = { line = 65, file = "PPlugin.ts" }, ["16804"] = { line = 65, file = "PPlugin.ts" }, ["16805"] = { line = 65, file = "PPlugin.ts" },
        ["16806"] = { line = 66, file = "PPlugin.ts" }, ["16807"] = { line = 65, file = "PPlugin.ts" }, ["16808"] = { line = 65, file = "PPlugin.ts" },
        ["16809"] = { line = 64, file = "PPlugin.ts" }, ["16810"] = { line = 71, file = "PPlugin.ts" }, ["16811"] = { line = 72, file = "PPlugin.ts" },
        ["16812"] = { line = 73, file = "PPlugin.ts" }, ["16813"] = { line = 74, file = "PPlugin.ts" }, ["16814"] = { line = 75, file = "PPlugin.ts" },
        ["16817"] = { line = 71, file = "PPlugin.ts" }, ["16818"] = { line = 80, file = "PPlugin.ts" }, ["16819"] = { line = 81, file = "PPlugin.ts" },
        ["16820"] = { line = 81, file = "PPlugin.ts" }, ["16821"] = { line = 81, file = "PPlugin.ts" }, ["16822"] = { line = 81, file = "PPlugin.ts" },
        ["16823"] = { line = 82, file = "PPlugin.ts" }, ["16824"] = { line = 82, file = "PPlugin.ts" }, ["16825"] = { line = 83, file = "PPlugin.ts" },
        ["16826"] = { line = 84, file = "PPlugin.ts" }, ["16827"] = { line = 85, file = "PPlugin.ts" }, ["16828"] = { line = 87, file = "PPlugin.ts" },
        ["16829"] = { line = 81, file = "PPlugin.ts" }, ["16830"] = { line = 81, file = "PPlugin.ts" }, ["16831"] = { line = 80, file = "PPlugin.ts" },
        ["16832"] = { line = 92, file = "PPlugin.ts" }, ["16833"] = { line = 93, file = "PPlugin.ts" }, ["16834"] = { line = 93, file = "PPlugin.ts" },
        ["16835"] = { line = 93, file = "PPlugin.ts" }, ["16836"] = { line = 94, file = "PPlugin.ts" }, ["16837"] = { line = 95, file = "PPlugin.ts" },
        ["16838"] = { line = 96, file = "PPlugin.ts" }, ["16839"] = { line = 97, file = "PPlugin.ts" }, ["16840"] = { line = 97, file = "PPlugin.ts" },
        ["16841"] = { line = 97, file = "PPlugin.ts" }, ["16842"] = { line = 98, file = "PPlugin.ts" }, ["16843"] = { line = 99, file = "PPlugin.ts" },
        ["16844"] = { line = 97, file = "PPlugin.ts" }, ["16845"] = { line = 97, file = "PPlugin.ts" }, ["16847"] = { line = 92, file = "PPlugin.ts" },
        ["16848"] = { line = 105, file = "PPlugin.ts" }, ["16849"] = { line = 111, file = "PPlugin.ts" }, ["16850"] = { line = 105, file = "PPlugin.ts" },
        ["16851"] = { line = 114, file = "PPlugin.ts" }, ["16852"] = { line = 115, file = "PPlugin.ts" }, ["16853"] = { line = 115, file = "PPlugin.ts" },
        ["16854"] = { line = 115, file = "PPlugin.ts" }, ["16855"] = { line = 115, file = "PPlugin.ts" }, ["16856"] = { line = 114, file = "PPlugin.ts" },
        ["16865"] = { line = 1, file = "EncoderRotator.ts" }, ["16866"] = { line = 1, file = "EncoderRotator.ts" },
        ["16867"] = { line = 3, file = "EncoderRotator.ts" }, ["16868"] = { line = 3, file = "EncoderRotator.ts" },
        ["16869"] = { line = 4, file = "EncoderRotator.ts" }, ["16870"] = { line = 4, file = "EncoderRotator.ts" },
        ["16871"] = { line = 5, file = "EncoderRotator.ts" }, ["16872"] = { line = 5, file = "EncoderRotator.ts" },
        ["16877"] = { line = 17, file = "EncoderRotator.ts" }, ["16878"] = { line = 18, file = "EncoderRotator.ts" },
        ["16879"] = { line = 19, file = "EncoderRotator.ts" }, ["16880"] = { line = 26, file = "EncoderRotator.ts" },
        ["16881"] = { line = 33, file = "EncoderRotator.ts" }, ["16882"] = { line = 33, file = "EncoderRotator.ts" },
        ["16883"] = { line = 34, file = "EncoderRotator.ts" }, ["16884"] = { line = 35, file = "EncoderRotator.ts" },
        ["16885"] = { line = 37, file = "EncoderRotator.ts" }, ["16887"] = { line = 48, file = "EncoderRotator.ts" },
        ["16888"] = { line = 49, file = "EncoderRotator.ts" }, ["16889"] = { line = 50, file = "EncoderRotator.ts" },
        ["16890"] = { line = 52, file = "EncoderRotator.ts" }, ["16893"] = { line = 64, file = "EncoderRotator.ts" },
        ["16896"] = { line = 54, file = "EncoderRotator.ts" }, ["16899"] = { line = 56, file = "EncoderRotator.ts" },
        ["16900"] = { line = 56, file = "EncoderRotator.ts" }, ["16901"] = { line = 56, file = "EncoderRotator.ts" },
        ["16902"] = { line = 57, file = "EncoderRotator.ts" }, ["16903"] = { line = 58, file = "EncoderRotator.ts" },
        ["16905"] = { line = 60, file = "EncoderRotator.ts" }, ["16908"] = { line = 62, file = "EncoderRotator.ts" },
        ["16914"] = { line = 66, file = "EncoderRotator.ts" }, ["16918"] = { line = 69, file = "EncoderRotator.ts" },
        ["16921"] = { line = 73, file = "EncoderRotator.ts" }, ["16922"] = { line = 74, file = "EncoderRotator.ts" },
        ["16923"] = { line = 75, file = "EncoderRotator.ts" }, ["16924"] = { line = 75, file = "EncoderRotator.ts" },
        ["16925"] = { line = 76, file = "EncoderRotator.ts" }, ["16926"] = { line = 77, file = "EncoderRotator.ts" },
        ["16927"] = { line = 78, file = "EncoderRotator.ts" }, ["16928"] = { line = 79, file = "EncoderRotator.ts" },
        ["16930"] = { line = 81, file = "EncoderRotator.ts" }, ["16931"] = { line = 76, file = "EncoderRotator.ts" },
        ["16932"] = { line = 75, file = "EncoderRotator.ts" }, ["16933"] = { line = 83, file = "EncoderRotator.ts" },
        ["16935"] = { line = 86, file = "EncoderRotator.ts" }, ["16936"] = { line = 87, file = "EncoderRotator.ts" },
        ["16937"] = { line = 88, file = "EncoderRotator.ts" }, ["16938"] = { line = 88, file = "EncoderRotator.ts" },
        ["16939"] = { line = 89, file = "EncoderRotator.ts" }, ["16940"] = { line = 90, file = "EncoderRotator.ts" },
        ["16941"] = { line = 91, file = "EncoderRotator.ts" }, ["16942"] = { line = 92, file = "EncoderRotator.ts" },
        ["16943"] = { line = 96, file = "EncoderRotator.ts" }, ["16945"] = { line = 89, file = "EncoderRotator.ts" },
        ["16946"] = { line = 88, file = "EncoderRotator.ts" }, ["16947"] = { line = 99, file = "EncoderRotator.ts" },
        ["16949"] = { line = 102, file = "EncoderRotator.ts" }, ["16950"] = { line = 103, file = "EncoderRotator.ts" },
        ["16951"] = { line = 104, file = "EncoderRotator.ts" }, ["16952"] = { line = 105, file = "EncoderRotator.ts" },
        ["16955"] = { line = 115, file = "EncoderRotator.ts" }, ["16956"] = { line = 122, file = "EncoderRotator.ts" },
        ["16957"] = { line = 123, file = "EncoderRotator.ts" }, ["16958"] = { line = 126, file = "EncoderRotator.ts" },
        ["16959"] = { line = 127, file = "EncoderRotator.ts" }, ["16960"] = { line = 128, file = "EncoderRotator.ts" },
        ["16961"] = { line = 129, file = "EncoderRotator.ts" }, ["16962"] = { line = 130, file = "EncoderRotator.ts" },
        ["16963"] = { line = 128, file = "EncoderRotator.ts" }, ["16964"] = { line = 127, file = "EncoderRotator.ts" },
        ["16965"] = { line = 134, file = "EncoderRotator.ts" }, ["16966"] = { line = 137, file = "EncoderRotator.ts" },
        ["16967"] = { line = 138, file = "EncoderRotator.ts" }, ["16968"] = { line = 138, file = "EncoderRotator.ts" },
        ["16969"] = { line = 138, file = "EncoderRotator.ts" }, ["16970"] = { line = 138, file = "EncoderRotator.ts" },
        ["16971"] = { line = 138, file = "EncoderRotator.ts" }, ["16972"] = { line = 138, file = "EncoderRotator.ts" },
        ["16973"] = { line = 138, file = "EncoderRotator.ts" }, ["16974"] = { line = 134, file = "EncoderRotator.ts" },
        ["16975"] = { line = 143, file = "EncoderRotator.ts" }, ["16976"] = { line = 147, file = "EncoderRotator.ts" },
        ["16977"] = { line = 148, file = "EncoderRotator.ts" }, ["16978"] = { line = 149, file = "EncoderRotator.ts" },
        ["16979"] = { line = 149, file = "EncoderRotator.ts" }, ["16980"] = { line = 149, file = "EncoderRotator.ts" },
        ["16981"] = { line = 149, file = "EncoderRotator.ts" }, ["16982"] = { line = 149, file = "EncoderRotator.ts" },
        ["16983"] = { line = 150, file = "EncoderRotator.ts" }, ["16984"] = { line = 150, file = "EncoderRotator.ts" },
        ["16985"] = { line = 150, file = "EncoderRotator.ts" }, ["16986"] = { line = 150, file = "EncoderRotator.ts" },
        ["16987"] = { line = 150, file = "EncoderRotator.ts" }, ["16988"] = { line = 151, file = "EncoderRotator.ts" },
        ["16989"] = { line = 151, file = "EncoderRotator.ts" }, ["16990"] = { line = 151, file = "EncoderRotator.ts" },
        ["16991"] = { line = 151, file = "EncoderRotator.ts" }, ["16992"] = { line = 151, file = "EncoderRotator.ts" },
        ["16994"] = { line = 27, file = "EncoderRotator.ts" }, ["16995"] = { line = 29, file = "EncoderRotator.ts" },
        ["16996"] = { line = 26, file = "EncoderRotator.ts" }, ["17003"] = { line = 3, file = "ExternalActionHandler.ts" },
        ["17004"] = { line = 3, file = "ExternalActionHandler.ts" }, ["17005"] = { line = 4, file = "ExternalActionHandler.ts" },
        ["17006"] = { line = 4, file = "ExternalActionHandler.ts" }, ["17007"] = { line = 5, file = "ExternalActionHandler.ts" },
        ["17008"] = { line = 5, file = "ExternalActionHandler.ts" }, ["17009"] = { line = 7, file = "ExternalActionHandler.ts" },
        ["17010"] = { line = 7, file = "ExternalActionHandler.ts" }, ["17011"] = { line = 8, file = "ExternalActionHandler.ts" },
        ["17012"] = { line = 8, file = "ExternalActionHandler.ts" }, ["17013"] = { line = 11, file = "ExternalActionHandler.ts" },
        ["17014"] = { line = 12, file = "ExternalActionHandler.ts" }, ["17015"] = { line = 14, file = "ExternalActionHandler.ts" },
        ["17016"] = { line = 81, file = "ExternalActionHandler.ts" }, ["17017"] = { line = 81, file = "ExternalActionHandler.ts" },
        ["17018"] = { line = 83, file = "ExternalActionHandler.ts" }, ["17019"] = { line = 84, file = "ExternalActionHandler.ts" },
        ["17020"] = { line = 85, file = "ExternalActionHandler.ts" }, ["17022"] = { line = 87, file = "ExternalActionHandler.ts" },
        ["17023"] = { line = 88, file = "ExternalActionHandler.ts" }, ["17024"] = { line = 89, file = "ExternalActionHandler.ts" },
        ["17025"] = { line = 91, file = "ExternalActionHandler.ts" }, ["17026"] = { line = 91, file = "ExternalActionHandler.ts" },
        ["17027"] = { line = 91, file = "ExternalActionHandler.ts" }, ["17028"] = { line = 91, file = "ExternalActionHandler.ts" },
        ["17029"] = { line = 91, file = "ExternalActionHandler.ts" }, ["17030"] = { line = 94, file = "ExternalActionHandler.ts" },
        ["17032"] = { line = 97, file = "ExternalActionHandler.ts" }, ["17033"] = { line = 98, file = "ExternalActionHandler.ts" },
        ["17034"] = { line = 99, file = "ExternalActionHandler.ts" }, ["17035"] = { line = 100, file = "ExternalActionHandler.ts" },
        ["17037"] = { line = 102, file = "ExternalActionHandler.ts" }, ["17038"] = { line = 103, file = "ExternalActionHandler.ts" },
        ["17040"] = { line = 105, file = "ExternalActionHandler.ts" }, ["17042"] = { line = 16, file = "ExternalActionHandler.ts" },
        ["17043"] = { line = 18, file = "ExternalActionHandler.ts" }, ["17044"] = { line = 19, file = "ExternalActionHandler.ts" },
        ["17045"] = { line = 20, file = "ExternalActionHandler.ts" }, ["17046"] = { line = 18, file = "ExternalActionHandler.ts" },
        ["17047"] = { line = 23, file = "ExternalActionHandler.ts" }, ["17049"] = { line = 25, file = "ExternalActionHandler.ts" },
        ["17050"] = { line = 26, file = "ExternalActionHandler.ts" }, ["17053"] = { line = 27, file = "ExternalActionHandler.ts" },
        ["17054"] = { line = 27, file = "ExternalActionHandler.ts" }, ["17055"] = { line = 27, file = "ExternalActionHandler.ts" },
        ["17056"] = { line = 28, file = "ExternalActionHandler.ts" }, ["17057"] = { line = 30, file = "ExternalActionHandler.ts" },
        ["17058"] = { line = 33, file = "ExternalActionHandler.ts" }, ["17062"] = { line = 37, file = "ExternalActionHandler.ts" },
        ["17065"] = { line = 38, file = "ExternalActionHandler.ts" }, ["17066"] = { line = 38, file = "ExternalActionHandler.ts" },
        ["17067"] = { line = 38, file = "ExternalActionHandler.ts" }, ["17068"] = { line = 41, file = "ExternalActionHandler.ts" },
        ["17072"] = { line = 45, file = "ExternalActionHandler.ts" }, ["17075"] = { line = 46, file = "ExternalActionHandler.ts" },
        ["17076"] = { line = 46, file = "ExternalActionHandler.ts" }, ["17077"] = { line = 46, file = "ExternalActionHandler.ts" },
        ["17078"] = { line = 48, file = "ExternalActionHandler.ts" }, ["17079"] = { line = 51, file = "ExternalActionHandler.ts" },
        ["17080"] = { line = 52, file = "ExternalActionHandler.ts" }, ["17081"] = { line = 53, file = "ExternalActionHandler.ts" },
        ["17082"] = { line = 54, file = "ExternalActionHandler.ts" }, ["17083"] = { line = 55, file = "ExternalActionHandler.ts" },
        ["17084"] = { line = 56, file = "ExternalActionHandler.ts" }, ["17085"] = { line = 58, file = "ExternalActionHandler.ts" },
        ["17086"] = { line = 59, file = "ExternalActionHandler.ts" }, ["17087"] = { line = 60, file = "ExternalActionHandler.ts" },
        ["17088"] = { line = 60, file = "ExternalActionHandler.ts" }, ["17089"] = { line = 60, file = "ExternalActionHandler.ts" },
        ["17090"] = { line = 60, file = "ExternalActionHandler.ts" }, ["17091"] = { line = 60, file = "ExternalActionHandler.ts" },
        ["17092"] = { line = 60, file = "ExternalActionHandler.ts" }, ["17093"] = { line = 60, file = "ExternalActionHandler.ts" },
        ["17094"] = { line = 61, file = "ExternalActionHandler.ts" }, ["17095"] = { line = 61, file = "ExternalActionHandler.ts" },
        ["17096"] = { line = 61, file = "ExternalActionHandler.ts" }, ["17097"] = { line = 61, file = "ExternalActionHandler.ts" },
        ["17098"] = { line = 61, file = "ExternalActionHandler.ts" }, ["17099"] = { line = 61, file = "ExternalActionHandler.ts" },
        ["17100"] = { line = 61, file = "ExternalActionHandler.ts" }, ["17101"] = { line = 62, file = "ExternalActionHandler.ts" },
        ["17106"] = { line = 67, file = "ExternalActionHandler.ts" }, ["17109"] = { line = 68, file = "ExternalActionHandler.ts" },
        ["17110"] = { line = 68, file = "ExternalActionHandler.ts" }, ["17111"] = { line = 68, file = "ExternalActionHandler.ts" },
        ["17112"] = { line = 69, file = "ExternalActionHandler.ts" }, ["17113"] = { line = 69, file = "ExternalActionHandler.ts" },
        ["17114"] = { line = 69, file = "ExternalActionHandler.ts" }, ["17115"] = { line = 69, file = "ExternalActionHandler.ts" },
        ["17116"] = { line = 70, file = "ExternalActionHandler.ts" }, ["17117"] = { line = 71, file = "ExternalActionHandler.ts" },
        ["17122"] = { line = 76, file = "ExternalActionHandler.ts" }, ["17125"] = { line = 24, file = "ExternalActionHandler.ts" },
        ["17126"] = { line = 14, file = "ExternalActionHandler.ts" }, ["17133"] = { line = 2, file = "__pluginId.ts" },
        ["17141"] = { line = 1, file = "PluginToubleshootingDialogV2.ts" }, ["17142"] = { line = 1, file = "PluginToubleshootingDialogV2.ts" },
        ["17143"] = { line = 5, file = "PluginToubleshootingDialogV2.ts" }, ["17144"] = { line = 5, file = "PluginToubleshootingDialogV2.ts" },
        ["17145"] = { line = 6, file = "PluginToubleshootingDialogV2.ts" }, ["17146"] = { line = 6, file = "PluginToubleshootingDialogV2.ts" },
        ["17147"] = { line = 11, file = "PluginToubleshootingDialogV2.ts" }, ["17148"] = { line = 13, file = "PluginToubleshootingDialogV2.ts" },
        ["17149"] = { line = 13, file = "PluginToubleshootingDialogV2.ts" }, ["17150"] = { line = 13, file = "PluginToubleshootingDialogV2.ts" },
        ["17151"] = { line = 13, file = "PluginToubleshootingDialogV2.ts" }, ["17152"] = { line = 14, file = "PluginToubleshootingDialogV2.ts" },
        ["17153"] = { line = 15, file = "PluginToubleshootingDialogV2.ts" }, ["17154"] = { line = 16, file = "PluginToubleshootingDialogV2.ts" },
        ["17155"] = { line = 17, file = "PluginToubleshootingDialogV2.ts" }, ["17156"] = { line = 27, file = "PluginToubleshootingDialogV2.ts" },
        ["17157"] = { line = 28, file = "PluginToubleshootingDialogV2.ts" }, ["17158"] = { line = 29, file = "PluginToubleshootingDialogV2.ts" },
        ["17159"] = { line = 30, file = "PluginToubleshootingDialogV2.ts" }, ["17160"] = { line = 31, file = "PluginToubleshootingDialogV2.ts" },
        ["17161"] = { line = 32, file = "PluginToubleshootingDialogV2.ts" }, ["17162"] = { line = 33, file = "PluginToubleshootingDialogV2.ts" },
        ["17163"] = { line = 34, file = "PluginToubleshootingDialogV2.ts" }, ["17164"] = { line = 34, file = "PluginToubleshootingDialogV2.ts" },
        ["17165"] = { line = 35, file = "PluginToubleshootingDialogV2.ts" }, ["17166"] = { line = 36, file = "PluginToubleshootingDialogV2.ts" },
        ["17167"] = { line = 37, file = "PluginToubleshootingDialogV2.ts" }, ["17168"] = { line = 39, file = "PluginToubleshootingDialogV2.ts" },
        ["17169"] = { line = 40, file = "PluginToubleshootingDialogV2.ts" }, ["17170"] = { line = 41, file = "PluginToubleshootingDialogV2.ts" },
        ["17171"] = { line = 42, file = "PluginToubleshootingDialogV2.ts" }, ["17172"] = { line = 43, file = "PluginToubleshootingDialogV2.ts" },
        ["17173"] = { line = 44, file = "PluginToubleshootingDialogV2.ts" }, ["17174"] = { line = 39, file = "PluginToubleshootingDialogV2.ts" },
        ["17175"] = { line = 46, file = "PluginToubleshootingDialogV2.ts" }, ["17176"] = { line = 47, file = "PluginToubleshootingDialogV2.ts" },
        ["17177"] = { line = 46, file = "PluginToubleshootingDialogV2.ts" }, ["17178"] = { line = 34, file = "PluginToubleshootingDialogV2.ts" },
        ["17179"] = { line = 34, file = "PluginToubleshootingDialogV2.ts" }, ["17180"] = { line = 28, file = "PluginToubleshootingDialogV2.ts" },
        ["17181"] = { line = 52, file = "PluginToubleshootingDialogV2.ts" }, ["17182"] = { line = 53, file = "PluginToubleshootingDialogV2.ts" },
        ["17183"] = { line = 54, file = "PluginToubleshootingDialogV2.ts" }, ["17184"] = { line = 55, file = "PluginToubleshootingDialogV2.ts" },
        ["17185"] = { line = 57, file = "PluginToubleshootingDialogV2.ts" }, ["17186"] = { line = 58, file = "PluginToubleshootingDialogV2.ts" },
        ["17187"] = { line = 59, file = "PluginToubleshootingDialogV2.ts" }, ["17188"] = { line = 58, file = "PluginToubleshootingDialogV2.ts" },
        ["17189"] = { line = 56, file = "PluginToubleshootingDialogV2.ts" }, ["17190"] = { line = 52, file = "PluginToubleshootingDialogV2.ts" },
        ["17191"] = { line = 13, file = "PluginToubleshootingDialogV2.ts" }, ["17192"] = { line = 13, file = "PluginToubleshootingDialogV2.ts" },
        ["17193"] = { line = 11, file = "PluginToubleshootingDialogV2.ts" }, ["17201"] = { line = 2, file = "PluginAboutDialogV2.ts" },
        ["17202"] = { line = 2, file = "PluginAboutDialogV2.ts" }, ["17203"] = { line = 3, file = "PluginAboutDialogV2.ts" },
        ["17204"] = { line = 3, file = "PluginAboutDialogV2.ts" }, ["17205"] = { line = 5, file = "PluginAboutDialogV2.ts" },
        ["17206"] = { line = 6, file = "PluginAboutDialogV2.ts" }, ["17207"] = { line = 6, file = "PluginAboutDialogV2.ts" },
        ["17208"] = { line = 6, file = "PluginAboutDialogV2.ts" }, ["17209"] = { line = 6, file = "PluginAboutDialogV2.ts" },
        ["17210"] = { line = 6, file = "PluginAboutDialogV2.ts" }, ["17211"] = { line = 7, file = "PluginAboutDialogV2.ts" },
        ["17212"] = { line = 7, file = "PluginAboutDialogV2.ts" }, ["17213"] = { line = 7, file = "PluginAboutDialogV2.ts" },
        ["17214"] = { line = 7, file = "PluginAboutDialogV2.ts" }, ["17215"] = { line = 8, file = "PluginAboutDialogV2.ts" },
        ["17216"] = { line = 9, file = "PluginAboutDialogV2.ts" }, ["17217"] = { line = 10, file = "PluginAboutDialogV2.ts" },
        ["17218"] = { line = 11, file = "PluginAboutDialogV2.ts" }, ["17219"] = { line = 20, file = "PluginAboutDialogV2.ts" },
        ["17220"] = { line = 21, file = "PluginAboutDialogV2.ts" }, ["17221"] = { line = 22, file = "PluginAboutDialogV2.ts" },
        ["17222"] = { line = 23, file = "PluginAboutDialogV2.ts" }, ["17223"] = { line = 24, file = "PluginAboutDialogV2.ts" },
        ["17224"] = { line = 25, file = "PluginAboutDialogV2.ts" }, ["17225"] = { line = 26, file = "PluginAboutDialogV2.ts" },
        ["17226"] = { line = 27, file = "PluginAboutDialogV2.ts" }, ["17227"] = { line = 27, file = "PluginAboutDialogV2.ts" },
        ["17228"] = { line = 27, file = "PluginAboutDialogV2.ts" }, ["17229"] = { line = 27, file = "PluginAboutDialogV2.ts" },
        ["17230"] = { line = 26, file = "PluginAboutDialogV2.ts" }, ["17231"] = { line = 24, file = "PluginAboutDialogV2.ts" },
        ["17232"] = { line = 31, file = "PluginAboutDialogV2.ts" }, ["17233"] = { line = 33, file = "PluginAboutDialogV2.ts" },
        ["17234"] = { line = 34, file = "PluginAboutDialogV2.ts" }, ["17235"] = { line = 35, file = "PluginAboutDialogV2.ts" },
        ["17236"] = { line = 34, file = "PluginAboutDialogV2.ts" }, ["17237"] = { line = 31, file = "PluginAboutDialogV2.ts" },
        ["17238"] = { line = 23, file = "PluginAboutDialogV2.ts" }, ["17239"] = { line = 20, file = "PluginAboutDialogV2.ts" },
        ["17240"] = { line = 7, file = "PluginAboutDialogV2.ts" }, ["17241"] = { line = 7, file = "PluginAboutDialogV2.ts" },
        ["17242"] = { line = 5, file = "PluginAboutDialogV2.ts" }, ["17251"] = { line = 4, file = "PluginMainDialogSingleInstance.ts" },
        ["17252"] = { line = 4, file = "PluginMainDialogSingleInstance.ts" }, ["17253"] = { line = 5, file = "PluginMainDialogSingleInstance.ts" },
        ["17254"] = { line = 5, file = "PluginMainDialogSingleInstance.ts" }, ["17255"] = { line = 6, file = "PluginMainDialogSingleInstance.ts" },
        ["17256"] = { line = 6, file = "PluginMainDialogSingleInstance.ts" }, ["17257"] = { line = 8, file = "PluginMainDialogSingleInstance.ts" },
        ["17258"] = { line = 8, file = "PluginMainDialogSingleInstance.ts" }, ["17259"] = { line = 8, file = "PluginMainDialogSingleInstance.ts" },
        ["17260"] = { line = 8, file = "PluginMainDialogSingleInstance.ts" }, ["17261"] = { line = 10, file = "PluginMainDialogSingleInstance.ts" },
        ["17262"] = { line = 10, file = "PluginMainDialogSingleInstance.ts" }, ["17263"] = { line = 15, file = "PluginMainDialogSingleInstance.ts" },
        ["17264"] = { line = 15, file = "PluginMainDialogSingleInstance.ts" }, ["17265"] = { line = 8, file = "PluginMainDialogSingleInstance.ts" },
        ["17266"] = { line = 10, file = "PluginMainDialogSingleInstance.ts" }, ["17267"] = { line = 22, file = "PluginMainDialogSingleInstance.ts" },
        ["17268"] = { line = 23, file = "PluginMainDialogSingleInstance.ts" }, ["17269"] = { line = 23, file = "PluginMainDialogSingleInstance.ts" },
        ["17270"] = { line = 23, file = "PluginMainDialogSingleInstance.ts" }, ["17271"] = { line = 23, file = "PluginMainDialogSingleInstance.ts" },
        ["17272"] = { line = 24, file = "PluginMainDialogSingleInstance.ts" }, ["17273"] = { line = 25, file = "PluginMainDialogSingleInstance.ts" },
        ["17274"] = { line = 26, file = "PluginMainDialogSingleInstance.ts" }, ["17275"] = { line = 26, file = "PluginMainDialogSingleInstance.ts" },
        ["17276"] = { line = 27, file = "PluginMainDialogSingleInstance.ts" }, ["17277"] = { line = 28, file = "PluginMainDialogSingleInstance.ts" },
        ["17278"] = { line = 31, file = "PluginMainDialogSingleInstance.ts" }, ["17279"] = { line = 33, file = "PluginMainDialogSingleInstance.ts" },
        ["17280"] = { line = 34, file = "PluginMainDialogSingleInstance.ts" }, ["17281"] = { line = 35, file = "PluginMainDialogSingleInstance.ts" },
        ["17282"] = { line = 36, file = "PluginMainDialogSingleInstance.ts" }, ["17283"] = { line = 37, file = "PluginMainDialogSingleInstance.ts" },
        ["17284"] = { line = 36, file = "PluginMainDialogSingleInstance.ts" }, ["17285"] = { line = 34, file = "PluginMainDialogSingleInstance.ts" },
        ["17287"] = { line = 42, file = "PluginMainDialogSingleInstance.ts" }, ["17288"] = { line = 43, file = "PluginMainDialogSingleInstance.ts" },
        ["17289"] = { line = 44, file = "PluginMainDialogSingleInstance.ts" }, ["17292"] = { line = 48, file = "PluginMainDialogSingleInstance.ts" },
        ["17293"] = { line = 49, file = "PluginMainDialogSingleInstance.ts" }, ["17294"] = { line = 51, file = "PluginMainDialogSingleInstance.ts" },
        ["17295"] = { line = 52, file = "PluginMainDialogSingleInstance.ts" }, ["17296"] = { line = 53, file = "PluginMainDialogSingleInstance.ts" },
        ["17297"] = { line = 54, file = "PluginMainDialogSingleInstance.ts" }, ["17298"] = { line = 55, file = "PluginMainDialogSingleInstance.ts" },
        ["17300"] = { line = 57, file = "PluginMainDialogSingleInstance.ts" }, ["17301"] = { line = 58, file = "PluginMainDialogSingleInstance.ts" },
        ["17302"] = { line = 58, file = "PluginMainDialogSingleInstance.ts" }, ["17303"] = { line = 57, file = "PluginMainDialogSingleInstance.ts" },
        ["17305"] = { line = 52, file = "PluginMainDialogSingleInstance.ts" }, ["17306"] = { line = 50, file = "PluginMainDialogSingleInstance.ts" },
        ["17308"] = { line = 67, file = "PluginMainDialogSingleInstance.ts" }, ["17309"] = { line = 69, file = "PluginMainDialogSingleInstance.ts" },
        ["17310"] = { line = 70, file = "PluginMainDialogSingleInstance.ts" }, ["17311"] = { line = 71, file = "PluginMainDialogSingleInstance.ts" },
        ["17312"] = { line = 71, file = "PluginMainDialogSingleInstance.ts" }, ["17313"] = { line = 71, file = "PluginMainDialogSingleInstance.ts" },
        ["17314"] = { line = 71, file = "PluginMainDialogSingleInstance.ts" }, ["17315"] = { line = 70, file = "PluginMainDialogSingleInstance.ts" },
        ["17316"] = { line = 68, file = "PluginMainDialogSingleInstance.ts" }, ["17317"] = { line = 75, file = "PluginMainDialogSingleInstance.ts" },
        ["17318"] = { line = 76, file = "PluginMainDialogSingleInstance.ts" }, ["17319"] = { line = 77, file = "PluginMainDialogSingleInstance.ts" },
        ["17320"] = { line = 78, file = "PluginMainDialogSingleInstance.ts" }, ["17321"] = { line = 79, file = "PluginMainDialogSingleInstance.ts" },
        ["17322"] = { line = 80, file = "PluginMainDialogSingleInstance.ts" }, ["17323"] = { line = 75, file = "PluginMainDialogSingleInstance.ts" },
        ["17324"] = { line = 83, file = "PluginMainDialogSingleInstance.ts" }, ["17325"] = { line = 22, file = "PluginMainDialogSingleInstance.ts" },
        ["17333"] = { line = 1, file = "ConfigurationHelpDialogs.ts" }, ["17334"] = { line = 1, file = "ConfigurationHelpDialogs.ts" },
        ["17335"] = { line = 4, file = "ConfigurationHelpDialogs.ts" }, ["17336"] = { line = 5, file = "ConfigurationHelpDialogs.ts" },
        ["17337"] = { line = 8, file = "ConfigurationHelpDialogs.ts" }, ["17338"] = { line = 9, file = "ConfigurationHelpDialogs.ts" },
        ["17339"] = { line = 11, file = "ConfigurationHelpDialogs.ts" }, ["17340"] = { line = 12, file = "ConfigurationHelpDialogs.ts" },
        ["17341"] = { line = 13, file = "ConfigurationHelpDialogs.ts" }, ["17342"] = { line = 14, file = "ConfigurationHelpDialogs.ts" },
        ["17343"] = { line = 7, file = "ConfigurationHelpDialogs.ts" }, ["17344"] = { line = 4, file = "ConfigurationHelpDialogs.ts" },
        ["17345"] = { line = 32, file = "ConfigurationHelpDialogs.ts" }, ["17346"] = { line = 33, file = "ConfigurationHelpDialogs.ts" },
        ["17347"] = { line = 36, file = "ConfigurationHelpDialogs.ts" }, ["17348"] = { line = 37, file = "ConfigurationHelpDialogs.ts" },
        ["17349"] = { line = 38, file = "ConfigurationHelpDialogs.ts" }, ["17350"] = { line = 39, file = "ConfigurationHelpDialogs.ts" },
        ["17351"] = { line = 40, file = "ConfigurationHelpDialogs.ts" }, ["17352"] = { line = 41, file = "ConfigurationHelpDialogs.ts" },
        ["17353"] = { line = 35, file = "ConfigurationHelpDialogs.ts" }, ["17354"] = { line = 32, file = "ConfigurationHelpDialogs.ts" },
        ["17370"] = { line = 2, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17371"] = { line = 2, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17372"] = { line = 3, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17373"] = { line = 3, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17374"] = { line = 3, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17375"] = { line = 3, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17376"] = { line = 6, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17377"] = { line = 6, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17378"] = { line = 8, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17379"] = { line = 8, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17380"] = { line = 8, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17381"] = { line = 8, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17382"] = { line = 8, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17383"] = { line = 9, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17384"] = { line = 9, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17385"] = { line = 12, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17386"] = { line = 12, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17387"] = { line = 12, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17388"] = { line = 16, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17389"] = { line = 17, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17390"] = { line = 18, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17391"] = { line = 19, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17392"] = { line = 21, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17393"] = { line = 30, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17394"] = { line = 30, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17395"] = { line = 30, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17396"] = { line = 30, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17397"] = { line = 34, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17398"] = { line = 30, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17399"] = { line = 34, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17400"] = { line = 35, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17401"] = { line = 32, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17402"] = { line = 33, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17403"] = { line = 44, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17404"] = { line = 45, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17405"] = { line = 45, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17406"] = { line = 46, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17407"] = { line = 47, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17408"] = { line = 50, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17409"] = { line = 50, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17410"] = { line = 50, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17411"] = { line = 51, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17412"] = { line = 52, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17413"] = { line = 53, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17414"] = { line = 53, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17415"] = { line = 53, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17416"] = { line = 53, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17417"] = { line = 53, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17418"] = { line = 53, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17420"] = { line = 53, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17421"] = { line = 54, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17422"] = { line = 55, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17425"] = { line = 58, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17427"] = { line = 60, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17428"] = { line = 51, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17429"] = { line = 63, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17430"] = { line = 64, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17431"] = { line = 65, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17432"] = { line = 66, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17433"] = { line = 68, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17434"] = { line = 69, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17435"] = { line = 75, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17436"] = { line = 68, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17437"] = { line = 77, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17438"] = { line = 78, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17439"] = { line = 79, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17440"] = { line = 80, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17441"] = { line = 81, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17442"] = { line = 83, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17443"] = { line = 82, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17444"] = { line = 78, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17445"] = { line = 86, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17446"] = { line = 77, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17447"] = { line = 67, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17448"] = { line = 90, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17449"] = { line = 91, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17451"] = { line = 93, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17452"] = { line = 95, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17453"] = { line = 98, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17454"] = { line = 94, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17457"] = { line = 101, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17458"] = { line = 102, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17459"] = { line = 103, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17460"] = { line = 104, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17461"] = { line = 105, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17463"] = { line = 91, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17465"] = { line = 91, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17467"] = { line = 108, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17468"] = { line = 44, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17469"] = { line = 112, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17470"] = { line = 113, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17471"] = { line = 114, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17472"] = { line = 115, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17473"] = { line = 116, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17474"] = { line = 117, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17475"] = { line = 117, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17476"] = { line = 118, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17477"] = { line = 117, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17478"] = { line = 119, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17479"] = { line = 119, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17480"] = { line = 117, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17481"] = { line = 115, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17482"] = { line = 121, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17483"] = { line = 123, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17484"] = { line = 124, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17485"] = { line = 129, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17486"] = { line = 123, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17487"] = { line = 131, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17488"] = { line = 132, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17489"] = { line = 133, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17490"] = { line = 134, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17491"] = { line = 134, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17492"] = { line = 136, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17493"] = { line = 135, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17494"] = { line = 132, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17495"] = { line = 140, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17496"] = { line = 131, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17497"] = { line = 122, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17498"] = { line = 145, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17499"] = { line = 146, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17500"] = { line = 148, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17501"] = { line = 149, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17502"] = { line = 154, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17503"] = { line = 148, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17504"] = { line = 156, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17505"] = { line = 157, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17506"] = { line = 158, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17507"] = { line = 159, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17508"] = { line = 160, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17509"] = { line = 163, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17510"] = { line = 165, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17511"] = { line = 164, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17512"] = { line = 157, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17513"] = { line = 169, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17514"] = { line = 156, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17515"] = { line = 147, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17516"] = { line = 174, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17517"] = { line = 112, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17518"] = { line = 182, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17519"] = { line = 184, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17520"] = { line = 185, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17521"] = { line = 186, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17522"] = { line = 187, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17523"] = { line = 188, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17524"] = { line = 189, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17525"] = { line = 190, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17526"] = { line = 191, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17527"] = { line = 192, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17528"] = { line = 193, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17529"] = { line = 194, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17530"] = { line = 195, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17531"] = { line = 200, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17532"] = { line = 201, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17533"] = { line = 202, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17534"] = { line = 203, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17535"] = { line = 201, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17536"] = { line = 200, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17537"] = { line = 191, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17538"] = { line = 207, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17539"] = { line = 213, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17540"] = { line = 222, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17541"] = { line = 223, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17542"] = { line = 224, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17543"] = { line = 225, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17544"] = { line = 226, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17545"] = { line = 227, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17546"] = { line = 228, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17547"] = { line = 229, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17548"] = { line = 230, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17549"] = { line = 230, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17550"] = { line = 230, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17551"] = { line = 231, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17552"] = { line = 231, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17553"] = { line = 231, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17555"] = { line = 232, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17556"] = { line = 233, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17557"] = { line = 230, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17558"] = { line = 230, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17559"] = { line = 228, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17560"] = { line = 222, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17561"] = { line = 190, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17562"] = { line = 184, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17563"] = { line = 182, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17564"] = { line = 244, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17565"] = { line = 283, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17566"] = { line = 283, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17567"] = { line = 289, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17568"] = { line = 289, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17569"] = { line = 289, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17570"] = { line = 289, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17571"] = { line = 289, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17572"] = { line = 290, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17573"] = { line = 291, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17574"] = { line = 292, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17575"] = { line = 293, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17576"] = { line = 294, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17577"] = { line = 297, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17578"] = { line = 298, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17579"] = { line = 299, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17580"] = { line = 300, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17581"] = { line = 301, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17582"] = { line = 300, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17583"] = { line = 291, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17584"] = { line = 304, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17585"] = { line = 305, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17586"] = { line = 306, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17587"] = { line = 308, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17588"] = { line = 309, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17589"] = { line = 310, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17590"] = { line = 311, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17591"] = { line = 312, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17592"] = { line = 313, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17593"] = { line = 314, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17594"] = { line = 316, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17595"] = { line = 313, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17596"] = { line = 309, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17597"] = { line = 320, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17598"] = { line = 308, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17599"] = { line = 322, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17600"] = { line = 323, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17601"] = { line = 324, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17602"] = { line = 325, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17603"] = { line = 326, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17604"] = { line = 327, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17605"] = { line = 328, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17606"] = { line = 323, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17607"] = { line = 330, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17608"] = { line = 322, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17609"] = { line = 332, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17610"] = { line = 332, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17611"] = { line = 332, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17612"] = { line = 333, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17613"] = { line = 334, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17614"] = { line = 335, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17615"] = { line = 336, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17616"] = { line = 337, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17617"] = { line = 342, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17618"] = { line = 344, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17619"] = { line = 343, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17620"] = { line = 333, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17621"] = { line = 348, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17622"] = { line = 332, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17623"] = { line = 332, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17624"] = { line = 307, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17625"] = { line = 352, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17626"] = { line = 353, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17627"] = { line = 354, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17628"] = { line = 355, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17629"] = { line = 356, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17630"] = { line = 357, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17631"] = { line = 362, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17632"] = { line = 363, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17633"] = { line = 364, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17634"] = { line = 365, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17635"] = { line = 366, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17636"] = { line = 365, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17637"] = { line = 354, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17638"] = { line = 305, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17640"] = { line = 245, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17641"] = { line = 246, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17642"] = { line = 247, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17643"] = { line = 253, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17644"] = { line = 255, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17645"] = { line = 255, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17646"] = { line = 255, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17647"] = { line = 256, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17648"] = { line = 256, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17649"] = { line = 256, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17650"] = { line = 257, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17651"] = { line = 258, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17652"] = { line = 259, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17653"] = { line = 256, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17654"] = { line = 256, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17655"] = { line = 255, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17656"] = { line = 255, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17659"] = { line = 262, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17660"] = { line = 263, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17661"] = { line = 263, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17662"] = { line = 263, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17663"] = { line = 264, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17664"] = { line = 264, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17665"] = { line = 264, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17666"] = { line = 265, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17667"] = { line = 266, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17668"] = { line = 267, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17669"] = { line = 264, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17670"] = { line = 264, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17671"] = { line = 263, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17672"] = { line = 263, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17676"] = { line = 270, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17677"] = { line = 271, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17678"] = { line = 271, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17679"] = { line = 271, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17680"] = { line = 272, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17681"] = { line = 273, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17682"] = { line = 274, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17683"] = { line = 275, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17684"] = { line = 276, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17685"] = { line = 276, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17686"] = { line = 276, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17687"] = { line = 276, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17688"] = { line = 275, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17689"] = { line = 271, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17690"] = { line = 271, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17691"] = { line = 279, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17693"] = { line = 246, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17694"] = { line = 246, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17695"] = { line = 246, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17696"] = { line = 247, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17697"] = { line = 253, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17698"] = { line = 254, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17699"] = { line = 246, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17700"] = { line = 246, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17701"] = { line = 244, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17702"] = { line = 374, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17703"] = { line = 375, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17704"] = { line = 376, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17705"] = { line = 377, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17706"] = { line = 377, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17707"] = { line = 377, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17708"] = { line = 378, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17709"] = { line = 379, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17710"] = { line = 379, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17711"] = { line = 379, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17712"] = { line = 380, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17713"] = { line = 381, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17714"] = { line = 381, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17715"] = { line = 381, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17716"] = { line = 381, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17717"] = { line = 382, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17718"] = { line = 383, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17719"] = { line = 379, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17720"] = { line = 384, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17721"] = { line = 379, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17722"] = { line = 385, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17723"] = { line = 386, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17724"] = { line = 387, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17725"] = { line = 388, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17726"] = { line = 389, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17727"] = { line = 390, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17728"] = { line = 391, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17729"] = { line = 385, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17730"] = { line = 393, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17731"] = { line = 377, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17732"] = { line = 377, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17734"] = { line = 396, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17735"] = { line = 397, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17736"] = { line = 398, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17738"] = { line = 400, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17739"] = { line = 401, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17740"] = { line = 402, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17741"] = { line = 400, file = "CreateOrConfigureMidiEncodersDialogV3.ts" },
        ["17744"] = { line = 374, file = "CreateOrConfigureMidiEncodersDialogV3.ts" }, ["17752"] = { line = 3, file = "MainDialog.ts" },
        ["17753"] = { line = 3, file = "MainDialog.ts" }, ["17754"] = { line = 5, file = "MainDialog.ts" }, ["17755"] = { line = 5, file = "MainDialog.ts" },
        ["17756"] = { line = 7, file = "MainDialog.ts" }, ["17757"] = { line = 9, file = "MainDialog.ts" }, ["17758"] = { line = 10, file = "MainDialog.ts" },
        ["17759"] = { line = 11, file = "MainDialog.ts" }, ["17760"] = { line = 12, file = "MainDialog.ts" }, ["17761"] = { line = 13, file = "MainDialog.ts" },
        ["17762"] = { line = 13, file = "MainDialog.ts" }, ["17763"] = { line = 13, file = "MainDialog.ts" }, ["17764"] = { line = 13, file = "MainDialog.ts" },
        ["17765"] = { line = 13, file = "MainDialog.ts" }, ["17766"] = { line = 13, file = "MainDialog.ts" }, ["17768"] = { line = 16, file = "MainDialog.ts" },
        ["17769"] = { line = 17, file = "MainDialog.ts" }, ["17770"] = { line = 18, file = "MainDialog.ts" }, ["17771"] = { line = 19, file = "MainDialog.ts" },
        ["17772"] = { line = 20, file = "MainDialog.ts" }, ["17773"] = { line = 21, file = "MainDialog.ts" }, ["17774"] = { line = 22, file = "MainDialog.ts" },
        ["17775"] = { line = 20, file = "MainDialog.ts" }, ["17776"] = { line = 19, file = "MainDialog.ts" }, ["17777"] = { line = 17, file = "MainDialog.ts" },
        ["17778"] = { line = 16, file = "MainDialog.ts" }, ["17779"] = { line = 34, file = "MainDialog.ts" }, ["17780"] = { line = 34, file = "MainDialog.ts" },
        ["17781"] = { line = 34, file = "MainDialog.ts" }, ["17782"] = { line = 35, file = "MainDialog.ts" }, ["17783"] = { line = 36, file = "MainDialog.ts" },
        ["17784"] = { line = 37, file = "MainDialog.ts" }, ["17785"] = { line = 38, file = "MainDialog.ts" }, ["17786"] = { line = 39, file = "MainDialog.ts" },
        ["17787"] = { line = 40, file = "MainDialog.ts" }, ["17788"] = { line = 38, file = "MainDialog.ts" }, ["17789"] = { line = 37, file = "MainDialog.ts" },
        ["17790"] = { line = 34, file = "MainDialog.ts" }, ["17791"] = { line = 34, file = "MainDialog.ts" }, ["17792"] = { line = 7, file = "MainDialog.ts" },
        ["17800"] = { line = 1, file = "main.ts" }, ["17801"] = { line = 1, file = "main.ts" }, ["17802"] = { line = 2, file = "main.ts" },
        ["17803"] = { line = 2, file = "main.ts" }, ["17804"] = { line = 3, file = "main.ts" }, ["17805"] = { line = 3, file = "main.ts" },
        ["17806"] = { line = 4, file = "main.ts" }, ["17807"] = { line = 4, file = "main.ts" }, ["17808"] = { line = 5, file = "main.ts" },
        ["17809"] = { line = 5, file = "main.ts" }, ["17810"] = { line = 6, file = "main.ts" }, ["17811"] = { line = 6, file = "main.ts" },
        ["17812"] = { line = 7, file = "main.ts" }, ["17813"] = { line = 7, file = "main.ts" }, ["17814"] = { line = 8, file = "main.ts" },
        ["17815"] = { line = 8, file = "main.ts" }, ["17816"] = { line = 10, file = "main.ts" }, ["17817"] = { line = 12, file = "main.ts" },
        ["17818"] = { line = 14, file = "main.ts" }, ["17819"] = { line = 15, file = "main.ts" }, ["17820"] = { line = 16, file = "main.ts" },
        ["17821"] = { line = 16, file = "main.ts" }, ["17822"] = { line = 17, file = "main.ts" }, ["17823"] = { line = 18, file = "main.ts" },
        ["17824"] = { line = 19, file = "main.ts" }, ["17825"] = { line = 20, file = "main.ts" }, ["17826"] = { line = 19, file = "main.ts" },
        ["17827"] = { line = 16, file = "main.ts" }, ["17828"] = { line = 23, file = "main.ts" }, ["17829"] = { line = 14, file = "main.ts" },
        ["17830"] = { line = 32, file = "main.ts" }, ["17836"] = { line = 1, file = "ConfigureHelpDialog.ts" }, ["17837"] = { line = 1, file = "ConfigureHelpDialog.ts" },
        ["17838"] = { line = 3, file = "ConfigureHelpDialog.ts" }, ["17839"] = { line = 4, file = "ConfigureHelpDialog.ts" },
        ["17840"] = { line = 3, file = "ConfigureHelpDialog.ts" } });
return require("plugins.MidiEncoders.src.main", ...)
